# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/test.rst:2
msgid ":mod:`test` --- Regression tests package for Python"
msgstr ""

#: ../../../library/test.rst:9
msgid ""
"The :mod:`test` package is meant for internal use by Python only. It is "
"documented for the benefit of the core developers of Python. Any use of this "
"package outside of Python's standard library is discouraged as code "
"mentioned here can change or be removed without notice between releases of "
"Python."
msgstr ""

#: ../../../library/test.rst:16
msgid ""
"The :mod:`test` package contains all regression tests for Python as well as "
"the modules :mod:`test.support` and :mod:`test.regrtest`. :mod:`test."
"support` is used to enhance your tests while :mod:`test.regrtest` drives the "
"testing suite."
msgstr ""

#: ../../../library/test.rst:21
msgid ""
"Each module in the :mod:`test` package whose name starts with ``test_`` is a "
"testing suite for a specific module or feature. All new tests should be "
"written using the :mod:`unittest` or :mod:`doctest` module.  Some older "
"tests are written using a \"traditional\" testing style that compares output "
"printed to ``sys.stdout``; this style of test is considered deprecated."
msgstr ""

#: ../../../library/test.rst:31
msgid "Module :mod:`unittest`"
msgstr ""

#: ../../../library/test.rst:31
msgid "Writing PyUnit regression tests."
msgstr ""

#: ../../../library/test.rst:33
msgid "Module :mod:`doctest`"
msgstr ""

#: ../../../library/test.rst:34
msgid "Tests embedded in documentation strings."
msgstr ""

#: ../../../library/test.rst:40
msgid "Writing Unit Tests for the :mod:`test` package"
msgstr ""

#: ../../../library/test.rst:42
msgid ""
"It is preferred that tests that use the :mod:`unittest` module follow a few "
"guidelines. One is to name the test module by starting it with ``test_`` and "
"end it with the name of the module being tested. The test methods in the "
"test module should start with ``test_`` and end with a description of what "
"the method is testing. This is needed so that the methods are recognized by "
"the test driver as test methods. Also, no documentation string for the "
"method should be included. A comment (such as ``# Tests function returns "
"only True or False``) should be used to provide documentation for test "
"methods. This is done because documentation strings get printed out if they "
"exist and thus what test is being run is not stated."
msgstr ""

#: ../../../library/test.rst:53
msgid "A basic boilerplate is often used::"
msgstr ""

#: ../../../library/test.rst:55
msgid ""
"import unittest\n"
"from test import support\n"
"\n"
"class MyTestCase1(unittest.TestCase):\n"
"\n"
"    # Only use setUp() and tearDown() if necessary\n"
"\n"
"    def setUp(self):\n"
"        ... code to execute in preparation for tests ...\n"
"\n"
"    def tearDown(self):\n"
"        ... code to execute to clean up after tests ...\n"
"\n"
"    def test_feature_one(self):\n"
"        # Test feature one.\n"
"        ... testing code ...\n"
"\n"
"    def test_feature_two(self):\n"
"        # Test feature two.\n"
"        ... testing code ...\n"
"\n"
"    ... more test methods ...\n"
"\n"
"class MyTestCase2(unittest.TestCase):\n"
"    ... same structure as MyTestCase1 ...\n"
"\n"
"... more test classes ...\n"
"\n"
"def test_main():\n"
"    support.run_unittest(MyTestCase1,\n"
"                              MyTestCase2,\n"
"                              ... list other tests ...\n"
"                             )\n"
"\n"
"if __name__ == '__main__':\n"
"    test_main()"
msgstr ""

#: ../../../library/test.rst:92
msgid ""
"This boilerplate code allows the testing suite to be run by :mod:`test."
"regrtest` as well as on its own as a script."
msgstr ""

#: ../../../library/test.rst:95
msgid ""
"The goal for regression testing is to try to break code. This leads to a few "
"guidelines to be followed:"
msgstr ""

#: ../../../library/test.rst:98
msgid ""
"The testing suite should exercise all classes, functions, and constants. "
"This includes not just the external API that is to be presented to the "
"outside world but also \"private\" code."
msgstr ""

#: ../../../library/test.rst:102
msgid ""
"Whitebox testing (examining the code being tested when the tests are being "
"written) is preferred. Blackbox testing (testing only the published user "
"interface) is not complete enough to make sure all boundary and edge cases "
"are tested."
msgstr ""

#: ../../../library/test.rst:107
msgid ""
"Make sure all possible values are tested including invalid ones. This makes "
"sure that not only all valid values are acceptable but also that improper "
"values are handled correctly."
msgstr ""

#: ../../../library/test.rst:111
msgid ""
"Exhaust as many code paths as possible. Test where branching occurs and thus "
"tailor input to make sure as many different paths through the code are taken."
msgstr ""

#: ../../../library/test.rst:114
msgid ""
"Add an explicit test for any bugs discovered for the tested code. This will "
"make sure that the error does not crop up again if the code is changed in "
"the future."
msgstr ""

#: ../../../library/test.rst:118
msgid ""
"Make sure to clean up after your tests (such as close and remove all "
"temporary files)."
msgstr ""

#: ../../../library/test.rst:121
msgid ""
"If a test is dependent on a specific condition of the operating system then "
"verify the condition already exists before attempting the test."
msgstr ""

#: ../../../library/test.rst:124
msgid ""
"Import as few modules as possible and do it as soon as possible. This "
"minimizes external dependencies of tests and also minimizes possible "
"anomalous behavior from side-effects of importing a module."
msgstr ""

#: ../../../library/test.rst:128
msgid ""
"Try to maximize code reuse. On occasion, tests will vary by something as "
"small as what type of input is used. Minimize code duplication by "
"subclassing a basic test class with a class that specifies the input::"
msgstr ""

#: ../../../library/test.rst:132
msgid ""
"class TestFuncAcceptsSequences(unittest.TestCase):\n"
"\n"
"    func = mySuperWhammyFunction\n"
"\n"
"    def test_func(self):\n"
"        self.func(self.arg)\n"
"\n"
"class AcceptLists(TestFuncAcceptsSequences):\n"
"    arg = [1, 2, 3]\n"
"\n"
"class AcceptStrings(TestFuncAcceptsSequences):\n"
"    arg = 'abc'\n"
"\n"
"class AcceptTuples(TestFuncAcceptsSequences):\n"
"    arg = (1, 2, 3)"
msgstr ""

#: ../../../library/test.rst:151
msgid "Test Driven Development"
msgstr ""

#: ../../../library/test.rst:152
msgid "A book by Kent Beck on writing tests before code."
msgstr ""

#: ../../../library/test.rst:158
msgid "Running tests using the command-line interface"
msgstr ""

#: ../../../library/test.rst:160
msgid ""
"The :mod:`test` package can be run as a script to drive Python's regression "
"test suite, thanks to the :option:`-m` option: :program:`python -m test`. "
"Under the hood, it uses :mod:`test.regrtest`; the call :program:`python -m "
"test.regrtest` used in previous Python versions still works). Running the "
"script by itself automatically starts running all regression tests in the :"
"mod:`test` package. It does this by finding all modules in the package whose "
"name starts with ``test_``, importing them, and executing the function :func:"
"`test_main` if present. The names of tests to execute may also be passed to "
"the script. Specifying a single regression test (:program:`python -m test "
"test_spam`) will minimize output and only print whether the test passed or "
"failed and thus minimize output."
msgstr ""

#: ../../../library/test.rst:172
msgid ""
"Running :mod:`test` directly allows what resources are available for tests "
"to use to be set. You do this by using the ``-u`` command-line option. "
"Specifying ``all`` as the value for the ``-u`` option enables all possible "
"resources: :program:`python -m test -uall`. If all but one resource is "
"desired (a more common case), a comma-separated list of resources that are "
"not desired may be listed after ``all``. The command :program:`python -m "
"test -uall,-audio,-largefile` will run :mod:`test` with all resources except "
"the ``audio`` and ``largefile`` resources. For a list of all resources and "
"more command-line options, run :program:`python -m test -h`."
msgstr ""

#: ../../../library/test.rst:183
msgid ""
"Some other ways to execute the regression tests depend on what platform the "
"tests are being executed on. On Unix, you can run :program:`make test` at "
"the top-level directory where Python was built. On Windows, executing :"
"program:`rt.bat` from your :file:`PCBuild` directory will run all regression "
"tests."
msgstr ""

#: ../../../library/test.rst:191
msgid ":mod:`test.support` --- Utilities for the Python test suite"
msgstr ""

#: ../../../library/test.rst:197
msgid ""
"The :mod:`test.support` module provides support for Python's regression test "
"suite."
msgstr ""

#: ../../../library/test.rst:201
msgid ""
":mod:`test.support` is not a public module.  It is documented here to help "
"Python developers write tests.  The API of this module is subject to change "
"without backwards compatibility concerns between releases."
msgstr ""

#: ../../../library/test.rst:206
msgid "This module defines the following exceptions:"
msgstr ""

#: ../../../library/test.rst:210
msgid ""
"Exception to be raised when a test fails. This is deprecated in favor of :"
"mod:`unittest`\\ -based tests and :class:`unittest.TestCase`'s assertion "
"methods."
msgstr ""

#: ../../../library/test.rst:217
msgid ""
"Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a "
"network connection) is not available. Raised by the :func:`requires` "
"function."
msgstr ""

#: ../../../library/test.rst:222
msgid "The :mod:`test.support` module defines the following constants:"
msgstr ""

#: ../../../library/test.rst:226
msgid ""
":const:`True` when verbose output is enabled. Should be checked when more "
"detailed information is desired about a running test. *verbose* is set by :"
"mod:`test.regrtest`."
msgstr ""

#: ../../../library/test.rst:233
msgid ":const:`True` if the running interpreter is Jython."
msgstr ""

#: ../../../library/test.rst:238
msgid ""
"Set to a name that is safe to use as the name of a temporary file.  Any "
"temporary file that is created should be closed and unlinked (removed)."
msgstr ""

#: ../../../library/test.rst:242
msgid "The :mod:`test.support` module defines the following functions:"
msgstr ""

#: ../../../library/test.rst:246
msgid ""
"Remove the module named *module_name* from ``sys.modules`` and delete any "
"byte-compiled files of the module."
msgstr ""

#: ../../../library/test.rst:252
msgid ""
"Return :const:`True` if *resource* is enabled and available. The list of "
"available resources is only set when :mod:`test.regrtest` is executing the "
"tests."
msgstr ""

#: ../../../library/test.rst:259
msgid ""
"Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the "
"argument to :exc:`ResourceDenied` if it is raised. Always returns :const:"
"`True` if called by a function whose ``__name__`` is ``'__main__'``. Used "
"when tests are executed by :mod:`test.regrtest`."
msgstr ""

#: ../../../library/test.rst:267
msgid ""
"Return the path to the file named *filename*. If no match is found "
"*filename* is returned. This does not equal a failure since it could be the "
"path to the file."
msgstr ""

#: ../../../library/test.rst:274
msgid ""
"Execute :class:`unittest.TestCase` subclasses passed to the function. The "
"function scans the classes for methods starting with the prefix ``test_`` "
"and executes the tests individually."
msgstr ""

#: ../../../library/test.rst:278
msgid ""
"It is also legal to pass strings as parameters; these should be keys in "
"``sys.modules``. Each associated module will be scanned by ``unittest."
"TestLoader.loadTestsFromModule()``. This is usually seen in the following :"
"func:`test_main` function::"
msgstr ""

#: ../../../library/test.rst:283
msgid ""
"def test_main():\n"
"    support.run_unittest(__name__)"
msgstr ""

#: ../../../library/test.rst:286
msgid "This will run all tests defined in the named module."
msgstr ""

#: ../../../library/test.rst:291
msgid ""
"A convenience wrapper for :func:`warnings.catch_warnings()` that makes it "
"easier to test that a warning was correctly raised.  It is approximately "
"equivalent to calling ``warnings.catch_warnings(record=True)`` with :meth:"
"`warnings.simplefilter` set to ``always`` and with the option to "
"automatically validate the results that are recorded."
msgstr ""

#: ../../../library/test.rst:297
msgid ""
"``check_warnings`` accepts 2-tuples of the form ``(\"message regexp\", "
"WarningCategory)`` as positional arguments. If one or more *filters* are "
"provided, or if the optional keyword argument *quiet* is :const:`False`, it "
"checks to make sure the warnings are as expected:  each specified filter "
"must match at least one of the warnings raised by the enclosed code or the "
"test fails, and if any warnings are raised that do not match any of the "
"specified filters the test fails.  To disable the first of these checks, set "
"*quiet* to :const:`True`."
msgstr ""

#: ../../../library/test.rst:306
msgid "If no arguments are specified, it defaults to::"
msgstr ""

#: ../../../library/test.rst:308
msgid "check_warnings((\"\", Warning), quiet=True)"
msgstr ""

#: ../../../library/test.rst:310
msgid "In this case all warnings are caught and no errors are raised."
msgstr ""

#: ../../../library/test.rst:312
msgid ""
"On entry to the context manager, a :class:`WarningRecorder` instance is "
"returned. The underlying warnings list from :func:`~warnings.catch_warnings` "
"is available via the recorder object's :attr:`warnings` attribute.  As a "
"convenience, the attributes of the object representing the most recent "
"warning can also be accessed directly through the recorder object (see "
"example below).  If no warning has been raised, then any of the attributes "
"that would otherwise be expected on an object representing a warning will "
"return :const:`None`."
msgstr ""

#: ../../../library/test.rst:321
msgid ""
"The recorder object also has a :meth:`reset` method, which clears the "
"warnings list."
msgstr ""

#: ../../../library/test.rst:324
msgid "The context manager is designed to be used like this::"
msgstr ""

#: ../../../library/test.rst:326
msgid ""
"with check_warnings((\"assertion is always true\", SyntaxWarning),\n"
"                    (\"\", UserWarning)):\n"
"    exec('assert(False, \"Hey!\")')\n"
"    warnings.warn(UserWarning(\"Hide me!\"))"
msgstr ""

#: ../../../library/test.rst:331
msgid ""
"In this case if either warning was not raised, or some other warning was "
"raised, :func:`check_warnings` would raise an error."
msgstr ""

#: ../../../library/test.rst:334
msgid ""
"When a test needs to look more deeply into the warnings, rather than just "
"checking whether or not they occurred, code like this can be used::"
msgstr ""

#: ../../../library/test.rst:337
msgid ""
"with check_warnings(quiet=True) as w:\n"
"    warnings.warn(\"foo\")\n"
"    assert str(w.args[0]) == \"foo\"\n"
"    warnings.warn(\"bar\")\n"
"    assert str(w.args[0]) == \"bar\"\n"
"    assert str(w.warnings[0].args[0]) == \"foo\"\n"
"    assert str(w.warnings[1].args[0]) == \"bar\"\n"
"    w.reset()\n"
"    assert len(w.warnings) == 0"
msgstr ""

#: ../../../library/test.rst:348
msgid ""
"Here all warnings will be caught, and the test code tests the captured "
"warnings directly."
msgstr ""

#: ../../../library/test.rst:351
msgid "New optional arguments *filters* and *quiet*."
msgstr ""

#: ../../../library/test.rst:357
msgid ""
"This is a context manager that runs the :keyword:`with` statement body using "
"a :class:`StringIO.StringIO` object as sys.stdout.  That object can be "
"retrieved using the ``as`` clause of the :keyword:`with` statement."
msgstr ""

#: ../../../library/test.rst:361 ../../../library/test.rst:411
msgid "Example use::"
msgstr ""

#: ../../../library/test.rst:363
msgid ""
"with captured_stdout() as s:\n"
"    print(\"hello\")\n"
"assert s.getvalue() == \"hello\\n\""
msgstr ""

#: ../../../library/test.rst:370
msgid ""
"A context manager that disables Windows Error Reporting dialogs using "
"`SetErrorMode <http://msdn.microsoft.com/en-us/library/windows/desktop/"
"ms680621%28v=vs.85%29.aspx>`_. On other platforms it's a no-op."
msgstr ""

#: ../../../library/test.rst:377
msgid ""
"This function imports and returns the named module. Unlike a normal import, "
"this function raises :exc:`unittest.SkipTest` if the module cannot be "
"imported."
msgstr ""

#: ../../../library/test.rst:381 ../../../library/test.rst:405
msgid ""
"Module and package deprecation messages are suppressed during this import if "
"*deprecated* is :const:`True`."
msgstr ""

#: ../../../library/test.rst:389
msgid ""
"This function imports and returns a fresh copy of the named Python module by "
"removing the named module from ``sys.modules`` before doing the import. Note "
"that unlike :func:`reload`, the original module is not affected by this "
"operation."
msgstr ""

#: ../../../library/test.rst:394
msgid ""
"*fresh* is an iterable of additional module names that are also removed from "
"the ``sys.modules`` cache before doing the import."
msgstr ""

#: ../../../library/test.rst:397
msgid ""
"*blocked* is an iterable of module names that are replaced with :const:`0` "
"in the module cache during the import to ensure that attempts to import them "
"raise :exc:`ImportError`."
msgstr ""

#: ../../../library/test.rst:401
msgid ""
"The named module and any modules named in the *fresh* and *blocked* "
"parameters are saved before starting the import and then reinserted into "
"``sys.modules`` when the fresh import is complete."
msgstr ""

#: ../../../library/test.rst:408
msgid ""
"This function will raise :exc:`unittest.SkipTest` is the named module cannot "
"be imported."
msgstr ""

#: ../../../library/test.rst:413
msgid ""
"# Get copies of the warnings module for testing without\n"
"# affecting the version being used by the rest of the test suite\n"
"# One copy uses the C implementation, the other is forced to use\n"
"# the pure Python fallback implementation\n"
"py_warnings = import_fresh_module('warnings', blocked=['_warnings'])\n"
"c_warnings = import_fresh_module('warnings', fresh=['_warnings'])"
msgstr ""

#: ../../../library/test.rst:423
msgid "The :mod:`test.support` module defines the following classes:"
msgstr ""

#: ../../../library/test.rst:427
msgid ""
"Instances are a context manager that raises :exc:`ResourceDenied` if the "
"specified exception type is raised.  Any keyword arguments are treated as "
"attribute/value pairs to be compared against any exception raised within "
"the :keyword:`with` statement.  Only if all pairs match properly against "
"attributes on the exception is :exc:`ResourceDenied` raised."
msgstr ""

#: ../../../library/test.rst:436
msgid ""
"Class used to temporarily set or unset environment variables.  Instances can "
"be used as a context manager and have a complete dictionary interface for "
"querying/modifying the underlying ``os.environ``. After exit from the "
"context manager all changes to environment variables done through this "
"instance will be rolled back."
msgstr ""

#: ../../../library/test.rst:442
msgid "Added dictionary interface."
msgstr ""

#: ../../../library/test.rst:447
msgid ""
"Temporarily set the environment variable ``envvar`` to the value of "
"``value``."
msgstr ""

#: ../../../library/test.rst:453
msgid "Temporarily unset the environment variable ``envvar``."
msgstr ""

#: ../../../library/test.rst:458
msgid ""
"Class used to record warnings for unit tests. See documentation of :func:"
"`check_warnings` above for more details."
msgstr ""
