# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/http.cookies.rst:2
msgid ":mod:`http.cookies` --- HTTP state management"
msgstr ""

#: ../../../library/http.cookies.rst:9
msgid "**Source code:** :source:`Lib/http/cookies.py`"
msgstr ""

#: ../../../library/http.cookies.rst:13
msgid ""
"The :mod:`http.cookies` module defines classes for abstracting the concept "
"of cookies, an HTTP state management mechanism. It supports both simple "
"string-only cookies, and provides an abstraction for having any serializable "
"data-type as cookie value."
msgstr ""

#: ../../../library/http.cookies.rst:18
msgid ""
"The module formerly strictly applied the parsing rules described in the :rfc:"
"`2109` and :rfc:`2068` specifications.  It has since been discovered that "
"MSIE 3.0x doesn't follow the character rules outlined in those specs and "
"also many current day browsers and servers have relaxed parsing rules when "
"comes to Cookie handling.  As a result, the parsing rules used are a bit "
"less strict."
msgstr ""

#: ../../../library/http.cookies.rst:24
msgid ""
"The character set, :data:`string.ascii_letters`, :data:`string.digits` and "
"``!#$%&'*+-.^_`|~`` denote the set of valid characters allowed by this "
"module in Cookie name (as :attr:`~Morsel.key`)."
msgstr ""

#: ../../../library/http.cookies.rst:31
msgid ""
"On encountering an invalid cookie, :exc:`CookieError` is raised, so if your "
"cookie data comes from a browser you should always prepare for invalid data "
"and catch :exc:`CookieError` on parsing."
msgstr ""

#: ../../../library/http.cookies.rst:38
msgid ""
"Exception failing because of :rfc:`2109` invalidity: incorrect attributes, "
"incorrect :mailheader:`Set-Cookie` header, etc."
msgstr ""

#: ../../../library/http.cookies.rst:44
msgid ""
"This class is a dictionary-like object whose keys are strings and whose "
"values are :class:`Morsel` instances. Note that upon setting a key to a "
"value, the value is first converted to a :class:`Morsel` containing the key "
"and the value."
msgstr ""

#: ../../../library/http.cookies.rst:48
msgid "If *input* is given, it is passed to the :meth:`load` method."
msgstr ""

#: ../../../library/http.cookies.rst:53
msgid ""
"This class derives from :class:`BaseCookie` and overrides :meth:"
"`value_decode` and :meth:`value_encode` to be the identity and :func:`str` "
"respectively."
msgstr ""

#: ../../../library/http.cookies.rst:61
msgid "Module :mod:`http.cookiejar`"
msgstr ""

#: ../../../library/http.cookies.rst:60
msgid ""
"HTTP cookie handling for web *clients*.  The :mod:`http.cookiejar` and :mod:"
"`http.cookies` modules do not depend on each other."
msgstr ""

#: ../../../library/http.cookies.rst:63
msgid ":rfc:`2109` - HTTP State Management Mechanism"
msgstr ""

#: ../../../library/http.cookies.rst:64
msgid "This is the state management specification implemented by this module."
msgstr ""

#: ../../../library/http.cookies.rst:70
msgid "Cookie Objects"
msgstr ""

#: ../../../library/http.cookies.rst:75
msgid ""
"Return a decoded value from a string representation. Return value can be any "
"type. This method does nothing in :class:`BaseCookie` --- it exists so it "
"can be overridden."
msgstr ""

#: ../../../library/http.cookies.rst:82
msgid ""
"Return an encoded value. *val* can be any type, but return value must be a "
"string. This method does nothing in :class:`BaseCookie` --- it exists so it "
"can be overridden"
msgstr ""

#: ../../../library/http.cookies.rst:86
msgid ""
"In general, it should be the case that :meth:`value_encode` and :meth:"
"`value_decode` are inverses on the range of *value_decode*."
msgstr ""

#: ../../../library/http.cookies.rst:92
msgid ""
"Return a string representation suitable to be sent as HTTP headers. *attrs* "
"and *header* are sent to each :class:`Morsel`'s :meth:`output` method. *sep* "
"is used to join the headers together, and is by default the combination "
"``'\\r\\n'`` (CRLF)."
msgstr ""

#: ../../../library/http.cookies.rst:100
msgid ""
"Return an embeddable JavaScript snippet, which, if run on a browser which "
"supports JavaScript, will act the same as if the HTTP headers was sent."
msgstr ""

#: ../../../library/http.cookies.rst:103 ../../../library/http.cookies.rst:182
#: ../../../library/http.cookies.rst:190
msgid "The meaning for *attrs* is the same as in :meth:`output`."
msgstr ""

#: ../../../library/http.cookies.rst:108
msgid ""
"If *rawdata* is a string, parse it as an ``HTTP_COOKIE`` and add the values "
"found there as :class:`Morsel`\\ s. If it is a dictionary, it is equivalent "
"to::"
msgstr ""

#: ../../../library/http.cookies.rst:111
msgid ""
"for k, v in rawdata.items():\n"
"    cookie[k] = v"
msgstr ""

#: ../../../library/http.cookies.rst:118
msgid "Morsel Objects"
msgstr ""

#: ../../../library/http.cookies.rst:123
msgid "Abstract a key/value pair, which has some :rfc:`2109` attributes."
msgstr ""

#: ../../../library/http.cookies.rst:125
msgid ""
"Morsels are dictionary-like objects, whose set of keys is constant --- the "
"valid :rfc:`2109` attributes, which are"
msgstr ""

#: ../../../library/http.cookies.rst:128
msgid "``expires``"
msgstr ""

#: ../../../library/http.cookies.rst:129
msgid "``path``"
msgstr ""

#: ../../../library/http.cookies.rst:130
msgid "``comment``"
msgstr ""

#: ../../../library/http.cookies.rst:131
msgid "``domain``"
msgstr ""

#: ../../../library/http.cookies.rst:132
msgid "``max-age``"
msgstr ""

#: ../../../library/http.cookies.rst:133
msgid "``secure``"
msgstr ""

#: ../../../library/http.cookies.rst:134
msgid "``version``"
msgstr ""

#: ../../../library/http.cookies.rst:135
msgid "``httponly``"
msgstr ""

#: ../../../library/http.cookies.rst:137
msgid ""
"The attribute :attr:`httponly` specifies that the cookie is only transferred "
"in HTTP requests, and is not accessible through JavaScript. This is intended "
"to mitigate some forms of cross-site scripting."
msgstr ""

#: ../../../library/http.cookies.rst:141
msgid "The keys are case-insensitive."
msgstr ""

#: ../../../library/http.cookies.rst:146
msgid "The value of the cookie."
msgstr ""

#: ../../../library/http.cookies.rst:151
msgid "The encoded value of the cookie --- this is what should be sent."
msgstr ""

#: ../../../library/http.cookies.rst:156
msgid "The name of the cookie."
msgstr ""

#: ../../../library/http.cookies.rst:161
msgid "Set the *key*, *value* and *coded_value* attributes."
msgstr ""

#: ../../../library/http.cookies.rst:166
msgid "Whether *K* is a member of the set of keys of a :class:`Morsel`."
msgstr ""

#: ../../../library/http.cookies.rst:171
msgid ""
"Return a string representation of the Morsel, suitable to be sent as an HTTP "
"header. By default, all the attributes are included, unless *attrs* is "
"given, in which case it should be a list of attributes to use. *header* is "
"by default ``\"Set-Cookie:\"``."
msgstr ""

#: ../../../library/http.cookies.rst:179
msgid ""
"Return an embeddable JavaScript snippet, which, if run on a browser which "
"supports JavaScript, will act the same as if the HTTP header was sent."
msgstr ""

#: ../../../library/http.cookies.rst:187
msgid ""
"Return a string representing the Morsel, without any surrounding HTTP or "
"JavaScript."
msgstr ""

#: ../../../library/http.cookies.rst:196
msgid "Example"
msgstr ""

#: ../../../library/http.cookies.rst:198
msgid ""
"The following example demonstrates how to use the :mod:`http.cookies` module."
msgstr ""

#: ../../../library/http.cookies.rst:200
msgid ""
">>> from http import cookies\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"fig\"] = \"newton\"\n"
">>> C[\"sugar\"] = \"wafer\"\n"
">>> print(C) # generate HTTP headers\n"
"Set-Cookie: fig=newton\n"
"Set-Cookie: sugar=wafer\n"
">>> print(C.output()) # same thing\n"
"Set-Cookie: fig=newton\n"
"Set-Cookie: sugar=wafer\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"rocky\"] = \"road\"\n"
">>> C[\"rocky\"][\"path\"] = \"/cookie\"\n"
">>> print(C.output(header=\"Cookie:\"))\n"
"Cookie: rocky=road; Path=/cookie\n"
">>> print(C.output(attrs=[], header=\"Cookie:\"))\n"
"Cookie: rocky=road\n"
">>> C = cookies.SimpleCookie()\n"
">>> C.load(\"chips=ahoy; vienna=finger\") # load from a string (HTTP "
"header)\n"
">>> print(C)\n"
"Set-Cookie: chips=ahoy\n"
"Set-Cookie: vienna=finger\n"
">>> C = cookies.SimpleCookie()\n"
">>> C.load('keebler=\"E=everybody; L=\\\\\"Loves\\\\\"; fudge=\\\\012;\";')\n"
">>> print(C)\n"
"Set-Cookie: keebler=\"E=everybody; L=\\\"Loves\\\"; fudge=\\012;\"\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"oreo\"] = \"doublestuff\"\n"
">>> C[\"oreo\"][\"path\"] = \"/\"\n"
">>> print(C)\n"
"Set-Cookie: oreo=doublestuff; Path=/\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"twix\"] = \"none for you\"\n"
">>> C[\"twix\"].value\n"
"'none for you'\n"
">>> C = cookies.SimpleCookie()\n"
">>> C[\"number\"] = 7 # equivalent to C[\"number\"] = str(7)\n"
">>> C[\"string\"] = \"seven\"\n"
">>> C[\"number\"].value\n"
"'7'\n"
">>> C[\"string\"].value\n"
"'seven'\n"
">>> print(C)\n"
"Set-Cookie: number=7\n"
"Set-Cookie: string=seven"
msgstr ""
