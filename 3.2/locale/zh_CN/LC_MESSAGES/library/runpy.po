# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ""

#: ../../../library/runpy.rst:8
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr ""

#: ../../../library/runpy.rst:12
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""

#: ../../../library/runpy.rst:17
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""

#: ../../../library/runpy.rst:21
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""

#: ../../../library/runpy.rst:26
msgid "The :mod:`runpy` module provides two functions:"
msgstr ""

#: ../../../library/runpy.rst:31
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""

#: ../../../library/runpy.rst:36
msgid ""
"If the supplied module name refers to a package rather than a normal module, "
"then that package is imported and the ``__main__`` submodule within that "
"package is then executed and the resulting module globals dictionary "
"returned."
msgstr ""

#: ../../../library/runpy.rst:41
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""

#: ../../../library/runpy.rst:47
msgid ""
"The special global variables ``__name__``, ``__file__``, ``__cached__``, "
"``__loader__`` and ``__package__`` are set in the globals dictionary before "
"the module code is executed (Note that this is a minimal set of variables - "
"other variables may be set implicitly as an interpreter implementation "
"detail)."
msgstr ""

#: ../../../library/runpy.rst:53
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None`, to ``mod_name + '.__main__'`` if the named module is a package and "
"to the *mod_name* argument otherwise."
msgstr ""

#: ../../../library/runpy.rst:57
msgid ""
"``__file__`` is set to the name provided by the module loader. If the loader "
"does not make filename information available, this variable is set to :const:"
"`None`."
msgstr ""

#: ../../../library/runpy.rst:61
msgid "``__cached__`` will be set to ``None``."
msgstr ""

#: ../../../library/runpy.rst:63
msgid ""
"``__loader__`` is set to the :pep:`302` module loader used to retrieve the "
"code for the module (This loader may be a wrapper around the standard import "
"mechanism)."
msgstr ""

#: ../../../library/runpy.rst:67
msgid ""
"``__package__`` is set to *mod_name* if the named module is a package and to "
"``mod_name.rpartition('.')[0]`` otherwise."
msgstr ""

#: ../../../library/runpy.rst:70
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""

#: ../../../library/runpy.rst:76
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the :mod:`sys` module be left alone when "
"invoking this function from threaded code."
msgstr ""

#: ../../../library/runpy.rst:82
msgid ""
"Added ability to execute packages by looking for a ``__main__`` submodule."
msgstr ""

#: ../../../library/runpy.rst:85
msgid "Added ``__cached__`` global variable (see :PEP:`3147`)."
msgstr ""

#: ../../../library/runpy.rst:91
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid sys.path entry containing a ``__main__`` "
"module (e.g. a zipfile containing a top-level ``__main__.py`` file)."
msgstr ""

#: ../../../library/runpy.rst:97
msgid ""
"For a simple script, the specified code is simply executed in a fresh module "
"namespace. For a valid sys.path entry (typically a zipfile or directory), "
"the entry is first added to the beginning of ``sys.path``. The function then "
"looks for and executes a :mod:`__main__` module using the updated path. Note "
"that there is no special protection against invoking an existing :mod:"
"`__main__` entry located elsewhere on ``sys.path`` if there is no such "
"module at the specified location."
msgstr ""

#: ../../../library/runpy.rst:105
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""

#: ../../../library/runpy.rst:111
msgid ""
"The special global variables ``__name__``, ``__file__``, ``__loader__`` and "
"``__package__`` are set in the globals dictionary before the module code is "
"executed (Note that this is a minimal set of variables - other variables may "
"be set implicitly as an interpreter implementation detail)."
msgstr ""

#: ../../../library/runpy.rst:116
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not :const:"
"`None` and to ``'<run_path>'`` otherwise."
msgstr ""

#: ../../../library/runpy.rst:119
msgid ""
"``__file__`` is set to the name provided by the module loader. If the loader "
"does not make filename information available, this variable is set to :const:"
"`None`. For a simple script, this will be set to ``file_path``."
msgstr ""

#: ../../../library/runpy.rst:123
msgid ""
"``__loader__`` is set to the :pep:`302` module loader used to retrieve the "
"code for the module (This loader may be a wrapper around the standard import "
"mechanism). For a simple script, this will be set to :const:`None`."
msgstr ""

#: ../../../library/runpy.rst:127
msgid "``__package__`` is set to ``__name__.rpartition('.')[0]``."
msgstr ""

#: ../../../library/runpy.rst:129
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, "
"``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated "
"with the value of ``file_path`` and ``sys.modules[__name__]`` is updated "
"with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""

#: ../../../library/runpy.rst:136
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are "
"not optional in this function as these adjustments are essential to allowing "
"the execution of sys.path entries. As the thread-safety limitations still "
"apply, use of this function in threaded code should be either serialised "
"with the import lock or delegated to a separate process."
msgstr ""

#: ../../../library/runpy.rst:147
msgid ":pep:`338` - Executing modules as scripts"
msgstr ""

#: ../../../library/runpy.rst:147 ../../../library/runpy.rst:150
msgid "PEP written and implemented by Nick Coghlan."
msgstr ""

#: ../../../library/runpy.rst:150
msgid ":pep:`366` - Main module explicit relative imports"
msgstr ""

#: ../../../library/runpy.rst:152
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ""

#: ../../../library/runpy.rst:154
msgid "The :func:`importlib.import_module` function"
msgstr ""
