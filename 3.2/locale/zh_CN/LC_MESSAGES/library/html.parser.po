# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/html.parser.rst:2
msgid ":mod:`html.parser` --- Simple HTML and XHTML parser"
msgstr ""

#: ../../../library/html.parser.rst:12
msgid "**Source code:** :source:`Lib/html/parser.py`"
msgstr ""

#: ../../../library/html.parser.rst:16
msgid ""
"This module defines a class :class:`HTMLParser` which serves as the basis "
"for parsing text files formatted in HTML (HyperText Mark-up Language) and "
"XHTML."
msgstr ""

#: ../../../library/html.parser.rst:21
msgid ""
"Create a parser instance.  If *strict* is ``True`` (the default), invalid "
"HTML results in :exc:`~html.parser.HTMLParseError` exceptions [#]_.  If "
"*strict* is ``False``, the parser uses heuristics to make a best guess at "
"the intention of any invalid HTML it encounters, similar to the way most "
"browsers do.  Using ``strict=False`` is advised."
msgstr ""

#: ../../../library/html.parser.rst:27
msgid ""
"An :class:`.HTMLParser` instance is fed HTML data and calls handler methods "
"when start tags, end tags, text, comments, and other markup elements are "
"encountered.  The user should subclass :class:`.HTMLParser` and override its "
"methods to implement the desired behavior."
msgstr ""

#: ../../../library/html.parser.rst:32
msgid ""
"This parser does not check that end tags match start tags or call the end-"
"tag handler for elements which are closed implicitly by closing an outer "
"element."
msgstr ""

#: ../../../library/html.parser.rst:35
msgid "*strict* keyword added"
msgstr ""

#: ../../../library/html.parser.rst:37
msgid "An exception is defined as well:"
msgstr ""

#: ../../../library/html.parser.rst:42
msgid ""
"Exception raised by the :class:`HTMLParser` class when it encounters an "
"error while parsing and *strict* is ``True``.  This exception provides three "
"attributes: :attr:`msg` is a brief message explaining the error, :attr:"
"`lineno` is the number of the line on which the broken construct was "
"detected, and :attr:`offset` is the number of characters into the line at "
"which the construct starts."
msgstr ""

#: ../../../library/html.parser.rst:51
msgid "Example HTML Parser Application"
msgstr ""

#: ../../../library/html.parser.rst:53
msgid ""
"As a basic example, below is a simple HTML parser that uses the :class:"
"`HTMLParser` class to print out start tags, end tags, and data as they are "
"encountered::"
msgstr ""

#: ../../../library/html.parser.rst:57
msgid ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser(strict=False)\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"
msgstr ""

#: ../../../library/html.parser.rst:71
msgid "The output will then be::"
msgstr ""

#: ../../../library/html.parser.rst:73
msgid ""
"Encountered a start tag: html\n"
"Encountered a start tag: head\n"
"Encountered a start tag: title\n"
"Encountered some data  : Test\n"
"Encountered an end tag : title\n"
"Encountered an end tag : head\n"
"Encountered a start tag: body\n"
"Encountered a start tag: h1\n"
"Encountered some data  : Parse me!\n"
"Encountered an end tag : h1\n"
"Encountered an end tag : body\n"
"Encountered an end tag : html"
msgstr ""

#: ../../../library/html.parser.rst:88
msgid ":class:`.HTMLParser` Methods"
msgstr ""

#: ../../../library/html.parser.rst:90
msgid ":class:`HTMLParser` instances have the following methods:"
msgstr ""

#: ../../../library/html.parser.rst:95
msgid ""
"Feed some text to the parser.  It is processed insofar as it consists of "
"complete elements; incomplete data is buffered until more data is fed or :"
"meth:`close` is called.  *data* must be :class:`str`."
msgstr ""

#: ../../../library/html.parser.rst:102
msgid ""
"Force processing of all buffered data as if it were followed by an end-of-"
"file mark.  This method may be redefined by a derived class to define "
"additional processing at the end of the input, but the redefined version "
"should always call the :class:`HTMLParser` base class method :meth:`close`."
msgstr ""

#: ../../../library/html.parser.rst:110
msgid ""
"Reset the instance.  Loses all unprocessed data.  This is called implicitly "
"at instantiation time."
msgstr ""

#: ../../../library/html.parser.rst:116
msgid "Return current line number and offset."
msgstr ""

#: ../../../library/html.parser.rst:121
msgid ""
"Return the text of the most recently opened start tag.  This should not "
"normally be needed for structured processing, but may be useful in dealing "
"with HTML \"as deployed\" or for re-generating input with minimal changes "
"(whitespace between attributes can be preserved, etc.)."
msgstr ""

#: ../../../library/html.parser.rst:127
msgid ""
"The following methods are called when data or markup elements are "
"encountered and they are meant to be overridden in a subclass.  The base "
"class implementations do nothing (except for :meth:`~HTMLParser."
"handle_startendtag`):"
msgstr ""

#: ../../../library/html.parser.rst:134
msgid ""
"This method is called to handle the start of a tag (e.g. ``<div "
"id=\"main\">``)."
msgstr ""

#: ../../../library/html.parser.rst:136
msgid ""
"The *tag* argument is the name of the tag converted to lower case. The "
"*attrs* argument is a list of ``(name, value)`` pairs containing the "
"attributes found inside the tag's ``<>`` brackets.  The *name* will be "
"translated to lower case, and quotes in the *value* have been removed, and "
"character and entity references have been replaced."
msgstr ""

#: ../../../library/html.parser.rst:142
msgid ""
"For instance, for the tag ``<A HREF=\"http://www.cwi.nl/\">``, this method "
"would be called as ``handle_starttag('a', [('href', 'http://www.cwi."
"nl/')])``."
msgstr ""

#: ../../../library/html.parser.rst:145
msgid ""
"All entity references from :mod:`html.entities` are replaced in the "
"attribute values."
msgstr ""

#: ../../../library/html.parser.rst:151
msgid ""
"This method is called to handle the end tag of an element (e.g. ``</div>``)."
msgstr ""

#: ../../../library/html.parser.rst:153
msgid "The *tag* argument is the name of the tag converted to lower case."
msgstr ""

#: ../../../library/html.parser.rst:158
msgid ""
"Similar to :meth:`handle_starttag`, but called when the parser encounters an "
"XHTML-style empty tag (``<img ... />``).  This method may be overridden by "
"subclasses which require this particular lexical information; the default "
"implementation simply calls :meth:`handle_starttag` and :meth:"
"`handle_endtag`."
msgstr ""

#: ../../../library/html.parser.rst:166
msgid ""
"This method is called to process arbitrary data (e.g. text nodes and the "
"content of ``<script>...</script>`` and ``<style>...</style>``)."
msgstr ""

#: ../../../library/html.parser.rst:172
msgid ""
"This method is called to process a named character reference of the form "
"``&name;`` (e.g. ``&gt;``), where *name* is a general entity reference (e.g. "
"``'gt'``)."
msgstr ""

#: ../../../library/html.parser.rst:179
msgid ""
"This method is called to process decimal and hexadecimal numeric character "
"references of the form ``&#NNN;`` and ``&#xNNN;``.  For example, the decimal "
"equivalent for ``&gt;`` is ``&#62;``, whereas the hexadecimal is ``&#x3E;``; "
"in this case the method will receive ``'62'`` or ``'x3E'``."
msgstr ""

#: ../../../library/html.parser.rst:187
msgid ""
"This method is called when a comment is encountered (e.g. ``<!--comment--"
">``)."
msgstr ""

#: ../../../library/html.parser.rst:189
msgid ""
"For example, the comment ``<!-- comment -->`` will cause this method to be "
"called with the argument ``' comment '``."
msgstr ""

#: ../../../library/html.parser.rst:192
msgid ""
"The content of Internet Explorer conditional comments (condcoms) will also "
"be sent to this method, so, for ``<!--[if IE 9]>IE9-specific content<!"
"[endif]-->``, this method will receive ``'[if IE 9]>IE-specific content<!"
"[endif]'``."
msgstr ""

#: ../../../library/html.parser.rst:199
msgid ""
"This method is called to handle an HTML doctype declaration (e.g. ``<!"
"DOCTYPE html>``)."
msgstr ""

#: ../../../library/html.parser.rst:202
msgid ""
"The *decl* parameter will be the entire contents of the declaration inside "
"the ``<!...>`` markup (e.g. ``'DOCTYPE html'``)."
msgstr ""

#: ../../../library/html.parser.rst:208
msgid ""
"Method called when a processing instruction is encountered.  The *data* "
"parameter will contain the entire processing instruction. For example, for "
"the processing instruction ``<?proc color='red'>``, this method would be "
"called as ``handle_pi(\"proc color='red'\")``.  It is intended to be "
"overridden by a derived class; the base class implementation does nothing."
msgstr ""

#: ../../../library/html.parser.rst:216
msgid ""
"The :class:`HTMLParser` class uses the SGML syntactic rules for processing "
"instructions.  An XHTML processing instruction using the trailing ``'?'`` "
"will cause the ``'?'`` to be included in *data*."
msgstr ""

#: ../../../library/html.parser.rst:223
msgid ""
"This method is called when an unrecognized declaration is read by the parser."
msgstr ""

#: ../../../library/html.parser.rst:225
msgid ""
"The *data* parameter will be the entire contents of the declaration inside "
"the ``<![...]>`` markup.  It is sometimes useful to be overridden by a "
"derived class.  The base class implementation raises an :exc:"
"`HTMLParseError` when *strict* is ``True``."
msgstr ""

#: ../../../library/html.parser.rst:234
msgid "Examples"
msgstr ""

#: ../../../library/html.parser.rst:236
msgid ""
"The following class implements a parser that will be used to illustrate more "
"examples::"
msgstr ""

#: ../../../library/html.parser.rst:239
msgid ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser(strict=False)"
msgstr ""

#: ../../../library/html.parser.rst:267
msgid "Parsing a doctype::"
msgstr ""

#: ../../../library/html.parser.rst:269
msgid ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3."
"org/TR/html4/strict.dtd\""
msgstr ""

#: ../../../library/html.parser.rst:273
msgid "Parsing an element with a few attributes and a title::"
msgstr ""

#: ../../../library/html.parser.rst:275
msgid ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"
msgstr ""

#: ../../../library/html.parser.rst:285
msgid ""
"The content of ``script`` and ``style`` elements is returned as is, without "
"further parsing::"
msgstr ""

#: ../../../library/html.parser.rst:288
msgid ""
">>> parser.feed('<style type=\"text/css\">#python { color: green }</"
"style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
">>>\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"
msgstr ""

#: ../../../library/html.parser.rst:301
msgid "Parsing comments::"
msgstr ""

#: ../../../library/html.parser.rst:303
msgid ""
">>> parser.feed('<!-- a comment -->'\n"
"...             '<!--[if IE 9]>IE-specific content<![endif]-->')\n"
"Comment  :  a comment\n"
"Comment  : [if IE 9]>IE-specific content<![endif]"
msgstr ""

#: ../../../library/html.parser.rst:308
msgid ""
"Parsing named and numeric character references and converting them to the "
"correct char (note: these 3 references are all equivalent to ``'>'``)::"
msgstr ""

#: ../../../library/html.parser.rst:311
msgid ""
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Named ent: >\n"
"Num ent  : >\n"
"Num ent  : >"
msgstr ""

#: ../../../library/html.parser.rst:316
msgid ""
"Feeding incomplete chunks to :meth:`~HTMLParser.feed` works, but :meth:"
"`~HTMLParser.handle_data` might be called more than once::"
msgstr ""

#: ../../../library/html.parser.rst:319
msgid ""
">>> for chunk in ['<sp', 'an>buff', 'ered ', 'text</s', 'pan>']:\n"
"...     parser.feed(chunk)\n"
"...\n"
"Start tag: span\n"
"Data     : buff\n"
"Data     : ered\n"
"Data     : text\n"
"End tag  : span"
msgstr ""

#: ../../../library/html.parser.rst:328
msgid "Parsing invalid HTML (e.g. unquoted attributes) also works::"
msgstr ""

#: ../../../library/html.parser.rst:330
msgid ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"
msgstr ""

#: ../../../library/html.parser.rst:340
msgid "Footnotes"
msgstr ""

#: ../../../library/html.parser.rst:341
msgid ""
"For backward compatibility reasons *strict* mode does not raise exceptions "
"for all non-compliant HTML.  That is, some invalid HTML is tolerated even in "
"*strict* mode."
msgstr ""

#: ../../../library/html.parser.rst:8
msgid "HTML"
msgstr ""

#: ../../../library/html.parser.rst:8
msgid "XHTML"
msgstr ""
