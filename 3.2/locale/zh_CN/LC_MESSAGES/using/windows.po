# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: ../../../using/windows.rst:11
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../../../using/windows.rst:16
msgid "Installing Python"
msgstr ""

#: ../../../using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not require Python "
"natively and thus does not pre-install a version of Python.  However, the "
"CPython team has compiled Windows installers (MSI packages) with every "
"`release <http://www.python.org/download/releases/>`_ for many years."
msgstr ""

#: ../../../using/windows.rst:23
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../../../using/windows.rst:27
msgid ""
"Up to 2.5, Python was still compatible with Windows 95, 98 and ME (but "
"already raised a deprecation warning on installation).  For Python 2.6 (and "
"all following releases), this support was dropped and new releases are just "
"expected to work on the Windows NT family."
msgstr ""

#: ../../../using/windows.rst:31
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../../../using/windows.rst:32
msgid ""
"The `Cygwin <http://cygwin.com/>`_ installer offers to install the `Python "
"interpreter <http://cygwin.com/packages/python>`_ as well; it is located "
"under \"Interpreters.\" (cf. `Cygwin package source <ftp://ftp.uni-erlangen."
"de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../../../using/windows.rst:39
msgid ""
"See `Python for Windows (and DOS) <http://www.python.org/download/windows/"
">`_ for detailed information about platforms with precompiled installers."
msgstr ""

#: ../../../using/windows.rst:46
msgid ""
"`Python on XP <http://www.richarddooling.com/index.php/2006/03/14/python-on-"
"xp-7-minutes-to-hello-world/>`_"
msgstr ""

#: ../../../using/windows.rst:45
msgid "\"7 Minutes to \"Hello World!\"\" by Richard Dooling, 2006"
msgstr ""

#: ../../../using/windows.rst:52
msgid ""
"`Installing on Windows <http://diveintopython.net/installing_python/windows."
"html>`_"
msgstr ""

#: ../../../using/windows.rst:49
msgid ""
"in \"`Dive into Python: Python from novice to pro <http://diveintopython.net/"
"index.html>`_\" by Mark Pilgrim, 2004, ISBN 1-59059-356-1"
msgstr ""

#: ../../../using/windows.rst:56
msgid ""
"`For Windows users <http://swaroopch.com/text/Byte_of_Python:"
"Installing_Python#For_Windows_users>`_"
msgstr ""

#: ../../../using/windows.rst:55
msgid ""
"in \"Installing Python\" in \"`A Byte of Python <http://www.byteofpython."
"info>`_\" by Swaroop C H, 2003"
msgstr ""

#: ../../../using/windows.rst:61
msgid "Alternative bundles"
msgstr ""

#: ../../../using/windows.rst:63
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../../../using/windows.rst:68
msgid "`ActivePython <http://www.activestate.com/Products/activepython/>`_"
msgstr ""

#: ../../../using/windows.rst:68
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../../../using/windows.rst:72
msgid ""
"`Enthought Python Distribution <http://www.enthought.com/products/epd.php>`_"
msgstr ""

#: ../../../using/windows.rst:71
msgid ""
"Popular modules (such as PyWin32) with their respective documentation, tool "
"suite for building extensible Python applications"
msgstr ""

#: ../../../using/windows.rst:74
msgid ""
"Notice that these packages are likely to install *older* versions of Python."
msgstr ""

#: ../../../using/windows.rst:79
msgid "Configuring Python"
msgstr ""

#: ../../../using/windows.rst:81
msgid ""
"In order to run Python flawlessly, you might have to change certain "
"environment settings in Windows."
msgstr ""

#: ../../../using/windows.rst:88
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../../../using/windows.rst:90
msgid ""
"Windows has a built-in dialog for changing environment variables (following "
"guide applies to XP classical view): Right-click the icon for your machine "
"(usually located on your Desktop and called \"My Computer\") and choose :"
"menuselection:`Properties` there.  Then, open the :guilabel:`Advanced` tab "
"and click the :guilabel:`Environment Variables` button."
msgstr ""

#: ../../../using/windows.rst:96
msgid "In short, your path is:"
msgstr ""

#: ../../../using/windows.rst:98
msgid ""
":menuselection:`My Computer --> Properties --> Advanced --> Environment "
"Variables`"
msgstr ""

#: ../../../using/windows.rst:103
msgid ""
"In this dialog, you can add or modify User and System variables. To change "
"System variables, you need non-restricted access to your machine (i.e. "
"Administrator rights)."
msgstr ""

#: ../../../using/windows.rst:107
msgid ""
"Another way of adding variables to your environment is using the :command:"
"`set` command::"
msgstr ""

#: ../../../using/windows.rst:110
msgid "set PYTHONPATH=%PYTHONPATH%;C:\\My_python_lib"
msgstr ""

#: ../../../using/windows.rst:112
msgid ""
"To make this setting permanent, you could add the corresponding command line "
"to your :file:`autoexec.bat`. :program:`msconfig` is a graphical interface "
"to this file."
msgstr ""

#: ../../../using/windows.rst:116
msgid ""
"Viewing environment variables can also be done more straight-forward: The "
"command prompt will expand strings wrapped into percent signs automatically::"
msgstr ""

#: ../../../using/windows.rst:119
msgid "echo %PATH%"
msgstr ""

#: ../../../using/windows.rst:121
msgid "Consult :command:`set /?` for details on this behaviour."
msgstr ""

#: ../../../using/windows.rst:126
msgid "http://support.microsoft.com/kb/100843"
msgstr ""

#: ../../../using/windows.rst:126
msgid "Environment variables in Windows NT"
msgstr ""

#: ../../../using/windows.rst:129
msgid "http://support.microsoft.com/kb/310519"
msgstr ""

#: ../../../using/windows.rst:129
msgid "How To Manage Environment Variables in Windows XP"
msgstr ""

#: ../../../using/windows.rst:131
msgid "http://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../../../using/windows.rst:132
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr ""

#: ../../../using/windows.rst:136
msgid "Finding the Python executable"
msgstr ""

#: ../../../using/windows.rst:138
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the DOS prompt.  To make this "
"work, you need to set your :envvar:`%PATH%` environment variable to include "
"the directory of your Python distribution, delimited by a semicolon from "
"other entries.  An example variable could look like this (assuming the first "
"two entries are Windows' default)::"
msgstr ""

#: ../../../using/windows.rst:145
msgid "C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Python25"
msgstr ""

#: ../../../using/windows.rst:147
msgid ""
"Typing :command:`python` on your command prompt will now fire up the Python "
"interpreter.  Thus, you can also execute your scripts with command line "
"options, see :ref:`using-on-cmdline` documentation."
msgstr ""

#: ../../../using/windows.rst:153
msgid "Finding modules"
msgstr ""

#: ../../../using/windows.rst:155
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\"
"\\Lib\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\"
"\\Lib\\\\site-packages\\\\`."
msgstr ""

#: ../../../using/windows.rst:161
msgid "This is how :data:`sys.path` is populated on Windows:"
msgstr ""

#: ../../../using/windows.rst:163
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../../../using/windows.rst:166
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../../../using/windows.rst:171
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../../../using/windows.rst:178
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (``Lib\\os.py``) to deduce the \"Python "
"Home\".  If a Python home is found, the relevant sub-directories added to :"
"data:`sys.path` (``Lib``, ``plat-win``, etc) are based on that folder.  "
"Otherwise, the core Python path is constructed from the PythonPath stored in "
"the registry."
msgstr ""

#: ../../../using/windows.rst:185
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../../../using/windows.rst:189
msgid "The end result of all this is:"
msgstr ""

#: ../../../using/windows.rst:191
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../../../using/windows.rst:196
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../../../using/windows.rst:200
msgid ""
"If Python can't find its home and there is no registry (eg, frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../../../using/windows.rst:206
msgid "Executing scripts"
msgstr ""

#: ../../../using/windows.rst:208
msgid ""
"Python scripts (files with the extension ``.py``) will be executed by :"
"program:`python.exe` by default.  This executable opens a terminal, which "
"stays open even if the program uses a GUI.  If you do not want this to "
"happen, use the extension ``.pyw`` which will cause the script to be "
"executed by :program:`pythonw.exe` by default (both executables are located "
"in the top-level of your Python installation directory).  This suppresses "
"the terminal window on startup."
msgstr ""

#: ../../../using/windows.rst:216
msgid ""
"You can also make all ``.py`` scripts execute with :program:`pythonw.exe`, "
"setting this through the usual facilities, for example (might require "
"administrative rights):"
msgstr ""

#: ../../../using/windows.rst:220
msgid "Launch a command prompt."
msgstr ""

#: ../../../using/windows.rst:221
msgid "Associate the correct file group with ``.py`` scripts::"
msgstr ""

#: ../../../using/windows.rst:223
msgid "assoc .py=Python.File"
msgstr ""

#: ../../../using/windows.rst:225
msgid "Redirect all Python files to the new executable::"
msgstr ""

#: ../../../using/windows.rst:227
msgid "ftype Python.File=C:\\Path\\to\\pythonw.exe \"%1\" %*"
msgstr ""

#: ../../../using/windows.rst:231
msgid "Additional modules"
msgstr ""

#: ../../../using/windows.rst:233
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../../../using/windows.rst:237
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""

#: ../../../using/windows.rst:242
msgid "PyWin32"
msgstr ""

#: ../../../using/windows.rst:244
msgid ""
"The `PyWin32 <http://python.net/crew/mhammond/win32/>`_ module by Mark "
"Hammond is a collection of modules for advanced Windows-specific support.  "
"This includes utilities for:"
msgstr ""

#: ../../../using/windows.rst:248
msgid "`Component Object Model <http://www.microsoft.com/com/>`_ (COM)"
msgstr ""

#: ../../../using/windows.rst:249
msgid "Win32 API calls"
msgstr ""

#: ../../../using/windows.rst:250
msgid "Registry"
msgstr ""

#: ../../../using/windows.rst:251
msgid "Event log"
msgstr ""

#: ../../../using/windows.rst:252
msgid ""
"`Microsoft Foundation Classes <http://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""

#: ../../../using/windows.rst:255
msgid ""
"`PythonWin <http://web.archive.org/web/20060524042422/ http://www.python.org/"
"windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  It "
"is an embeddable IDE with a built-in debugger."
msgstr ""

#: ../../../using/windows.rst:262
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../../../using/windows.rst:262
msgid "by Tim Golden"
msgstr ""

#: ../../../using/windows.rst:264
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../../../using/windows.rst:265
msgid "by David and Paul Boddie"
msgstr ""

#: ../../../using/windows.rst:269
msgid "Py2exe"
msgstr ""

#: ../../../using/windows.rst:271
msgid ""
"`Py2exe <http://www.py2exe.org/>`_ is a :mod:`distutils` extension (see :ref:"
"`extending-distutils`) which wraps Python scripts into executable Windows "
"programs (:file:`{*}.exe` files).  When you have done this, you can "
"distribute your application without requiring your users to install Python."
msgstr ""

#: ../../../using/windows.rst:278
msgid "WConio"
msgstr ""

#: ../../../using/windows.rst:280
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../../../using/windows.rst:284
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../../../using/windows.rst:290
msgid "Compiling Python on Windows"
msgstr ""

#: ../../../using/windows.rst:292
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <http://python.org/download/source/>`_. You can download either "
"the latest release's source or just grab a fresh `checkout <http://docs."
"python.org/devguide/setup#checking-out-the-code>`_."
msgstr ""

#: ../../../using/windows.rst:297
msgid ""
"For Microsoft Visual C++, which is the compiler with which official Python "
"releases are built, the source tree contains solutions/project files.  View "
"the :file:`readme.txt` in their respective directories:"
msgstr ""

#: ../../../using/windows.rst:302
msgid "Directory"
msgstr ""

#: ../../../using/windows.rst:302
msgid "MSVC version"
msgstr ""

#: ../../../using/windows.rst:302
msgid "Visual Studio version"
msgstr ""

#: ../../../using/windows.rst:304
msgid ":file:`PC/VC6/`"
msgstr ""

#: ../../../using/windows.rst:304
msgid "6.0"
msgstr ""

#: ../../../using/windows.rst:304
msgid "97"
msgstr ""

#: ../../../using/windows.rst:306
msgid ":file:`PC/VS7.1/`"
msgstr ""

#: ../../../using/windows.rst:306
msgid "7.1"
msgstr ""

#: ../../../using/windows.rst:306
msgid "2003"
msgstr ""

#: ../../../using/windows.rst:308
msgid ":file:`PC/VS8.0/`"
msgstr ""

#: ../../../using/windows.rst:308
msgid "8.0"
msgstr ""

#: ../../../using/windows.rst:308
msgid "2005"
msgstr ""

#: ../../../using/windows.rst:310
msgid ":file:`PCbuild/`"
msgstr ""

#: ../../../using/windows.rst:310
msgid "9.0"
msgstr ""

#: ../../../using/windows.rst:310
msgid "2008"
msgstr ""

#: ../../../using/windows.rst:313
msgid ""
"Note that not all of these build directories are fully supported.  Read the "
"release notes to see which compiler version the official releases for your "
"version are built with."
msgstr ""

#: ../../../using/windows.rst:317
msgid ""
"Check :file:`PC/readme.txt` for general information on the build process."
msgstr ""

#: ../../../using/windows.rst:320
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../../../using/windows.rst:327
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""

#: ../../../using/windows.rst:325
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../../../using/windows.rst:329
msgid ""
"`MingW -- Python extensions <http://oldwiki.mingw.org/index.php/"
"Python%20extensions>`_"
msgstr ""

#: ../../../using/windows.rst:330
msgid "by Trent Apted et al, 2007"
msgstr ""

#: ../../../using/windows.rst:334
msgid "Other resources"
msgstr ""

#: ../../../using/windows.rst:341
msgid ""
"`Python Programming On Win32 <http://www.oreilly.com/catalog/pythonwin32/>`_"
msgstr ""

#: ../../../using/windows.rst:339
msgid ""
"\"Help for Windows Programmers\" by Mark Hammond and Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"
msgstr ""

#: ../../../using/windows.rst:343
msgid ""
"`A Python for Windows Tutorial <http://www.imladris.com/Scripts/"
"PythonForWindows.html>`_"
msgstr ""

#: ../../../using/windows.rst:344
msgid "by Amanda Birmingham, 2004"
msgstr ""
