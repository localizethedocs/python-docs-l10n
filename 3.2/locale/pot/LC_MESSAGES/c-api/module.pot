# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/module.rst:6
msgid "Module Objects"
msgstr ""

#: ../../../c-api/module.rst:10
msgid "There are only a few functions special to module objects."
msgstr ""

#: ../../../c-api/module.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""

#: ../../../c-api/module.rst:23
msgid "Return true if *p* is a module object, or a subtype of a module object."
msgstr ""

#: ../../../c-api/module.rst:28
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`."
msgstr ""

#: ../../../c-api/module.rst:39
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. Only the module's :attr:`__doc__` and :attr:`__name__` attributes "
"are filled in; the caller is responsible for providing a :attr:`__file__` "
"attribute."
msgstr ""

#: ../../../c-api/module.rst:48
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`__dict__` attribute of the module object.  "
"This function never fails.  It is recommended extensions use other :c:func:"
"`PyModule_\\*` and :c:func:`PyObject_\\*` functions rather than directly "
"manipulate a module's :attr:`__dict__`."
msgstr ""

#: ../../../c-api/module.rst:61
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide "
"one, or if it is not a string, :exc:`SystemError` is raised and *NULL* is "
"returned."
msgstr ""

#: ../../../c-api/module.rst:67
msgid ""
"Similar to :c:func:`PyModule_GetFilenameObject` but return the filename "
"encoded to 'utf-8'."
msgstr ""

#: ../../../c-api/module.rst:70
msgid ""
":c:func:`PyModule_GetFilename` raises :c:type:`UnicodeEncodeError` on "
"unencodable filenames, use :c:func:`PyModule_GetFilenameObject` instead."
msgstr ""

#: ../../../c-api/module.rst:81
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`__file__` attribute.  If this is not defined, or if it is not a "
"unicode string, raise :exc:`SystemError` and return *NULL*; otherwise return "
"a reference to a :c:type:`PyUnicodeObject`."
msgstr ""

#: ../../../c-api/module.rst:91
msgid ""
"Return the \"state\" of the module, that is, a pointer to the block of "
"memory allocated at module creation time, or *NULL*.  See :c:member:"
"`PyModuleDef.m_size`."
msgstr ""

#: ../../../c-api/module.rst:98
msgid ""
"Return a pointer to the :c:type:`PyModuleDef` struct from which the module "
"was created, or *NULL* if the module wasn't created with :c:func:"
"`PyModule_Create`."
msgstr ""

#: ../../../c-api/module.rst:104
msgid "Initializing C modules"
msgstr ""

#: ../../../c-api/module.rst:106
msgid "These functions are usually used in the module initialization function."
msgstr ""

#: ../../../c-api/module.rst:110
msgid ""
"Create a new module object, given the definition in *module*.  This behaves "
"like :c:func:`PyModule_Create2` with *module_api_version* set to :const:"
"`PYTHON_API_VERSION`."
msgstr ""

#: ../../../c-api/module.rst:117
msgid ""
"Create a new module object, given the definition in *module*, assuming the "
"API version *module_api_version*.  If that version does not match the "
"version of the running interpreter, a :exc:`RuntimeWarning` is emitted."
msgstr ""

#: ../../../c-api/module.rst:123
msgid ""
"Most uses of this function should be using :c:func:`PyModule_Create` "
"instead; only use this if you are sure you need it."
msgstr ""

#: ../../../c-api/module.rst:129
msgid ""
"This struct holds all information that is needed to create a module object. "
"There is usually only one static variable of that type for each module, "
"which is statically initialized and then passed to :c:func:`PyModule_Create` "
"in the module initialization function."
msgstr ""

#: ../../../c-api/module.rst:136
msgid "Always initialize this member to :const:`PyModuleDef_HEAD_INIT`."
msgstr ""

#: ../../../c-api/module.rst:140
msgid "Name for the new module."
msgstr ""

#: ../../../c-api/module.rst:144
msgid ""
"Docstring for the module; usually a docstring variable created with :c:func:"
"`PyDoc_STRVAR` is used."
msgstr ""

#: ../../../c-api/module.rst:149
msgid ""
"If the module object needs additional memory, this should be set to the "
"number of bytes to allocate; a pointer to the block of memory can be "
"retrieved with :c:func:`PyModule_GetState`.  If no memory is needed, set "
"this to ``-1``."
msgstr ""

#: ../../../c-api/module.rst:154
msgid ""
"This memory should be used, rather than static globals, to hold per-module "
"state, since it is then safe for use in multiple sub-interpreters.  It is "
"freed when the module object is deallocated, after the :c:member:`m_free` "
"function has been called, if present."
msgstr ""

#: ../../../c-api/module.rst:161
msgid ""
"A pointer to a table of module-level functions, described by :c:type:"
"`PyMethodDef` values.  Can be *NULL* if no functions are present."
msgstr ""

#: ../../../c-api/module.rst:166
msgid "Currently unused, should be *NULL*."
msgstr ""

#: ../../../c-api/module.rst:170
msgid ""
"A traversal function to call during GC traversal of the module object, or "
"*NULL* if not needed."
msgstr ""

#: ../../../c-api/module.rst:175
msgid ""
"A clear function to call during GC clearing of the module object, or *NULL* "
"if not needed."
msgstr ""

#: ../../../c-api/module.rst:180
msgid ""
"A function to call during deallocation of the module object, or *NULL* if "
"not needed."
msgstr ""

#: ../../../c-api/module.rst:186
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function.  This steals a "
"reference to *value*.  Return ``-1`` on error, ``0`` on success."
msgstr ""

#: ../../../c-api/module.rst:193
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../../c-api/module.rst:200
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be null-terminated.  Return ``-1`` on error, ``0`` on success."
msgstr ""

#: ../../../c-api/module.rst:207
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""

#: ../../../c-api/module.rst:215
msgid "Add a string constant to *module*."
msgstr ""

#: ../../../c-api/module.rst:15
msgid "ModuleType (in module types)"
msgstr ""

#: ../../../c-api/module.rst:34 ../../../c-api/module.rst:57
msgid "__name__ (module attribute)"
msgstr ""

#: ../../../c-api/module.rst:34
msgid "__doc__ (module attribute)"
msgstr ""

#: ../../../c-api/module.rst:34 ../../../c-api/module.rst:77
msgid "__file__ (module attribute)"
msgstr ""

#: ../../../c-api/module.rst:46
msgid "__dict__ (module attribute)"
msgstr ""

#: ../../../c-api/module.rst:57 ../../../c-api/module.rst:77
msgid "SystemError (built-in exception)"
msgstr ""
