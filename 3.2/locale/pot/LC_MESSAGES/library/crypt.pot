# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/crypt.rst:2
msgid ":mod:`crypt` --- Function to check Unix passwords"
msgstr ""

#: ../../../library/crypt.rst:16
msgid ""
"This module implements an interface to the :manpage:`crypt(3)` routine, "
"which is a one-way hash function based upon a modified DES algorithm; see "
"the Unix man page for further details.  Possible uses include allowing "
"Python scripts to accept typed passwords from the user, or attempting to "
"crack Unix passwords with a dictionary."
msgstr ""

#: ../../../library/crypt.rst:24
msgid ""
"Notice that the behavior of this module depends on the actual "
"implementation  of the :manpage:`crypt(3)` routine in the running system.  "
"Therefore, any extensions available on the current implementation will also  "
"be available on this module."
msgstr ""

#: ../../../library/crypt.rst:32
msgid ""
"*word* will usually be a user's password as typed at a prompt or  in a "
"graphical interface.  *salt* is usually a random two-character string which "
"will be used to perturb the DES algorithm in one of 4096 ways.  The "
"characters in *salt* must be in the set ``[./a-zA-Z0-9]``.  Returns the "
"hashed password as a string, which will be composed of characters from the "
"same alphabet as the salt (the first two characters represent the salt "
"itself)."
msgstr ""

#: ../../../library/crypt.rst:41
msgid ""
"Since a few :manpage:`crypt(3)` extensions allow different values, with "
"different sizes in the *salt*, it is recommended to use  the full crypted "
"password as salt when checking for a password."
msgstr ""

#: ../../../library/crypt.rst:45
msgid "A simple example illustrating typical use::"
msgstr ""

#: ../../../library/crypt.rst:47
msgid ""
"import crypt, getpass, pwd\n"
"\n"
"def login():\n"
"    username = input('Python login:')\n"
"    cryptedpasswd = pwd.getpwnam(username)[1]\n"
"    if cryptedpasswd:\n"
"        if cryptedpasswd == 'x' or cryptedpasswd == '*':\n"
"            raise \"Sorry, currently no support for shadow passwords\"\n"
"        cleartext = getpass.getpass()\n"
"        return crypt.crypt(cleartext, cryptedpasswd) == cryptedpasswd\n"
"    else:\n"
"        return 1"
msgstr ""

#: ../../../library/crypt.rst:12 ../../../library/crypt.rst:22
#: ../../../library/crypt.rst:39
msgid "crypt(3)"
msgstr ""

#: ../../../library/crypt.rst:12
msgid "cipher"
msgstr ""

#: ../../../library/crypt.rst:12
msgid "DES"
msgstr ""
