# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/pty.rst:2
msgid ":mod:`pty` --- Pseudo-terminal utilities"
msgstr ""

#: ../../../library/pty.rst:11
msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""

#: ../../../library/pty.rst:15
msgid ""
"Because pseudo-terminal handling is highly platform dependent, there is code "
"to do it only for Linux. (The Linux code is supposed to work on other "
"platforms, but hasn't been tested yet.)"
msgstr ""

#: ../../../library/pty.rst:19
msgid "The :mod:`pty` module defines the following functions:"
msgstr ""

#: ../../../library/pty.rst:24
msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""

#: ../../../library/pty.rst:33
msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""

#: ../../../library/pty.rst:40
msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal."
msgstr ""

#: ../../../library/pty.rst:44
msgid ""
"The functions *master_read* and *stdin_read* should be functions which read "
"from a file descriptor. The defaults try to read 1024 bytes each time they "
"are called."
msgstr ""

#: ../../../library/pty.rst:50
msgid "Example"
msgstr ""

#: ../../../library/pty.rst:54
msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""

#: ../../../library/pty.rst:58
msgid ""
"import sys, os, time, getopt\n"
"import pty\n"
"\n"
"mode = 'wb'\n"
"shell = 'sh'\n"
"filename = 'typescript'\n"
"if 'SHELL' in os.environ:\n"
"    shell = os.environ['SHELL']\n"
"\n"
"try:\n"
"    opts, args = getopt.getopt(sys.argv[1:], 'ap')\n"
"except getopt.error as msg:\n"
"    print('%s: %s' % (sys.argv[0], msg))\n"
"    sys.exit(2)\n"
"\n"
"for opt, arg in opts:\n"
"    # option -a: append to typescript file\n"
"    if opt == '-a':\n"
"        mode = 'ab'\n"
"    # option -p: use a Python shell as the terminal command\n"
"    elif opt == '-p':\n"
"        shell = sys.executable\n"
"if args:\n"
"    filename = args[0]\n"
"\n"
"script = open(filename, mode)\n"
"\n"
"def read(fd):\n"
"    data = os.read(fd, 1024)\n"
"    script.write(data)\n"
"    return data\n"
"\n"
"sys.stdout.write('Script started, file is %s\\n' % filename)\n"
"script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"pty.spawn(shell, read)\n"
"script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"sys.stdout.write('Script done, file is %s\\n' % filename)"
msgstr ""
