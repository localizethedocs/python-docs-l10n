# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/email-examples.rst:4
msgid ":mod:`email`: Examples"
msgstr ""

#: ../../../library/email-examples.rst:6
msgid ""
"Here are a few examples of how to use the :mod:`email` package to read, "
"write, and send simple email messages, as well as more complex MIME messages."
msgstr ""

#: ../../../library/email-examples.rst:9
msgid "First, let's see how to create and send a simple text message:"
msgstr ""

#: ../../../library/email-examples.rst:11
msgid ""
"# Import smtplib for the actual sending function\n"
"import smtplib\n"
"\n"
"# Import the email modules we'll need\n"
"from email.mime.text import MIMEText\n"
"\n"
"# Open a plain text file for reading.  For this example, assume that\n"
"# the text file contains only ASCII characters.\n"
"fp = open(textfile, 'rb')\n"
"# Create a text/plain message\n"
"msg = MIMEText(fp.read())\n"
"fp.close()\n"
"\n"
"# me == the sender's email address\n"
"# you == the recipient's email address\n"
"msg['Subject'] = 'The contents of %s' % textfile\n"
"msg['From'] = me\n"
"msg['To'] = you\n"
"\n"
"# Send the message via our own SMTP server.\n"
"s = smtplib.SMTP('localhost')\n"
"s.send_message(msg)\n"
"s.quit()\n"
msgstr ""

#: ../../../library/email-examples.rst:14
msgid ""
"And parsing RFC822 headers can easily be done by the parse(filename) or "
"parsestr(message_as_string) methods of the Parser() class:"
msgstr ""

#: ../../../library/email-examples.rst:17
msgid ""
"# Import the email modules we'll need\n"
"from email.parser import Parser\n"
"\n"
"#  If the e-mail headers are in a file, uncomment this line:\n"
"#headers = Parser().parse(open(messagefile, 'r'))\n"
"\n"
"#  Or for parsing headers in a string, use:\n"
"headers = Parser().parsestr('From: <user@example.com>\\n'\n"
"        'To: <someone_else@example.com>\\n'\n"
"        'Subject: Test message\\n'\n"
"        '\\n'\n"
"        'Body would go here\\n')\n"
"\n"
"#  Now the header items can be accessed as a dictionary:\n"
"print('To: %s' % headers['to'])\n"
"print('From: %s' % headers['from'])\n"
"print('Subject: %s' % headers['subject'])\n"
msgstr ""

#: ../../../library/email-examples.rst:20
msgid ""
"Here's an example of how to send a MIME message containing a bunch of family "
"pictures that may be residing in a directory:"
msgstr ""

#: ../../../library/email-examples.rst:23
msgid ""
"# Import smtplib for the actual sending function\n"
"import smtplib\n"
"\n"
"# Here are the email package modules we'll need\n"
"from email.mime.image import MIMEImage\n"
"from email.mime.multipart import MIMEMultipart\n"
"\n"
"COMMASPACE = ', '\n"
"\n"
"# Create the container (outer) email message.\n"
"msg = MIMEMultipart()\n"
"msg['Subject'] = 'Our family reunion'\n"
"# me == the sender's email address\n"
"# family = the list of all recipients' email addresses\n"
"msg['From'] = me\n"
"msg['To'] = COMMASPACE.join(family)\n"
"msg.preamble = 'Our family reunion'\n"
"\n"
"# Assume we know that the image files are all in PNG format\n"
"for file in pngfiles:\n"
"    # Open the files in binary mode.  Let the MIMEImage class automatically\n"
"    # guess the specific image type.\n"
"    fp = open(file, 'rb')\n"
"    img = MIMEImage(fp.read())\n"
"    fp.close()\n"
"    msg.attach(img)\n"
"\n"
"# Send the email via our own SMTP server.\n"
"s = smtplib.SMTP('localhost')\n"
"s.send_message(msg)\n"
"s.quit()\n"
msgstr ""

#: ../../../library/email-examples.rst:26
msgid ""
"Here's an example of how to send the entire contents of a directory as an "
"email message: [1]_"
msgstr ""

#: ../../../library/email-examples.rst:29
msgid ""
"#!/usr/bin/env python3\n"
"\n"
"\"\"\"Send the contents of a directory as a MIME message.\"\"\"\n"
"\n"
"import os\n"
"import sys\n"
"import smtplib\n"
"# For guessing MIME type based on file name extension\n"
"import mimetypes\n"
"\n"
"from optparse import OptionParser\n"
"\n"
"from email import encoders\n"
"from email.message import Message\n"
"from email.mime.audio import MIMEAudio\n"
"from email.mime.base import MIMEBase\n"
"from email.mime.image import MIMEImage\n"
"from email.mime.multipart import MIMEMultipart\n"
"from email.mime.text import MIMEText\n"
"\n"
"COMMASPACE = ', '\n"
"\n"
"\n"
"def main():\n"
"    parser = OptionParser(usage=\"\"\"\\\n"
"Send the contents of a directory as a MIME message.\n"
"\n"
"Usage: %prog [options]\n"
"\n"
"Unless the -o option is given, the email is sent by forwarding to your "
"local\n"
"SMTP server, which then does the normal delivery process.  Your local "
"machine\n"
"must be running an SMTP server.\n"
"\"\"\")\n"
"    parser.add_option('-d', '--directory',\n"
"                      type='string', action='store',\n"
"                      help=\"\"\"Mail the contents of the specified "
"directory,\n"
"                      otherwise use the current directory.  Only the "
"regular\n"
"                      files in the directory are sent, and we don't recurse "
"to\n"
"                      subdirectories.\"\"\")\n"
"    parser.add_option('-o', '--output',\n"
"                      type='string', action='store', metavar='FILE',\n"
"                      help=\"\"\"Print the composed message to FILE instead "
"of\n"
"                      sending the message to the SMTP server.\"\"\")\n"
"    parser.add_option('-s', '--sender',\n"
"                      type='string', action='store', metavar='SENDER',\n"
"                      help='The value of the From: header (required)')\n"
"    parser.add_option('-r', '--recipient',\n"
"                      type='string', action='append', metavar='RECIPIENT',\n"
"                      default=[], dest='recipients',\n"
"                      help='A To: header value (at least one required)')\n"
"    opts, args = parser.parse_args()\n"
"    if not opts.sender or not opts.recipients:\n"
"        parser.print_help()\n"
"        sys.exit(1)\n"
"    directory = opts.directory\n"
"    if not directory:\n"
"        directory = '.'\n"
"    # Create the enclosing (outer) message\n"
"    outer = MIMEMultipart()\n"
"    outer['Subject'] = 'Contents of directory %s' % os.path."
"abspath(directory)\n"
"    outer['To'] = COMMASPACE.join(opts.recipients)\n"
"    outer['From'] = opts.sender\n"
"    outer.preamble = 'You will not see this in a MIME-aware mail reader."
"\\n'\n"
"\n"
"    for filename in os.listdir(directory):\n"
"        path = os.path.join(directory, filename)\n"
"        if not os.path.isfile(path):\n"
"            continue\n"
"        # Guess the content type based on the file's extension.  Encoding\n"
"        # will be ignored, although we should check for simple things like\n"
"        # gzip'd or compressed files.\n"
"        ctype, encoding = mimetypes.guess_type(path)\n"
"        if ctype is None or encoding is not None:\n"
"            # No guess could be made, or the file is encoded (compressed), "
"so\n"
"            # use a generic bag-of-bits type.\n"
"            ctype = 'application/octet-stream'\n"
"        maintype, subtype = ctype.split('/', 1)\n"
"        if maintype == 'text':\n"
"            fp = open(path)\n"
"            # Note: we should handle calculating the charset\n"
"            msg = MIMEText(fp.read(), _subtype=subtype)\n"
"            fp.close()\n"
"        elif maintype == 'image':\n"
"            fp = open(path, 'rb')\n"
"            msg = MIMEImage(fp.read(), _subtype=subtype)\n"
"            fp.close()\n"
"        elif maintype == 'audio':\n"
"            fp = open(path, 'rb')\n"
"            msg = MIMEAudio(fp.read(), _subtype=subtype)\n"
"            fp.close()\n"
"        else:\n"
"            fp = open(path, 'rb')\n"
"            msg = MIMEBase(maintype, subtype)\n"
"            msg.set_payload(fp.read())\n"
"            fp.close()\n"
"            # Encode the payload using Base64\n"
"            encoders.encode_base64(msg)\n"
"        # Set the filename parameter\n"
"        msg.add_header('Content-Disposition', 'attachment', "
"filename=filename)\n"
"        outer.attach(msg)\n"
"    # Now send or store the message\n"
"    composed = outer.as_string()\n"
"    if opts.output:\n"
"        fp = open(opts.output, 'w')\n"
"        fp.write(composed)\n"
"        fp.close()\n"
"    else:\n"
"        s = smtplib.SMTP('localhost')\n"
"        s.sendmail(opts.sender, opts.recipients, composed)\n"
"        s.quit()\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    main()\n"
msgstr ""

#: ../../../library/email-examples.rst:32
msgid ""
"Here's an example of how to unpack a MIME message like the one above, into a "
"directory of files:"
msgstr ""

#: ../../../library/email-examples.rst:35
msgid ""
"#!/usr/bin/env python3\n"
"\n"
"\"\"\"Unpack a MIME message into a directory of files.\"\"\"\n"
"\n"
"import os\n"
"import sys\n"
"import email\n"
"import errno\n"
"import mimetypes\n"
"\n"
"from optparse import OptionParser\n"
"\n"
"\n"
"def main():\n"
"    parser = OptionParser(usage=\"\"\"\\\n"
"Unpack a MIME message into a directory of files.\n"
"\n"
"Usage: %prog [options] msgfile\n"
"\"\"\")\n"
"    parser.add_option('-d', '--directory',\n"
"                      type='string', action='store',\n"
"                      help=\"\"\"Unpack the MIME message into the named\n"
"                      directory, which will be created if it doesn't "
"already\n"
"                      exist.\"\"\")\n"
"    opts, args = parser.parse_args()\n"
"    if not opts.directory:\n"
"        parser.print_help()\n"
"        sys.exit(1)\n"
"\n"
"    try:\n"
"        msgfile = args[0]\n"
"    except IndexError:\n"
"        parser.print_help()\n"
"        sys.exit(1)\n"
"\n"
"    try:\n"
"        os.mkdir(opts.directory)\n"
"    except OSError as e:\n"
"        # Ignore directory exists error\n"
"        if e.errno != errno.EEXIST:\n"
"            raise\n"
"\n"
"    fp = open(msgfile)\n"
"    msg = email.message_from_file(fp)\n"
"    fp.close()\n"
"\n"
"    counter = 1\n"
"    for part in msg.walk():\n"
"        # multipart/* are just containers\n"
"        if part.get_content_maintype() == 'multipart':\n"
"            continue\n"
"        # Applications should really sanitize the given filename so that an\n"
"        # email message can't be used to overwrite important files\n"
"        filename = part.get_filename()\n"
"        if not filename:\n"
"            ext = mimetypes.guess_extension(part.get_content_type())\n"
"            if not ext:\n"
"                # Use a generic bag-of-bits extension\n"
"                ext = '.bin'\n"
"            filename = 'part-%03d%s' % (counter, ext)\n"
"        counter += 1\n"
"        fp = open(os.path.join(opts.directory, filename), 'wb')\n"
"        fp.write(part.get_payload(decode=True))\n"
"        fp.close()\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    main()\n"
msgstr ""

#: ../../../library/email-examples.rst:37
msgid ""
"Here's an example of how to create an HTML message with an alternative plain "
"text version: [2]_"
msgstr ""

#: ../../../library/email-examples.rst:40
msgid ""
"#!/usr/bin/env python3\n"
"\n"
"import smtplib\n"
"\n"
"from email.mime.multipart import MIMEMultipart\n"
"from email.mime.text import MIMEText\n"
"\n"
"# me == my email address\n"
"# you == recipient's email address\n"
"me = \"my@email.com\"\n"
"you = \"your@email.com\"\n"
"\n"
"# Create message container - the correct MIME type is multipart/"
"alternative.\n"
"msg = MIMEMultipart('alternative')\n"
"msg['Subject'] = \"Link\"\n"
"msg['From'] = me\n"
"msg['To'] = you\n"
"\n"
"# Create the body of the message (a plain-text and an HTML version).\n"
"text = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www."
"python.org\"\n"
"html = \"\"\"\\\n"
"<html>\n"
"  <head></head>\n"
"  <body>\n"
"    <p>Hi!<br>\n"
"       How are you?<br>\n"
"       Here is the <a href=\"http://www.python.org\">link</a> you wanted.\n"
"    </p>\n"
"  </body>\n"
"</html>\n"
"\"\"\"\n"
"\n"
"# Record the MIME types of both parts - text/plain and text/html.\n"
"part1 = MIMEText(text, 'plain')\n"
"part2 = MIMEText(html, 'html')\n"
"\n"
"# Attach parts into message container.\n"
"# According to RFC 2046, the last part of a multipart message, in this case\n"
"# the HTML message, is best and preferred.\n"
"msg.attach(part1)\n"
"msg.attach(part2)\n"
"\n"
"# Send the message via local SMTP server.\n"
"s = smtplib.SMTP('localhost')\n"
"# sendmail function takes 3 arguments: sender's address, recipient's "
"address\n"
"# and message to send - here it is sent as one string.\n"
"s.sendmail(me, you, msg.as_string())\n"
"s.quit()\n"
msgstr ""

#: ../../../library/email-examples.rst:44
msgid "Footnotes"
msgstr ""

#: ../../../library/email-examples.rst:45
msgid ""
"Thanks to Matthew Dixon Cowles for the original inspiration and examples."
msgstr ""

#: ../../../library/email-examples.rst:46
msgid "Contributed by Martin Matejek."
msgstr ""
