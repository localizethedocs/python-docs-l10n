# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/urllib.request.rst:2
msgid ":mod:`urllib.request` --- Extensible library for opening URLs"
msgstr ""

#: ../../../library/urllib.request.rst:11
msgid ""
"The :mod:`urllib.request` module defines functions and classes which help in "
"opening URLs (mostly HTTP) in a complex world --- basic and digest "
"authentication, redirections, cookies and more."
msgstr ""

#: ../../../library/urllib.request.rst:16
msgid "The :mod:`urllib.request` module defines the following functions:"
msgstr ""

#: ../../../library/urllib.request.rst:21
msgid ""
"Open the URL *url*, which can be either a string or a :class:`Request` "
"object."
msgstr ""

#: ../../../library/urllib.request.rst:24
msgid ""
"*data* must be a bytes object specifying additional data to be sent to the "
"server, or ``None`` if no such data is needed. *data* may also be an "
"iterable object and in that case Content-Length value must be specified in "
"the headers. Currently HTTP requests are the only ones that use *data*; the "
"HTTP request will be a POST instead of a GET when the *data* parameter is "
"provided."
msgstr ""

#: ../../../library/urllib.request.rst:31
msgid ""
"*data* should be a buffer in the standard :mimetype:`application/x-www-form-"
"urlencoded` format.  The :func:`urllib.parse.urlencode` function takes a "
"mapping or sequence of 2-tuples and returns a string in this format. It "
"should be encoded to bytes before being used as the *data* parameter. The "
"charset parameter in ``Content-Type`` header may be used to specify the "
"encoding. If charset parameter is not sent with the Content-Type header, the "
"server following the HTTP 1.1 recommendation may assume that the data is "
"encoded in ISO-8859-1 encoding. It is advisable to use charset parameter "
"with encoding used in ``Content-Type`` header with the :class:`Request`."
msgstr ""

#: ../../../library/urllib.request.rst:42
msgid ""
"urllib.request module uses HTTP/1.1 and includes ``Connection:close`` header "
"in its HTTP requests."
msgstr ""

#: ../../../library/urllib.request.rst:45
msgid ""
"The optional *timeout* parameter specifies a timeout in seconds for blocking "
"operations like the connection attempt (if not specified, the global default "
"timeout setting will be used).  This actually only works for HTTP, HTTPS and "
"FTP connections."
msgstr ""

#: ../../../library/urllib.request.rst:50
msgid ""
"The optional *cafile* and *capath* parameters specify a set of trusted CA "
"certificates for HTTPS requests.  *cafile* should point to a single file "
"containing a bundle of CA certificates, whereas *capath* should point to a "
"directory of hashed certificate files.  More information can be found in :"
"meth:`ssl.SSLContext.load_verify_locations`."
msgstr ""

#: ../../../library/urllib.request.rst:57
msgid ""
"If neither *cafile* nor *capath* is specified, an HTTPS request will not do "
"any verification of the server's certificate."
msgstr ""

#: ../../../library/urllib.request.rst:60
msgid ""
"For http and https urls, this function returns a :class:`http.client."
"HTTPResponse` object which has the following :ref:`httpresponse-objects` "
"methods."
msgstr ""

#: ../../../library/urllib.request.rst:64
msgid ""
"For ftp, file, and data urls and requests explicity handled by legacy :class:"
"`URLopener` and :class:`FancyURLopener` classes, this function returns a :"
"class:`urllib.response.addinfourl` object which can work as :term:`context "
"manager` and has methods such as"
msgstr ""

#: ../../../library/urllib.request.rst:69
msgid ""
":meth:`~urllib.response.addinfourl.geturl` --- return the URL of the "
"resource retrieved, commonly used to determine if a redirect was followed"
msgstr ""

#: ../../../library/urllib.request.rst:72
msgid ""
":meth:`~urllib.response.addinfourl.info` --- return the meta-information of "
"the page, such as headers, in the form of an :func:`email."
"message_from_string` instance (see `Quick Reference to HTTP Headers <http://"
"www.cs.tut.fi/~jkorpela/http.html>`_)"
msgstr ""

#: ../../../library/urllib.request.rst:76
msgid ""
":meth:`~urllib.response.addinfourl.getcode` -- return the HTTP status code "
"of the response."
msgstr ""

#: ../../../library/urllib.request.rst:78
msgid "Raises :exc:`URLError` on errors."
msgstr ""

#: ../../../library/urllib.request.rst:80
msgid ""
"Note that ``None`` may be returned if no handler handles the request (though "
"the default installed global :class:`OpenerDirector` uses :class:"
"`UnknownHandler` to ensure this never happens)."
msgstr ""

#: ../../../library/urllib.request.rst:84
msgid ""
"In addition, default installed :class:`ProxyHandler` makes sure the requests "
"are handled through the proxy when they are set."
msgstr ""

#: ../../../library/urllib.request.rst:87
msgid ""
"The legacy ``urllib.urlopen`` function from Python 2.6 and earlier has been "
"discontinued; :func:`urllib.request.urlopen` corresponds to the old "
"``urllib2.urlopen``.  Proxy handling, which was done by passing a dictionary "
"parameter to ``urllib.urlopen``, can be obtained by using :class:"
"`ProxyHandler` objects."
msgstr ""

#: ../../../library/urllib.request.rst:93
msgid "*cafile* and *capath* were added."
msgstr ""

#: ../../../library/urllib.request.rst:96
msgid ""
"HTTPS virtual hosts are now supported if possible (that is, if :data:`ssl."
"HAS_SNI` is true)."
msgstr ""

#: ../../../library/urllib.request.rst:100
msgid "*data* can be an iterable object."
msgstr ""

#: ../../../library/urllib.request.rst:105
msgid ""
"Install an :class:`OpenerDirector` instance as the default global opener. "
"Installing an opener is only necessary if you want urlopen to use that "
"opener; otherwise, simply call :meth:`OpenerDirector.open` instead of :func:"
"`~urllib.request.urlopen`.  The code does not check for a real :class:"
"`OpenerDirector`, and any class with the appropriate interface will work."
msgstr ""

#: ../../../library/urllib.request.rst:115
msgid ""
"Return an :class:`OpenerDirector` instance, which chains the handlers in the "
"order given. *handler*\\s can be either instances of :class:`BaseHandler`, "
"or subclasses of :class:`BaseHandler` (in which case it must be possible to "
"call the constructor without any parameters).  Instances of the following "
"classes will be in front of the *handler*\\s, unless the *handler*\\s "
"contain them, instances of them or subclasses of them: :class:"
"`ProxyHandler`, :class:`UnknownHandler`, :class:`HTTPHandler`, :class:"
"`HTTPDefaultErrorHandler`, :class:`HTTPRedirectHandler`, :class:"
"`FTPHandler`, :class:`FileHandler`, :class:`HTTPErrorProcessor`."
msgstr ""

#: ../../../library/urllib.request.rst:125
msgid ""
"If the Python installation has SSL support (i.e., if the :mod:`ssl` module "
"can be imported), :class:`HTTPSHandler` will also be added."
msgstr ""

#: ../../../library/urllib.request.rst:128
msgid ""
"A :class:`BaseHandler` subclass may also change its :attr:`handler_order` "
"attribute to modify its position in the handlers list."
msgstr ""

#: ../../../library/urllib.request.rst:134
msgid ""
"Convert the pathname *path* from the local syntax for a path to the form "
"used in the path component of a URL.  This does not produce a complete URL.  "
"The return value will already be quoted using the :func:`quote` function."
msgstr ""

#: ../../../library/urllib.request.rst:141
msgid ""
"Convert the path component *path* from a percent-encoded URL to the local "
"syntax for a path.  This does not accept a complete URL.  This function "
"uses :func:`unquote` to decode *path*."
msgstr ""

#: ../../../library/urllib.request.rst:147
msgid ""
"This helper function returns a dictionary of scheme to proxy server URL "
"mappings. It scans the environment for variables named ``<scheme>_proxy``, "
"in a case insensitive approach, for all operating systems first, and when it "
"cannot find it, looks for proxy information from Mac OSX System "
"Configuration for Mac OS X and Windows Systems Registry for Windows."
msgstr ""

#: ../../../library/urllib.request.rst:154
msgid "The following classes are provided:"
msgstr ""

#: ../../../library/urllib.request.rst:158
msgid "This class is an abstraction of a URL request."
msgstr ""

#: ../../../library/urllib.request.rst:160
msgid "*url* should be a string containing a valid URL."
msgstr ""

#: ../../../library/urllib.request.rst:162
msgid ""
"*data* must be a bytes object specifying additional data to send to the "
"server, or ``None`` if no such data is needed.  Currently HTTP requests are "
"the only ones that use *data*; the HTTP request will be a POST instead of a "
"GET when the *data* parameter is provided.  *data* should be a buffer in the "
"standard :mimetype:`application/x-www-form-urlencoded` format."
msgstr ""

#: ../../../library/urllib.request.rst:168
msgid ""
"The :func:`urllib.parse.urlencode` function takes a mapping or sequence of 2-"
"tuples and returns a string in this format. It should be encoded to bytes "
"before being used as the *data* parameter. The charset parameter in "
"``Content-Type`` header may be used to specify the encoding. If charset "
"parameter is not sent with the Content-Type header, the server following the "
"HTTP 1.1 recommendation may assume that the data is encoded in ISO-8859-1 "
"encoding. It is advisable to use charset parameter with encoding used in "
"``Content-Type`` header with the :class:`Request`."
msgstr ""

#: ../../../library/urllib.request.rst:178
msgid ""
"*headers* should be a dictionary, and will be treated as if :meth:"
"`add_header` was called with each key and value as arguments. This is often "
"used to \"spoof\" the ``User-Agent`` header, which is used by a browser to "
"identify itself -- some HTTP servers only allow requests coming from common "
"browsers as opposed to scripts. For example, Mozilla Firefox may identify "
"itself as ``\"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 "
"Firefox/2.0.0.11\"``, while :mod:`urllib`'s default user agent string is "
"``\"Python-urllib/2.6\"`` (on Python 2.6)."
msgstr ""

#: ../../../library/urllib.request.rst:188
msgid ""
"An example of using ``Content-Type`` header with *data* argument would be "
"sending a dictionary like ``{\"Content-Type\":\" application/x-www-form-"
"urlencoded;charset=utf-8\"}``"
msgstr ""

#: ../../../library/urllib.request.rst:191
msgid ""
"The final two arguments are only of interest for correct handling of third-"
"party HTTP cookies:"
msgstr ""

#: ../../../library/urllib.request.rst:194
msgid ""
"*origin_req_host* should be the request-host of the origin transaction, as "
"defined by :rfc:`2965`.  It defaults to ``http.cookiejar."
"request_host(self)``.  This is the host name or IP address of the original "
"request that was initiated by the user. For example, if the request is for "
"an image in an HTML document, this should be the request-host of the request "
"for the page containing the image."
msgstr ""

#: ../../../library/urllib.request.rst:202
msgid ""
"*unverifiable* should indicate whether the request is unverifiable, as "
"defined by RFC 2965.  It defaults to False.  An unverifiable request is one "
"whose URL the user did not have the option to approve.  For example, if the "
"request is for an image in an HTML document, and the user had no option to "
"approve the automatic fetching of the image, this should be true."
msgstr ""

#: ../../../library/urllib.request.rst:212
msgid ""
"The :class:`OpenerDirector` class opens URLs via :class:`BaseHandler`\\ s "
"chained together. It manages the chaining of handlers, and recovery from "
"errors."
msgstr ""

#: ../../../library/urllib.request.rst:218
msgid ""
"This is the base class for all registered handlers --- and handles only the "
"simple mechanics of registration."
msgstr ""

#: ../../../library/urllib.request.rst:224
msgid ""
"A class which defines a default handler for HTTP error responses; all "
"responses are turned into :exc:`HTTPError` exceptions."
msgstr ""

#: ../../../library/urllib.request.rst:230
msgid "A class to handle redirections."
msgstr ""

#: ../../../library/urllib.request.rst:235
msgid "A class to handle HTTP Cookies."
msgstr ""

#: ../../../library/urllib.request.rst:240
msgid ""
"Cause requests to go through a proxy. If *proxies* is given, it must be a "
"dictionary mapping protocol names to URLs of proxies. The default is to read "
"the list of proxies from the environment variables :envvar:"
"`<protocol>_proxy`. If no proxy environment variables are set, in a Windows "
"environment, proxy settings are obtained from the registry's Internet "
"Settings section and in a Mac OS X environment, proxy information is "
"retrieved from the OS X System Configuration Framework."
msgstr ""

#: ../../../library/urllib.request.rst:248
msgid "To disable autodetected proxy pass an empty dictionary."
msgstr ""

#: ../../../library/urllib.request.rst:253
msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings."
msgstr ""

#: ../../../library/urllib.request.rst:258
msgid ""
"Keep a database of  ``(realm, uri) -> (user, password)`` mappings. A realm "
"of ``None`` is considered a catch-all realm, which is searched if no other "
"realm fits."
msgstr ""

#: ../../../library/urllib.request.rst:265
#: ../../../library/urllib.request.rst:290
msgid ""
"This is a mixin class that helps with HTTP authentication, both to the "
"remote host and to a proxy. *password_mgr*, if given, should be something "
"that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:"
"`http-password-mgr` for information on the interface that must be supported."
msgstr ""

#: ../../../library/urllib.request.rst:274
#: ../../../library/urllib.request.rst:299
msgid ""
"Handle authentication with the remote host. *password_mgr*, if given, should "
"be something that is compatible with :class:`HTTPPasswordMgr`; refer to "
"section :ref:`http-password-mgr` for information on the interface that must "
"be supported."
msgstr ""

#: ../../../library/urllib.request.rst:282
#: ../../../library/urllib.request.rst:307
msgid ""
"Handle authentication with the proxy. *password_mgr*, if given, should be "
"something that is compatible with :class:`HTTPPasswordMgr`; refer to "
"section :ref:`http-password-mgr` for information on the interface that must "
"be supported."
msgstr ""

#: ../../../library/urllib.request.rst:315
msgid "A class to handle opening of HTTP URLs."
msgstr ""

#: ../../../library/urllib.request.rst:320
msgid ""
"A class to handle opening of HTTPS URLs.  *context* and *check_hostname* "
"have the same meaning as in :class:`http.client.HTTPSConnection`."
msgstr ""

#: ../../../library/urllib.request.rst:323
msgid "*context* and *check_hostname* were added."
msgstr ""

#: ../../../library/urllib.request.rst:329
msgid "Open local files."
msgstr ""

#: ../../../library/urllib.request.rst:334
msgid "Open FTP URLs."
msgstr ""

#: ../../../library/urllib.request.rst:339
msgid ""
"Open FTP URLs, keeping a cache of open FTP connections to minimize delays."
msgstr ""

#: ../../../library/urllib.request.rst:344
msgid "A catch-all class to handle unknown URLs."
msgstr ""

#: ../../../library/urllib.request.rst:349
#: ../../../library/urllib.request.rst:967
msgid "Process HTTP error responses."
msgstr ""

#: ../../../library/urllib.request.rst:355
msgid "Request Objects"
msgstr ""

#: ../../../library/urllib.request.rst:357
msgid ""
"The following methods describe :class:`Request`'s public interface, and so "
"all may be overridden in subclasses.  It also defines several public "
"attributes that can be used by clients to inspect the parsed request."
msgstr ""

#: ../../../library/urllib.request.rst:364
msgid "The original URL passed to the constructor."
msgstr ""

#: ../../../library/urllib.request.rst:368
msgid "The URI scheme."
msgstr ""

#: ../../../library/urllib.request.rst:372
msgid ""
"The URI authority, typically a host, but may also contain a port separated "
"by a colon."
msgstr ""

#: ../../../library/urllib.request.rst:377
msgid "The original host for the request, without port."
msgstr ""

#: ../../../library/urllib.request.rst:381
msgid ""
"The URI path.  If the :class:`Request` uses a proxy, then selector will be "
"the full url that is passed to the proxy."
msgstr ""

#: ../../../library/urllib.request.rst:386
msgid "The entity body for the request, or None if not specified."
msgstr ""

#: ../../../library/urllib.request.rst:390
msgid ""
"boolean, indicates whether the request is unverifiable as defined by RFC "
"2965."
msgstr ""

#: ../../../library/urllib.request.rst:395
msgid ""
"Set the :class:`Request` data to *data*.  This is ignored by all handlers "
"except HTTP handlers --- and there it should be a byte string, and will "
"change the request to be ``POST`` rather than ``GET``."
msgstr ""

#: ../../../library/urllib.request.rst:402
msgid ""
"Return a string indicating the HTTP request method.  This is only meaningful "
"for HTTP requests, and currently always returns ``'GET'`` or ``'POST'``."
msgstr ""

#: ../../../library/urllib.request.rst:408
msgid "Return whether the instance has a non-\\ ``None`` data."
msgstr ""

#: ../../../library/urllib.request.rst:413
msgid "Return the instance's data."
msgstr ""

#: ../../../library/urllib.request.rst:418
msgid ""
"Add another header to the request.  Headers are currently ignored by all "
"handlers except HTTP handlers, where they are added to the list of headers "
"sent to the server.  Note that there cannot be more than one header with the "
"same name, and later calls will overwrite previous calls in case the *key* "
"collides. Currently, this is no loss of HTTP functionality, since all "
"headers which have meaning when used more than once have a (header-specific) "
"way of gaining the same functionality using only one header."
msgstr ""

#: ../../../library/urllib.request.rst:429
msgid "Add a header that will not be added to a redirected request."
msgstr ""

#: ../../../library/urllib.request.rst:434
msgid ""
"Return whether the instance has the named header (checks both regular and "
"unredirected)."
msgstr ""

#: ../../../library/urllib.request.rst:440
msgid "Return the URL given in the constructor."
msgstr ""

#: ../../../library/urllib.request.rst:445
msgid "Return the type of the URL --- also known as the scheme."
msgstr ""

#: ../../../library/urllib.request.rst:450
msgid "Return the host to which a connection will be made."
msgstr ""

#: ../../../library/urllib.request.rst:455
msgid "Return the selector --- the part of the URL that is sent to the server."
msgstr ""

#: ../../../library/urllib.request.rst:460
msgid ""
"Return the value of the given header. If the header is not present, return "
"the default value."
msgstr ""

#: ../../../library/urllib.request.rst:466
msgid ""
"Return a list of tuples (header_name, header_value) of the Request headers."
msgstr ""

#: ../../../library/urllib.request.rst:471
msgid ""
"Prepare the request by connecting to a proxy server. The *host* and *type* "
"will replace those of the instance, and the instance's selector will be the "
"original URL given in the constructor."
msgstr ""

#: ../../../library/urllib.request.rst:478
msgid ""
"Return the request-host of the origin transaction, as defined by :rfc:"
"`2965`. See the documentation for the :class:`Request` constructor."
msgstr ""

#: ../../../library/urllib.request.rst:484
msgid ""
"Return whether the request is unverifiable, as defined by RFC 2965. See the "
"documentation for the :class:`Request` constructor."
msgstr ""

#: ../../../library/urllib.request.rst:491
msgid "OpenerDirector Objects"
msgstr ""

#: ../../../library/urllib.request.rst:493
msgid ":class:`OpenerDirector` instances have the following methods:"
msgstr ""

#: ../../../library/urllib.request.rst:498
msgid ""
"*handler* should be an instance of :class:`BaseHandler`.  The following "
"methods are searched, and added to the possible chains (note that HTTP "
"errors are a special case)."
msgstr ""

#: ../../../library/urllib.request.rst:502
msgid ""
":meth:`protocol_open` --- signal that the handler knows how to open "
"*protocol* URLs."
msgstr ""

#: ../../../library/urllib.request.rst:505
msgid ""
":meth:`http_error_type` --- signal that the handler knows how to handle HTTP "
"errors with HTTP error code *type*."
msgstr ""

#: ../../../library/urllib.request.rst:508
msgid ""
":meth:`protocol_error` --- signal that the handler knows how to handle "
"errors from (non-\\ ``http``) *protocol*."
msgstr ""

#: ../../../library/urllib.request.rst:511
msgid ""
":meth:`protocol_request` --- signal that the handler knows how to pre-"
"process *protocol* requests."
msgstr ""

#: ../../../library/urllib.request.rst:514
msgid ""
":meth:`protocol_response` --- signal that the handler knows how to post-"
"process *protocol* responses."
msgstr ""

#: ../../../library/urllib.request.rst:520
msgid ""
"Open the given *url* (which can be a request object or a string), optionally "
"passing the given *data*. Arguments, return values and exceptions raised are "
"the same as those of :func:`urlopen` (which simply calls the :meth:`open` "
"method on the currently installed global :class:`OpenerDirector`).  The "
"optional *timeout* parameter specifies a timeout in seconds for blocking "
"operations like the connection attempt (if not specified, the global default "
"timeout setting will be used). The timeout feature actually works only for "
"HTTP, HTTPS and FTP connections)."
msgstr ""

#: ../../../library/urllib.request.rst:532
msgid ""
"Handle an error of the given protocol.  This will call the registered error "
"handlers for the given protocol with the given arguments (which are protocol "
"specific).  The HTTP protocol is a special case which uses the HTTP response "
"code to determine the specific error handler; refer to the :meth:"
"`http_error_\\*` methods of the handler classes."
msgstr ""

#: ../../../library/urllib.request.rst:538
msgid ""
"Return values and exceptions raised are the same as those of :func:`urlopen`."
msgstr ""

#: ../../../library/urllib.request.rst:540
msgid "OpenerDirector objects open URLs in three stages:"
msgstr ""

#: ../../../library/urllib.request.rst:542
msgid ""
"The order in which these methods are called within each stage is determined "
"by sorting the handler instances."
msgstr ""

#: ../../../library/urllib.request.rst:545
msgid ""
"Every handler with a method named like :meth:`protocol_request` has that "
"method called to pre-process the request."
msgstr ""

#: ../../../library/urllib.request.rst:548
msgid ""
"Handlers with a method named like :meth:`protocol_open` are called to handle "
"the request. This stage ends when a handler either returns a non-\\ :const:"
"`None` value (ie. a response), or raises an exception (usually :exc:"
"`URLError`). Exceptions are allowed to propagate."
msgstr ""

#: ../../../library/urllib.request.rst:553
msgid ""
"In fact, the above algorithm is first tried for methods named :meth:"
"`default_open`.  If all such methods return :const:`None`, the algorithm is "
"repeated for methods named like :meth:`protocol_open`.  If all such methods "
"return :const:`None`, the algorithm is repeated for methods named :meth:"
"`unknown_open`."
msgstr ""

#: ../../../library/urllib.request.rst:559
msgid ""
"Note that the implementation of these methods may involve calls of the "
"parent :class:`OpenerDirector` instance's :meth:`~OpenerDirector.open` and :"
"meth:`~OpenerDirector.error` methods."
msgstr ""

#: ../../../library/urllib.request.rst:563
msgid ""
"Every handler with a method named like :meth:`protocol_response` has that "
"method called to post-process the response."
msgstr ""

#: ../../../library/urllib.request.rst:570
msgid "BaseHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:572
msgid ""
":class:`BaseHandler` objects provide a couple of methods that are directly "
"useful, and others that are meant to be used by derived classes.  These are "
"intended for direct use:"
msgstr ""

#: ../../../library/urllib.request.rst:579
msgid "Add a director as parent."
msgstr ""

#: ../../../library/urllib.request.rst:584
msgid "Remove any parents."
msgstr ""

#: ../../../library/urllib.request.rst:586
msgid ""
"The following attribute and methods should only be used by classes derived "
"from :class:`BaseHandler`."
msgstr ""

#: ../../../library/urllib.request.rst:591
msgid ""
"The convention has been adopted that subclasses defining :meth:"
"`protocol_request` or :meth:`protocol_response` methods are named :class:"
"`\\*Processor`; all others are named :class:`\\*Handler`."
msgstr ""

#: ../../../library/urllib.request.rst:598
msgid ""
"A valid :class:`OpenerDirector`, which can be used to open using a different "
"protocol, or handle errors."
msgstr ""

#: ../../../library/urllib.request.rst:604
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to catch all URLs."
msgstr ""

#: ../../../library/urllib.request.rst:607
msgid ""
"This method, if implemented, will be called by the parent :class:"
"`OpenerDirector`.  It should return a file-like object as described in the "
"return value of the :meth:`open` of :class:`OpenerDirector`, or ``None``. It "
"should raise :exc:`URLError`, unless a truly exceptional thing happens (for "
"example, :exc:`MemoryError` should not be mapped to :exc:`URLError`)."
msgstr ""

#: ../../../library/urllib.request.rst:613
msgid "This method will be called before any protocol-specific open method."
msgstr ""

#: ../../../library/urllib.request.rst:619
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to handle URLs with the given protocol."
msgstr ""

#: ../../../library/urllib.request.rst:622
msgid ""
"This method, if defined, will be called by the parent :class:"
"`OpenerDirector`. Return values should be the same as for  :meth:"
"`default_open`."
msgstr ""

#: ../../../library/urllib.request.rst:628
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to catch all URLs with no specific registered handler "
"to open it."
msgstr ""

#: ../../../library/urllib.request.rst:632
msgid ""
"This method, if implemented, will be called by the :attr:`parent` :class:"
"`OpenerDirector`.  Return values should be the same as for :meth:"
"`default_open`."
msgstr ""

#: ../../../library/urllib.request.rst:639
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"override it if they intend to provide a catch-all for otherwise unhandled "
"HTTP errors.  It will be called automatically by the  :class:"
"`OpenerDirector` getting the error, and should not normally be called in "
"other circumstances."
msgstr ""

#: ../../../library/urllib.request.rst:644
msgid ""
"*req* will be a :class:`Request` object, *fp* will be a file-like object "
"with the HTTP error body, *code* will be the three-digit code of the error, "
"*msg* will be the user-visible explanation of the code and *hdrs* will be a "
"mapping object with the headers of the error."
msgstr ""

#: ../../../library/urllib.request.rst:649
msgid ""
"Return values and exceptions raised should be the same as those of :func:"
"`urlopen`."
msgstr ""

#: ../../../library/urllib.request.rst:655
msgid ""
"*nnn* should be a three-digit HTTP error code.  This method is also not "
"defined in :class:`BaseHandler`, but will be called, if it exists, on an "
"instance of a subclass, when an HTTP error with code *nnn* occurs."
msgstr ""

#: ../../../library/urllib.request.rst:659
msgid "Subclasses should override this method to handle specific HTTP errors."
msgstr ""

#: ../../../library/urllib.request.rst:661
msgid ""
"Arguments, return values and exceptions raised should be the same as for :"
"meth:`http_error_default`."
msgstr ""

#: ../../../library/urllib.request.rst:668
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to pre-process requests of the given protocol."
msgstr ""

#: ../../../library/urllib.request.rst:671
msgid ""
"This method, if defined, will be called by the parent :class:"
"`OpenerDirector`. *req* will be a :class:`Request` object. The return value "
"should be a :class:`Request` object."
msgstr ""

#: ../../../library/urllib.request.rst:679
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to post-process responses of the given protocol."
msgstr ""

#: ../../../library/urllib.request.rst:682
msgid ""
"This method, if defined, will be called by the parent :class:"
"`OpenerDirector`. *req* will be a :class:`Request` object. *response* will "
"be an object implementing the same interface as the return value of :func:"
"`urlopen`.  The return value should implement the same interface as the "
"return value of :func:`urlopen`."
msgstr ""

#: ../../../library/urllib.request.rst:692
msgid "HTTPRedirectHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:696
msgid ""
"Some HTTP redirections require action from this module's client code.  If "
"this is the case, :exc:`HTTPError` is raised.  See :rfc:`2616` for details "
"of the precise meanings of the various redirection codes."
msgstr ""

#: ../../../library/urllib.request.rst:700
msgid ""
"An :class:`HTTPError` exception raised as a security consideration if the "
"HTTPRedirectHandler is presented with a redirected url which is not an HTTP, "
"HTTPS or FTP url."
msgstr ""

#: ../../../library/urllib.request.rst:707
msgid ""
"Return a :class:`Request` or ``None`` in response to a redirect. This is "
"called by the default implementations of the :meth:`http_error_30\\*` "
"methods when a redirection is received from the server.  If a redirection "
"should take place, return a new :class:`Request` to allow :meth:"
"`http_error_30\\*` to perform the redirect to *newurl*.  Otherwise, raise :"
"exc:`HTTPError` if no other handler should try to handle this URL, or return "
"``None`` if you can't but another handler might."
msgstr ""

#: ../../../library/urllib.request.rst:717
msgid ""
"The default implementation of this method does not strictly follow :rfc:"
"`2616`, which says that 301 and 302 responses to ``POST`` requests must not "
"be automatically redirected without confirmation by the user.  In reality, "
"browsers do allow automatic redirection of these responses, changing the "
"POST to a ``GET``, and the default implementation reproduces this behavior."
msgstr ""

#: ../../../library/urllib.request.rst:726
msgid ""
"Redirect to the ``Location:`` or ``URI:`` URL.  This method is called by the "
"parent :class:`OpenerDirector` when getting an HTTP 'moved permanently' "
"response."
msgstr ""

#: ../../../library/urllib.request.rst:732
msgid ""
"The same as :meth:`http_error_301`, but called for the 'found' response."
msgstr ""

#: ../../../library/urllib.request.rst:737
msgid ""
"The same as :meth:`http_error_301`, but called for the 'see other' response."
msgstr ""

#: ../../../library/urllib.request.rst:742
msgid ""
"The same as :meth:`http_error_301`, but called for the 'temporary redirect' "
"response."
msgstr ""

#: ../../../library/urllib.request.rst:749
msgid "HTTPCookieProcessor Objects"
msgstr ""

#: ../../../library/urllib.request.rst:751
msgid ":class:`HTTPCookieProcessor` instances have one attribute:"
msgstr ""

#: ../../../library/urllib.request.rst:755
msgid "The :class:`http.cookiejar.CookieJar` in which cookies are stored."
msgstr ""

#: ../../../library/urllib.request.rst:761
msgid "ProxyHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:767
msgid ""
"The :class:`ProxyHandler` will have a method :meth:`protocol_open` for every "
"*protocol* which has a proxy in the *proxies* dictionary given in the "
"constructor.  The method will modify requests to go through the proxy, by "
"calling ``request.set_proxy()``, and call the next handler in the chain to "
"actually execute the protocol."
msgstr ""

#: ../../../library/urllib.request.rst:777
msgid "HTTPPasswordMgr Objects"
msgstr ""

#: ../../../library/urllib.request.rst:779
msgid ""
"These methods are available on :class:`HTTPPasswordMgr` and :class:"
"`HTTPPasswordMgrWithDefaultRealm` objects."
msgstr ""

#: ../../../library/urllib.request.rst:785
msgid ""
"*uri* can be either a single URI, or a sequence of URIs. *realm*, *user* and "
"*passwd* must be strings. This causes ``(user, passwd)`` to be used as "
"authentication tokens when authentication for *realm* and a super-URI of any "
"of the given URIs is given."
msgstr ""

#: ../../../library/urllib.request.rst:793
msgid ""
"Get user/password for given realm and URI, if any.  This method will return "
"``(None, None)`` if there is no matching user/password."
msgstr ""

#: ../../../library/urllib.request.rst:796
msgid ""
"For :class:`HTTPPasswordMgrWithDefaultRealm` objects, the realm ``None`` "
"will be searched if the given *realm* has no matching user/password."
msgstr ""

#: ../../../library/urllib.request.rst:803
msgid "AbstractBasicAuthHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:808
msgid ""
"Handle an authentication request by getting a user/password pair, and re-"
"trying the request.  *authreq* should be the name of the header where the "
"information about the realm is included in the request, *host* specifies the "
"URL and path to authenticate for, *req* should be the (failed) :class:"
"`Request` object, and *headers* should be the error headers."
msgstr ""

#: ../../../library/urllib.request.rst:814
msgid ""
"*host* is either an authority (e.g. ``\"python.org\"``) or a URL containing "
"an authority component (e.g. ``\"http://python.org/\"``). In either case, "
"the authority must not contain a userinfo component (so, ``\"python.org\"`` "
"and ``\"python.org:80\"`` are fine, ``\"joe:password@python.org\"`` is not)."
msgstr ""

#: ../../../library/urllib.request.rst:823
msgid "HTTPBasicAuthHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:828
#: ../../../library/urllib.request.rst:839
#: ../../../library/urllib.request.rst:864
#: ../../../library/urllib.request.rst:875
msgid "Retry the request with authentication information, if available."
msgstr ""

#: ../../../library/urllib.request.rst:834
msgid "ProxyBasicAuthHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:845
msgid "AbstractDigestAuthHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:850
msgid ""
"*authreq* should be the name of the header where the information about the "
"realm is included in the request, *host* should be the host to authenticate "
"to, *req* should be the (failed) :class:`Request` object, and *headers* "
"should be the error headers."
msgstr ""

#: ../../../library/urllib.request.rst:859
msgid "HTTPDigestAuthHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:870
msgid "ProxyDigestAuthHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:881
msgid "HTTPHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:886
msgid ""
"Send an HTTP request, which can be either GET or POST, depending on ``req."
"has_data()``."
msgstr ""

#: ../../../library/urllib.request.rst:893
msgid "HTTPSHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:898
msgid ""
"Send an HTTPS request, which can be either GET or POST, depending on ``req."
"has_data()``."
msgstr ""

#: ../../../library/urllib.request.rst:905
msgid "FileHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:910
msgid ""
"Open the file locally, if there is no host name, or the host name is "
"``'localhost'``."
msgstr ""

#: ../../../library/urllib.request.rst:913
msgid ""
"This method is applicable only for local hostnames.  When a remote hostname "
"is given, an :exc:`URLError` is raised."
msgstr ""

#: ../../../library/urllib.request.rst:921
msgid "FTPHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:926
msgid ""
"Open the FTP file indicated by *req*. The login is always done with empty "
"username and password."
msgstr ""

#: ../../../library/urllib.request.rst:933
msgid "CacheFTPHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:935
msgid ""
":class:`CacheFTPHandler` objects are :class:`FTPHandler` objects with the "
"following additional methods:"
msgstr ""

#: ../../../library/urllib.request.rst:941
msgid "Set timeout of connections to *t* seconds."
msgstr ""

#: ../../../library/urllib.request.rst:946
msgid "Set maximum number of cached connections to *m*."
msgstr ""

#: ../../../library/urllib.request.rst:952
msgid "UnknownHandler Objects"
msgstr ""

#: ../../../library/urllib.request.rst:957
msgid "Raise a :exc:`URLError` exception."
msgstr ""

#: ../../../library/urllib.request.rst:963
msgid "HTTPErrorProcessor Objects"
msgstr ""

#: ../../../library/urllib.request.rst:969
msgid "For 200 error codes, the response object is returned immediately."
msgstr ""

#: ../../../library/urllib.request.rst:971
msgid ""
"For non-200 error codes, this simply passes the job on to the :meth:"
"`protocol_error_code` handler methods, via :meth:`OpenerDirector.error`. "
"Eventually, :class:`HTTPDefaultErrorHandler` will raise an :exc:`HTTPError` "
"if no other handler handles the error."
msgstr ""

#: ../../../library/urllib.request.rst:979
msgid "Process HTTPS error responses."
msgstr ""

#: ../../../library/urllib.request.rst:981
msgid "The behavior is same as :meth:`http_response`."
msgstr ""

#: ../../../library/urllib.request.rst:987
msgid "Examples"
msgstr ""

#: ../../../library/urllib.request.rst:989
msgid ""
"This example gets the python.org main page and displays the first 300 bytes "
"of it. ::"
msgstr ""

#: ../../../library/urllib.request.rst:992
msgid ""
">>> import urllib.request\n"
">>> f = urllib.request.urlopen('http://www.python.org/')\n"
">>> print(f.read(300))\n"
"b'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\\n\\n\\n<html\n"
"xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" "
"lang=\"en\">\\n\\n<head>\\n\n"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /"
">\\n\n"
"<title>Python Programming '"
msgstr ""

#: ../../../library/urllib.request.rst:1001
msgid ""
"Note that urlopen returns a bytes object.  This is because there is no way "
"for urlopen to automatically determine the encoding of the byte stream it "
"receives from the http server. In general, a program will decode the "
"returned bytes object to string once it determines or guesses the "
"appropriate encoding."
msgstr ""

#: ../../../library/urllib.request.rst:1007
msgid ""
"The following W3C document, http://www.w3.org/International/O-charset  , "
"lists the various ways in which a (X)HTML or a XML document could have "
"specified its encoding information."
msgstr ""

#: ../../../library/urllib.request.rst:1011
msgid ""
"As the python.org website uses *utf-8* encoding as specified in it's meta "
"tag, we will use the same for decoding the bytes object. ::"
msgstr ""

#: ../../../library/urllib.request.rst:1014
msgid ""
">>> with urllib.request.urlopen('http://www.python.org/') as f:\n"
"...     print(f.read(100).decode('utf-8'))\n"
"...\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtm"
msgstr ""

#: ../../../library/urllib.request.rst:1020
msgid ""
"It is also possible to achieve the same result without using the :term:"
"`context manager` approach. ::"
msgstr ""

#: ../../../library/urllib.request.rst:1023
msgid ""
">>> import urllib.request\n"
">>> f = urllib.request.urlopen('http://www.python.org/')\n"
">>> print(f.read(100).decode('utf-8'))\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtm"
msgstr ""

#: ../../../library/urllib.request.rst:1029
msgid ""
"In the following example, we are sending a data-stream to the stdin of a CGI "
"and reading the data it returns to us. Note that this example will only work "
"when the Python installation supports SSL. ::"
msgstr ""

#: ../../../library/urllib.request.rst:1033
msgid ""
">>> import urllib.request\n"
">>> req = urllib.request.Request(url='https://localhost/cgi-bin/test.cgi',\n"
"...                       data=b'This data is passed to stdin of the CGI')\n"
">>> f = urllib.request.urlopen(req)\n"
">>> print(f.read().decode('utf-8'))\n"
"Got Data: \"This data is passed to stdin of the CGI\""
msgstr ""

#: ../../../library/urllib.request.rst:1040
msgid "The code for the sample CGI used in the above example is::"
msgstr ""

#: ../../../library/urllib.request.rst:1042
msgid ""
"#!/usr/bin/env python\n"
"import sys\n"
"data = sys.stdin.read()\n"
"print('Content-type: text-plain\\n\\nGot Data: \"%s\"' % data)"
msgstr ""

#: ../../../library/urllib.request.rst:1047
msgid "Use of Basic HTTP Authentication::"
msgstr ""

#: ../../../library/urllib.request.rst:1049
msgid ""
"import urllib.request\n"
"# Create an OpenerDirector with support for Basic HTTP Authentication...\n"
"auth_handler = urllib.request.HTTPBasicAuthHandler()\n"
"auth_handler.add_password(realm='PDQ Application',\n"
"                          uri='https://mahler:8092/site-updates.py',\n"
"                          user='klem',\n"
"                          passwd='kadidd!ehopper')\n"
"opener = urllib.request.build_opener(auth_handler)\n"
"# ...and install it globally so it can be used with urlopen.\n"
"urllib.request.install_opener(opener)\n"
"urllib.request.urlopen('http://www.example.com/login.html')"
msgstr ""

#: ../../../library/urllib.request.rst:1061
msgid ""
":func:`build_opener` provides many handlers by default, including a :class:"
"`ProxyHandler`.  By default, :class:`ProxyHandler` uses the environment "
"variables named ``<scheme>_proxy``, where ``<scheme>`` is the URL scheme "
"involved.  For example, the :envvar:`http_proxy` environment variable is "
"read to obtain the HTTP proxy's URL."
msgstr ""

#: ../../../library/urllib.request.rst:1067
msgid ""
"This example replaces the default :class:`ProxyHandler` with one that uses "
"programmatically-supplied proxy URLs, and adds proxy authorization support "
"with :class:`ProxyBasicAuthHandler`. ::"
msgstr ""

#: ../../../library/urllib.request.rst:1071
msgid ""
"proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example."
"com:3128/'})\n"
"proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()\n"
"proxy_auth_handler.add_password('realm', 'host', 'username', 'password')\n"
"\n"
"opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\n"
"# This time, rather than install the OpenerDirector, we use it directly:\n"
"opener.open('http://www.example.com/login.html')"
msgstr ""

#: ../../../library/urllib.request.rst:1079
msgid "Adding HTTP headers:"
msgstr ""

#: ../../../library/urllib.request.rst:1081
msgid "Use the *headers* argument to the :class:`Request` constructor, or::"
msgstr ""

#: ../../../library/urllib.request.rst:1083
msgid ""
"import urllib.request\n"
"req = urllib.request.Request('http://www.example.com/')\n"
"req.add_header('Referer', 'http://www.python.org/')\n"
"r = urllib.request.urlopen(req)"
msgstr ""

#: ../../../library/urllib.request.rst:1088
msgid ""
":class:`OpenerDirector` automatically adds a :mailheader:`User-Agent` header "
"to every :class:`Request`.  To change this::"
msgstr ""

#: ../../../library/urllib.request.rst:1091
msgid ""
"import urllib.request\n"
"opener = urllib.request.build_opener()\n"
"opener.addheaders = [('User-agent', 'Mozilla/5.0')]\n"
"opener.open('http://www.example.com/')"
msgstr ""

#: ../../../library/urllib.request.rst:1096
msgid ""
"Also, remember that a few standard headers (:mailheader:`Content-Length`, :"
"mailheader:`Content-Type` without charset parameter and :mailheader:`Host`) "
"are added when the :class:`Request` is passed to :func:`urlopen` (or :meth:"
"`OpenerDirector.open`)."
msgstr ""

#: ../../../library/urllib.request.rst:1103
msgid ""
"Here is an example session that uses the ``GET`` method to retrieve a URL "
"containing parameters::"
msgstr ""

#: ../../../library/urllib.request.rst:1106
msgid ""
">>> import urllib.request\n"
">>> import urllib.parse\n"
">>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})\n"
">>> f = urllib.request.urlopen(\"http://www.musi-cal.com/cgi-bin/query?%s\" "
"% params)\n"
">>> print(f.read().decode('utf-8'))"
msgstr ""

#: ../../../library/urllib.request.rst:1112
msgid ""
"The following example uses the ``POST`` method instead. Note that params "
"output from urlencode is encoded to bytes before it is sent to urlopen as "
"data::"
msgstr ""

#: ../../../library/urllib.request.rst:1115
msgid ""
">>> import urllib.request\n"
">>> import urllib.parse\n"
">>> data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})\n"
">>> data = data.encode('utf-8')\n"
">>> request = urllib.request.Request(\"http://requestb.in/xrbl82xr\")\n"
">>> # adding charset parameter to the Content-Type header.\n"
">>> request.add_header(\"Content-Type\",\"application/x-www-form-urlencoded;"
"charset=utf-8\")\n"
">>> f = urllib.request.urlopen(request, data)\n"
">>> print(f.read().decode('utf-8'))"
msgstr ""

#: ../../../library/urllib.request.rst:1125
msgid ""
"The following example uses an explicitly specified HTTP proxy, overriding "
"environment settings::"
msgstr ""

#: ../../../library/urllib.request.rst:1128
msgid ""
">>> import urllib.request\n"
">>> proxies = {'http': 'http://proxy.example.com:8080/'}\n"
">>> opener = urllib.request.FancyURLopener(proxies)\n"
">>> f = opener.open(\"http://www.python.org\")\n"
">>> f.read().decode('utf-8')"
msgstr ""

#: ../../../library/urllib.request.rst:1134
msgid ""
"The following example uses no proxies at all, overriding environment "
"settings::"
msgstr ""

#: ../../../library/urllib.request.rst:1136
msgid ""
">>> import urllib.request\n"
">>> opener = urllib.request.FancyURLopener({})\n"
">>> f = opener.open(\"http://www.python.org/\")\n"
">>> f.read().decode('utf-8')"
msgstr ""

#: ../../../library/urllib.request.rst:1143
msgid "Legacy interface"
msgstr ""

#: ../../../library/urllib.request.rst:1145
msgid ""
"The following functions and classes are ported from the Python 2 module "
"``urllib`` (as opposed to ``urllib2``).  They might become deprecated at "
"some point in the future."
msgstr ""

#: ../../../library/urllib.request.rst:1152
msgid ""
"Copy a network object denoted by a URL to a local file, if necessary. If the "
"URL points to a local file, or a valid cached copy of the object exists, the "
"object is not copied.  Return a tuple ``(filename, headers)`` where "
"*filename* is the local file name under which the object can be found, and "
"*headers* is whatever the :meth:`info` method of the object returned by :"
"func:`urlopen` returned (for a remote object, possibly cached). Exceptions "
"are the same as for :func:`urlopen`."
msgstr ""

#: ../../../library/urllib.request.rst:1160
msgid ""
"The second argument, if present, specifies the file location to copy to (if "
"absent, the location will be a tempfile with a generated name). The third "
"argument, if present, is a hook function that will be called once on "
"establishment of the network connection and once after each block read "
"thereafter.  The hook will be passed three arguments; a count of blocks "
"transferred so far, a block size in bytes, and the total size of the file.  "
"The third argument may be ``-1`` on older FTP servers which do not return a "
"file size in response to a retrieval request."
msgstr ""

#: ../../../library/urllib.request.rst:1169
msgid ""
"If the *url* uses the :file:`http:` scheme identifier, the optional *data* "
"argument may be given to specify a ``POST`` request (normally the request "
"type is ``GET``).  The *data* argument must be a bytes object in standard :"
"mimetype:`application/x-www-form-urlencoded` format; see the :func:"
"`urlencode` function below."
msgstr ""

#: ../../../library/urllib.request.rst:1175
msgid ""
":func:`urlretrieve` will raise :exc:`ContentTooShortError` when it detects "
"that the amount of data available  was less than the expected amount (which "
"is the size reported by a  *Content-Length* header). This can occur, for "
"example, when the  download is interrupted."
msgstr ""

#: ../../../library/urllib.request.rst:1180
msgid ""
"The *Content-Length* is treated as a lower bound: if there's more data  to "
"read, :func:`urlretrieve` reads more data, but if less data is available,  "
"it raises the exception."
msgstr ""

#: ../../../library/urllib.request.rst:1184
msgid ""
"You can still retrieve the downloaded data in this case, it is stored  in "
"the :attr:`content` attribute of the exception instance."
msgstr ""

#: ../../../library/urllib.request.rst:1187
msgid ""
"If no *Content-Length* header was supplied, :func:`urlretrieve` can not "
"check the size of the data it has downloaded, and just returns it.  In this "
"case you just have to assume that the download was successful."
msgstr ""

#: ../../../library/urllib.request.rst:1193
msgid ""
"Clear the cache that may have been built up by previous calls to :func:"
"`urlretrieve`."
msgstr ""

#: ../../../library/urllib.request.rst:1198
msgid ""
"Base class for opening and reading URLs.  Unless you need to support opening "
"objects using schemes other than :file:`http:`, :file:`ftp:`, or :file:`file:"
"`, you probably want to use :class:`FancyURLopener`."
msgstr ""

#: ../../../library/urllib.request.rst:1202
msgid ""
"By default, the :class:`URLopener` class sends a :mailheader:`User-Agent` "
"header of ``urllib/VVV``, where *VVV* is the :mod:`urllib` version number. "
"Applications can define their own :mailheader:`User-Agent` header by "
"subclassing :class:`URLopener` or :class:`FancyURLopener` and setting the "
"class attribute :attr:`version` to an appropriate string value in the "
"subclass definition."
msgstr ""

#: ../../../library/urllib.request.rst:1208
msgid ""
"The optional *proxies* parameter should be a dictionary mapping scheme names "
"to proxy URLs, where an empty dictionary turns proxies off completely.  Its "
"default value is ``None``, in which case environmental proxy settings will "
"be used if present, as discussed in the definition of :func:`urlopen`, above."
msgstr ""

#: ../../../library/urllib.request.rst:1213
msgid ""
"Additional keyword parameters, collected in *x509*, may be used for "
"authentication of the client when using the :file:`https:` scheme.  The "
"keywords *key_file* and *cert_file* are supported to provide an  SSL key and "
"certificate; both are needed to support client authentication."
msgstr ""

#: ../../../library/urllib.request.rst:1218
msgid ""
":class:`URLopener` objects will raise an :exc:`IOError` exception if the "
"server returns an error code."
msgstr ""

#: ../../../library/urllib.request.rst:1223
msgid ""
"Open *fullurl* using the appropriate protocol.  This method sets up cache "
"and proxy information, then calls the appropriate open method with its input "
"arguments.  If the scheme is not recognized, :meth:`open_unknown` is called. "
"The *data* argument has the same meaning as the *data* argument of :func:"
"`urlopen`."
msgstr ""

#: ../../../library/urllib.request.rst:1232
msgid "Overridable interface to open unknown URL types."
msgstr ""

#: ../../../library/urllib.request.rst:1237
msgid ""
"Retrieves the contents of *url* and places it in *filename*.  The return "
"value is a tuple consisting of a local filename and either a :class:`email."
"message.Message` object containing the response headers (for remote URLs) or "
"``None`` (for local URLs).  The caller must then open and read the contents "
"of *filename*.  If *filename* is not given and the URL refers to a local "
"file, the input filename is returned.  If the URL is non-local and "
"*filename* is not given, the filename is the output of :func:`tempfile."
"mktemp` with a suffix that matches the suffix of the last path component of "
"the input URL.  If *reporthook* is given, it must be a function accepting "
"three numeric parameters.  It will be called after each chunk of data is "
"read from the network.  *reporthook* is ignored for local URLs."
msgstr ""

#: ../../../library/urllib.request.rst:1249
msgid ""
"If the *url* uses the :file:`http:` scheme identifier, the optional *data* "
"argument may be given to specify a ``POST`` request (normally the request "
"type is ``GET``).  The *data* argument must in standard :mimetype:"
"`application/x-www-form-urlencoded` format; see the :func:`urlencode` "
"function below."
msgstr ""

#: ../../../library/urllib.request.rst:1258
msgid ""
"Variable that specifies the user agent of the opener object.  To get :mod:"
"`urllib` to tell servers that it is a particular user agent, set this in a "
"subclass as a class variable or in the constructor before calling the base "
"constructor."
msgstr ""

#: ../../../library/urllib.request.rst:1266
msgid ""
":class:`FancyURLopener` subclasses :class:`URLopener` providing default "
"handling for the following HTTP response codes: 301, 302, 303, 307 and 401.  "
"For the 30x response codes listed above, the :mailheader:`Location` header "
"is used to fetch the actual URL.  For 401 response codes (authentication "
"required), basic HTTP authentication is performed.  For the 30x response "
"codes, recursion is bounded by the value of the *maxtries* attribute, which "
"defaults to 10."
msgstr ""

#: ../../../library/urllib.request.rst:1273
msgid ""
"For all other response codes, the method :meth:`http_error_default` is "
"called which you can override in subclasses to handle the error "
"appropriately."
msgstr ""

#: ../../../library/urllib.request.rst:1278
msgid ""
"According to the letter of :rfc:`2616`, 301 and 302 responses to POST "
"requests must not be automatically redirected without confirmation by the "
"user.  In reality, browsers do allow automatic redirection of these "
"responses, changing the POST to a GET, and :mod:`urllib` reproduces this "
"behaviour."
msgstr ""

#: ../../../library/urllib.request.rst:1283
msgid ""
"The parameters to the constructor are the same as those for :class:"
"`URLopener`."
msgstr ""

#: ../../../library/urllib.request.rst:1287
msgid ""
"When performing basic authentication, a :class:`FancyURLopener` instance "
"calls its :meth:`prompt_user_passwd` method.  The default implementation "
"asks the users for the required information on the controlling terminal.  A "
"subclass may override this method to support more appropriate behavior if "
"needed."
msgstr ""

#: ../../../library/urllib.request.rst:1292
msgid ""
"The :class:`FancyURLopener` class offers one additional method that should "
"be overloaded to provide the appropriate behavior:"
msgstr ""

#: ../../../library/urllib.request.rst:1297
msgid ""
"Return information needed to authenticate the user at the given host in the "
"specified security realm.  The return value should be a tuple, ``(user, "
"password)``, which can be used for basic authentication."
msgstr ""

#: ../../../library/urllib.request.rst:1301
msgid ""
"The implementation prompts for this information on the terminal; an "
"application should override this method to use an appropriate interaction "
"model in the local environment."
msgstr ""

#: ../../../library/urllib.request.rst:1307
msgid ":mod:`urllib.request` Restrictions"
msgstr ""

#: ../../../library/urllib.request.rst:1313
msgid ""
"Currently, only the following protocols are supported: HTTP (versions 0.9 "
"and 1.0), FTP, and local files."
msgstr ""

#: ../../../library/urllib.request.rst:1316
msgid ""
"The caching feature of :func:`urlretrieve` has been disabled until someone "
"finds the time to hack proper processing of Expiration time headers."
msgstr ""

#: ../../../library/urllib.request.rst:1319
msgid ""
"There should be a function to query whether a particular URL is in the cache."
msgstr ""

#: ../../../library/urllib.request.rst:1321
msgid ""
"For backward compatibility, if a URL appears to point to a local file but "
"the file can't be opened, the URL is re-interpreted using the FTP protocol.  "
"This can sometimes cause confusing error messages."
msgstr ""

#: ../../../library/urllib.request.rst:1325
msgid ""
"The :func:`urlopen` and :func:`urlretrieve` functions can cause arbitrarily "
"long delays while waiting for a network connection to be set up.  This means "
"that it is difficult to build an interactive Web client using these "
"functions without using threads."
msgstr ""

#: ../../../library/urllib.request.rst:1334
msgid ""
"The data returned by :func:`urlopen` or :func:`urlretrieve` is the raw data "
"returned by the server.  This may be binary data (such as an image), plain "
"text or (for example) HTML.  The HTTP protocol provides type information in "
"the reply header, which can be inspected by looking at the :mailheader:"
"`Content-Type` header.  If the returned data is HTML, you can use the "
"module :mod:`html.parser` to parse it."
msgstr ""

#: ../../../library/urllib.request.rst:1343
msgid ""
"The code handling the FTP protocol cannot differentiate between a file and a "
"directory.  This can lead to unexpected behavior when attempting to read a "
"URL that points to a file that is not accessible.  If the URL ends in a ``/"
"``, it is assumed to refer to a directory and will be handled accordingly.  "
"But if an attempt to read a file leads to a 550 error (meaning the URL "
"cannot be found or is not accessible, often for permission reasons), then "
"the path is treated as a directory in order to handle the case when a "
"directory is specified by a URL but the trailing ``/`` has been left off.  "
"This can cause misleading results when you try to fetch a file whose read "
"permissions make it inaccessible; the FTP code will try to read it, fail "
"with a 550 error, and then perform a directory listing for the unreadable "
"file. If fine-grained control is needed, consider using the :mod:`ftplib` "
"module, subclassing :class:`FancyURLopener`, or changing *_urlopener* to "
"meet your needs."
msgstr ""

#: ../../../library/urllib.request.rst:1360
msgid ":mod:`urllib.response` --- Response classes used by urllib"
msgstr ""

#: ../../../library/urllib.request.rst:1365
msgid ""
"The :mod:`urllib.response` module defines functions and classes which define "
"a minimal file like interface, including ``read()`` and ``readline()``. The "
"typical response object is an addinfourl instance, which defines an "
"``info()`` method and that returns headers and a ``geturl()`` method that "
"returns the url. Functions defined by this module are used internally by "
"the :mod:`urllib.request` module."
msgstr ""

#: ../../../library/urllib.request.rst:1309
#: ../../../library/urllib.request.rst:1330
msgid "HTTP"
msgstr ""

#: ../../../library/urllib.request.rst:1309
#: ../../../library/urllib.request.rst:1330
msgid "protocol"
msgstr ""

#: ../../../library/urllib.request.rst:1309
#: ../../../library/urllib.request.rst:1341
msgid "FTP"
msgstr ""

#: ../../../library/urllib.request.rst:1330
msgid "HTML"
msgstr ""
