# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/xml.etree.elementtree.rst:2
msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:8
msgid "**Source code:** :source:`Lib/xml/etree/ElementTree.py`"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:12
msgid ""
"The :class:`Element` type is a flexible container object, designed to store "
"hierarchical data structures in memory.  The type can be described as a "
"cross between a list and a dictionary."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:19
msgid ""
"The :mod:`xml.etree.ElementTree` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:24
msgid "Each element has a number of properties associated with it:"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:26
msgid ""
"a tag which is a string identifying what kind of data this element "
"represents (the element type, in other words)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:29
msgid "a number of attributes, stored in a Python dictionary."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:31
msgid "a text string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:33
msgid "an optional tail string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:35
msgid "a number of child elements, stored in a Python sequence"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:37
msgid ""
"To create an element instance, use the :class:`Element` constructor or the :"
"func:`SubElement` factory function."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:40
msgid ""
"The :class:`ElementTree` class can be used to wrap an element structure, and "
"convert it from and to XML."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:43
msgid ""
"A C implementation of this API is available as :mod:`xml.etree.cElementTree`."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:45
msgid ""
"See http://effbot.org/zone/element-index.htm for tutorials and links to "
"other docs.  Fredrik Lundh's page is also the location of the development "
"version of the xml.etree.ElementTree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:49
msgid ""
"The ElementTree API is updated to 1.3.  For more information, see "
"`Introducing ElementTree 1.3 <http://effbot.org/zone/elementtree-13-intro."
"htm>`_."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:58
msgid "Functions"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:63
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment by the standard serializer.  The "
"comment string can be either a bytestring or a Unicode string.  *text* is a "
"string containing the comment string.  Returns an element instance "
"representing a comment."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:72
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:75
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:78
msgid "*elem* is an element tree or an individual element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:83
msgid ""
"Parses an XML section from a string constant.  Same as :func:`XML`.  *text* "
"is a string containing XML data.  Returns an :class:`Element` instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:89
msgid ""
"Parses an XML document from a sequence of string fragments.  *sequence* is a "
"list or other sequence containing XML data fragments.  *parser* is an "
"optional parser instance.  If not given, the standard :class:`XMLParser` "
"parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:99
msgid ""
"Checks if an object appears to be a valid element object.  *element* is an "
"element instance.  Returns a true value if this is an element object."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:105
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's "
"going on to the user.  *source* is a filename or :term:`file object` "
"containing XML data.  *events* is a list of events to report back.  The "
"supported events are the strings ``\"start\"``, ``\"end\"``, ``\"start-"
"ns\"`` and ``\"end-ns\"`` (the \"ns\" events are used to get detailed "
"namespace information).  If *events* is omitted, only ``\"end\"`` events are "
"reported. *parser* is an optional parser instance.  If not given, the "
"standard :class:`XMLParser` parser is used.  *parser* is not supported by "
"``cElementTree``.  Returns an :term:`iterator` providing ``(event, elem)`` "
"pairs."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:118
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined, "
"but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:124
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:129
msgid ""
"Parses an XML section into an element tree.  *source* is a filename or file "
"object containing XML data.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  Returns an :"
"class:`ElementTree` instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:137
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction.  *target* is a string "
"containing the PI target.  *text* is a string containing the PI contents, if "
"given.  Returns an element instance, representing a processing instruction."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:145
msgid ""
"Registers a namespace prefix.  The registry is global, and any existing "
"mapping for either the given prefix or the namespace URI will be removed. "
"*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and "
"attributes in this namespace will be serialized with the given prefix, if at "
"all possible."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:156
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:159
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is "
"the subelement name.  *attrib* is an optional dictionary, containing element "
"attributes.  *extra* contains additional attributes, given as keyword "
"arguments.  Returns an element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:168
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to "
"generate a Unicode string.  *method* is either ``\"xml\"``, ``\"html\"`` or "
"``\"text\"`` (default is ``\"xml\"``).  Returns an (optionally) encoded "
"string containing the XML data."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:178
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is "
"the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to "
"generate a Unicode string.  *method* is either ``\"xml\"``, ``\"html\"`` or "
"``\"text\"`` (default is ``\"xml\"``).  Returns a list of (optionally) "
"encoded strings containing the XML data.  It does not guarantee any specific "
"sequence, except that ``\"\".join(tostringlist(element)) == "
"tostring(element)``."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:192
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:200
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard :"
"class:`XMLParser` parser is used.  Returns a tuple containing an :class:"
"`Element` instance and a dictionary."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:210
msgid "Element Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:215
msgid ""
"Element class.  This class defines the Element interface, and provides a "
"reference implementation of this interface."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:218
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an "
"optional dictionary, containing element attributes.  *extra* contains "
"additional attributes, given as keyword arguments."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:226
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:232
msgid ""
"The *text* attribute can be used to hold additional data associated with the "
"element.  As the name implies this attribute is usually a string but may be "
"any application-specific object.  If the element is created from an XML file "
"the attribute will contain any text found between the element tags."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:241
msgid ""
"The *tail* attribute can be used to hold additional data associated with the "
"element.  This attribute is usually a string but may be any application-"
"specific object.  If the element is created from an XML file the attribute "
"will contain any text found after the element's end tag and before the next "
"tag."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:250
msgid ""
"A dictionary containing the element's attributes.  Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create "
"the dictionary only if someone asks for it.  To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:256
msgid "The following dictionary-like methods work on the element attributes."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:261
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to None."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:267
msgid "Gets the element attribute named *key*."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:269
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:274
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs.  The "
"attributes are returned in an arbitrary order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:280
msgid ""
"Returns the elements attribute names as a list.  The names are returned in "
"an arbitrary order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:286
msgid "Set the attribute *key* on the element to *value*."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:288
msgid "The following methods work on the element's children (subelements)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:293
msgid ""
"Adds the element *subelement* to the end of this elements internal list of "
"subelements."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:299
msgid ""
"Appends *subelements* from a sequence object with zero or more elements. "
"Raises :exc:`AssertionError` if a subelement is not a valid object."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:307
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or "
"path.  Returns an element instance or ``None``."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:313
msgid ""
"Finds all matching subelements, by tag name or path.  Returns a list "
"containing all matching elements in document order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:319
msgid ""
"Finds text for the first subelement matching *match*.  *match* may be a tag "
"name or path.  Returns the text content of the first matching element, or "
"*default* if no element was found.  Note that if the matching element has no "
"text content an empty string is returned."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:327
msgid "Use ``list(elem)`` or iteration."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:333
msgid "Use method :meth:`Element.iter` instead."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:339
msgid "Inserts a subelement at the given position in this element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:344
msgid ""
"Creates a tree :term:`iterator` with the current element as the root. The "
"iterator iterates over this element and all elements below it, in document "
"(depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements "
"whose tag equals *tag* are returned from the iterator.  If the tree "
"structure is modified during iteration, the result is undefined."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:355
msgid ""
"Finds all matching subelements, by tag name or path.  Returns an iterable "
"yielding all matching elements in document order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:363
msgid ""
"Creates a text iterator.  The iterator loops over this element and all "
"subelements, in document order, and returns all inner text."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:371
msgid ""
"Creates a new element object of the same type as this element.  Do not call "
"this method, use the :func:`SubElement` factory function instead."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:377
msgid ""
"Removes *subelement* from the element.  Unlike the find\\* methods this "
"method compares elements based on the instance identity, not on tag value or "
"contents."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:381
msgid ""
":class:`Element` objects also support the following sequence type methods "
"for working with subelements: :meth:`__delitem__`, :meth:`__getitem__`, :"
"meth:`__setitem__`, :meth:`__len__`."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:385
msgid ""
"Caution: Elements with no subelements will test as ``False``.  This behavior "
"will change in future versions.  Use specific ``len(elem)`` or ``elem is "
"None`` test instead. ::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:401
msgid "ElementTree Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:406
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:410
msgid ""
"*element* is the root element.  The tree is initialized with the contents of "
"the XML *file* if given."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:416
msgid ""
"Replaces the root element for this tree.  This discards the current contents "
"of the tree, and replaces it with the given element.  Use with care.  "
"*element* is an element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:423
msgid "Same as :meth:`Element.find`, starting at the root of the tree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:428
msgid "Same as :meth:`Element.findall`, starting at the root of the tree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:433
msgid "Same as :meth:`Element.findtext`, starting at the root of the tree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:438
msgid "Use method :meth:`ElementTree.iter` instead."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:444
msgid "Returns the root element for this tree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:449
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order.  *tag* is the tag to "
"look for (default is to return all elements)"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:456
msgid ""
"Finds all matching subelements, by tag name or path.  Same as getroot()."
"iterfind(match). Returns an iterable yielding all matching elements in "
"document order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:465
msgid ""
"Loads an external XML section into this element tree.  *source* is a file "
"name or :term:`file object`.  *parser* is an optional parser instance. If "
"not given, the standard XMLParser parser is used.  Returns the section root "
"element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:474
msgid ""
"Writes the element tree to a file, as XML.  *file* is a file name, or a :"
"term:`file object` opened for writing.  *encoding* [1]_ is the output "
"encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to write a "
"Unicode string.  *xml_declaration* controls if an XML declaration should be "
"added to the file.  Use False for never, True for always, None for only if "
"not US-ASCII or UTF-8 or Unicode (default is None). *default_namespace* sets "
"the default XML namespace (for \"xmlns\"). *method* is either ``\"xml\"``, "
"``\"html\"`` or ``\"text\"`` (default is ``\"xml\"``).  Returns an "
"(optionally) encoded string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:484
msgid "This is the XML file that is going to be manipulated::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:496
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:515
msgid "QName Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:520
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output.  *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName.  If *tag* is given, the first argument is "
"interpreted as an URI, and this argument is interpreted as a local name. :"
"class:`QName` instances are opaque."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:531
msgid "TreeBuilder Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:536
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, and end method calls to a well-formed element structure.  You "
"can use this class to build an element structure using a custom XML parser, "
"or a parser for some other XML-like format.  The *element_factory* is called "
"to create new :class:`Element` instances when given."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:545
msgid ""
"Flushes the builder buffers, and returns the toplevel document element.  "
"Returns an :class:`Element` instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:551
msgid ""
"Adds text to the current element.  *data* is a string.  This should be "
"either a bytestring, or a Unicode string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:557
msgid ""
"Closes the current element.  *tag* is the element name.  Returns the closed "
"element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:563
msgid ""
"Opens a new element.  *tag* is the element name.  *attrs* is a dictionary "
"containing element attributes.  Returns the opened element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:567
msgid ""
"In addition, a custom :class:`TreeBuilder` object can provide the following "
"method:"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:572
msgid ""
"Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the "
"public identifier.  *system* is the system identifier.  This method does not "
"exist on the default :class:`TreeBuilder` class."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:582
msgid "XMLParser Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:587
msgid ""
":class:`Element` structure builder for XML source data, based on the expat "
"parser.  *html* are predefined HTML entities.  This flag is not supported by "
"the current implementation.  *target* is the target object.  If omitted, the "
"builder uses an instance of the standard TreeBuilder class.  *encoding* [1]_ "
"is optional.  If given, the value overrides the encoding specified in the "
"XML file."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:597
msgid "Finishes feeding data to the parser.  Returns an element structure."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:602
msgid ""
"Define the :meth:`TreeBuilder.doctype` method on a custom TreeBuilder target."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:609
msgid "Feeds data to the parser.  *data* is encoded data."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:611
msgid ""
":meth:`XMLParser.feed` calls *target*\\'s :meth:`start` method for each "
"opening tag, its :meth:`end` method for each closing tag, and data is "
"processed by method :meth:`data`.  :meth:`XMLParser.close` calls "
"*target*\\'s method :meth:`close`. :class:`XMLParser` can be used not only "
"for building a tree structure. This is an example of counting the maximum "
"depth of an XML file::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:652
msgid "Footnotes"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:653
msgid ""
"The encoding string included in XML output should conform to the appropriate "
"standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See "
"http://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and http://www."
"iana.org/assignments/character-sets."
msgstr ""
