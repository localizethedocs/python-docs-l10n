# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/typing.rst:2
msgid ":mod:`typing` --- Support for type hints"
msgstr ""

#: ../../../library/typing.rst:9
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr ""

#: ../../../library/typing.rst:13
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""

#: ../../../library/typing.rst:19
msgid ""
"This module provides runtime support for type hints as specified by :pep:"
"`484`, :pep:`526`, :pep:`544`, :pep:`586`, :pep:`589`, and :pep:`591`. The "
"most fundamental support consists of the types :data:`Any`, :data:`Union`, :"
"data:`Tuple`, :data:`Callable`, :class:`TypeVar`, and :class:`Generic`.  For "
"full specification please see :pep:`484`.  For a simplified introduction to "
"type hints see :pep:`483`."
msgstr ""

#: ../../../library/typing.rst:27
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""

#: ../../../library/typing.rst:29
msgid ""
"def greeting(name: str) -> str:\n"
"    return 'Hello ' + name"
msgstr ""

#: ../../../library/typing.rst:32
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""

#: ../../../library/typing.rst:37
msgid "Type aliases"
msgstr ""

#: ../../../library/typing.rst:39
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``List[float]`` will be treated as interchangeable synonyms::"
msgstr ""

#: ../../../library/typing.rst:42
msgid ""
"from typing import List\n"
"Vector = List[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# typechecks; a list of floats qualifies as a Vector.\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"
msgstr ""

#: ../../../library/typing.rst:51
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""

#: ../../../library/typing.rst:53
msgid ""
"from typing import Dict, Tuple, Sequence\n"
"\n"
"ConnectionOptions = Dict[str, str]\n"
"Address = Tuple[str, int]\n"
"Server = Tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# The static type checker will treat the previous type signature as\n"
"# being exactly equivalent to this one.\n"
"def broadcast_message(\n"
"        message: str,\n"
"        servers: Sequence[Tuple[Tuple[str, int], Dict[str, str]]]) -> None:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:69
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""

#: ../../../library/typing.rst:75
msgid "NewType"
msgstr ""

#: ../../../library/typing.rst:77
msgid "Use the :func:`NewType` helper function to create distinct types::"
msgstr ""

#: ../../../library/typing.rst:79
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""

#: ../../../library/typing.rst:84
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""

#: ../../../library/typing.rst:87
msgid ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# typechecks\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# does not typecheck; an int is not a UserId\n"
"user_b = get_user_name(-1)"
msgstr ""

#: ../../../library/typing.rst:96
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""

#: ../../../library/typing.rst:101
msgid ""
"# 'output' is of type 'int', not 'UserId'\n"
"output = UserId(23413) + UserId(54341)"
msgstr ""

#: ../../../library/typing.rst:104
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a function that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""

#: ../../../library/typing.rst:110
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""

#: ../../../library/typing.rst:113
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr ""

#: ../../../library/typing.rst:116
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# Fails at runtime and does not typecheck\n"
"class AdminUserId(UserId): pass"
msgstr ""

#: ../../../library/typing.rst:123
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""

#: ../../../library/typing.rst:125
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"
msgstr ""

#: ../../../library/typing.rst:131
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""

#: ../../../library/typing.rst:133
msgid "See :pep:`484` for more details."
msgstr ""

#: ../../../library/typing.rst:137
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../../library/typing.rst:142
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""

#: ../../../library/typing.rst:152
msgid "Callable"
msgstr ""

#: ../../../library/typing.rst:154
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""

#: ../../../library/typing.rst:157
msgid "For example::"
msgstr ""

#: ../../../library/typing.rst:159
msgid ""
"from typing import Callable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    # Body\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    # Body"
msgstr ""

#: ../../../library/typing.rst:168
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""

#: ../../../library/typing.rst:175
msgid "Generics"
msgstr ""

#: ../../../library/typing.rst:177
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""

#: ../../../library/typing.rst:183
msgid ""
"from typing import Mapping, Sequence\n"
"\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."
msgstr ""

#: ../../../library/typing.rst:188
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr ""

#: ../../../library/typing.rst:193
msgid ""
"from typing import Sequence, TypeVar\n"
"\n"
"T = TypeVar('T')      # Declare type variable\n"
"\n"
"def first(l: Sequence[T]) -> T:   # Generic function\n"
"    return l[0]"
msgstr ""

#: ../../../library/typing.rst:202
msgid "User-defined generic types"
msgstr ""

#: ../../../library/typing.rst:204
msgid "A user-defined class can be defined as a generic class."
msgstr ""

#: ../../../library/typing.rst:208
msgid ""
"from typing import TypeVar, Generic\n"
"from logging import Logger\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"
msgstr ""

#: ../../../library/typing.rst:230
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../../library/typing.rst:234
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""

#: ../../../library/typing.rst:237
msgid ""
"from typing import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"
msgstr ""

#: ../../../library/typing.rst:243
msgid ""
"A generic type can have any number of type variables, and type variables may "
"be constrained::"
msgstr ""

#: ../../../library/typing.rst:246
msgid ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"T = TypeVar('T')\n"
"S = TypeVar('S', int, str)\n"
"\n"
"class StrangePair(Generic[T, S]):\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:255
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""

#: ../../../library/typing.rst:258
msgid ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # INVALID\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:266
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../../library/typing.rst:268
msgid ""
"from typing import TypeVar, Generic, Sized\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LinkedList(Sized, Generic[T]):\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:275
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""

#: ../../../library/typing.rst:277
msgid ""
"from typing import TypeVar, Mapping\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class MyDict(Mapping[str, T]):\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:284
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr ""

#: ../../../library/typing.rst:286
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""

#: ../../../library/typing.rst:290
msgid ""
"from typing import Iterable\n"
"\n"
"class MyIterable(Iterable): # Same as Iterable[Any]"
msgstr ""

#: ../../../library/typing.rst:294
msgid "User defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../../library/typing.rst:296
msgid ""
"from typing import TypeVar, Iterable, Tuple, Union\n"
"S = TypeVar('S')\n"
"Response = Union[Iterable[S], int]\n"
"\n"
"# Return type here is same as Union[Iterable[str], int]\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"T = TypeVar('T', int, float, complex)\n"
"Vec = Iterable[Tuple[T, T]]\n"
"\n"
"def inproduct(v: Vec[T]) -> T: # Same as Iterable[Tuple[T, T]]\n"
"    return sum(x*y for x, y in v)"
msgstr ""

#: ../../../library/typing.rst:310
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

#: ../../../library/typing.rst:313
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""

#: ../../../library/typing.rst:320
msgid "The :data:`Any` type"
msgstr ""

#: ../../../library/typing.rst:322
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""

#: ../../../library/typing.rst:326
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""

#: ../../../library/typing.rst:329
msgid ""
"from typing import Any\n"
"\n"
"a = None    # type: Any\n"
"a = []      # OK\n"
"a = 2       # OK\n"
"\n"
"s = ''      # type: str\n"
"s = a       # OK\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # Typechecks; 'item' could be any type,\n"
"    # and that type might have a 'bar' method\n"
"    item.bar()\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:344
msgid ""
"Notice that no typechecking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""

#: ../../../library/typing.rst:350
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""

#: ../../../library/typing.rst:353
msgid ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# A static type checker will treat the above\n"
"# as having the same signature as:\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"
msgstr ""

#: ../../../library/typing.rst:363
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""

#: ../../../library/typing.rst:366
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""

#: ../../../library/typing.rst:371
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""

#: ../../../library/typing.rst:375
msgid ""
"def hash_a(item: object) -> int:\n"
"    # Fails; an object does not have a 'magic' method.\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # Typechecks\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# Typechecks, since ints and strs are subclasses of object\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# Typechecks, since Any is compatible with all types\n"
"hash_b(42)\n"
"hash_b(\"foo\")"
msgstr ""

#: ../../../library/typing.rst:393
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""

#: ../../../library/typing.rst:398
msgid "Nominal vs structural subtyping"
msgstr ""

#: ../../../library/typing.rst:400
msgid ""
"Initially :pep:`484` defined Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

#: ../../../library/typing.rst:404
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""

#: ../../../library/typing.rst:410
msgid ""
"from typing import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."
msgstr ""

#: ../../../library/typing.rst:417
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

#: ../../../library/typing.rst:423
msgid ""
"from typing import Iterator, Iterable\n"
"\n"
"class Bucket:  # Note: no base classes\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # Passes type check"
msgstr ""

#: ../../../library/typing.rst:433
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

#: ../../../library/typing.rst:439
msgid "Classes, functions, and decorators"
msgstr ""

#: ../../../library/typing.rst:441
msgid "The module defines the following classes, functions and decorators:"
msgstr ""

#: ../../../library/typing.rst:445
msgid "Type variable."
msgstr ""

#: ../../../library/typing.rst:447 ../../../library/typing.rst:915
msgid "Usage::"
msgstr ""

#: ../../../library/typing.rst:449
msgid ""
"T = TypeVar('T')  # Can be anything\n"
"A = TypeVar('A', str, bytes)  # Must be str or bytes"
msgstr ""

#: ../../../library/typing.rst:452
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See class Generic for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: ../../../library/typing.rst:457
msgid ""
"def repeat(x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Return a list containing n references to x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"def longest(x: A, y: A) -> A:\n"
"    \"\"\"Return the longest of two strings.\"\"\"\n"
"    return x if len(x) >= len(y) else y"
msgstr ""

#: ../../../library/typing.rst:465
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is "
"still plain :class:`str`."
msgstr ""

#: ../../../library/typing.rst:470
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""

#: ../../../library/typing.rst:473
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""

#: ../../../library/typing.rst:483
msgid "Abstract base class for generic types."
msgstr ""

#: ../../../library/typing.rst:485
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../../library/typing.rst:489
msgid ""
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""

#: ../../../library/typing.rst:494
msgid "This class can then be used as follows::"
msgstr ""

#: ../../../library/typing.rst:496
msgid ""
"X = TypeVar('X')\n"
"Y = TypeVar('Y')\n"
"\n"
"def lookup_name(mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"
msgstr ""

#: ../../../library/typing.rst:507
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""

#: ../../../library/typing.rst:509
msgid ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."
msgstr ""

#: ../../../library/typing.rst:513
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../../library/typing.rst:516
msgid ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passes static type check"
msgstr ""

#: ../../../library/typing.rst:525
msgid ""
"See :pep:`544` for details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""

#: ../../../library/typing.rst:530
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../../library/typing.rst:532
msgid ""
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""

#: ../../../library/typing.rst:540
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""

#: ../../../library/typing.rst:545
msgid ""
"a = 3         # Has type 'int'\n"
"b = int       # Has type 'Type[int]'\n"
"c = type(a)   # Also has type 'Type[int]'"
msgstr ""

#: ../../../library/typing.rst:549
msgid "Note that ``Type[C]`` is covariant::"
msgstr ""

#: ../../../library/typing.rst:551
msgid ""
"class User: ...\n"
"class BasicUser(User): ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"# Accepts User, BasicUser, ProUser, TeamUser, ...\n"
"def make_new_user(user_class: Type[User]) -> User:\n"
"    # ...\n"
"    return user_class()"
msgstr ""

#: ../../../library/typing.rst:561
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""

#: ../../../library/typing.rst:569
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""

#: ../../../library/typing.rst:573
msgid "def new_non_team_user(user_class: Type[Union[BasicUser, ProUser]]): ..."
msgstr ""

#: ../../../library/typing.rst:575
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""

#: ../../../library/typing.rst:582
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ""

#: ../../../library/typing.rst:586
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ""

#: ../../../library/typing.rst:590
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ""

#: ../../../library/typing.rst:594
msgid "An ABC with one abstract method ``__int__``."
msgstr ""

#: ../../../library/typing.rst:598
msgid "An ABC with one abstract method ``__float__``."
msgstr ""

#: ../../../library/typing.rst:602
msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

#: ../../../library/typing.rst:606
msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

#: ../../../library/typing.rst:610
msgid "An ABC with one abstract method ``__index__``."
msgstr ""

#: ../../../library/typing.rst:616
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../../library/typing.rst:621
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../../library/typing.rst:626
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ""

#: ../../../library/typing.rst:630
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr ""

#: ../../../library/typing.rst:634
msgid "An alias to :class:`collections.abc.Sized`"
msgstr ""

#: ../../../library/typing.rst:638
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ""

#: ../../../library/typing.rst:644
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ""

#: ../../../library/typing.rst:648
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../../library/typing.rst:652
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""

#: ../../../library/typing.rst:655
msgid ""
"def get_position_in_index(word_list: Mapping[str, int], word: str) -> int:\n"
"    return word_list[word]"
msgstr ""

#: ../../../library/typing.rst:660
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../../library/typing.rst:664
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ""

#: ../../../library/typing.rst:668
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../../library/typing.rst:672
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ""

#: ../../../library/typing.rst:674
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""

#: ../../../library/typing.rst:677
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""

#: ../../../library/typing.rst:682
msgid "A generic version of :class:`collections.deque`."
msgstr ""

#: ../../../library/typing.rst:689
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""

#: ../../../library/typing.rst:694
msgid "This type may be used as follows::"
msgstr ""

#: ../../../library/typing.rst:696
msgid ""
"T = TypeVar('T', int, float)\n"
"\n"
"def vec2(x: T, y: T) -> List[T]:\n"
"    return [x, y]\n"
"\n"
"def keep_positives(vector: Sequence[T]) -> List[T]:\n"
"    return [item for item in vector if item > 0]"
msgstr ""

#: ../../../library/typing.rst:706
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""

#: ../../../library/typing.rst:712
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../../library/typing.rst:716
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ""

#: ../../../library/typing.rst:720
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ""

#: ../../../library/typing.rst:724
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../../library/typing.rst:728
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../../library/typing.rst:732
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../../library/typing.rst:738
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""

#: ../../../library/typing.rst:742
msgid ""
"from typing import List, Coroutine\n"
"c = None # type: Coroutine[List[str], str, int]\n"
"...\n"
"x = c.send('hi') # type: List[str]\n"
"async def bar() -> None:\n"
"    x = await c # type: int"
msgstr ""

#: ../../../library/typing.rst:753
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../../library/typing.rst:759
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../../library/typing.rst:765
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../../library/typing.rst:772
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../../library/typing.rst:779
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""

#: ../../../library/typing.rst:783
msgid "This type can be used as follows::"
msgstr ""

#: ../../../library/typing.rst:785
msgid ""
"def count_words(text: str) -> Dict[str, int]:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:790
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ""

#: ../../../library/typing.rst:796
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ""

#: ../../../library/typing.rst:802
msgid "A generic version of :class:`collections.Counter`."
msgstr ""

#: ../../../library/typing.rst:809
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ""

#: ../../../library/typing.rst:816
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../../library/typing.rst:819
msgid ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"
msgstr ""

#: ../../../library/typing.rst:825
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../../library/typing.rst:829
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../../library/typing.rst:832
msgid ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

#: ../../../library/typing.rst:837
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../../library/typing.rst:840
msgid ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

#: ../../../library/typing.rst:847
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../../library/typing.rst:850
msgid ""
"async def echo_round() -> AsyncGenerator[int, float]:\n"
"    sent = yield 0\n"
"    while sent >= 0.0:\n"
"        rounded = await round(sent)\n"
"        sent = yield rounded"
msgstr ""

#: ../../../library/typing.rst:856
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../../library/typing.rst:860
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../../library/typing.rst:863
msgid ""
"async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

#: ../../../library/typing.rst:868
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../../library/typing.rst:871
msgid ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

#: ../../../library/typing.rst:880
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""

#: ../../../library/typing.rst:884
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../../library/typing.rst:887
msgid ""
"def add_unicode_checkmark(text: Text) -> Text:\n"
"    return text + u' \\u2713'"
msgstr ""

#: ../../../library/typing.rst:896
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../../library/typing.rst:904
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""

#: ../../../library/typing.rst:913
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../../library/typing.rst:917
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"
msgstr ""

#: ../../../library/typing.rst:921
msgid "This is equivalent to::"
msgstr ""

#: ../../../library/typing.rst:923
msgid "Employee = collections.namedtuple('Employee', ['name', 'id'])"
msgstr ""

#: ../../../library/typing.rst:925
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../../library/typing.rst:927
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"
msgstr ""

#: ../../../library/typing.rst:934
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../../library/typing.rst:936
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute both of which are part of the namedtuple API.)"
msgstr ""

#: ../../../library/typing.rst:942
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../../library/typing.rst:944
msgid ""
"class Employee(NamedTuple):\n"
"    \"\"\"Represents an employee.\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"
msgstr ""

#: ../../../library/typing.rst:952
msgid "Backward-compatible usage::"
msgstr ""

#: ../../../library/typing.rst:954
msgid "Employee = NamedTuple('Employee', [('name', str), ('id', int)])"
msgstr ""

#: ../../../library/typing.rst:956
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../../library/typing.rst:959
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../../library/typing.rst:965
msgid ""
"Deprecated the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../../library/typing.rst:966
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../../library/typing.rst:972
msgid ""
"A simple typed namespace. At runtime it is equivalent to a plain :class:"
"`dict`."
msgstr ""

#: ../../../library/typing.rst:975
msgid ""
"``TypedDict`` creates a dictionary type that expects all of its instances to "
"have a certain set of keys, where each key is associated with a value of a "
"consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../../library/typing.rst:981
msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: str\n"
"\n"
"a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n"
"b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n"
"\n"
"assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')"
msgstr ""

#: ../../../library/typing.rst:991
msgid ""
"The type info for introspection can be accessed via ``Point2D."
"__annotations__`` and ``Point2D.__total__``.  To allow using this feature "
"with older versions of Python that do not support :pep:`526`, ``TypedDict`` "
"supports two additional equivalent syntactic forms::"
msgstr ""

#: ../../../library/typing.rst:996
msgid ""
"Point2D = TypedDict('Point2D', x=int, y=int, label=str)\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})"
msgstr ""

#: ../../../library/typing.rst:999
msgid ""
"By default, all keys must be present in a TypedDict. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""

#: ../../../library/typing.rst:1003
msgid ""
"class point2D(TypedDict, total=False):\n"
"    x: int\n"
"    y: int"
msgstr ""

#: ../../../library/typing.rst:1007
msgid ""
"This means that a point2D TypedDict can have any of the keys omitted. A type "
"checker is only expected to support a literal False or True as the value of "
"the total argument. True is the default, and makes all items defined in the "
"class body be required."
msgstr ""

#: ../../../library/typing.rst:1012
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../../library/typing.rst:1018
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../../library/typing.rst:1027
msgid ""
"A helper function to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns a function that returns its argument. "
"Usage::"
msgstr ""

#: ../../../library/typing.rst:1031
msgid ""
"UserId = NewType('UserId', int)\n"
"first_user = UserId(1)"
msgstr ""

#: ../../../library/typing.rst:1038
msgid "Cast a value to a type."
msgstr ""

#: ../../../library/typing.rst:1040
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../../library/typing.rst:1047
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../../library/typing.rst:1050
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""

#: ../../../library/typing.rst:1061
msgid "Provide basic introspection for generic types and special typing forms."
msgstr ""

#: ../../../library/typing.rst:1063
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. For "
"unsupported objects return ``None`` and ``()`` correspondingly. Examples::"
msgstr ""

#: ../../../library/typing.rst:1069
msgid ""
"assert get_origin(Dict[str, int]) is dict\n"
"assert get_args(Dict[int, str]) == (int, str)\n"
"\n"
"assert get_origin(Union[int, str]) is Union\n"
"assert get_args(Union[int, str]) == (int, str)"
msgstr ""

#: ../../../library/typing.rst:1079
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""

#: ../../../library/typing.rst:1091
msgid ""
"@overload\n"
"def process(response: None) -> None:\n"
"    ...\n"
"@overload\n"
"def process(response: int) -> Tuple[int, str]:\n"
"    ...\n"
"@overload\n"
"def process(response: bytes) -> str:\n"
"    ...\n"
"def process(response):\n"
"    <actual implementation>"
msgstr ""

#: ../../../library/typing.rst:1103
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr ""

#: ../../../library/typing.rst:1107
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""

#: ../../../library/typing.rst:1111
msgid ""
"class Base:\n"
"    @final\n"
"    def done(self) -> None:\n"
"        ...\n"
"class Sub(Base):\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"          ...\n"
"\n"
"@final\n"
"class Leaf:\n"
"    ...\n"
"class Other(Leaf):  # Error reported by type checker\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:1125 ../../../library/typing.rst:1352
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../../library/typing.rst:1132
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../../library/typing.rst:1134
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""

#: ../../../library/typing.rst:1138
msgid "This mutates the function(s) in place."
msgstr ""

#: ../../../library/typing.rst:1142
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../../library/typing.rst:1144
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../../library/typing.rst:1149
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr ""

#: ../../../library/typing.rst:1151
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../../library/typing.rst:1155
msgid ""
"@type_check_only\n"
"class Response:  # private or not available at runtime\n"
"    code: int\n"
"    def get_header(self, name: str) -> str: ...\n"
"\n"
"def fetch_response() -> Response: ..."
msgstr ""

#: ../../../library/typing.rst:1162
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../../library/typing.rst:1167
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../../library/typing.rst:1169
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../../library/typing.rst:1174
msgid ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)"
msgstr ""

#: ../../../library/typing.rst:1180
msgid ""
"**Warning:** this will check only the presence of the required methods, not "
"their type signatures!"
msgstr ""

#: ../../../library/typing.rst:1187
msgid "Special type indicating an unconstrained type."
msgstr ""

#: ../../../library/typing.rst:1189
msgid "Every type is compatible with :data:`Any`."
msgstr ""

#: ../../../library/typing.rst:1190
msgid ":data:`Any` is compatible with every type."
msgstr ""

#: ../../../library/typing.rst:1194
msgid "Special type indicating that a function never returns. For example::"
msgstr ""

#: ../../../library/typing.rst:1197
msgid ""
"from typing import NoReturn\n"
"\n"
"def stop() -> NoReturn:\n"
"    raise RuntimeError('no way')"
msgstr ""

#: ../../../library/typing.rst:1207
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr ""

#: ../../../library/typing.rst:1209
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr ""

#: ../../../library/typing.rst:1211
msgid "The arguments must be types and there must be at least one."
msgstr ""

#: ../../../library/typing.rst:1213
msgid "Unions of unions are flattened, e.g.::"
msgstr ""

#: ../../../library/typing.rst:1215
msgid "Union[Union[int, str], float] == Union[int, str, float]"
msgstr ""

#: ../../../library/typing.rst:1217
msgid "Unions of a single argument vanish, e.g.::"
msgstr ""

#: ../../../library/typing.rst:1219
msgid "Union[int] == int  # The constructor actually returns int"
msgstr ""

#: ../../../library/typing.rst:1221
msgid "Redundant arguments are skipped, e.g.::"
msgstr ""

#: ../../../library/typing.rst:1223
msgid "Union[int, str, int] == Union[int, str]"
msgstr ""

#: ../../../library/typing.rst:1225
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

#: ../../../library/typing.rst:1227
msgid "Union[int, str] == Union[str, int]"
msgstr ""

#: ../../../library/typing.rst:1229
msgid "You cannot subclass or instantiate a union."
msgstr ""

#: ../../../library/typing.rst:1231
msgid "You cannot write ``Union[X][Y]``."
msgstr ""

#: ../../../library/typing.rst:1233
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr ""

#: ../../../library/typing.rst:1235
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

#: ../../../library/typing.rst:1240
msgid "Optional type."
msgstr ""

#: ../../../library/typing.rst:1242
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr ""

#: ../../../library/typing.rst:1244
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../../library/typing.rst:1249
msgid ""
"def foo(arg: int = 0) -> None:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:1252
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../../library/typing.rst:1256
msgid ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:1261
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""

#: ../../../library/typing.rst:1265
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""

#: ../../../library/typing.rst:1269
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""

#: ../../../library/typing.rst:1275
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""

#: ../../../library/typing.rst:1277
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""

#: ../../../library/typing.rst:1282
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""

#: ../../../library/typing.rst:1292
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""

#: ../../../library/typing.rst:1296
msgid ""
"def validate_simple(data: Any) -> Literal[True]:  # always returns True\n"
"    ...\n"
"\n"
"MODE = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: MODE) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')  # Passes type check\n"
"open_helper('/other/path', 'typo')  # Error in type checker"
msgstr ""

#: ../../../library/typing.rst:1306
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../../library/typing.rst:1314
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../../library/typing.rst:1316
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../../library/typing.rst:1320
msgid ""
"class Starship:\n"
"    stats: ClassVar[Dict[str, int]] = {} # class variable\n"
"    damage: int = 10                     # instance variable"
msgstr ""

#: ../../../library/typing.rst:1324
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../../library/typing.rst:1326
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""

#: ../../../library/typing.rst:1332
msgid ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # Error, setting class variable on instance\n"
"Starship.stats = {}     # This is OK"
msgstr ""

#: ../../../library/typing.rst:1340
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""

#: ../../../library/typing.rst:1343
msgid ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # Error reported by type checker\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # Error reported by type checker"
msgstr ""

#: ../../../library/typing.rst:1359
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr ""

#: ../../../library/typing.rst:1362
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""

#: ../../../library/typing.rst:1365
msgid ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(u\"foo\", u\"bar\")  # Ok, output has type 'unicode'\n"
"concat(b\"foo\", b\"bar\")  # Ok, output has type 'bytes'\n"
"concat(u\"foo\", b\"bar\")  # Error, cannot mix unicode and bytes"
msgstr ""

#: ../../../library/typing.rst:1374
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""

#: ../../../library/typing.rst:1377
msgid ""
"if TYPE_CHECKING:\n"
"    import expensive_mod\n"
"\n"
"def fun(arg: 'expensive_mod.SomeType') -> None:\n"
"    local_var: expensive_mod.AnotherType = other_fun()"
msgstr ""

#: ../../../library/typing.rst:1383
msgid ""
"Note that the first type annotation must be enclosed in quotes, making it a "
"\"forward reference\", to hide the ``expensive_mod`` reference from the "
"interpreter runtime.  Type annotations for local variables are not "
"evaluated, so the second annotation does not need to be enclosed in quotes."
msgstr ""
