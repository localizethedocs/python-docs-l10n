# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:7
msgid "Developing with asyncio"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:9
msgid ""
"Asynchronous programming is different from classic \"sequential\" "
"programming."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:12
msgid ""
"This page lists common mistakes and traps and explains how to avoid them."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:19
msgid "Debug Mode"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:21
msgid ""
"By default asyncio runs in production mode.  In order to ease the "
"development asyncio has a *debug mode*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:24
msgid "There are several ways to enable asyncio debug mode:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:26
msgid "Setting the :envvar:`PYTHONASYNCIODEBUG` environment variable to ``1``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:28
msgid "Using the :option:`-X` ``dev`` Python command line option."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:30
msgid "Passing ``debug=True`` to :func:`asyncio.run`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:32
msgid "Calling :meth:`loop.set_debug`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:34
msgid "In addition to enabling the debug mode, consider also:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:36
msgid ""
"setting the log level of the :ref:`asyncio logger <asyncio-logger>` to :py:"
"data:`logging.DEBUG`, for example the following snippet of code can be run "
"at startup of the application::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:40
msgid "logging.basicConfig(level=logging.DEBUG)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:42
msgid ""
"configuring the :mod:`warnings` module to display :exc:`ResourceWarning` "
"warnings.  One way of doing that is by using the :option:`-W` ``default`` "
"command line option."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:47
msgid "When the debug mode is enabled:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:49
msgid ""
"asyncio checks for :ref:`coroutines that were not awaited <asyncio-coroutine-"
"not-scheduled>` and logs them; this mitigates the \"forgotten await\" "
"pitfall."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:53
msgid ""
"Many non-threadsafe asyncio APIs (such as :meth:`loop.call_soon` and :meth:"
"`loop.call_at` methods) raise an exception if they are called from a wrong "
"thread."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:57
msgid ""
"The execution time of the I/O selector is logged if it takes too long to "
"perform an I/O operation."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:60
msgid ""
"Callbacks taking longer than 100ms are logged.  The :attr:`loop."
"slow_callback_duration` attribute can be used to set the minimum execution "
"duration in seconds that is considered \"slow\"."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:68
msgid "Concurrency and Multithreading"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:70
msgid ""
"An event loop runs in a thread (typically the main thread) and executes all "
"callbacks and Tasks in its thread.  While a Task is running in the event "
"loop, no other Tasks can run in the same thread.  When a Task executes an "
"``await`` expression, the running Task gets suspended, and the event loop "
"executes the next Task."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:76
msgid ""
"To schedule a callback from a different OS thread, the :meth:`loop."
"call_soon_threadsafe` method should be used. Example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:79
msgid "loop.call_soon_threadsafe(callback, *args)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:81
msgid ""
"Almost all asyncio objects are not thread safe, which is typically not a "
"problem unless there is code that works with them from outside of a Task or "
"a callback.  If there's a need for such code to call a low-level asyncio "
"API, the :meth:`loop.call_soon_threadsafe` method should be used, e.g.::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:87
msgid "loop.call_soon_threadsafe(fut.cancel)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:89
msgid ""
"To schedule a coroutine object from a different OS thread, the :func:"
"`run_coroutine_threadsafe` function should be used. It returns a :class:"
"`concurrent.futures.Future` to access the result::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:93
msgid ""
"async def coro_func():\n"
"     return await asyncio.sleep(1, 42)\n"
"\n"
"# Later in another OS thread:\n"
"\n"
"future = asyncio.run_coroutine_threadsafe(coro_func(), loop)\n"
"# Wait for the result:\n"
"result = future.result()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:102
msgid ""
"To handle signals and to execute subprocesses, the event loop must be run in "
"the main thread."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:105
msgid ""
"The :meth:`loop.run_in_executor` method can be used with a :class:"
"`concurrent.futures.ThreadPoolExecutor` to execute blocking code in a "
"different OS thread without blocking the OS thread that the event loop runs "
"in."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:114
msgid "Running Blocking Code"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:116
msgid ""
"Blocking (CPU-bound) code should not be called directly.  For example, if a "
"function performs a CPU-intensive calculation for 1 second, all concurrent "
"asyncio Tasks and IO operations would be delayed by 1 second."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:121
msgid ""
"An executor can be used to run a task in a different thread or even in a "
"different process to avoid blocking the OS thread with the event loop.  See "
"the :meth:`loop.run_in_executor` method for more details."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:130
msgid "Logging"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:132
msgid ""
"asyncio uses the :mod:`logging` module and all logging is performed via the "
"``\"asyncio\"`` logger."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:135
msgid ""
"The default log level is :py:data:`logging.INFO`, which can be easily "
"adjusted::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:138
msgid "logging.getLogger(\"asyncio\").setLevel(logging.WARNING)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:144
msgid "Detect never-awaited coroutines"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:146
msgid ""
"When a coroutine function is called, but not awaited (e.g. ``coro()`` "
"instead of ``await coro()``) or the coroutine is not scheduled with :meth:"
"`asyncio.create_task`, asyncio will emit a :exc:`RuntimeWarning`::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:151
msgid ""
"import asyncio\n"
"\n"
"async def test():\n"
"    print(\"never scheduled\")\n"
"\n"
"async def main():\n"
"    test()\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:161
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:206
msgid "Output::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:163
msgid ""
"test.py:7: RuntimeWarning: coroutine 'test' was never awaited\n"
"  test()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:166
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:222
msgid "Output in debug mode::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:168
msgid ""
"test.py:7: RuntimeWarning: coroutine 'test' was never awaited\n"
"Coroutine created at (most recent call last)\n"
"  File \"../t.py\", line 9, in <module>\n"
"    asyncio.run(main(), debug=True)\n"
"\n"
"  < .. >\n"
"\n"
"  File \"../t.py\", line 7, in main\n"
"    test()\n"
"  test()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:179
msgid ""
"The usual fix is to either await the coroutine or call the :meth:`asyncio."
"create_task` function::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:182
msgid ""
"async def main():\n"
"    await test()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:187
msgid "Detect never-retrieved exceptions"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:189
msgid ""
"If a :meth:`Future.set_exception` is called but the Future object is never "
"awaited on, the exception would never be propagated to the user code.  In "
"this case, asyncio would emit a log message when the Future object is "
"garbage collected."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:194
msgid "Example of an unhandled exception::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:196
msgid ""
"import asyncio\n"
"\n"
"async def bug():\n"
"    raise Exception(\"not consumed\")\n"
"\n"
"async def main():\n"
"    asyncio.create_task(bug())\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:208
msgid ""
"Task exception was never retrieved\n"
"future: <Task finished coro=<bug() done, defined at test.py:3>\n"
"  exception=Exception('not consumed')>\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"test.py\", line 4, in bug\n"
"    raise Exception(\"not consumed\")\n"
"Exception: not consumed"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:217
msgid ""
":ref:`Enable the debug mode <asyncio-debug-mode>` to get the traceback where "
"the task was created::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:220
msgid "asyncio.run(main(), debug=True)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-dev.rst:224
msgid ""
"Task exception was never retrieved\n"
"future: <Task finished coro=<bug() done, defined at test.py:3>\n"
"    exception=Exception('not consumed') created at asyncio/tasks.py:321>\n"
"\n"
"source_traceback: Object created at (most recent call last):\n"
"  File \"../t.py\", line 9, in <module>\n"
"    asyncio.run(main(), debug=True)\n"
"\n"
"< .. >\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"../t.py\", line 4, in bug\n"
"    raise Exception(\"not consumed\")\n"
"Exception: not consumed"
msgstr ""
