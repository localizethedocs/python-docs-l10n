# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ""

#: ../../../library/collections.abc.rst:9
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr ""

#: ../../../library/collections.abc.rst:18
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr ""

#: ../../../library/collections.abc.rst:22
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is hashable or whether it is a mapping."
msgstr ""

#: ../../../library/collections.abc.rst:30
msgid "Collections Abstract Base Classes"
msgstr ""

#: ../../../library/collections.abc.rst:32
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""

#: ../../../library/collections.abc.rst:37
msgid "ABC"
msgstr ""

#: ../../../library/collections.abc.rst:37
msgid "Inherits from"
msgstr ""

#: ../../../library/collections.abc.rst:37
msgid "Abstract Methods"
msgstr ""

#: ../../../library/collections.abc.rst:37
msgid "Mixin Methods"
msgstr ""

#: ../../../library/collections.abc.rst:39
msgid ":class:`Container`"
msgstr ""

#: ../../../library/collections.abc.rst:39
msgid "``__contains__``"
msgstr ""

#: ../../../library/collections.abc.rst:40
msgid ":class:`Hashable`"
msgstr ""

#: ../../../library/collections.abc.rst:40
msgid "``__hash__``"
msgstr ""

#: ../../../library/collections.abc.rst:41
#: ../../../library/collections.abc.rst:42
msgid ":class:`Iterable`"
msgstr ""

#: ../../../library/collections.abc.rst:41
#: ../../../library/collections.abc.rst:42
msgid "``__iter__``"
msgstr ""

#: ../../../library/collections.abc.rst:42
msgid ":class:`Iterator`"
msgstr ""

#: ../../../library/collections.abc.rst:42
msgid "``__next__``"
msgstr ""

#: ../../../library/collections.abc.rst:43
#: ../../../library/collections.abc.rst:77
msgid ":class:`Sized`"
msgstr ""

#: ../../../library/collections.abc.rst:43
#: ../../../library/collections.abc.rst:77
msgid "``__len__``"
msgstr ""

#: ../../../library/collections.abc.rst:44
msgid ":class:`Callable`"
msgstr ""

#: ../../../library/collections.abc.rst:44
msgid "``__call__``"
msgstr ""

#: ../../../library/collections.abc.rst:46
#: ../../../library/collections.abc.rst:50
msgid ":class:`Sequence`"
msgstr ""

#: ../../../library/collections.abc.rst:46
#: ../../../library/collections.abc.rst:56
#: ../../../library/collections.abc.rst:66
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ""

#: ../../../library/collections.abc.rst:46
msgid "``__getitem__``, ``__len__``"
msgstr ""

#: ../../../library/collections.abc.rst:46
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""

#: ../../../library/collections.abc.rst:50
msgid ":class:`MutableSequence`"
msgstr ""

#: ../../../library/collections.abc.rst:50
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""

#: ../../../library/collections.abc.rst:50
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, ``extend``, "
"``pop``, ``remove``, and ``__iadd__``"
msgstr ""

#: ../../../library/collections.abc.rst:56
#: ../../../library/collections.abc.rst:60
msgid ":class:`Set`"
msgstr ""

#: ../../../library/collections.abc.rst:56
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../../library/collections.abc.rst:56
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""

#: ../../../library/collections.abc.rst:60
msgid ":class:`MutableSet`"
msgstr ""

#: ../../../library/collections.abc.rst:60
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr ""

#: ../../../library/collections.abc.rst:60
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""

#: ../../../library/collections.abc.rst:66
#: ../../../library/collections.abc.rst:70
msgid ":class:`Mapping`"
msgstr ""

#: ../../../library/collections.abc.rst:66
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../../library/collections.abc.rst:66
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""

#: ../../../library/collections.abc.rst:70
msgid ":class:`MutableMapping`"
msgstr ""

#: ../../../library/collections.abc.rst:70
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../../library/collections.abc.rst:70
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""

#: ../../../library/collections.abc.rst:77
#: ../../../library/collections.abc.rst:82
msgid ":class:`MappingView`"
msgstr ""

#: ../../../library/collections.abc.rst:78
msgid ":class:`ItemsView`"
msgstr ""

#: ../../../library/collections.abc.rst:78
#: ../../../library/collections.abc.rst:80
msgid ":class:`MappingView`, :class:`Set`"
msgstr ""

#: ../../../library/collections.abc.rst:78
#: ../../../library/collections.abc.rst:80
#: ../../../library/collections.abc.rst:82
msgid "``__contains__``, ``__iter__``"
msgstr ""

#: ../../../library/collections.abc.rst:80
msgid ":class:`KeysView`"
msgstr ""

#: ../../../library/collections.abc.rst:82
msgid ":class:`ValuesView`"
msgstr ""

#: ../../../library/collections.abc.rst:91
msgid ""
"ABCs for classes that provide respectively the methods :meth:"
"`__contains__`, :meth:`__hash__`, :meth:`__len__`, and :meth:`__call__`."
msgstr ""

#: ../../../library/collections.abc.rst:96
msgid ""
"ABC for classes that provide the :meth:`__iter__` method. See also the "
"definition of :term:`iterable`."
msgstr ""

#: ../../../library/collections.abc.rst:101
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""

#: ../../../library/collections.abc.rst:108
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""

#: ../../../library/collections.abc.rst:113
msgid "ABCs for read-only and mutable sets."
msgstr ""

#: ../../../library/collections.abc.rst:118
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""

#: ../../../library/collections.abc.rst:125
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""

#: ../../../library/collections.abc.rst:128
msgid ""
"These ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""

#: ../../../library/collections.abc.rst:131
msgid ""
"size = None\n"
"if isinstance(myvar, collections.abc.Sized):\n"
"    size = len(myvar)"
msgstr ""

#: ../../../library/collections.abc.rst:135
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`__contains__`, :meth:`__iter__`, and :"
"meth:`__len__`. The ABC supplies the remaining methods such as :meth:"
"`__and__` and :meth:`isdisjoint`::"
msgstr ""

#: ../../../library/collections.abc.rst:142
msgid ""
"class ListBasedSet(collections.abc.Set):\n"
"     ''' Alternate set implementation favoring space over speed\n"
"         and not requiring the set elements to be hashable. '''\n"
"     def __init__(self, iterable):\n"
"         self.elements = lst = []\n"
"         for value in iterable:\n"
"             if value not in lst:\n"
"                 lst.append(value)\n"
"     def __iter__(self):\n"
"         return iter(self.elements)\n"
"     def __contains__(self, value):\n"
"         return value in self.elements\n"
"     def __len__(self):\n"
"         return len(self.elements)\n"
"\n"
"s1 = ListBasedSet('abcdef')\n"
"s2 = ListBasedSet('defghi')\n"
"overlap = s1 & s2            # The __and__() method is supported "
"automatically"
msgstr ""

#: ../../../library/collections.abc.rst:161
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""

#: ../../../library/collections.abc.rst:164
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an iterable. The class constructor is "
"assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called :meth:"
"`_from_iterable` which calls ``cls(iterable)`` to produce a new set. If the :"
"class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`_from_iterable` with a "
"classmethod that can construct new instances from an iterable argument."
msgstr ""

#: ../../../library/collections.abc.rst:175
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""

#: ../../../library/collections.abc.rst:180
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not all "
"sets are hashable or immutable.  To add set hashability using mixins, "
"inherit from both :meth:`Set` and :meth:`Hashable`, then define ``__hash__ = "
"Set._hash``."
msgstr ""

#: ../../../library/collections.abc.rst:188
msgid ""
"`OrderedSet recipe <http://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""

#: ../../../library/collections.abc.rst:191
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
