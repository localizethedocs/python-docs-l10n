# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../extending/building.rst:8
msgid "Building C and C++ Extensions with distutils"
msgstr ""

#: ../../../extending/building.rst:13
msgid ""
"Starting in Python 1.4, Python provides, on Unix, a special make file for "
"building make files for building dynamically-linked extensions and custom "
"interpreters.  Starting with Python 2.0, this mechanism (known as related to "
"Makefile.pre.in, and Setup files) is no longer supported. Building custom "
"interpreters was rarely used, and extension modules can be built using "
"distutils."
msgstr ""

#: ../../../extending/building.rst:20
msgid ""
"Building an extension module using distutils requires that distutils is "
"installed on the build machine, which is included in Python 2.x and "
"available separately for Python 1.5. Since distutils also supports creation "
"of binary packages, users don't necessarily need a compiler and distutils to "
"install the extension."
msgstr ""

#: ../../../extending/building.rst:26
msgid ""
"A distutils package contains a driver script, :file:`setup.py`. This is a "
"plain Python file, which, in the most simple case, could look like this::"
msgstr ""

#: ../../../extending/building.rst:29
msgid ""
"from distutils.core import setup, Extension\n"
"\n"
"module1 = Extension('demo',\n"
"                    sources = ['demo.c'])\n"
"\n"
"setup (name = 'PackageName',\n"
"       version = '1.0',\n"
"       description = 'This is a demo package',\n"
"       ext_modules = [module1])"
msgstr ""

#: ../../../extending/building.rst:40
msgid "With this :file:`setup.py`, and a file :file:`demo.c`, running ::"
msgstr ""

#: ../../../extending/building.rst:42
msgid "python setup.py build"
msgstr ""

#: ../../../extending/building.rst:44
msgid ""
"will compile :file:`demo.c`, and produce an extension module named ``demo`` "
"in the :file:`build` directory. Depending on the system, the module file "
"will end up in a subdirectory :file:`build/lib.system`, and may have a name "
"like :file:`demo.so` or :file:`demo.pyd`."
msgstr ""

#: ../../../extending/building.rst:49
msgid ""
"In the :file:`setup.py`, all execution is performed by calling the ``setup`` "
"function. This takes a variable number of keyword arguments, of which the "
"example above uses only a subset. Specifically, the example specifies meta-"
"information to build packages, and it specifies the contents of the "
"package.  Normally, a package will contain of addition modules, like Python "
"source modules, documentation, subpackages, etc. Please refer to the "
"distutils documentation in :ref:`distutils-index` to learn more about the "
"features of distutils; this section explains building extension modules only."
msgstr ""

#: ../../../extending/building.rst:58
msgid ""
"It is common to pre-compute arguments to :func:`setup`, to better structure "
"the driver script. In the example above, the ``ext_modules`` argument to :"
"func:`setup` is a list of extension modules, each of which is an instance of "
"the :class:`~distutils.extension.Extension`. In the example, the instance "
"defines an extension named ``demo`` which is build by compiling a single "
"source file, :file:`demo.c`."
msgstr ""

#: ../../../extending/building.rst:65
msgid ""
"In many cases, building an extension is more complex, since additional "
"preprocessor defines and libraries may be needed. This is demonstrated in "
"the example below. ::"
msgstr ""

#: ../../../extending/building.rst:69
msgid ""
"from distutils.core import setup, Extension\n"
"\n"
"module1 = Extension('demo',\n"
"                    define_macros = [('MAJOR_VERSION', '1'),\n"
"                                     ('MINOR_VERSION', '0')],\n"
"                    include_dirs = ['/usr/local/include'],\n"
"                    libraries = ['tcl83'],\n"
"                    library_dirs = ['/usr/local/lib'],\n"
"                    sources = ['demo.c'])\n"
"\n"
"setup (name = 'PackageName',\n"
"       version = '1.0',\n"
"       description = 'This is a demo package',\n"
"       author = 'Martin v. Loewis',\n"
"       author_email = 'martin@v.loewis.de',\n"
"       url = 'https://docs.python.org/extending/building',\n"
"       long_description = '''\n"
"This is really just a demo package.\n"
"''',\n"
"       ext_modules = [module1])"
msgstr ""

#: ../../../extending/building.rst:91
msgid ""
"In this example, :func:`setup` is called with additional meta-information, "
"which is recommended when distribution packages have to be built. For the "
"extension itself, it specifies preprocessor defines, include directories, "
"library directories, and libraries. Depending on the compiler, distutils "
"passes this information in different ways to the compiler. For example, on "
"Unix, this may result in the compilation commands ::"
msgstr ""

#: ../../../extending/building.rst:98
msgid ""
"gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -fPIC -DMAJOR_VERSION=1 -"
"DMINOR_VERSION=0 -I/usr/local/include -I/usr/local/include/python2.2 -c demo."
"c -o build/temp.linux-i686-2.2/demo.o\n"
"\n"
"gcc -shared build/temp.linux-i686-2.2/demo.o -L/usr/local/lib -ltcl83 -o "
"build/lib.linux-i686-2.2/demo.so"
msgstr ""

#: ../../../extending/building.rst:102
msgid ""
"These lines are for demonstration purposes only; distutils users should "
"trust that distutils gets the invocations right."
msgstr ""

#: ../../../extending/building.rst:109
msgid "Distributing your extension modules"
msgstr ""

#: ../../../extending/building.rst:111
msgid ""
"When an extension has been successfully build, there are three ways to use "
"it."
msgstr ""

#: ../../../extending/building.rst:113
msgid ""
"End-users will typically want to install the module, they do so by running ::"
msgstr ""

#: ../../../extending/building.rst:115
msgid "python setup.py install"
msgstr ""

#: ../../../extending/building.rst:117
msgid ""
"Module maintainers should produce source packages; to do so, they run ::"
msgstr ""

#: ../../../extending/building.rst:119
msgid "python setup.py sdist"
msgstr ""

#: ../../../extending/building.rst:121
msgid ""
"In some cases, additional files need to be included in a source "
"distribution; this is done through a :file:`MANIFEST.in` file; see the "
"distutils documentation for details."
msgstr ""

#: ../../../extending/building.rst:125
msgid ""
"If the source distribution has been build successfully, maintainers can also "
"create binary distributions. Depending on the platform, one of the following "
"commands can be used to do so. ::"
msgstr ""

#: ../../../extending/building.rst:129
msgid ""
"python setup.py bdist_wininst\n"
"python setup.py bdist_rpm\n"
"python setup.py bdist_dumb"
msgstr ""
