# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/memory.rst:8
msgid "Memory Management"
msgstr ""

#: ../../../c-api/memory.rst:17
msgid "Overview"
msgstr ""

#: ../../../c-api/memory.rst:19
msgid ""
"Memory management in Python involves a private heap containing all Python "
"objects and data structures. The management of this private heap is ensured "
"internally by the *Python memory manager*.  The Python memory manager has "
"different components which deal with various dynamic storage management "
"aspects, like sharing, segmentation, preallocation or caching."
msgstr ""

#: ../../../c-api/memory.rst:25
msgid ""
"At the lowest level, a raw memory allocator ensures that there is enough "
"room in the private heap for storing all Python-related data by interacting "
"with the memory manager of the operating system. On top of the raw memory "
"allocator, several object-specific allocators operate on the same heap and "
"implement distinct memory management policies adapted to the peculiarities "
"of every object type. For example, integer objects are managed differently "
"within the heap than strings, tuples or dictionaries because integers imply "
"different storage requirements and speed/space tradeoffs. The Python memory "
"manager thus delegates some of the work to the object-specific allocators, "
"but ensures that the latter operate within the bounds of the private heap."
msgstr ""

#: ../../../c-api/memory.rst:36
msgid ""
"It is important to understand that the management of the Python heap is "
"performed by the interpreter itself and that the user has no control over "
"it, even if she regularly manipulates object pointers to memory blocks "
"inside that heap.  The allocation of heap space for Python objects and other "
"internal buffers is performed on demand by the Python memory manager through "
"the Python/C API functions listed in this document."
msgstr ""

#: ../../../c-api/memory.rst:49
msgid ""
"To avoid memory corruption, extension writers should never try to operate on "
"Python objects with the functions exported by the C library: :c:func:"
"`malloc`, :c:func:`calloc`, :c:func:`realloc` and :c:func:`free`.  This will "
"result in  mixed calls between the C allocator and the Python memory manager "
"with fatal consequences, because they implement different algorithms and "
"operate on different heaps.  However, one may safely allocate and release "
"memory blocks with the C library allocator for individual purposes, as shown "
"in the following example::"
msgstr ""

#: ../../../c-api/memory.rst:58
msgid ""
"PyObject *res;\n"
"char *buf = (char *) malloc(BUFSIZ); /* for I/O */\n"
"\n"
"if (buf == NULL)\n"
"    return PyErr_NoMemory();\n"
"...Do some I/O operation involving buf...\n"
"res = PyBytes_FromString(buf);\n"
"free(buf); /* malloc'ed */\n"
"return res;"
msgstr ""

#: ../../../c-api/memory.rst:68
msgid ""
"In this example, the memory request for the I/O buffer is handled by the C "
"library allocator. The Python memory manager is involved only in the "
"allocation of the string object returned as a result."
msgstr ""

#: ../../../c-api/memory.rst:72
msgid ""
"In most situations, however, it is recommended to allocate memory from the "
"Python heap specifically because the latter is under control of the Python "
"memory manager. For example, this is required when the interpreter is "
"extended with new object types written in C. Another reason for using the "
"Python heap is the desire to *inform* the Python memory manager about the "
"memory needs of the extension module. Even when the requested memory is used "
"exclusively for internal, highly-specific purposes, delegating all memory "
"requests to the Python memory manager causes the interpreter to have a more "
"accurate image of its memory footprint as a whole. Consequently, under "
"certain circumstances, the Python memory manager may or may not trigger "
"appropriate actions, like garbage collection, memory compaction or other "
"preventive procedures. Note that by using the C library allocator as shown "
"in the previous example, the allocated memory for the I/O buffer escapes "
"completely the Python memory manager."
msgstr ""

#: ../../../c-api/memory.rst:88
msgid "Raw Memory Interface"
msgstr ""

#: ../../../c-api/memory.rst:90
msgid ""
"The following function sets are wrappers to the system allocator. These "
"functions are thread-safe, the :term:`GIL <global interpreter lock>` does "
"not need to be held."
msgstr ""

#: ../../../c-api/memory.rst:94
msgid ""
"The default raw memory block allocator uses the following functions: :c:func:"
"`malloc`, :c:func:`realloc` and :c:func:`free`; call ``malloc(1)`` when "
"requesting zero bytes."
msgstr ""

#: ../../../c-api/memory.rst:102
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void\\*` to the "
"allocated memory, or *NULL* if the request fails. Requesting zero bytes "
"returns a distinct non-*NULL* pointer if possible, as if "
"``PyMem_RawMalloc(1)`` had been called instead. The memory will not have "
"been initialized in any way."
msgstr ""

#: ../../../c-api/memory.rst:111
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes. If *p* is *NULL*, "
"the call is equivalent to ``PyMem_RawMalloc(n)``; else if *n* is equal to "
"zero, the memory block is resized but is not freed, and the returned pointer "
"is non-*NULL*. Unless *p* is *NULL*, it must have been returned by a "
"previous call to :c:func:`PyMem_RawMalloc` or :c:func:`PyMem_RawRealloc`. If "
"the request fails, :c:func:`PyMem_RawRealloc` returns *NULL* and *p* remains "
"a valid pointer to the previous memory area."
msgstr ""

#: ../../../c-api/memory.rst:123
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_RawMalloc` or :c:func:`PyMem_RawRealloc`. "
"Otherwise, or if ``PyMem_Free(p)`` has been called before, undefined "
"behavior occurs. If *p* is *NULL*, no operation is performed."
msgstr ""

#: ../../../c-api/memory.rst:132
msgid "Memory Interface"
msgstr ""

#: ../../../c-api/memory.rst:134
msgid ""
"The following function sets, modeled after the ANSI C standard, but "
"specifying behavior when requesting zero bytes, are available for allocating "
"and releasing memory from the Python heap."
msgstr ""

#: ../../../c-api/memory.rst:138
msgid ""
"The default memory block allocator uses the following functions: :c:func:"
"`malloc`, :c:func:`realloc` and :c:func:`free`; call ``malloc(1)`` when "
"requesting zero bytes."
msgstr ""

#: ../../../c-api/memory.rst:144
msgid ""
"The :term:`GIL <global interpreter lock>` must be held when using these "
"functions."
msgstr ""

#: ../../../c-api/memory.rst:149
msgid ""
"Allocates *n* bytes and returns a pointer of type :c:type:`void\\*` to the "
"allocated memory, or *NULL* if the request fails. Requesting zero bytes "
"returns a distinct non-*NULL* pointer if possible, as if ``PyMem_Malloc(1)`` "
"had been called instead. The memory will not have been initialized in any "
"way."
msgstr ""

#: ../../../c-api/memory.rst:157
msgid ""
"Resizes the memory block pointed to by *p* to *n* bytes. The contents will "
"be unchanged to the minimum of the old and the new sizes. If *p* is *NULL*, "
"the call is equivalent to ``PyMem_Malloc(n)``; else if *n* is equal to zero, "
"the memory block is resized but is not freed, and the returned pointer is "
"non-*NULL*.  Unless *p* is *NULL*, it must have been returned by a previous "
"call to :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`. If the request "
"fails, :c:func:`PyMem_Realloc` returns *NULL* and *p* remains a valid "
"pointer to the previous memory area."
msgstr ""

#: ../../../c-api/memory.rst:169
msgid ""
"Frees the memory block pointed to by *p*, which must have been returned by a "
"previous call to :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`.  "
"Otherwise, or if ``PyMem_Free(p)`` has been called before, undefined "
"behavior occurs. If *p* is *NULL*, no operation is performed."
msgstr ""

#: ../../../c-api/memory.rst:174
msgid ""
"The following type-oriented macros are provided for convenience.  Note  that "
"*TYPE* refers to any C type."
msgstr ""

#: ../../../c-api/memory.rst:180
msgid ""
"Same as :c:func:`PyMem_Malloc`, but allocates ``(n * sizeof(TYPE))`` bytes "
"of memory.  Returns a pointer cast to :c:type:`TYPE\\*`.  The memory will "
"not have been initialized in any way."
msgstr ""

#: ../../../c-api/memory.rst:187
msgid ""
"Same as :c:func:`PyMem_Realloc`, but the memory block is resized to ``(n * "
"sizeof(TYPE))`` bytes.  Returns a pointer cast to :c:type:`TYPE\\*`. On "
"return, *p* will be a pointer to the new memory area, or *NULL* in the event "
"of failure.  This is a C preprocessor macro; p is always reassigned.  Save "
"the original value of p to avoid losing memory when handling errors."
msgstr ""

#: ../../../c-api/memory.rst:196
msgid "Same as :c:func:`PyMem_Free`."
msgstr ""

#: ../../../c-api/memory.rst:198
msgid ""
"In addition, the following macro sets are provided for calling the Python "
"memory allocator directly, without involving the C API functions listed "
"above. However, note that their use does not preserve binary compatibility "
"across Python versions and is therefore deprecated in extension modules."
msgstr ""

#: ../../../c-api/memory.rst:203
msgid ":c:func:`PyMem_MALLOC`, :c:func:`PyMem_REALLOC`, :c:func:`PyMem_FREE`."
msgstr ""

#: ../../../c-api/memory.rst:205
msgid ":c:func:`PyMem_NEW`, :c:func:`PyMem_RESIZE`, :c:func:`PyMem_DEL`."
msgstr ""

#: ../../../c-api/memory.rst:209
msgid "Customize Memory Allocators"
msgstr ""

#: ../../../c-api/memory.rst:215
msgid ""
"Structure used to describe a memory block allocator. The structure has four "
"fields:"
msgstr ""

#: ../../../c-api/memory.rst:219 ../../../c-api/memory.rst:309
msgid "Field"
msgstr ""

#: ../../../c-api/memory.rst:219 ../../../c-api/memory.rst:309
msgid "Meaning"
msgstr ""

#: ../../../c-api/memory.rst:221 ../../../c-api/memory.rst:311
msgid "``void *ctx``"
msgstr ""

#: ../../../c-api/memory.rst:221 ../../../c-api/memory.rst:311
msgid "user context passed as first argument"
msgstr ""

#: ../../../c-api/memory.rst:223
msgid "``void* malloc(void *ctx, size_t size)``"
msgstr ""

#: ../../../c-api/memory.rst:223
msgid "allocate a memory block"
msgstr ""

#: ../../../c-api/memory.rst:225
msgid "``void* realloc(void *ctx, void *ptr, size_t new_size)``"
msgstr ""

#: ../../../c-api/memory.rst:225
msgid "allocate or resize a memory block"
msgstr ""

#: ../../../c-api/memory.rst:227
msgid "``void free(void *ctx, void *ptr)``"
msgstr ""

#: ../../../c-api/memory.rst:227
msgid "free a memory block"
msgstr ""

#: ../../../c-api/memory.rst:232
msgid "Enum used to identify an allocator domain. Domains:"
msgstr ""

#: ../../../c-api/memory.rst:234
msgid ""
":c:data:`PYMEM_DOMAIN_RAW`: functions :c:func:`PyMem_RawMalloc`, :c:func:"
"`PyMem_RawRealloc` and :c:func:`PyMem_RawFree`"
msgstr ""

#: ../../../c-api/memory.rst:236
msgid ""
":c:data:`PYMEM_DOMAIN_MEM`: functions :c:func:`PyMem_Malloc`, :c:func:"
"`PyMem_Realloc` and :c:func:`PyMem_Free`"
msgstr ""

#: ../../../c-api/memory.rst:238
msgid ""
":c:data:`PYMEM_DOMAIN_OBJ`: functions :c:func:`PyObject_Malloc`, :c:func:"
"`PyObject_Realloc` and :c:func:`PyObject_Free`"
msgstr ""

#: ../../../c-api/memory.rst:244
msgid "Get the memory block allocator of the specified domain."
msgstr ""

#: ../../../c-api/memory.rst:249
msgid "Set the memory block allocator of the specified domain."
msgstr ""

#: ../../../c-api/memory.rst:251
msgid ""
"The new allocator must return a distinct non-NULL pointer when requesting "
"zero bytes."
msgstr ""

#: ../../../c-api/memory.rst:254
msgid ""
"For the :c:data:`PYMEM_DOMAIN_RAW` domain, the allocator must be thread-"
"safe: the :term:`GIL <global interpreter lock>` is not held when the "
"allocator is called."
msgstr ""

#: ../../../c-api/memory.rst:258
msgid ""
"If the new allocator is not a hook (does not call the previous allocator), "
"the :c:func:`PyMem_SetupDebugHooks` function must be called to reinstall the "
"debug hooks on top on the new allocator."
msgstr ""

#: ../../../c-api/memory.rst:265
msgid ""
"Setup hooks to detect bugs in the following Python memory allocator "
"functions:"
msgstr ""

#: ../../../c-api/memory.rst:268
msgid ""
":c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc`, :c:func:"
"`PyMem_RawFree`"
msgstr ""

#: ../../../c-api/memory.rst:270
msgid ":c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, :c:func:`PyMem_Free`"
msgstr ""

#: ../../../c-api/memory.rst:271
msgid ""
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, :c:func:"
"`PyObject_Free`"
msgstr ""

#: ../../../c-api/memory.rst:274
msgid ""
"Newly allocated memory is filled with the byte ``0xCB``, freed memory is "
"filled with the byte ``0xDB``. Additional checks:"
msgstr ""

#: ../../../c-api/memory.rst:277
msgid ""
"detect API violations, ex: :c:func:`PyObject_Free` called on a buffer "
"allocated by :c:func:`PyMem_Malloc`"
msgstr ""

#: ../../../c-api/memory.rst:279
msgid "detect write before the start of the buffer (buffer underflow)"
msgstr ""

#: ../../../c-api/memory.rst:280
msgid "detect write after the end of the buffer (buffer overflow)"
msgstr ""

#: ../../../c-api/memory.rst:282
msgid "The function does nothing if Python is not compiled is debug mode."
msgstr ""

#: ../../../c-api/memory.rst:286
msgid "Customize PyObject Arena Allocator"
msgstr ""

#: ../../../c-api/memory.rst:288
msgid ""
"Python has a *pymalloc* allocator for allocations smaller than 512 bytes. "
"This allocator is optimized for small objects with a short lifetime. It uses "
"memory mappings called \"arenas\" with a fixed size of 256 KB. It falls back "
"to :c:func:`PyMem_RawMalloc` and :c:func:`PyMem_RawRealloc` for allocations "
"larger than 512 bytes.  *pymalloc* is the default allocator used by :c:func:"
"`PyObject_Malloc`."
msgstr ""

#: ../../../c-api/memory.rst:295
msgid "The default arena allocator uses the following functions:"
msgstr ""

#: ../../../c-api/memory.rst:297
msgid ":c:func:`VirtualAlloc` and :c:func:`VirtualFree` on Windows,"
msgstr ""

#: ../../../c-api/memory.rst:298
msgid ":c:func:`mmap` and :c:func:`munmap` if available,"
msgstr ""

#: ../../../c-api/memory.rst:299
msgid ":c:func:`malloc` and :c:func:`free` otherwise."
msgstr ""

#: ../../../c-api/memory.rst:305
msgid ""
"Structure used to describe an arena allocator. The structure has three "
"fields:"
msgstr ""

#: ../../../c-api/memory.rst:313
msgid "``void* alloc(void *ctx, size_t size)``"
msgstr ""

#: ../../../c-api/memory.rst:313
msgid "allocate an arena of size bytes"
msgstr ""

#: ../../../c-api/memory.rst:315
msgid "``void free(void *ctx, size_t size, void *ptr)``"
msgstr ""

#: ../../../c-api/memory.rst:315
msgid "free an arena"
msgstr ""

#: ../../../c-api/memory.rst:320
msgid "Get the arena allocator."
msgstr ""

#: ../../../c-api/memory.rst:324
msgid "Set the arena allocator."
msgstr ""

#: ../../../c-api/memory.rst:330
msgid "Examples"
msgstr ""

#: ../../../c-api/memory.rst:332
msgid ""
"Here is the example from section :ref:`memoryoverview`, rewritten so that "
"the I/O buffer is allocated from the Python heap by using the first function "
"set::"
msgstr ""

#: ../../../c-api/memory.rst:335
msgid ""
"PyObject *res;\n"
"char *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */\n"
"\n"
"if (buf == NULL)\n"
"    return PyErr_NoMemory();\n"
"/* ...Do some I/O operation involving buf... */\n"
"res = PyBytes_FromString(buf);\n"
"PyMem_Free(buf); /* allocated with PyMem_Malloc */\n"
"return res;"
msgstr ""

#: ../../../c-api/memory.rst:345
msgid "The same code using the type-oriented function set::"
msgstr ""

#: ../../../c-api/memory.rst:347
msgid ""
"PyObject *res;\n"
"char *buf = PyMem_New(char, BUFSIZ); /* for I/O */\n"
"\n"
"if (buf == NULL)\n"
"    return PyErr_NoMemory();\n"
"/* ...Do some I/O operation involving buf... */\n"
"res = PyBytes_FromString(buf);\n"
"PyMem_Del(buf); /* allocated with PyMem_New */\n"
"return res;"
msgstr ""

#: ../../../c-api/memory.rst:357
msgid ""
"Note that in the two examples above, the buffer is always manipulated via "
"functions belonging to the same set. Indeed, it is required to use the same "
"memory API family for a given memory block, so that the risk of mixing "
"different allocators is reduced to a minimum. The following code sequence "
"contains two errors, one of which is labeled as *fatal* because it mixes two "
"different allocators operating on different heaps. ::"
msgstr ""

#: ../../../c-api/memory.rst:364
msgid ""
"char *buf1 = PyMem_New(char, BUFSIZ);\n"
"char *buf2 = (char *) malloc(BUFSIZ);\n"
"char *buf3 = (char *) PyMem_Malloc(BUFSIZ);\n"
"...\n"
"PyMem_Del(buf3);  /* Wrong -- should be PyMem_Free() */\n"
"free(buf2);       /* Right -- allocated via malloc() */\n"
"free(buf1);       /* Fatal -- should be PyMem_Del()  */"
msgstr ""

#: ../../../c-api/memory.rst:372
msgid ""
"In addition to the functions aimed at handling raw memory blocks from the "
"Python heap, objects in Python are allocated and released with :c:func:"
"`PyObject_New`, :c:func:`PyObject_NewVar` and :c:func:`PyObject_Del`."
msgstr ""

#: ../../../c-api/memory.rst:376
msgid ""
"These will be explained in the next chapter on defining and implementing new "
"object types in C."
msgstr ""

#: ../../../c-api/memory.rst:43
msgid "malloc()"
msgstr ""

#: ../../../c-api/memory.rst:43
msgid "calloc()"
msgstr ""

#: ../../../c-api/memory.rst:43
msgid "realloc()"
msgstr ""

#: ../../../c-api/memory.rst:43
msgid "free()"
msgstr ""
