# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/concurrent.futures.rst:2
msgid ":mod:`concurrent.futures` --- Launching parallel tasks"
msgstr ""

#: ../../../library/concurrent.futures.rst:9
msgid ""
"**Source code:** :source:`Lib/concurrent/futures/thread.py` and :source:`Lib/"
"concurrent/futures/process.py`"
msgstr ""

#: ../../../library/concurrent.futures.rst:14
msgid ""
"The :mod:`concurrent.futures` module provides a high-level interface for "
"asynchronously executing callables."
msgstr ""

#: ../../../library/concurrent.futures.rst:17
msgid ""
"The asynchronous execution can be performed with threads, using :class:"
"`ThreadPoolExecutor`, or separate processes, using :class:"
"`ProcessPoolExecutor`.  Both implement the same interface, which is defined "
"by the abstract :class:`Executor` class."
msgstr ""

#: ../../../library/concurrent.futures.rst:24
msgid "Executor Objects"
msgstr ""

#: ../../../library/concurrent.futures.rst:28
msgid ""
"An abstract class that provides methods to execute calls asynchronously.  It "
"should not be used directly, but through its concrete subclasses."
msgstr ""

#: ../../../library/concurrent.futures.rst:33
msgid ""
"Schedules the callable, *fn*, to be executed as ``fn(*args **kwargs)`` and "
"returns a :class:`Future` object representing the execution of the "
"callable. ::"
msgstr ""

#: ../../../library/concurrent.futures.rst:43
msgid ""
"Equivalent to :func:`map(func, *iterables) <map>` except *func* is executed "
"asynchronously and several calls to *func* may be made concurrently.  The "
"returned iterator raises a :exc:`TimeoutError` if :meth:`~iterator.__next__` "
"is called and the result isn't available after *timeout* seconds from the "
"original call to :meth:`Executor.map`. *timeout* can be an int or a float.  "
"If *timeout* is not specified or ``None``, there is no limit to the wait "
"time.  If a call raises an exception, then that exception will be raised "
"when its value is retrieved from the iterator."
msgstr ""

#: ../../../library/concurrent.futures.rst:55
msgid ""
"Signal the executor that it should free any resources that it is using when "
"the currently pending futures are done executing.  Calls to :meth:`Executor."
"submit` and :meth:`Executor.map` made after shutdown will raise :exc:"
"`RuntimeError`."
msgstr ""

#: ../../../library/concurrent.futures.rst:60
msgid ""
"If *wait* is ``True`` then this method will not return until all the pending "
"futures are done executing and the resources associated with the executor "
"have been freed.  If *wait* is ``False`` then this method will return "
"immediately and the resources associated with the executor will be freed "
"when all pending futures are done executing.  Regardless of the value of "
"*wait*, the entire Python program will not exit until all pending futures "
"are done executing."
msgstr ""

#: ../../../library/concurrent.futures.rst:68
msgid ""
"You can avoid having to call this method explicitly if you use the :keyword:"
"`with` statement, which will shutdown the :class:`Executor` (waiting as if :"
"meth:`Executor.shutdown` were called with *wait* set to ``True``)::"
msgstr ""

#: ../../../library/concurrent.futures.rst:82
msgid "ThreadPoolExecutor"
msgstr ""

#: ../../../library/concurrent.futures.rst:84
msgid ""
":class:`ThreadPoolExecutor` is a :class:`Executor` subclass that uses a pool "
"of threads to execute calls asynchronously."
msgstr ""

#: ../../../library/concurrent.futures.rst:87
msgid ""
"Deadlocks can occur when the callable associated with a :class:`Future` "
"waits on the results of another :class:`Future`.  For example::"
msgstr ""

#: ../../../library/concurrent.futures.rst:106
msgid "And::"
msgstr ""

#: ../../../library/concurrent.futures.rst:120
msgid ""
"An :class:`Executor` subclass that uses a pool of at most *max_workers* "
"threads to execute calls asynchronously."
msgstr ""

#: ../../../library/concurrent.futures.rst:127
msgid "ThreadPoolExecutor Example"
msgstr ""

#: ../../../library/concurrent.futures.rst:159
msgid "ProcessPoolExecutor"
msgstr ""

#: ../../../library/concurrent.futures.rst:161
msgid ""
"The :class:`ProcessPoolExecutor` class is an :class:`Executor` subclass that "
"uses a pool of processes to execute calls asynchronously. :class:"
"`ProcessPoolExecutor` uses the :mod:`multiprocessing` module, which allows "
"it to side-step the :term:`Global Interpreter Lock` but also means that only "
"picklable objects can be executed and returned."
msgstr ""

#: ../../../library/concurrent.futures.rst:167
msgid ""
"Calling :class:`Executor` or :class:`Future` methods from a callable "
"submitted to a :class:`ProcessPoolExecutor` will result in deadlock."
msgstr ""

#: ../../../library/concurrent.futures.rst:172
msgid ""
"An :class:`Executor` subclass that executes calls asynchronously using a "
"pool of at most *max_workers* processes.  If *max_workers* is ``None`` or "
"not given, it will default to the number of processors on the machine."
msgstr ""

#: ../../../library/concurrent.futures.rst:176
msgid ""
"When one of the worker processes terminates abruptly, a :exc:"
"`BrokenProcessPool` error is now raised.  Previously, behaviour was "
"undefined but operations on the executor or its futures would often freeze "
"or deadlock."
msgstr ""

#: ../../../library/concurrent.futures.rst:186
msgid "ProcessPoolExecutor Example"
msgstr ""

#: ../../../library/concurrent.futures.rst:220
msgid "Future Objects"
msgstr ""

#: ../../../library/concurrent.futures.rst:222
msgid ""
"The :class:`Future` class encapsulates the asynchronous execution of a "
"callable. :class:`Future` instances are created by :meth:`Executor.submit`."
msgstr ""

#: ../../../library/concurrent.futures.rst:227
msgid ""
"Encapsulates the asynchronous execution of a callable.  :class:`Future` "
"instances are created by :meth:`Executor.submit` and should not be created "
"directly except for testing."
msgstr ""

#: ../../../library/concurrent.futures.rst:233
msgid ""
"Attempt to cancel the call.  If the call is currently being executed and "
"cannot be cancelled then the method will return ``False``, otherwise the "
"call will be cancelled and the method will return ``True``."
msgstr ""

#: ../../../library/concurrent.futures.rst:239
msgid "Return ``True`` if the call was successfully cancelled."
msgstr ""

#: ../../../library/concurrent.futures.rst:243
msgid ""
"Return ``True`` if the call is currently being executed and cannot be "
"cancelled."
msgstr ""

#: ../../../library/concurrent.futures.rst:248
msgid ""
"Return ``True`` if the call was successfully cancelled or finished running."
msgstr ""

#: ../../../library/concurrent.futures.rst:253
msgid ""
"Return the value returned by the call. If the call hasn't yet completed then "
"this method will wait up to *timeout* seconds.  If the call hasn't completed "
"in *timeout* seconds, then a :exc:`TimeoutError` will be raised. *timeout* "
"can be an int or float.  If *timeout* is not specified or ``None``, there is "
"no limit to the wait time."
msgstr ""

#: ../../../library/concurrent.futures.rst:259
#: ../../../library/concurrent.futures.rst:272
msgid ""
"If the future is cancelled before completing then :exc:`CancelledError` will "
"be raised."
msgstr ""

#: ../../../library/concurrent.futures.rst:262
msgid "If the call raised, this method will raise the same exception."
msgstr ""

#: ../../../library/concurrent.futures.rst:266
msgid ""
"Return the exception raised by the call.  If the call hasn't yet completed "
"then this method will wait up to *timeout* seconds.  If the call hasn't "
"completed in *timeout* seconds, then a :exc:`TimeoutError` will be raised.  "
"*timeout* can be an int or float.  If *timeout* is not specified or "
"``None``, there is no limit to the wait time."
msgstr ""

#: ../../../library/concurrent.futures.rst:275
msgid "If the call completed without raising, ``None`` is returned."
msgstr ""

#: ../../../library/concurrent.futures.rst:279
msgid ""
"Attaches the callable *fn* to the future.  *fn* will be called, with the "
"future as its only argument, when the future is cancelled or finishes "
"running."
msgstr ""

#: ../../../library/concurrent.futures.rst:283
msgid ""
"Added callables are called in the order that they were added and are always "
"called in a thread belonging to the process that added them.  If the "
"callable raises a :exc:`Exception` subclass, it will be logged and ignored.  "
"If the callable raises a :exc:`BaseException` subclass, the behavior is "
"undefined."
msgstr ""

#: ../../../library/concurrent.futures.rst:289
msgid ""
"If the future has already completed or been cancelled, *fn* will be called "
"immediately."
msgstr ""

#: ../../../library/concurrent.futures.rst:292
msgid ""
"The following :class:`Future` methods are meant for use in unit tests and :"
"class:`Executor` implementations."
msgstr ""

#: ../../../library/concurrent.futures.rst:297
msgid ""
"This method should only be called by :class:`Executor` implementations "
"before executing the work associated with the :class:`Future` and by unit "
"tests."
msgstr ""

#: ../../../library/concurrent.futures.rst:301
msgid ""
"If the method returns ``False`` then the :class:`Future` was cancelled, i."
"e. :meth:`Future.cancel` was called and returned `True`.  Any threads "
"waiting on the :class:`Future` completing (i.e. through :func:`as_completed` "
"or :func:`wait`) will be woken up."
msgstr ""

#: ../../../library/concurrent.futures.rst:306
msgid ""
"If the method returns ``True`` then the :class:`Future` was not cancelled "
"and has been put in the running state, i.e. calls to :meth:`Future.running` "
"will return `True`."
msgstr ""

#: ../../../library/concurrent.futures.rst:310
msgid ""
"This method can only be called once and cannot be called after :meth:`Future."
"set_result` or :meth:`Future.set_exception` have been called."
msgstr ""

#: ../../../library/concurrent.futures.rst:316
msgid ""
"Sets the result of the work associated with the :class:`Future` to *result*."
msgstr ""

#: ../../../library/concurrent.futures.rst:319
#: ../../../library/concurrent.futures.rst:327
msgid ""
"This method should only be used by :class:`Executor` implementations and "
"unit tests."
msgstr ""

#: ../../../library/concurrent.futures.rst:324
msgid ""
"Sets the result of the work associated with the :class:`Future` to the :"
"class:`Exception` *exception*."
msgstr ""

#: ../../../library/concurrent.futures.rst:332
msgid "Module Functions"
msgstr ""

#: ../../../library/concurrent.futures.rst:336
msgid ""
"Wait for the :class:`Future` instances (possibly created by different :class:"
"`Executor` instances) given by *fs* to complete.  Returns a named 2-tuple of "
"sets.  The first set, named ``done``, contains the futures that completed "
"(finished or were cancelled) before the wait completed.  The second set, "
"named ``not_done``, contains uncompleted futures."
msgstr ""

#: ../../../library/concurrent.futures.rst:342
msgid ""
"*timeout* can be used to control the maximum number of seconds to wait "
"before returning.  *timeout* can be an int or float.  If *timeout* is not "
"specified or ``None``, there is no limit to the wait time."
msgstr ""

#: ../../../library/concurrent.futures.rst:346
msgid ""
"*return_when* indicates when this function should return.  It must be one of "
"the following constants:"
msgstr ""

#: ../../../library/concurrent.futures.rst:352
msgid "Constant"
msgstr ""

#: ../../../library/concurrent.futures.rst:352
msgid "Description"
msgstr ""

#: ../../../library/concurrent.futures.rst:354
msgid ":const:`FIRST_COMPLETED`"
msgstr ""

#: ../../../library/concurrent.futures.rst:354
msgid "The function will return when any future finishes or is cancelled."
msgstr ""

#: ../../../library/concurrent.futures.rst:357
msgid ":const:`FIRST_EXCEPTION`"
msgstr ""

#: ../../../library/concurrent.futures.rst:357
msgid ""
"The function will return when any future finishes by raising an exception.  "
"If no future raises an exception then it is equivalent to :const:"
"`ALL_COMPLETED`."
msgstr ""

#: ../../../library/concurrent.futures.rst:363
msgid ":const:`ALL_COMPLETED`"
msgstr ""

#: ../../../library/concurrent.futures.rst:363
msgid "The function will return when all futures finish or are cancelled."
msgstr ""

#: ../../../library/concurrent.futures.rst:369
msgid ""
"Returns an iterator over the :class:`Future` instances (possibly created by "
"different :class:`Executor` instances) given by *fs* that yields futures as "
"they complete (finished or were cancelled). Any futures given by *fs* that "
"are duplicated will be returned once. Any futures that completed before :"
"func:`as_completed` is called will be yielded first.  The returned iterator "
"raises a :exc:`TimeoutError` if :meth:`~iterator.__next__` is called and the "
"result isn't available after *timeout* seconds from the original call to :"
"func:`as_completed`.  *timeout* can be an int or float. If *timeout* is not "
"specified or ``None``, there is no limit to the wait time."
msgstr ""

#: ../../../library/concurrent.futures.rst:384
msgid ":pep:`3148` -- futures - execute computations asynchronously"
msgstr ""

#: ../../../library/concurrent.futures.rst:384
msgid ""
"The proposal which described this feature for inclusion in the Python "
"standard library."
msgstr ""

#: ../../../library/concurrent.futures.rst:389
msgid "Exception classes"
msgstr ""

#: ../../../library/concurrent.futures.rst:393
msgid ""
"Derived from :exc:`RuntimeError`, this exception class is raised when one of "
"the workers of a :class:`ProcessPoolExecutor` has terminated in a non-clean "
"fashion (for example, if it was killed from the outside)."
msgstr ""
