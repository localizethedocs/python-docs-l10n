# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/sysconfig.rst:2
msgid ""
":mod:`sysconfig` --- Provide access to Python's configuration information"
msgstr ""

#: ../../../library/sysconfig.rst:14
msgid "**Source code:** :source:`Lib/sysconfig.py`"
msgstr ""

#: ../../../library/sysconfig.rst:18
msgid ""
"The :mod:`sysconfig` module provides access to Python's configuration "
"information like the list of installation paths and the configuration "
"variables relevant for the current platform."
msgstr ""

#: ../../../library/sysconfig.rst:23
msgid "Configuration variables"
msgstr ""

#: ../../../library/sysconfig.rst:25
msgid ""
"A Python distribution contains a :file:`Makefile` and a :file:`pyconfig.h` "
"header file that are necessary to build both the Python binary itself and "
"third-party C extensions compiled using :mod:`distutils`."
msgstr ""

#: ../../../library/sysconfig.rst:29
msgid ""
":mod:`sysconfig` puts all variables found in these files in a dictionary "
"that can be accessed using :func:`get_config_vars` or :func:`get_config_var`."
msgstr ""

#: ../../../library/sysconfig.rst:32
msgid "Notice that on Windows, it's a much smaller set."
msgstr ""

#: ../../../library/sysconfig.rst:36
msgid ""
"With no arguments, return a dictionary of all configuration variables "
"relevant for the current platform."
msgstr ""

#: ../../../library/sysconfig.rst:39
msgid ""
"With arguments, return a list of values that result from looking up each "
"argument in the configuration variable dictionary."
msgstr ""

#: ../../../library/sysconfig.rst:42
msgid "For each argument, if the value is not found, return ``None``."
msgstr ""

#: ../../../library/sysconfig.rst:47
msgid ""
"Return the value of a single variable *name*. Equivalent to "
"``get_config_vars().get(name)``."
msgstr ""

#: ../../../library/sysconfig.rst:50 ../../../library/sysconfig.rst:142
msgid "If *name* is not found, return ``None``."
msgstr ""

#: ../../../library/sysconfig.rst:52
msgid "Example of usage::"
msgstr ""

#: ../../../library/sysconfig.rst:54
msgid ""
">>> import sysconfig\n"
">>> sysconfig.get_config_var('Py_ENABLE_SHARED')\n"
"0\n"
">>> sysconfig.get_config_var('LIBDIR')\n"
"'/usr/local/lib'\n"
">>> sysconfig.get_config_vars('AR', 'CXX')\n"
"['ar', 'g++']"
msgstr ""

#: ../../../library/sysconfig.rst:64
msgid "Installation paths"
msgstr ""

#: ../../../library/sysconfig.rst:66
msgid ""
"Python uses an installation scheme that differs depending on the platform "
"and on the installation options.  These schemes are stored in :mod:"
"`sysconfig` under unique identifiers based on the value returned by :const:"
"`os.name`."
msgstr ""

#: ../../../library/sysconfig.rst:70
msgid ""
"Every new component that is installed using :mod:`distutils` or a Distutils-"
"based system will follow the same scheme to copy its file in the right "
"places."
msgstr ""

#: ../../../library/sysconfig.rst:74
msgid "Python currently supports seven schemes:"
msgstr ""

#: ../../../library/sysconfig.rst:76
msgid ""
"*posix_prefix*: scheme for Posix platforms like Linux or Mac OS X.  This is "
"the default scheme used when Python or a component is installed."
msgstr ""

#: ../../../library/sysconfig.rst:78
msgid ""
"*posix_home*: scheme for Posix platforms used when a *home* option is used "
"upon installation.  This scheme is used when a component is installed "
"through Distutils with a specific home prefix."
msgstr ""

#: ../../../library/sysconfig.rst:81
msgid ""
"*posix_user*: scheme for Posix platforms used when a component is installed "
"through Distutils and the *user* option is used.  This scheme defines paths "
"located under the user home directory."
msgstr ""

#: ../../../library/sysconfig.rst:84
msgid "*nt*: scheme for NT platforms like Windows."
msgstr ""

#: ../../../library/sysconfig.rst:85
msgid "*nt_user*: scheme for NT platforms, when the *user* option is used."
msgstr ""

#: ../../../library/sysconfig.rst:86
msgid "*os2*: scheme for OS/2 platforms."
msgstr ""

#: ../../../library/sysconfig.rst:87
msgid "*os2_home*: scheme for OS/2 patforms, when the *user* option is used."
msgstr ""

#: ../../../library/sysconfig.rst:89
msgid ""
"Each scheme is itself composed of a series of paths and each path has a "
"unique identifier.  Python currently uses eight paths:"
msgstr ""

#: ../../../library/sysconfig.rst:92
msgid ""
"*stdlib*: directory containing the standard Python library files that are "
"not platform-specific."
msgstr ""

#: ../../../library/sysconfig.rst:94
msgid ""
"*platstdlib*: directory containing the standard Python library files that "
"are platform-specific."
msgstr ""

#: ../../../library/sysconfig.rst:96
msgid "*platlib*: directory for site-specific, platform-specific files."
msgstr ""

#: ../../../library/sysconfig.rst:97
msgid "*purelib*: directory for site-specific, non-platform-specific files."
msgstr ""

#: ../../../library/sysconfig.rst:98
msgid "*include*: directory for non-platform-specific header files."
msgstr ""

#: ../../../library/sysconfig.rst:99
msgid "*platinclude*: directory for platform-specific header files."
msgstr ""

#: ../../../library/sysconfig.rst:100
msgid "*scripts*: directory for script files."
msgstr ""

#: ../../../library/sysconfig.rst:101
msgid "*data*: directory for data files."
msgstr ""

#: ../../../library/sysconfig.rst:103
msgid ":mod:`sysconfig` provides some functions to determine these paths."
msgstr ""

#: ../../../library/sysconfig.rst:107
msgid ""
"Return a tuple containing all schemes currently supported in :mod:"
"`sysconfig`."
msgstr ""

#: ../../../library/sysconfig.rst:113
msgid ""
"Return a tuple containing all path names currently supported in :mod:"
"`sysconfig`."
msgstr ""

#: ../../../library/sysconfig.rst:119
msgid ""
"Return an installation path corresponding to the path *name*, from the "
"install scheme named *scheme*."
msgstr ""

#: ../../../library/sysconfig.rst:122
msgid ""
"*name* has to be a value from the list returned by :func:`get_path_names`."
msgstr ""

#: ../../../library/sysconfig.rst:124
msgid ""
":mod:`sysconfig` stores installation paths corresponding to each path name, "
"for each platform, with variables to be expanded.  For instance the *stdlib* "
"path for the *nt* scheme is: ``{base}/Lib``."
msgstr ""

#: ../../../library/sysconfig.rst:128
msgid ""
":func:`get_path` will use the variables returned by :func:`get_config_vars` "
"to expand the path.  All variables have default values for each platform so "
"one may call this function and get the default value."
msgstr ""

#: ../../../library/sysconfig.rst:132
msgid ""
"If *scheme* is provided, it must be a value from the list returned by :func:"
"`get_scheme_names`.  Otherwise, the default scheme for the current platform "
"is used."
msgstr ""

#: ../../../library/sysconfig.rst:136
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update "
"the dictionary return by :func:`get_config_vars`."
msgstr ""

#: ../../../library/sysconfig.rst:139
msgid ""
"If *expand* is set to ``False``, the path will not be expanded using the "
"variables."
msgstr ""

#: ../../../library/sysconfig.rst:147
msgid ""
"Return a dictionary containing all installation paths corresponding to an "
"installation scheme. See :func:`get_path` for more information."
msgstr ""

#: ../../../library/sysconfig.rst:150
msgid ""
"If *scheme* is not provided, will use the default scheme for the current "
"platform."
msgstr ""

#: ../../../library/sysconfig.rst:153
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update "
"the dictionary used to expand the paths."
msgstr ""

#: ../../../library/sysconfig.rst:156
msgid "If *expand* is set to False, the paths will not be expanded."
msgstr ""

#: ../../../library/sysconfig.rst:158
msgid ""
"If *scheme* is not an existing scheme, :func:`get_paths` will raise a :exc:"
"`KeyError`."
msgstr ""

#: ../../../library/sysconfig.rst:163
msgid "Other functions"
msgstr ""

#: ../../../library/sysconfig.rst:167
msgid ""
"Return the ``MAJOR.MINOR`` Python version number as a string.  Similar to "
"``sys.version[:3]``."
msgstr ""

#: ../../../library/sysconfig.rst:173
msgid "Return a string that identifies the current platform."
msgstr ""

#: ../../../library/sysconfig.rst:175
msgid ""
"This is used mainly to distinguish platform-specific build directories and "
"platform-specific built distributions.  Typically includes the OS name and "
"version and the architecture (as supplied by :func:`os.uname`), although the "
"exact information included depends on the OS; e.g. for IRIX the architecture "
"isn't particularly important (IRIX only runs on SGI hardware), but for Linux "
"the kernel version isn't particularly important."
msgstr ""

#: ../../../library/sysconfig.rst:182
msgid "Examples of returned values:"
msgstr ""

#: ../../../library/sysconfig.rst:184
msgid "linux-i586"
msgstr ""

#: ../../../library/sysconfig.rst:185
msgid "linux-alpha (?)"
msgstr ""

#: ../../../library/sysconfig.rst:186
msgid "solaris-2.6-sun4u"
msgstr ""

#: ../../../library/sysconfig.rst:187
msgid "irix-5.3"
msgstr ""

#: ../../../library/sysconfig.rst:188
msgid "irix64-6.2"
msgstr ""

#: ../../../library/sysconfig.rst:190
msgid "Windows will return one of:"
msgstr ""

#: ../../../library/sysconfig.rst:192
msgid "win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)"
msgstr ""

#: ../../../library/sysconfig.rst:193
msgid "win-ia64 (64bit Windows on Itanium)"
msgstr ""

#: ../../../library/sysconfig.rst:194
msgid "win32 (all others - specifically, sys.platform is returned)"
msgstr ""

#: ../../../library/sysconfig.rst:196
msgid "Mac OS X can return:"
msgstr ""

#: ../../../library/sysconfig.rst:198
msgid "macosx-10.6-ppc"
msgstr ""

#: ../../../library/sysconfig.rst:199
msgid "macosx-10.4-ppc64"
msgstr ""

#: ../../../library/sysconfig.rst:200
msgid "macosx-10.3-i386"
msgstr ""

#: ../../../library/sysconfig.rst:201
msgid "macosx-10.4-fat"
msgstr ""

#: ../../../library/sysconfig.rst:203
msgid ""
"For other non-POSIX platforms, currently just returns :data:`sys.platform`."
msgstr ""

#: ../../../library/sysconfig.rst:208
msgid ""
"Return ``True`` if the current Python installation was built from source."
msgstr ""

#: ../../../library/sysconfig.rst:213
msgid "Parse a :file:`config.h`\\-style file."
msgstr ""

#: ../../../library/sysconfig.rst:215
msgid ""
"*fp* is a file-like object pointing to the :file:`config.h`\\-like file."
msgstr ""

#: ../../../library/sysconfig.rst:217
msgid ""
"A dictionary containing name/value pairs is returned.  If an optional "
"dictionary is passed in as the second argument, it is used instead of a new "
"dictionary, and updated with the values read in the file."
msgstr ""

#: ../../../library/sysconfig.rst:224
msgid "Return the path of :file:`pyconfig.h`."
msgstr ""

#: ../../../library/sysconfig.rst:228
msgid "Return the path of :file:`Makefile`."
msgstr ""

#: ../../../library/sysconfig.rst:231
msgid "Using :mod:`sysconfig` as a script"
msgstr ""

#: ../../../library/sysconfig.rst:233
msgid "You can use :mod:`sysconfig` as a script with Python's *-m* option::"
msgstr ""

#: ../../../library/sysconfig.rst:235
msgid ""
"$ python -m sysconfig\n"
"Platform: \"macosx-10.4-i386\"\n"
"Python version: \"3.2\"\n"
"Current installation scheme: \"posix_prefix\"\n"
"\n"
"Paths:\n"
"        data = \"/usr/local\"\n"
"        include = \"/Users/tarek/Dev/svn.python.org/py3k/Include\"\n"
"        platinclude = \".\"\n"
"        platlib = \"/usr/local/lib/python3.2/site-packages\"\n"
"        platstdlib = \"/usr/local/lib/python3.2\"\n"
"        purelib = \"/usr/local/lib/python3.2/site-packages\"\n"
"        scripts = \"/usr/local/bin\"\n"
"        stdlib = \"/usr/local/lib/python3.2\"\n"
"\n"
"Variables:\n"
"        AC_APPLE_UNIVERSAL_BUILD = \"0\"\n"
"        AIX_GENUINE_CPLUSPLUS = \"0\"\n"
"        AR = \"ar\"\n"
"        ARFLAGS = \"rc\"\n"
"        ASDLGEN = \"./Parser/asdl_c.py\"\n"
"        ..."
msgstr ""

#: ../../../library/sysconfig.rst:258
msgid ""
"This call will print in the standard output the information returned by :"
"func:`get_platform`, :func:`get_python_version`, :func:`get_path` and :func:"
"`get_config_vars`."
msgstr ""

#: ../../../library/sysconfig.rst:9
msgid "configuration information"
msgstr ""
