# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../distutils/packageindex.rst:9
msgid "The Python Package Index (PyPI)"
msgstr ""

#: ../../../distutils/packageindex.rst:11
msgid ""
"The `Python Package Index (PyPI)`_ holds :ref:`meta-data <meta-data>` "
"describing distributions packaged with distutils, as well as package data "
"like distribution files if the package author wishes."
msgstr ""

#: ../../../distutils/packageindex.rst:15
msgid ""
"Distutils exposes two commands for submitting package data to PyPI: the :ref:"
"`register <package-register>` command for submitting meta-data to PyPI and "
"the :ref:`upload <package-upload>` command for submitting distribution "
"files.  Both commands read configuration data from a special file called "
"the :ref:`.pypirc file <pypirc>`.  PyPI :ref:`displays a home page <package-"
"display>` for each package created from the ``long_description`` submitted "
"by the :command:`register` command."
msgstr ""

#: ../../../distutils/packageindex.rst:27
msgid "Registering Packages"
msgstr ""

#: ../../../distutils/packageindex.rst:29
msgid ""
"The distutils command :command:`register` is used to submit your "
"distribution's meta-data to the index. It is invoked as follows::"
msgstr ""

#: ../../../distutils/packageindex.rst:34
msgid "Distutils will respond with the following prompt::"
msgstr ""

#: ../../../distutils/packageindex.rst:44
msgid ""
"Note: if your username and password are saved locally, you will not see this "
"menu."
msgstr ""

#: ../../../distutils/packageindex.rst:47
msgid ""
"If you have not registered with PyPI, then you will need to do so now. You "
"should choose option 2, and enter your details as required. Soon after "
"submitting your details, you will receive an email which will be used to "
"confirm your registration."
msgstr ""

#: ../../../distutils/packageindex.rst:52
msgid ""
"Once you are registered, you may choose option 1 from the menu. You will be "
"prompted for your PyPI username and password, and :command:`register` will "
"then submit your meta-data to the index."
msgstr ""

#: ../../../distutils/packageindex.rst:56
msgid ""
"You may submit any number of versions of your distribution to the index. If "
"you alter the meta-data for a particular version, you may submit it again "
"and the index will be updated."
msgstr ""

#: ../../../distutils/packageindex.rst:60
msgid ""
"PyPI holds a record for each (name, version) combination submitted. The "
"first user to submit information for a given name is designated the Owner of "
"that name. They may submit changes through the :command:`register` command "
"or through the web interface. They may also designate other users as Owners "
"or Maintainers. Maintainers may edit the package information, but not "
"designate other Owners or Maintainers."
msgstr ""

#: ../../../distutils/packageindex.rst:67
msgid ""
"By default PyPI displays only the newest version of a given package. The web "
"interface lets one change this default behavior and manually select which "
"versions to display and hide."
msgstr ""

#: ../../../distutils/packageindex.rst:75
msgid "Uploading Packages"
msgstr ""

#: ../../../distutils/packageindex.rst:77
msgid ""
"The distutils command :command:`upload` pushes the distribution files to "
"PyPI."
msgstr ""

#: ../../../distutils/packageindex.rst:79
msgid ""
"The command is invoked immediately after building one or more distribution "
"files.  For example, the command ::"
msgstr ""

#: ../../../distutils/packageindex.rst:84
msgid ""
"will cause the source distribution and the Windows installer to be uploaded "
"to PyPI.  Note that these will be uploaded even if they are built using an "
"earlier invocation of :file:`setup.py`, but that only distributions named on "
"the command line for the invocation including the :command:`upload` command "
"are uploaded."
msgstr ""

#: ../../../distutils/packageindex.rst:89
msgid ""
"The :command:`upload` command uses the username, password, and repository "
"URL from the :file:`$HOME/.pypirc` file (see section :ref:`pypirc` for more "
"on this file). If a :command:`register` command was previously called in the "
"same command, and if the password was entered in the prompt, :command:"
"`upload` will reuse the entered password. This is useful if you do not want "
"to store a clear text password in the :file:`$HOME/.pypirc` file."
msgstr ""

#: ../../../distutils/packageindex.rst:96
msgid ""
"You can specify another PyPI server with the ``--repository=url`` option::"
msgstr ""

#: ../../../distutils/packageindex.rst:100
msgid "See section :ref:`pypirc` for more on defining several servers."
msgstr ""

#: ../../../distutils/packageindex.rst:102
msgid ""
"You can use the ``--sign`` option to tell :command:`upload` to sign each "
"uploaded file using GPG (GNU Privacy Guard).  The  :program:`gpg` program "
"must be available for execution on the system :envvar:`PATH`.  You can also "
"specify which key to use for signing using the ``--identity=name`` option."
msgstr ""

#: ../../../distutils/packageindex.rst:107
msgid ""
"Other :command:`upload` options include ``--repository=url`` or ``--"
"repository=section`` where *url* is the url of the server and *section* the "
"name of the section in :file:`$HOME/.pypirc`, and ``--show-response`` (which "
"displays the full response text from the PyPI server for help in debugging "
"upload problems)."
msgstr ""

#: ../../../distutils/packageindex.rst:121
msgid "The .pypirc file"
msgstr ""

#: ../../../distutils/packageindex.rst:123
msgid "The format of the :file:`.pypirc` file is as follows::"
msgstr ""

#: ../../../distutils/packageindex.rst:134
msgid ""
"The *distutils* section defines a *index-servers* variable that lists the "
"name of all sections describing a repository."
msgstr ""

#: ../../../distutils/packageindex.rst:137
msgid "Each section describing a repository defines three variables:"
msgstr ""

#: ../../../distutils/packageindex.rst:139
msgid "*repository*, that defines the url of the PyPI server. Defaults to"
msgstr ""

#: ../../../distutils/packageindex.rst:140
msgid "``http://www.python.org/pypi``."
msgstr ""

#: ../../../distutils/packageindex.rst:141
msgid "*username*, which is the registered username on the PyPI server."
msgstr ""

#: ../../../distutils/packageindex.rst:143
msgid "*password*, that will be used to authenticate. If omitted the user"
msgstr ""

#: ../../../distutils/packageindex.rst:143
msgid "will be prompt to type it when needed."
msgstr ""

#: ../../../distutils/packageindex.rst:145
msgid ""
"If you want to define another server a new section can be created and listed "
"in the *index-servers* variable::"
msgstr ""

#: ../../../distutils/packageindex.rst:163
msgid ""
":command:`register` can then be called with the -r option to point the "
"repository to work with::"
msgstr ""

#: ../../../distutils/packageindex.rst:168
msgid ""
"For convenience, the name of the section that describes the repository may "
"also be used::"
msgstr ""

#: ../../../distutils/packageindex.rst:177
msgid "PyPI package display"
msgstr ""

#: ../../../distutils/packageindex.rst:179
msgid ""
"The ``long_description`` field plays a special role at PyPI. It is used by "
"the server to display a home page for the registered package."
msgstr ""

#: ../../../distutils/packageindex.rst:182
msgid ""
"If you use the `reStructuredText <http://docutils.sourceforge.net/rst."
"html>`_ syntax for this field, PyPI will parse it and display an HTML output "
"for the package home page."
msgstr ""

#: ../../../distutils/packageindex.rst:186
msgid ""
"The ``long_description`` field can be attached to a text file located in the "
"package::"
msgstr ""

#: ../../../distutils/packageindex.rst:197
msgid ""
"In that case, :file:`README.txt` is a regular reStructuredText text file "
"located in the root of the package besides :file:`setup.py`."
msgstr ""

#: ../../../distutils/packageindex.rst:200
msgid ""
"To prevent registering broken reStructuredText content, you can use the :"
"program:`rst2html` program that is provided by the :mod:`docutils` package "
"and check the ``long_description`` from the command line::"
msgstr ""

#: ../../../distutils/packageindex.rst:206
msgid ""
":mod:`docutils` will display a warning if there's something wrong with your "
"syntax.  Because PyPI applies additional checks (e.g. by passing ``--no-"
"raw`` to ``rst2html.py`` in the command above), being able to run the "
"command above without warnings does not guarantee that PyPI will convert the "
"content successfully."
msgstr ""

#: ../../../distutils/packageindex.rst:1
#: ../../../distutils/packageindex.rst:114
msgid "Python Package Index (PyPI)"
msgstr ""

#: ../../../distutils/packageindex.rst:1
msgid "PyPI"
msgstr ""

#: ../../../distutils/packageindex.rst:1
msgid "(see Python Package Index (PyPI))"
msgstr ""

#: ../../../distutils/packageindex.rst:114
msgid ".pypirc file"
msgstr ""
