# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/lzma.rst:2
msgid ":mod:`lzma` --- Compression using the LZMA algorithm"
msgstr ""

#: ../../../library/lzma.rst:12
msgid ""
"This module provides classes and convenience functions for compressing and "
"decompressing data using the LZMA compression algorithm. Also included is a "
"file interface supporting the ``.xz`` and legacy ``.lzma`` file formats used "
"by the :program:`xz` utility, as well as raw compressed streams."
msgstr ""

#: ../../../library/lzma.rst:17
msgid ""
"The interface provided by this module is very similar to that of the :mod:"
"`bz2` module. However, note that :class:`LZMAFile` is *not* thread-safe, "
"unlike :class:`bz2.BZ2File`, so if you need to use a single :class:"
"`LZMAFile` instance from multiple threads, it is necessary to protect it "
"with a lock."
msgstr ""

#: ../../../library/lzma.rst:25
msgid ""
"This exception is raised when an error occurs during compression or "
"decompression, or while initializing the compressor/decompressor state."
msgstr ""

#: ../../../library/lzma.rst:30
msgid "Reading and writing compressed files"
msgstr ""

#: ../../../library/lzma.rst:34
msgid ""
"Open an LZMA-compressed file in binary or text mode, returning a :term:`file "
"object`."
msgstr ""

#: ../../../library/lzma.rst:37
msgid ""
"The *filename* argument can be either an actual file name (given as a :class:"
"`str` or :class:`bytes` object), in which case the named file is opened, or "
"it can be an existing file object to read from or write to."
msgstr ""

#: ../../../library/lzma.rst:41
msgid ""
"The *mode* argument can be any of ``\"r\"``, ``\"rb\"``, ``\"w\"``, "
"``\"wb\"``, ``\"a\"`` or ``\"ab\"`` for binary mode, or ``\"rt\"``, "
"``\"wt\"``, or ``\"at\"`` for text mode. The default is ``\"rb\"``."
msgstr ""

#: ../../../library/lzma.rst:45 ../../../library/lzma.rst:82
msgid ""
"When opening a file for reading, the *format* and *filters* arguments have "
"the same meanings as for :class:`LZMADecompressor`. In this case, the "
"*check* and *preset* arguments should not be used."
msgstr ""

#: ../../../library/lzma.rst:49 ../../../library/lzma.rst:86
msgid ""
"When opening a file for writing, the *format*, *check*, *preset* and "
"*filters* arguments have the same meanings as for :class:`LZMACompressor`."
msgstr ""

#: ../../../library/lzma.rst:52
msgid ""
"For binary mode, this function is equivalent to the :class:`LZMAFile` "
"constructor: ``LZMAFile(filename, mode, ...)``. In this case, the "
"*encoding*, *errors* and *newline* arguments must not be provided."
msgstr ""

#: ../../../library/lzma.rst:56
msgid ""
"For text mode, a :class:`LZMAFile` object is created, and wrapped in an :"
"class:`io.TextIOWrapper` instance with the specified encoding, error "
"handling behavior, and line ending(s)."
msgstr ""

#: ../../../library/lzma.rst:63
msgid "Open an LZMA-compressed file in binary mode."
msgstr ""

#: ../../../library/lzma.rst:65
msgid ""
"An :class:`LZMAFile` can wrap an already-open :term:`file object`, or "
"operate directly on a named file. The *filename* argument specifies either "
"the file object to wrap, or the name of the file to open (as a :class:`str` "
"or :class:`bytes` object). When wrapping an existing file object, the "
"wrapped file will not be closed when the :class:`LZMAFile` is closed."
msgstr ""

#: ../../../library/lzma.rst:71
msgid ""
"The *mode* argument can be either ``\"r\"`` for reading (default), ``\"w\"`` "
"for overwriting, or ``\"a\"`` for appending. These can equivalently be given "
"as ``\"rb\"``, ``\"wb\"``, and ``\"ab\"`` respectively."
msgstr ""

#: ../../../library/lzma.rst:75
msgid ""
"If *filename* is a file object (rather than an actual file name), a mode of "
"``\"w\"`` does not truncate the file, and is instead equivalent to ``\"a\"``."
msgstr ""

#: ../../../library/lzma.rst:78
msgid ""
"When opening a file for reading, the input file may be the concatenation of "
"multiple separate compressed streams. These are transparently decoded as a "
"single logical stream."
msgstr ""

#: ../../../library/lzma.rst:89
msgid ""
":class:`LZMAFile` supports all the members specified by :class:`io."
"BufferedIOBase`, except for :meth:`detach` and :meth:`truncate`. Iteration "
"and the :keyword:`with` statement are supported."
msgstr ""

#: ../../../library/lzma.rst:93
msgid "The following method is also provided:"
msgstr ""

#: ../../../library/lzma.rst:97
msgid ""
"Return buffered data without advancing the file position. At least one byte "
"of data will be returned, unless EOF has been reached. The exact number of "
"bytes returned is unspecified (the *size* argument is ignored)."
msgstr ""

#: ../../../library/lzma.rst:101
msgid ""
"While calling :meth:`peek` does not change the file position of the :class:"
"`LZMAFile`, it may change the position of the underlying file object (e.g. "
"if the :class:`LZMAFile` was constructed by passing a file object for "
"*filename*)."
msgstr ""

#: ../../../library/lzma.rst:108
msgid "Compressing and decompressing data in memory"
msgstr ""

#: ../../../library/lzma.rst:112
msgid ""
"Create a compressor object, which can be used to compress data incrementally."
msgstr ""

#: ../../../library/lzma.rst:114
msgid ""
"For a more convenient way of compressing a single chunk of data, see :func:"
"`compress`."
msgstr ""

#: ../../../library/lzma.rst:117
msgid ""
"The *format* argument specifies what container format should be used. "
"Possible values are:"
msgstr ""

#: ../../../library/lzma.rst:121
msgid ":const:`FORMAT_XZ`: The ``.xz`` container format."
msgstr ""

#: ../../../library/lzma.rst:121
msgid "This is the default format."
msgstr ""

#: ../../../library/lzma.rst:125
msgid ":const:`FORMAT_ALONE`: The legacy ``.lzma`` container format."
msgstr ""

#: ../../../library/lzma.rst:124
msgid ""
"This format is more limited than ``.xz`` -- it does not support integrity "
"checks or multiple filters."
msgstr ""

#: ../../../library/lzma.rst:131
msgid ":const:`FORMAT_RAW`: A raw data stream, not using any container format."
msgstr ""

#: ../../../library/lzma.rst:128
msgid ""
"This format specifier does not support integrity checks, and requires that "
"you always specify a custom filter chain (for both compression and "
"decompression). Additionally, data compressed in this manner cannot be "
"decompressed using :const:`FORMAT_AUTO` (see :class:`LZMADecompressor`)."
msgstr ""

#: ../../../library/lzma.rst:133
msgid ""
"The *check* argument specifies the type of integrity check to include in the "
"compressed data. This check is used when decompressing, to ensure that the "
"data has not been corrupted. Possible values are:"
msgstr ""

#: ../../../library/lzma.rst:137
msgid ""
":const:`CHECK_NONE`: No integrity check. This is the default (and the only "
"acceptable value) for :const:`FORMAT_ALONE` and :const:`FORMAT_RAW`."
msgstr ""

#: ../../../library/lzma.rst:141
msgid ":const:`CHECK_CRC32`: 32-bit Cyclic Redundancy Check."
msgstr ""

#: ../../../library/lzma.rst:143
msgid ""
":const:`CHECK_CRC64`: 64-bit Cyclic Redundancy Check. This is the default "
"for :const:`FORMAT_XZ`."
msgstr ""

#: ../../../library/lzma.rst:146
msgid ":const:`CHECK_SHA256`: 256-bit Secure Hash Algorithm."
msgstr ""

#: ../../../library/lzma.rst:148
msgid ""
"If the specified check is not supported, an :class:`LZMAError` is raised."
msgstr ""

#: ../../../library/lzma.rst:150
msgid ""
"The compression settings can be specified either as a preset compression "
"level (with the *preset* argument), or in detail as a custom filter chain "
"(with the *filters* argument)."
msgstr ""

#: ../../../library/lzma.rst:154
msgid ""
"The *preset* argument (if provided) should be an integer between ``0`` and "
"``9`` (inclusive), optionally OR-ed with the constant :const:"
"`PRESET_EXTREME`. If neither *preset* nor *filters* are given, the default "
"behavior is to use :const:`PRESET_DEFAULT` (preset level ``6``). Higher "
"presets produce smaller output, but make the compression process slower."
msgstr ""

#: ../../../library/lzma.rst:163
msgid ""
"In addition to being more CPU-intensive, compression with higher presets "
"also requires much more memory (and produces output that needs more memory "
"to decompress). With preset ``9`` for example, the overhead for an :class:"
"`LZMACompressor` object can be as high as 800 MiB. For this reason, it is "
"generally best to stick with the default preset."
msgstr ""

#: ../../../library/lzma.rst:169
msgid ""
"The *filters* argument (if provided) should be a filter chain specifier. "
"See :ref:`filter-chain-specs` for details."
msgstr ""

#: ../../../library/lzma.rst:174
msgid ""
"Compress *data* (a :class:`bytes` object), returning a :class:`bytes` object "
"containing compressed data for at least part of the input. Some of *data* "
"may be buffered internally, for use in later calls to :meth:`compress` and :"
"meth:`flush`. The returned data should be concatenated with the output of "
"any previous calls to :meth:`compress`."
msgstr ""

#: ../../../library/lzma.rst:182
msgid ""
"Finish the compression process, returning a :class:`bytes` object containing "
"any data stored in the compressor's internal buffers."
msgstr ""

#: ../../../library/lzma.rst:185
msgid "The compressor cannot be used after this method has been called."
msgstr ""

#: ../../../library/lzma.rst:190
msgid ""
"Create a decompressor object, which can be used to decompress data "
"incrementally."
msgstr ""

#: ../../../library/lzma.rst:193
msgid ""
"For a more convenient way of decompressing an entire compressed stream at "
"once, see :func:`decompress`."
msgstr ""

#: ../../../library/lzma.rst:196
msgid ""
"The *format* argument specifies the container format that should be used. "
"The default is :const:`FORMAT_AUTO`, which can decompress both ``.xz`` and "
"``.lzma`` files. Other possible values are :const:`FORMAT_XZ`, :const:"
"`FORMAT_ALONE`, and :const:`FORMAT_RAW`."
msgstr ""

#: ../../../library/lzma.rst:201
msgid ""
"The *memlimit* argument specifies a limit (in bytes) on the amount of memory "
"that the decompressor can use. When this argument is used, decompression "
"will fail with an :class:`LZMAError` if it is not possible to decompress the "
"input within the given memory limit."
msgstr ""

#: ../../../library/lzma.rst:206
msgid ""
"The *filters* argument specifies the filter chain that was used to create "
"the stream being decompressed. This argument is required if *format* is :"
"const:`FORMAT_RAW`, but should not be used for other formats. See :ref:"
"`filter-chain-specs` for more information about filter chains."
msgstr ""

#: ../../../library/lzma.rst:212
msgid ""
"This class does not transparently handle inputs containing multiple "
"compressed streams, unlike :func:`decompress` and :class:`LZMAFile`. To "
"decompress a multi-stream input with :class:`LZMADecompressor`, you must "
"create a new decompressor for each stream."
msgstr ""

#: ../../../library/lzma.rst:219
msgid ""
"Decompress *data* (a :class:`bytes` object), returning a :class:`bytes` "
"object containing the decompressed data for at least part of the input. Some "
"of *data* may be buffered internally, for use in later calls to :meth:"
"`decompress`. The returned data should be concatenated with the output of "
"any previous calls to :meth:`decompress`."
msgstr ""

#: ../../../library/lzma.rst:227
msgid ""
"The ID of the integrity check used by the input stream. This may be :const:"
"`CHECK_UNKNOWN` until enough of the input has been decoded to determine what "
"integrity check it uses."
msgstr ""

#: ../../../library/lzma.rst:233
msgid "``True`` if the end-of-stream marker has been reached."
msgstr ""

#: ../../../library/lzma.rst:237
msgid "Data found after the end of the compressed stream."
msgstr ""

#: ../../../library/lzma.rst:239
msgid "Before the end of the stream is reached, this will be ``b\"\"``."
msgstr ""

#: ../../../library/lzma.rst:244
msgid ""
"Compress *data* (a :class:`bytes` object), returning the compressed data as "
"a :class:`bytes` object."
msgstr ""

#: ../../../library/lzma.rst:247
msgid ""
"See :class:`LZMACompressor` above for a description of the *format*, "
"*check*, *preset* and *filters* arguments."
msgstr ""

#: ../../../library/lzma.rst:253
msgid ""
"Decompress *data* (a :class:`bytes` object), returning the uncompressed data "
"as a :class:`bytes` object."
msgstr ""

#: ../../../library/lzma.rst:256
msgid ""
"If *data* is the concatenation of multiple distinct compressed streams, "
"decompress all of these streams, and return the concatenation of the results."
msgstr ""

#: ../../../library/lzma.rst:259
msgid ""
"See :class:`LZMADecompressor` above for a description of the *format*, "
"*memlimit* and *filters* arguments."
msgstr ""

#: ../../../library/lzma.rst:264
msgid "Miscellaneous"
msgstr ""

#: ../../../library/lzma.rst:268
msgid "Returns true if the given integrity check is supported on this system."
msgstr ""

#: ../../../library/lzma.rst:270
msgid ""
":const:`CHECK_NONE` and :const:`CHECK_CRC32` are always supported. :const:"
"`CHECK_CRC64` and :const:`CHECK_SHA256` may be unavailable if you are using "
"a version of :program:`liblzma` that was compiled with a limited feature set."
msgstr ""

#: ../../../library/lzma.rst:279
msgid "Specifying custom filter chains"
msgstr ""

#: ../../../library/lzma.rst:281
msgid ""
"A filter chain specifier is a sequence of dictionaries, where each "
"dictionary contains the ID and options for a single filter. Each dictionary "
"must contain the key ``\"id\"``, and may contain additional keys to specify "
"filter-dependent options. Valid filter IDs are as follows:"
msgstr ""

#: ../../../library/lzma.rst:288
msgid "Compression filters:"
msgstr ""

#: ../../../library/lzma.rst:287
msgid ":const:`FILTER_LZMA1` (for use with :const:`FORMAT_ALONE`)"
msgstr ""

#: ../../../library/lzma.rst:288
msgid ""
":const:`FILTER_LZMA2` (for use with :const:`FORMAT_XZ` and :const:"
"`FORMAT_RAW`)"
msgstr ""

#: ../../../library/lzma.rst:291
msgid "Delta filter:"
msgstr ""

#: ../../../library/lzma.rst:291
msgid ":const:`FILTER_DELTA`"
msgstr ""

#: ../../../library/lzma.rst:299
msgid "Branch-Call-Jump (BCJ) filters:"
msgstr ""

#: ../../../library/lzma.rst:294
msgid ":const:`FILTER_X86`"
msgstr ""

#: ../../../library/lzma.rst:295
msgid ":const:`FILTER_IA64`"
msgstr ""

#: ../../../library/lzma.rst:296
msgid ":const:`FILTER_ARM`"
msgstr ""

#: ../../../library/lzma.rst:297
msgid ":const:`FILTER_ARMTHUMB`"
msgstr ""

#: ../../../library/lzma.rst:298
msgid ":const:`FILTER_POWERPC`"
msgstr ""

#: ../../../library/lzma.rst:299
msgid ":const:`FILTER_SPARC`"
msgstr ""

#: ../../../library/lzma.rst:301
msgid ""
"A filter chain can consist of up to 4 filters, and cannot be empty. The last "
"filter in the chain must be a compression filter, and any other filters must "
"be delta or BCJ filters."
msgstr ""

#: ../../../library/lzma.rst:305
msgid ""
"Compression filters support the following options (specified as additional "
"entries in the dictionary representing the filter):"
msgstr ""

#: ../../../library/lzma.rst:308
msgid ""
"``preset``: A compression preset to use as a source of default values for "
"options that are not specified explicitly."
msgstr ""

#: ../../../library/lzma.rst:310
msgid ""
"``dict_size``: Dictionary size in bytes. This should be between 4 KiB and "
"1.5 GiB (inclusive)."
msgstr ""

#: ../../../library/lzma.rst:312
msgid "``lc``: Number of literal context bits."
msgstr ""

#: ../../../library/lzma.rst:313
msgid ""
"``lp``: Number of literal position bits. The sum ``lc + lp`` must be at most "
"4."
msgstr ""

#: ../../../library/lzma.rst:315
msgid "``pb``: Number of position bits; must be at most 4."
msgstr ""

#: ../../../library/lzma.rst:316
msgid "``mode``: :const:`MODE_FAST` or :const:`MODE_NORMAL`."
msgstr ""

#: ../../../library/lzma.rst:317
msgid ""
"``nice_len``: What should be considered a \"nice length\" for a match. This "
"should be 273 or less."
msgstr ""

#: ../../../library/lzma.rst:319
msgid ""
"``mf``: What match finder to use -- :const:`MF_HC3`, :const:`MF_HC4`, :const:"
"`MF_BT2`, :const:`MF_BT3`, or :const:`MF_BT4`."
msgstr ""

#: ../../../library/lzma.rst:321
msgid ""
"``depth``: Maximum search depth used by match finder. 0 (default) means to "
"select automatically based on other filter options."
msgstr ""

#: ../../../library/lzma.rst:324
msgid ""
"The delta filter stores the differences between bytes, producing more "
"repetitive input for the compressor in certain circumstances. It only "
"supports a single The delta filter supports only one option, ``dist``. This "
"indicates the distance between bytes to be subtracted. The default is 1, i."
"e. take the differences between adjacent bytes."
msgstr ""

#: ../../../library/lzma.rst:330
msgid ""
"The BCJ filters are intended to be applied to machine code. They convert "
"relative branches, calls and jumps in the code to use absolute addressing, "
"with the aim of increasing the redundancy that can be exploited by the "
"compressor. These filters support one option, ``start_offset``. This "
"specifies the address that should be mapped to the beginning of the input "
"data. The default is 0."
msgstr ""

#: ../../../library/lzma.rst:338
msgid "Examples"
msgstr ""

#: ../../../library/lzma.rst:340
msgid "Reading in a compressed file::"
msgstr ""

#: ../../../library/lzma.rst:346
msgid "Creating a compressed file::"
msgstr ""

#: ../../../library/lzma.rst:353
msgid "Compressing data in memory::"
msgstr ""

#: ../../../library/lzma.rst:359
msgid "Incremental compression::"
msgstr ""

#: ../../../library/lzma.rst:370
msgid "Writing compressed data to an already-open file::"
msgstr ""

#: ../../../library/lzma.rst:379
msgid "Creating a compressed file using a custom filter chain::"
msgstr ""
