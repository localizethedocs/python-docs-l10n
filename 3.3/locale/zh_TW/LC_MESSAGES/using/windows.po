# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: ../../../using/windows.rst:11
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../../../using/windows.rst:16
msgid "Installing Python"
msgstr ""

#: ../../../using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not require Python "
"natively and thus does not pre-install a version of Python.  However, the "
"CPython team has compiled Windows installers (MSI packages) with every "
"`release <http://www.python.org/download/releases/>`_ for many years."
msgstr ""

#: ../../../using/windows.rst:23
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../../../using/windows.rst:27
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""

#: ../../../using/windows.rst:28
msgid ""
"The `Cygwin <http://cygwin.com/>`_ installer offers to install the `Python "
"interpreter <http://cygwin.com/packages/python>`_ as well; it is located "
"under \"Interpreters.\" (cf. `Cygwin package source <ftp://ftp.uni-erlangen."
"de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""

#: ../../../using/windows.rst:35
msgid ""
"See `Python for Windows <http://www.python.org/download/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""

#: ../../../using/windows.rst:42
msgid ""
"`Python on XP <http://www.richarddooling.com/index.php/2006/03/14/python-on-"
"xp-7-minutes-to-hello-world/>`_"
msgstr ""

#: ../../../using/windows.rst:41
msgid "\"7 Minutes to \"Hello World!\"\" by Richard Dooling, 2006"
msgstr ""

#: ../../../using/windows.rst:48
msgid ""
"`Installing on Windows <http://diveintopython.net/installing_python/windows."
"html>`_"
msgstr ""

#: ../../../using/windows.rst:45
msgid ""
"in \"`Dive into Python: Python from novice to pro <http://diveintopython.net/"
"index.html>`_\" by Mark Pilgrim, 2004, ISBN 1-59059-356-1"
msgstr ""

#: ../../../using/windows.rst:52
msgid ""
"`For Windows users <http://swaroopch.com/text/Byte_of_Python:"
"Installing_Python#For_Windows_users>`_"
msgstr ""

#: ../../../using/windows.rst:51
msgid ""
"in \"Installing Python\" in \"`A Byte of Python <http://www.byteofpython."
"info>`_\" by Swaroop C H, 2003"
msgstr ""

#: ../../../using/windows.rst:57
msgid "Alternative bundles"
msgstr ""

#: ../../../using/windows.rst:59
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../../../using/windows.rst:64
msgid "`ActivePython <http://www.activestate.com/activepython/>`_"
msgstr ""

#: ../../../using/windows.rst:64
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../../../using/windows.rst:68
msgid ""
"`Enthought Python Distribution <http://www.enthought.com/products/epd.php>`_"
msgstr ""

#: ../../../using/windows.rst:67
msgid ""
"Popular modules (such as PyWin32) with their respective documentation, tool "
"suite for building extensible Python applications"
msgstr ""

#: ../../../using/windows.rst:70
msgid ""
"Notice that these packages are likely to install *older* versions of Python."
msgstr ""

#: ../../../using/windows.rst:75
msgid "Configuring Python"
msgstr ""

#: ../../../using/windows.rst:77
msgid ""
"In order to run Python flawlessly, you might have to change certain "
"environment settings in Windows."
msgstr ""

#: ../../../using/windows.rst:84
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../../../using/windows.rst:86
msgid ""
"Windows has a built-in dialog for changing environment variables (following "
"guide applies to XP classical view): Right-click the icon for your machine "
"(usually located on your Desktop and called \"My Computer\") and choose :"
"menuselection:`Properties` there.  Then, open the :guilabel:`Advanced` tab "
"and click the :guilabel:`Environment Variables` button."
msgstr ""

#: ../../../using/windows.rst:92
msgid "In short, your path is:"
msgstr ""

#: ../../../using/windows.rst:94
msgid ""
":menuselection:`My Computer --> Properties --> Advanced --> Environment "
"Variables`"
msgstr ""

#: ../../../using/windows.rst:99
msgid ""
"In this dialog, you can add or modify User and System variables. To change "
"System variables, you need non-restricted access to your machine (i.e. "
"Administrator rights)."
msgstr ""

#: ../../../using/windows.rst:103
msgid ""
"Another way of adding variables to your environment is using the :command:"
"`set` command::"
msgstr ""

#: ../../../using/windows.rst:106
msgid "set PYTHONPATH=%PYTHONPATH%;C:\\My_python_lib"
msgstr ""

#: ../../../using/windows.rst:108
msgid ""
"To make this setting permanent, you could add the corresponding command line "
"to your :file:`autoexec.bat`. :program:`msconfig` is a graphical interface "
"to this file."
msgstr ""

#: ../../../using/windows.rst:112
msgid ""
"Viewing environment variables can also be done more straight-forward: The "
"command prompt will expand strings wrapped into percent signs automatically::"
msgstr ""

#: ../../../using/windows.rst:115
msgid "echo %PATH%"
msgstr ""

#: ../../../using/windows.rst:117
msgid "Consult :command:`set /?` for details on this behaviour."
msgstr ""

#: ../../../using/windows.rst:122
msgid "http://support.microsoft.com/kb/100843"
msgstr ""

#: ../../../using/windows.rst:122
msgid "Environment variables in Windows NT"
msgstr ""

#: ../../../using/windows.rst:125
msgid "http://support.microsoft.com/kb/310519"
msgstr ""

#: ../../../using/windows.rst:125
msgid "How To Manage Environment Variables in Windows XP"
msgstr ""

#: ../../../using/windows.rst:127
msgid "http://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr ""

#: ../../../using/windows.rst:128
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr ""

#: ../../../using/windows.rst:134
msgid "Finding the Python executable"
msgstr ""

#: ../../../using/windows.rst:138
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. As of "
"Python 3.3, the installer has an option to set that up for you."
msgstr ""

#: ../../../using/windows.rst:142
msgid ""
"At the \"Customize Python 3.3\" screen, an option called \"Add python.exe to "
"search path\" can be enabled to have the installer place your installation "
"into the :envvar:`%PATH%`. This allows you to type :command:`python` to run "
"the interpreter. Thus, you can also execute your scripts with command line "
"options, see :ref:`using-on-cmdline` documentation."
msgstr ""

#: ../../../using/windows.rst:148
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer to choose it."
msgstr ""

#: ../../../using/windows.rst:151
msgid ""
"The alternative is manually modifying the :envvar:`%PATH%` using the "
"directions in :ref:`setting-envvars`. You need to set your :envvar:`%PATH%` "
"environment variable to include the directory of your Python distribution, "
"delimited by a semicolon from other entries. An example variable could look "
"like this (assuming the first two entries are Windows' default)::"
msgstr ""

#: ../../../using/windows.rst:157
msgid "C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Python33"
msgstr ""

#: ../../../using/windows.rst:161
msgid "Finding modules"
msgstr ""

#: ../../../using/windows.rst:163
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\"
"\\Lib\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\"
"\\Lib\\\\site-packages\\\\`."
msgstr ""

#: ../../../using/windows.rst:169
msgid "This is how :data:`sys.path` is populated on Windows:"
msgstr ""

#: ../../../using/windows.rst:171
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../../../using/windows.rst:174
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../../../using/windows.rst:179
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../../../using/windows.rst:186
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (``Lib\\os.py``) to deduce the \"Python "
"Home\".  If a Python home is found, the relevant sub-directories added to :"
"data:`sys.path` (``Lib``, ``plat-win``, etc) are based on that folder.  "
"Otherwise, the core Python path is constructed from the PythonPath stored in "
"the registry."
msgstr ""

#: ../../../using/windows.rst:193
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../../../using/windows.rst:197
msgid "The end result of all this is:"
msgstr ""

#: ../../../using/windows.rst:199
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../../../using/windows.rst:204
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../../../using/windows.rst:208
msgid ""
"If Python can't find its home and there is no registry (eg, frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../../../using/windows.rst:214
msgid "Executing scripts"
msgstr ""

#: ../../../using/windows.rst:216
msgid ""
"As of Python 3.3, Python includes a launcher which facilitates running "
"Python scripts. See :ref:`launcher` for more information."
msgstr ""

#: ../../../using/windows.rst:220
msgid "Executing scripts without the Python launcher"
msgstr ""

#: ../../../using/windows.rst:222
msgid ""
"Without the Python launcher installed, Python scripts (files with the "
"extension ``.py``) will be executed by :program:`python.exe` by default.  "
"This executable opens a terminal, which stays open even if the program uses "
"a GUI.  If you do not want this to happen, use the extension ``.pyw`` which "
"will cause the script to be executed by :program:`pythonw.exe` by default "
"(both executables are located in the top-level of your Python installation "
"directory).  This suppresses the terminal window on startup."
msgstr ""

#: ../../../using/windows.rst:230
msgid ""
"You can also make all ``.py`` scripts execute with :program:`pythonw.exe`, "
"setting this through the usual facilities, for example (might require "
"administrative rights):"
msgstr ""

#: ../../../using/windows.rst:234
msgid "Launch a command prompt."
msgstr ""

#: ../../../using/windows.rst:235
msgid "Associate the correct file group with ``.py`` scripts::"
msgstr ""

#: ../../../using/windows.rst:237
msgid "assoc .py=Python.File"
msgstr ""

#: ../../../using/windows.rst:239
msgid "Redirect all Python files to the new executable::"
msgstr ""

#: ../../../using/windows.rst:241
msgid "ftype Python.File=C:\\Path\\to\\pythonw.exe \"%1\" %*"
msgstr ""

#: ../../../using/windows.rst:247
msgid "Python Launcher for Windows"
msgstr ""

#: ../../../using/windows.rst:251
msgid ""
"The Python launcher for Windows is a utility which aids in the location and "
"execution of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""

#: ../../../using/windows.rst:257
msgid "Getting started"
msgstr ""

#: ../../../using/windows.rst:260
msgid "From the command-line"
msgstr ""

#: ../../../using/windows.rst:262
msgid ""
"You should ensure the launcher is on your PATH - depending on how it was "
"installed it may already be there, but check just in case it is not."
msgstr ""

#: ../../../using/windows.rst:265
msgid "From a command-prompt, execute the following command:"
msgstr ""

#: ../../../using/windows.rst:269
msgid "py"
msgstr ""

#: ../../../using/windows.rst:271
msgid ""
"You should find that the latest version of Python 2.x you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""

#: ../../../using/windows.rst:275
msgid ""
"If you have multiple versions of Python 2.x installed (e.g., 2.6 and 2.7) "
"you will have noticed that Python 2.7 was started - to launch Python 2.6, "
"try the command:"
msgstr ""

#: ../../../using/windows.rst:281
msgid "py -2.6"
msgstr ""

#: ../../../using/windows.rst:283
msgid "If you have a Python 3.x installed, try the command:"
msgstr ""

#: ../../../using/windows.rst:287
msgid "py -3"
msgstr ""

#: ../../../using/windows.rst:289
msgid "You should find the latest version of Python 3.x starts."
msgstr ""

#: ../../../using/windows.rst:292
msgid "From a script"
msgstr ""

#: ../../../using/windows.rst:294
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr ""

#: ../../../using/windows.rst:299
msgid ""
"#! python\n"
"import sys\n"
"sys.stdout.write(\"hello from Python %s\\n\" % (sys.version,))"
msgstr ""

#: ../../../using/windows.rst:303
msgid "From the directory in which hello.py lives, execute the command:"
msgstr ""

#: ../../../using/windows.rst:307
msgid "py hello.py"
msgstr ""

#: ../../../using/windows.rst:309
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr ""

#: ../../../using/windows.rst:314
msgid "#! python3"
msgstr ""

#: ../../../using/windows.rst:316
msgid ""
"Re-executing the command should now print the latest Python 3.x information. "
"As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 2.6 installed, try changing the "
"first line to ``#! python2.6`` and you should find the 2.6 version "
"information printed."
msgstr ""

#: ../../../using/windows.rst:323
msgid "From file associations"
msgstr ""

#: ../../../using/windows.rst:325
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, ``."
"pyw``, ``.pyc``, ``.pyo`` files) when it was installed.  This means that "
"when you double-click on one of these files from Windows explorer the "
"launcher will be used, and therefore you can use the same facilities "
"described above to have the script specify the version which should be used."
msgstr ""

#: ../../../using/windows.rst:331
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first line."
msgstr ""

#: ../../../using/windows.rst:335
msgid "Shebang Lines"
msgstr ""

#: ../../../using/windows.rst:337
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and are commonly used on such systems to indicate how "
"a script should be executed.  This launcher allows the same facilities to be "
"using with Python scripts on Windows and the examples above demonstrate "
"their use."
msgstr ""

#: ../../../using/windows.rst:344
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: ../../../using/windows.rst:348
msgid "``/usr/bin/env python``"
msgstr ""

#: ../../../using/windows.rst:349
msgid "``/usr/bin/python``"
msgstr ""

#: ../../../using/windows.rst:350
msgid "``/usr/local/bin/python``"
msgstr ""

#: ../../../using/windows.rst:351
msgid "``python``"
msgstr ""

#: ../../../using/windows.rst:353
msgid "For example, if the first line of your script starts with"
msgstr ""

#: ../../../using/windows.rst:357
msgid "#! /usr/bin/python"
msgstr ""

#: ../../../using/windows.rst:359
msgid ""
"The default Python will be located and used.  As many Python scripts written "
"to work on Unix will already have this line, you should find these scripts "
"can be used by the launcher without modification.  If you are writing a new "
"script on Windows which you hope will be useful on Unix, you should use one "
"of the shebang lines starting with ``/usr``."
msgstr ""

#: ../../../using/windows.rst:366
msgid "Arguments in shebang lines"
msgstr ""

#: ../../../using/windows.rst:368
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: ../../../using/windows.rst:373
msgid "#! /usr/bin/python -v"
msgstr ""

#: ../../../using/windows.rst:375
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: ../../../using/windows.rst:378
msgid "Customization"
msgstr ""

#: ../../../using/windows.rst:381
msgid "Customization via INI files"
msgstr ""

#: ../../../using/windows.rst:383
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's \"application data\" directory (i.e. the directory returned by "
"calling the Windows function SHGetFolderPath with CSIDL_LOCAL_APPDATA) and "
"``py.ini`` in the same directory as the launcher.  The same .ini files are "
"used for both the 'console' version of the launcher (i.e. py.exe) and for "
"the 'windows' version (i.e. pyw.exe)"
msgstr ""

#: ../../../using/windows.rst:390
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in "
"that global .ini file)"
msgstr ""

#: ../../../using/windows.rst:396
msgid "Customizing default Python versions"
msgstr ""

#: ../../../using/windows.rst:398
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. If the minor qualifier is "
"specified, it may optionally be followed by \"-32\" to indicate the 32-bit "
"implementation of that version be used."
msgstr ""

#: ../../../using/windows.rst:405
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""

#: ../../../using/windows.rst:408
msgid ""
"If no version qualifiers are found in a command, the environment variable "
"``PY_PYTHON`` can be set to specify the default version qualifier - the "
"default value is \"2\". Note this value could specify just a major version "
"(e.g. \"2\") or a major.minor qualifier (e.g. \"2.6\"), or even major."
"minor-32."
msgstr ""

#: ../../../using/windows.rst:413
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no "
"such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which "
"is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""

#: ../../../using/windows.rst:421
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on "
"the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" suffix can "
"be used on a version specifier to change this behaviour."
msgstr ""

#: ../../../using/windows.rst:432
msgid "Examples:"
msgstr ""

#: ../../../using/windows.rst:434
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will "
"use the latest Python 2.x version installed and the command ``python3`` will "
"use the latest Python 3.x installed."
msgstr ""

#: ../../../using/windows.rst:438
msgid ""
"The commands ``python3.1`` and ``python2.7`` will not consult any options at "
"all as the versions are fully specified."
msgstr ""

#: ../../../using/windows.rst:441
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr ""

#: ../../../using/windows.rst:444
msgid ""
"If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit "
"implementation of 3.1 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was "
"specified.)"
msgstr ""

#: ../../../using/windows.rst:449
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and "
"``python3`` will both use specifically 3.1"
msgstr ""

#: ../../../using/windows.rst:452
msgid ""
"In addition to environment variables, the same settings can be configured in "
"the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in "
"the INI file are case insensitive.)  The contents of an environment variable "
"will override things specified in the INI file."
msgstr ""

#: ../../../using/windows.rst:459
msgid "For example:"
msgstr ""

#: ../../../using/windows.rst:461
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""

#: ../../../using/windows.rst:465
msgid ""
"[defaults]\n"
"python=3.1"
msgstr ""

#: ../../../using/windows.rst:468
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI file "
"containing:"
msgstr ""

#: ../../../using/windows.rst:473
msgid ""
"[defaults]\n"
"python=3\n"
"python3=3.1"
msgstr ""

#: ../../../using/windows.rst:478
msgid "Diagnostics"
msgstr ""

#: ../../../using/windows.rst:480
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the console). "
"While this information manages to be simultaneously verbose *and* terse, it "
"should allow you to see what versions of Python were located, why a "
"particular version was chosen and the exact command-line used to execute the "
"target Python."
msgstr ""

#: ../../../using/windows.rst:489
msgid "Additional modules"
msgstr ""

#: ../../../using/windows.rst:491
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../../../using/windows.rst:495
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""

#: ../../../using/windows.rst:500
msgid "PyWin32"
msgstr ""

#: ../../../using/windows.rst:502
msgid ""
"The `PyWin32 <http://python.net/crew/mhammond/win32/>`_ module by Mark "
"Hammond is a collection of modules for advanced Windows-specific support.  "
"This includes utilities for:"
msgstr ""

#: ../../../using/windows.rst:506
msgid "`Component Object Model <http://www.microsoft.com/com/>`_ (COM)"
msgstr ""

#: ../../../using/windows.rst:507
msgid "Win32 API calls"
msgstr ""

#: ../../../using/windows.rst:508
msgid "Registry"
msgstr ""

#: ../../../using/windows.rst:509
msgid "Event log"
msgstr ""

#: ../../../using/windows.rst:510
msgid ""
"`Microsoft Foundation Classes <http://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""

#: ../../../using/windows.rst:513
msgid ""
"`PythonWin <http://web.archive.org/web/20060524042422/ http://www.python.org/"
"windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  It "
"is an embeddable IDE with a built-in debugger."
msgstr ""

#: ../../../using/windows.rst:520
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../../../using/windows.rst:520
msgid "by Tim Golden"
msgstr ""

#: ../../../using/windows.rst:522
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../../../using/windows.rst:523
msgid "by David and Paul Boddie"
msgstr ""

#: ../../../using/windows.rst:527
msgid "cx_Freeze"
msgstr ""

#: ../../../using/windows.rst:529
msgid ""
"`cx_Freeze <http://cx-freeze.sourceforge.net/>`_ is a :mod:`distutils` "
"extension (see :ref:`extending-distutils`) which wraps Python scripts into "
"executable Windows programs (:file:`{*}.exe` files).  When you have done "
"this, you can distribute your application without requiring your users to "
"install Python."
msgstr ""

#: ../../../using/windows.rst:537
msgid "WConio"
msgstr ""

#: ../../../using/windows.rst:539
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""

#: ../../../using/windows.rst:543
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""

#: ../../../using/windows.rst:549
msgid "Compiling Python on Windows"
msgstr ""

#: ../../../using/windows.rst:551
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <http://python.org/download/source/>`_. You can download either "
"the latest release's source or just grab a fresh `checkout <http://docs."
"python.org/devguide/setup#checking-out-the-code>`_."
msgstr ""

#: ../../../using/windows.rst:556
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual C++, which is the compiler used to build the official Python "
"releases. View the :file:`readme.txt` in their respective directories:"
msgstr ""

#: ../../../using/windows.rst:561
msgid "Directory"
msgstr ""

#: ../../../using/windows.rst:561
msgid "MSVC version"
msgstr ""

#: ../../../using/windows.rst:561
msgid "Visual Studio version"
msgstr ""

#: ../../../using/windows.rst:563
msgid ":file:`PC/VC6/`"
msgstr ""

#: ../../../using/windows.rst:563
msgid "6.0"
msgstr ""

#: ../../../using/windows.rst:563
msgid "97"
msgstr ""

#: ../../../using/windows.rst:565
msgid ":file:`PC/VS7.1/`"
msgstr ""

#: ../../../using/windows.rst:565
msgid "7.1"
msgstr ""

#: ../../../using/windows.rst:565
msgid "2003"
msgstr ""

#: ../../../using/windows.rst:567
msgid ":file:`PC/VS8.0/`"
msgstr ""

#: ../../../using/windows.rst:567
msgid "8.0"
msgstr ""

#: ../../../using/windows.rst:567
msgid "2005"
msgstr ""

#: ../../../using/windows.rst:569
msgid ":file:`PC/VS9.0/`"
msgstr ""

#: ../../../using/windows.rst:569
msgid "9.0"
msgstr ""

#: ../../../using/windows.rst:569
msgid "2008"
msgstr ""

#: ../../../using/windows.rst:571
msgid ":file:`PCbuild/`"
msgstr ""

#: ../../../using/windows.rst:571
msgid "10.0"
msgstr ""

#: ../../../using/windows.rst:571
msgid "2010"
msgstr ""

#: ../../../using/windows.rst:574
msgid ""
"Note that any build directories within the :file:`PC` directory are not "
"necessarily fully supported.  The :file:`PCbuild` directory contains the "
"files for the compiler used to build the official release."
msgstr ""

#: ../../../using/windows.rst:578
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""

#: ../../../using/windows.rst:581
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../../../using/windows.rst:588
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""

#: ../../../using/windows.rst:586
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""

#: ../../../using/windows.rst:590
msgid ""
"`MingW -- Python extensions <http://oldwiki.mingw.org/index.php/"
"Python%20extensions>`_"
msgstr ""

#: ../../../using/windows.rst:591
msgid "by Trent Apted et al, 2007"
msgstr ""

#: ../../../using/windows.rst:595
msgid "Other resources"
msgstr ""

#: ../../../using/windows.rst:602
msgid ""
"`Python Programming On Win32 <http://www.oreilly.com/catalog/pythonwin32/>`_"
msgstr ""

#: ../../../using/windows.rst:600
msgid ""
"\"Help for Windows Programmers\" by Mark Hammond and Andy Robinson, O'Reilly "
"Media, 2000, ISBN 1-56592-621-8"
msgstr ""

#: ../../../using/windows.rst:605
msgid ""
"`A Python for Windows Tutorial <http://www.imladris.com/Scripts/"
"PythonForWindows.html>`_"
msgstr ""

#: ../../../using/windows.rst:605
msgid "by Amanda Birmingham, 2004"
msgstr ""

#: ../../../using/windows.rst:607
msgid ":pep:`397` - Python launcher for Windows"
msgstr ""

#: ../../../using/windows.rst:608
msgid ""
"The proposal for the launcher to be included in the Python distribution."
msgstr ""
