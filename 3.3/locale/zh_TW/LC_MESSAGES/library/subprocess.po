# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/subprocess.rst:2
msgid ":mod:`subprocess` --- Subprocess management"
msgstr ""

#: ../../../library/subprocess.rst:10
msgid ""
"The :mod:`subprocess` module allows you to spawn new processes, connect to "
"their input/output/error pipes, and obtain their return codes.  This module "
"intends to replace several older modules and functions::"
msgstr ""

#: ../../../library/subprocess.rst:14
msgid ""
"os.system\n"
"os.spawn*"
msgstr ""

#: ../../../library/subprocess.rst:17
msgid ""
"Information about how the :mod:`subprocess` module can be used to replace "
"these modules and functions can be found in the following sections."
msgstr ""

#: ../../../library/subprocess.rst:22
msgid ":pep:`324` -- PEP proposing the subprocess module"
msgstr ""

#: ../../../library/subprocess.rst:26
msgid "Using the :mod:`subprocess` Module"
msgstr ""

#: ../../../library/subprocess.rst:28
msgid ""
"The recommended approach to invoking subprocesses is to use the following "
"convenience functions for all use cases they can handle. For more advanced "
"use cases, the underlying :class:`Popen` interface can be used directly."
msgstr ""

#: ../../../library/subprocess.rst:35
msgid ""
"Run the command described by *args*.  Wait for command to complete, then "
"return the :attr:`returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:38 ../../../library/subprocess.rst:81
msgid ""
"The arguments shown above are merely the most common ones, described below "
"in :ref:`frequently-used-arguments` (hence the use of keyword-only notation "
"in the abbreviated signature). The full function signature is largely the "
"same as that of the :class:`Popen` constructor - this function passes all "
"supplied arguments other than *timeout* directly through to that interface."
msgstr ""

#: ../../../library/subprocess.rst:44 ../../../library/subprocess.rst:87
#: ../../../library/subprocess.rst:136
msgid ""
"The *timeout* argument is passed to :meth:`Popen.wait`. If the timeout "
"expires, the child process will be killed and then waited for again.  The :"
"exc:`TimeoutExpired` exception will be re-raised after the child process has "
"terminated."
msgstr ""

#: ../../../library/subprocess.rst:49 ../../../library/subprocess.rst:92
#: ../../../library/subprocess.rst:141
msgid "Examples::"
msgstr ""

#: ../../../library/subprocess.rst:51
msgid ""
">>> subprocess.call([\"ls\", \"-l\"])\n"
"0\n"
"\n"
">>> subprocess.call(\"exit 1\", shell=True)\n"
"1"
msgstr ""

#: ../../../library/subprocess.rst:59 ../../../library/subprocess.rst:104
#: ../../../library/subprocess.rst:176
msgid ""
"Invoking the system shell with ``shell=True`` can be a security hazard if "
"combined with untrusted input. See the warning under :ref:`frequently-used-"
"arguments` for details."
msgstr ""

#: ../../../library/subprocess.rst:65 ../../../library/subprocess.rst:110
msgid ""
"Do not use ``stdout=PIPE`` or ``stderr=PIPE`` with this function. As the "
"pipes are not being read in the current process, the child process may block "
"if it generates enough output to a pipe to fill up the OS pipe buffer."
msgstr ""

#: ../../../library/subprocess.rst:70 ../../../library/subprocess.rst:115
#: ../../../library/subprocess.rst:186 ../../../library/subprocess.rst:629
#: ../../../library/subprocess.rst:668
msgid "*timeout* was added."
msgstr ""

#: ../../../library/subprocess.rst:76
msgid ""
"Run command with arguments.  Wait for command to complete. If the return "
"code was zero then return, otherwise raise :exc:`CalledProcessError`. The :"
"exc:`CalledProcessError` object will have the return code in the :attr:"
"`~CalledProcessError.returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:94
msgid ""
">>> subprocess.check_call([\"ls\", \"-l\"])\n"
"0\n"
"\n"
">>> subprocess.check_call(\"exit 1\", shell=True)\n"
"Traceback (most recent call last):\n"
"   ...\n"
"subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit "
"status 1"
msgstr ""

#: ../../../library/subprocess.rst:121
msgid "Run command with arguments and return its output."
msgstr ""

#: ../../../library/subprocess.rst:123
msgid ""
"If the return code was non-zero it raises a :exc:`CalledProcessError`. The :"
"exc:`CalledProcessError` object will have the return code in the :attr:"
"`~CalledProcessError.returncode` attribute and any output in the :attr:"
"`~CalledProcessError.output` attribute."
msgstr ""

#: ../../../library/subprocess.rst:128
msgid ""
"The arguments shown above are merely the most common ones, described below "
"in :ref:`frequently-used-arguments` (hence the use of keyword-only notation "
"in the abbreviated signature). The full function signature is largely the "
"same as that of the :class:`Popen` constructor - this functions passes all "
"supplied arguments other than *timeout* directly through to that interface. "
"In addition, *stdout* is not permitted as an argument, as it is used "
"internally to collect the output from the subprocess."
msgstr ""

#: ../../../library/subprocess.rst:143
msgid ""
">>> subprocess.check_output([\"echo\", \"Hello World!\"])\n"
"b'Hello World!\\n'\n"
"\n"
">>> subprocess.check_output([\"echo\", \"Hello World!\"], "
"universal_newlines=True)\n"
"'Hello World!\\n'\n"
"\n"
">>> subprocess.check_output(\"exit 1\", shell=True)\n"
"Traceback (most recent call last):\n"
"   ...\n"
"subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit "
"status 1"
msgstr ""

#: ../../../library/subprocess.rst:154
msgid ""
"By default, this function will return the data as encoded bytes. The actual "
"encoding of the output data may depend on the command being invoked, so the "
"decoding to text will often need to be handled at the application level."
msgstr ""

#: ../../../library/subprocess.rst:158
msgid ""
"This behaviour may be overridden by setting *universal_newlines* to ``True`` "
"as described below in :ref:`frequently-used-arguments`."
msgstr ""

#: ../../../library/subprocess.rst:161
msgid ""
"To also capture standard error in the result, use ``stderr=subprocess."
"STDOUT``::"
msgstr ""

#: ../../../library/subprocess.rst:164
msgid ""
">>> subprocess.check_output(\n"
"...     \"ls non_existent_file; exit 0\",\n"
"...     stderr=subprocess.STDOUT,\n"
"...     shell=True)\n"
"'ls: non_existent_file: No such file or directory\\n'"
msgstr ""

#: ../../../library/subprocess.rst:182
msgid ""
"Do not use ``stderr=PIPE`` with this function. As the pipe is not being read "
"in the current process, the child process may block if it generates enough "
"output to the pipe to fill up the OS pipe buffer."
msgstr ""

#: ../../../library/subprocess.rst:192
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :class:`Popen` and indicates that the special file :data:`os.devnull` "
"will be used."
msgstr ""

#: ../../../library/subprocess.rst:201
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :class:`Popen` and indicates that a pipe to the standard stream should be "
"opened."
msgstr ""

#: ../../../library/subprocess.rst:208
msgid ""
"Special value that can be used as the *stderr* argument to :class:`Popen` "
"and indicates that standard error should go into the same handle as standard "
"output."
msgstr ""

#: ../../../library/subprocess.rst:215
msgid "Base class for all other exceptions from this module."
msgstr ""

#: ../../../library/subprocess.rst:222
msgid ""
"Subclass of :exc:`SubprocessError`, raised when a timeout expires while "
"waiting for a child process."
msgstr ""

#: ../../../library/subprocess.rst:227 ../../../library/subprocess.rst:252
msgid "Command that was used to spawn the child process."
msgstr ""

#: ../../../library/subprocess.rst:231
msgid "Timeout in seconds."
msgstr ""

#: ../../../library/subprocess.rst:235 ../../../library/subprocess.rst:256
msgid ""
"Output of the child process if this exception is raised by :func:"
"`check_output`.  Otherwise, ``None``."
msgstr ""

#: ../../../library/subprocess.rst:243
msgid ""
"Subclass of :exc:`SubprocessError`, raised when a process run by :func:"
"`check_call` or :func:`check_output` returns a non-zero exit status."
msgstr ""

#: ../../../library/subprocess.rst:248
msgid "Exit status of the child process."
msgstr ""

#: ../../../library/subprocess.rst:264
msgid "Frequently Used Arguments"
msgstr ""

#: ../../../library/subprocess.rst:266
msgid ""
"To support a wide variety of use cases, the :class:`Popen` constructor (and "
"the convenience functions) accept a large number of optional arguments. For "
"most typical use cases, many of these arguments can be safely left at their "
"default values. The arguments that are most commonly needed are:"
msgstr ""

#: ../../../library/subprocess.rst:271
msgid ""
"*args* is required for all calls and should be a string, or a sequence of "
"program arguments. Providing a sequence of arguments is generally preferred, "
"as it allows the module to take care of any required escaping and quoting of "
"arguments (e.g. to permit spaces in file names). If passing a single string, "
"either *shell* must be :const:`True` (see below) or else the string must "
"simply name the program to be executed without specifying any arguments."
msgstr ""

#: ../../../library/subprocess.rst:279
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed program's standard "
"input, standard output and standard error file handles, respectively.  Valid "
"values are :data:`PIPE`, :data:`DEVNULL`, an existing file descriptor (a "
"positive integer), an existing file object, and ``None``.  :data:`PIPE` "
"indicates that a new pipe to the child should be created.  :data:`DEVNULL` "
"indicates that the special file :data:`os.devnull` will be used.  With the "
"default settings of ``None``, no redirection will occur; the child's file "
"handles will be inherited from the parent.  Additionally, *stderr* can be :"
"data:`STDOUT`, which indicates that the stderr data from the child process "
"should be captured into the same file handle as for *stdout*."
msgstr ""

#: ../../../library/subprocess.rst:293
msgid ""
"If *universal_newlines* is ``False`` the file objects *stdin*, *stdout* and "
"*stderr* will be opened as binary streams, and no line ending conversion is "
"done."
msgstr ""

#: ../../../library/subprocess.rst:297
msgid ""
"If *universal_newlines* is ``True``, these file objects will be opened as "
"text streams in :term:`universal newlines` mode using the encoding returned "
"by :func:`locale.getpreferredencoding(False) <locale."
"getpreferredencoding>`.  For *stdin*, line ending characters ``'\\n'`` in "
"the input will be converted to the default line separator :data:`os."
"linesep`.  For *stdout* and *stderr*, all line endings in the output will be "
"converted to ``'\\n'``.  For more information see the documentation of the :"
"class:`io.TextIOWrapper` class when the *newline* argument to its "
"constructor is ``None``."
msgstr ""

#: ../../../library/subprocess.rst:309
msgid ""
"The newlines attribute of the file objects :attr:`Popen.stdin`, :attr:`Popen."
"stdout` and :attr:`Popen.stderr` are not updated by the :meth:`Popen."
"communicate` method."
msgstr ""

#: ../../../library/subprocess.rst:313
msgid ""
"If *shell* is ``True``, the specified command will be executed through the "
"shell.  This can be useful if you are using Python primarily for the "
"enhanced control flow it offers over most system shells and still want "
"convenient access to other shell features such as shell pipes, filename "
"wildcards, environment variable expansion, and expansion of ``~`` to a "
"user's home directory.  However, note that Python itself offers "
"implementations of many shell-like features (in particular, :mod:`glob`, :"
"mod:`fnmatch`, :func:`os.walk`, :func:`os.path.expandvars`, :func:`os.path."
"expanduser`, and :mod:`shutil`)."
msgstr ""

#: ../../../library/subprocess.rst:323
msgid ""
"When *universal_newlines* is ``True``, the class uses the encoding :func:"
"`locale.getpreferredencoding(False) <locale.getpreferredencoding>` instead "
"of ``locale.getpreferredencoding()``.  See the :class:`io.TextIOWrapper` "
"class for more information on this change."
msgstr ""

#: ../../../library/subprocess.rst:331
msgid ""
"Executing shell commands that incorporate unsanitized input from an "
"untrusted source makes a program vulnerable to `shell injection <http://en."
"wikipedia.org/wiki/Shell_injection#Shell_injection>`_, a serious security "
"flaw which can result in arbitrary command execution. For this reason, the "
"use of ``shell=True`` is **strongly discouraged** in cases where the command "
"string is constructed from external input::"
msgstr ""

#: ../../../library/subprocess.rst:338
msgid ""
">>> from subprocess import call\n"
">>> filename = input(\"What file would you like to display?\\n\")\n"
"What file would you like to display?\n"
"non_existent; rm -rf / #\n"
">>> call(\"cat \" + filename, shell=True) # Uh-oh. This will end badly..."
msgstr ""

#: ../../../library/subprocess.rst:344
msgid ""
"``shell=False`` disables all shell based features, but does not suffer from "
"this vulnerability; see the Note in the :class:`Popen` constructor "
"documentation for helpful hints in getting ``shell=False`` to work."
msgstr ""

#: ../../../library/subprocess.rst:348
msgid ""
"When using ``shell=True``, :func:`shlex.quote` can be used to properly "
"escape whitespace and shell metacharacters in strings that are going to be "
"used to construct shell commands."
msgstr ""

#: ../../../library/subprocess.rst:352
msgid ""
"These options, along with all of the other options, are described in more "
"detail in the :class:`Popen` constructor documentation."
msgstr ""

#: ../../../library/subprocess.rst:357
msgid "Popen Constructor"
msgstr ""

#: ../../../library/subprocess.rst:359
msgid ""
"The underlying process creation and management in this module is handled by "
"the :class:`Popen` class. It offers a lot of flexibility so that developers "
"are able to handle the less common cases not covered by the convenience "
"functions."
msgstr ""

#: ../../../library/subprocess.rst:371
msgid ""
"Execute a child program in a new process.  On Unix, the class uses :meth:`os."
"execvp`-like behavior to execute the child program.  On Windows, the class "
"uses the Windows ``CreateProcess()`` function.  The arguments to :class:"
"`Popen` are as follows."
msgstr ""

#: ../../../library/subprocess.rst:376
msgid ""
"*args* should be a sequence of program arguments or else a single string. By "
"default, the program to execute is the first item in *args* if *args* is a "
"sequence.  If *args* is a string, the interpretation is platform-dependent "
"and described below.  See the *shell* and *executable* arguments for "
"additional differences from the default behavior.  Unless otherwise stated, "
"it is recommended to pass *args* as a sequence."
msgstr ""

#: ../../../library/subprocess.rst:383
msgid ""
"On Unix, if *args* is a string, the string is interpreted as the name or "
"path of the program to execute.  However, this can only be done if not "
"passing arguments to the program."
msgstr ""

#: ../../../library/subprocess.rst:389
msgid ""
":meth:`shlex.split` can be useful when determining the correct tokenization "
"for *args*, especially in complex cases::"
msgstr ""

#: ../../../library/subprocess.rst:392
msgid ""
">>> import shlex, subprocess\n"
">>> command_line = input()\n"
"/bin/vikings -input eggs.txt -output \"spam spam.txt\" -cmd \"echo "
"'$MONEY'\"\n"
">>> args = shlex.split(command_line)\n"
">>> print(args)\n"
"['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "
"\"echo '$MONEY'\"]\n"
">>> p = subprocess.Popen(args) # Success!"
msgstr ""

#: ../../../library/subprocess.rst:400
msgid ""
"Note in particular that options (such as *-input*) and arguments (such as "
"*eggs.txt*) that are separated by whitespace in the shell go in separate "
"list elements, while arguments that need quoting or backslash escaping when "
"used in the shell (such as filenames containing spaces or the *echo* command "
"shown above) are single list elements."
msgstr ""

#: ../../../library/subprocess.rst:406
msgid ""
"On Windows, if *args* is a sequence, it will be converted to a string in a "
"manner described in :ref:`converting-argument-sequence`.  This is because "
"the underlying ``CreateProcess()`` operates on strings."
msgstr ""

#: ../../../library/subprocess.rst:410
msgid ""
"The *shell* argument (which defaults to *False*) specifies whether to use "
"the shell as the program to execute.  If *shell* is *True*, it is "
"recommended to pass *args* as a string rather than as a sequence."
msgstr ""

#: ../../../library/subprocess.rst:414
msgid ""
"On Unix with ``shell=True``, the shell defaults to :file:`/bin/sh`.  If "
"*args* is a string, the string specifies the command to execute through the "
"shell.  This means that the string must be formatted exactly as it would be "
"when typed at the shell prompt.  This includes, for example, quoting or "
"backslash escaping filenames with spaces in them.  If *args* is a sequence, "
"the first item specifies the command string, and any additional items will "
"be treated as additional arguments to the shell itself.  That is to say, :"
"class:`Popen` does the equivalent of::"
msgstr ""

#: ../../../library/subprocess.rst:423
msgid "Popen(['/bin/sh', '-c', args[0], args[1], ...])"
msgstr ""

#: ../../../library/subprocess.rst:425
msgid ""
"On Windows with ``shell=True``, the :envvar:`COMSPEC` environment variable "
"specifies the default shell.  The only time you need to specify "
"``shell=True`` on Windows is when the command you wish to execute is built "
"into the shell (e.g. :command:`dir` or :command:`copy`).  You do not need "
"``shell=True`` to run a batch file or console-based executable."
msgstr ""

#: ../../../library/subprocess.rst:433
msgid ""
"Passing ``shell=True`` can be a security hazard if combined with untrusted "
"input.  See the warning under :ref:`frequently-used-arguments` for details."
msgstr ""

#: ../../../library/subprocess.rst:437
msgid ""
"*bufsize* will be supplied as the corresponding argument to the :func:`open` "
"function when creating the stdin/stdout/stderr pipe file objects: :const:`0` "
"means unbuffered (read and write are one system call and can return short), :"
"const:`1` means line buffered, any other positive value means use a buffer "
"of approximately that size.  A negative bufsize (the default) means the "
"system default of io.DEFAULT_BUFFER_SIZE will be used."
msgstr ""

#: ../../../library/subprocess.rst:444
msgid ""
"*bufsize* now defaults to -1 to enable buffering by default to match the "
"behavior that most code expects.  In versions prior to Python 3.2.4 and "
"3.3.1 it incorrectly defaulted to :const:`0` which was unbuffered and "
"allowed short reads.  This was unintentional and did not match the behavior "
"of Python 2 as most code expected."
msgstr ""

#: ../../../library/subprocess.rst:451
msgid ""
"The *executable* argument specifies a replacement program to execute.   It "
"is very seldom needed.  When ``shell=False``, *executable* replaces the "
"program to execute specified by *args*.  However, the original *args* is "
"still passed to the program.  Most programs treat the program specified by "
"*args* as the command name, which can then be different from the program "
"actually executed.  On Unix, the *args* name becomes the display name for "
"the executable in utilities such as :program:`ps`.  If ``shell=True``, on "
"Unix the *executable* argument specifies a replacement shell for the "
"default :file:`/bin/sh`."
msgstr ""

#: ../../../library/subprocess.rst:461
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed program's standard "
"input, standard output and standard error file handles, respectively.  Valid "
"values are :data:`PIPE`, :data:`DEVNULL`, an existing file descriptor (a "
"positive integer), an existing :term:`file object`, and ``None``.  :data:"
"`PIPE` indicates that a new pipe to the child should be created.  :data:"
"`DEVNULL` indicates that the special file :data:`os.devnull` will be used. "
"With the default settings of ``None``, no redirection will occur; the "
"child's file handles will be inherited from the parent.  Additionally, "
"*stderr* can be :data:`STDOUT`, which indicates that the stderr data from "
"the applications should be captured into the same file handle as for stdout."
msgstr ""

#: ../../../library/subprocess.rst:472
msgid ""
"If *preexec_fn* is set to a callable object, this object will be called in "
"the child process just before the child is executed. (Unix only)"
msgstr ""

#: ../../../library/subprocess.rst:478
msgid ""
"The *preexec_fn* parameter is not safe to use in the presence of threads in "
"your application.  The child process could deadlock before exec is called. "
"If you must use it, keep it trivial!  Minimize the number of libraries you "
"call into."
msgstr ""

#: ../../../library/subprocess.rst:486
msgid ""
"If you need to modify the environment for the child use the *env* parameter "
"rather than doing it in a *preexec_fn*. The *start_new_session* parameter "
"can take the place of a previously common use of *preexec_fn* to call os."
"setsid() in the child."
msgstr ""

#: ../../../library/subprocess.rst:491
msgid ""
"If *close_fds* is true, all file descriptors except :const:`0`, :const:`1` "
"and :const:`2` will be closed before the child process is executed. (Unix "
"only). The default varies by platform:  Always true on Unix.  On Windows it "
"is true when *stdin*/*stdout*/*stderr* are :const:`None`, false otherwise. "
"On Windows, if *close_fds* is true then no handles will be inherited by the "
"child process.  Note that on Windows, you cannot set *close_fds* to true and "
"also redirect the standard handles by setting *stdin*, *stdout* or *stderr*."
msgstr ""

#: ../../../library/subprocess.rst:499
msgid ""
"The default for *close_fds* was changed from :const:`False` to what is "
"described above."
msgstr ""

#: ../../../library/subprocess.rst:503
msgid ""
"*pass_fds* is an optional sequence of file descriptors to keep open between "
"the parent and child.  Providing any *pass_fds* forces *close_fds* to be :"
"const:`True`.  (Unix only)"
msgstr ""

#: ../../../library/subprocess.rst:507
msgid "The *pass_fds* parameter was added."
msgstr ""

#: ../../../library/subprocess.rst:510
msgid ""
"If *cwd* is not ``None``, the function changes the working directory to "
"*cwd* before executing the child.  In particular, the function looks for "
"*executable* (or for the first item in *args*) relative to *cwd* if the "
"executable path is a relative path."
msgstr ""

#: ../../../library/subprocess.rst:515
msgid ""
"If *restore_signals* is true (the default) all signals that Python has set "
"to SIG_IGN are restored to SIG_DFL in the child process before the exec. "
"Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals. (Unix only)"
msgstr ""

#: ../../../library/subprocess.rst:520
msgid "*restore_signals* was added."
msgstr ""

#: ../../../library/subprocess.rst:523
msgid ""
"If *start_new_session* is true the setsid() system call will be made in the "
"child process prior to the execution of the subprocess.  (Unix only)"
msgstr ""

#: ../../../library/subprocess.rst:526
msgid "*start_new_session* was added."
msgstr ""

#: ../../../library/subprocess.rst:529
msgid ""
"If *env* is not ``None``, it must be a mapping that defines the environment "
"variables for the new process; these are used instead of the default "
"behavior of inheriting the current process' environment."
msgstr ""

#: ../../../library/subprocess.rst:535
msgid ""
"If specified, *env* must provide any variables required for the program to "
"execute.  On Windows, in order to run a `side-by-side assembly`_ the "
"specified *env* **must** include a valid :envvar:`SystemRoot`."
msgstr ""

#: ../../../library/subprocess.rst:541
msgid ""
"If *universal_newlines* is ``True``, the file objects *stdin*, *stdout* and "
"*stderr* are opened as text streams in universal newlines mode, as described "
"above in :ref:`frequently-used-arguments`, otherwise they are opened as "
"binary streams."
msgstr ""

#: ../../../library/subprocess.rst:546
msgid ""
"If given, *startupinfo* will be a :class:`STARTUPINFO` object, which is "
"passed to the underlying ``CreateProcess`` function. *creationflags*, if "
"given, can be :data:`CREATE_NEW_CONSOLE` or :data:"
"`CREATE_NEW_PROCESS_GROUP`. (Windows only)"
msgstr ""

#: ../../../library/subprocess.rst:551
msgid ""
"Popen objects are supported as context managers via the :keyword:`with` "
"statement: on exit, standard file descriptors are closed, and the process is "
"waited for. ::"
msgstr ""

#: ../../../library/subprocess.rst:555
msgid ""
"with Popen([\"ifconfig\"], stdout=PIPE) as proc:\n"
"    log.write(proc.stdout.read())"
msgstr ""

#: ../../../library/subprocess.rst:558
msgid "Added context manager support."
msgstr ""

#: ../../../library/subprocess.rst:563
msgid "Exceptions"
msgstr ""

#: ../../../library/subprocess.rst:565
msgid ""
"Exceptions raised in the child process, before the new program has started "
"to execute, will be re-raised in the parent.  Additionally, the exception "
"object will have one extra attribute called :attr:`child_traceback`, which "
"is a string containing traceback information from the child's point of view."
msgstr ""

#: ../../../library/subprocess.rst:570
msgid ""
"The most common exception raised is :exc:`OSError`.  This occurs, for "
"example, when trying to execute a non-existent file.  Applications should "
"prepare for :exc:`OSError` exceptions."
msgstr ""

#: ../../../library/subprocess.rst:574
msgid ""
"A :exc:`ValueError` will be raised if :class:`Popen` is called with invalid "
"arguments."
msgstr ""

#: ../../../library/subprocess.rst:577
msgid ""
":func:`check_call` and :func:`check_output` will raise :exc:"
"`CalledProcessError` if the called process returns a non-zero return code."
msgstr ""

#: ../../../library/subprocess.rst:581
msgid ""
"All of the functions and methods that accept a *timeout* parameter, such as :"
"func:`call` and :meth:`Popen.communicate` will raise :exc:`TimeoutExpired` "
"if the timeout expires before the process exits."
msgstr ""

#: ../../../library/subprocess.rst:585
msgid ""
"Exceptions defined in this module all inherit from :exc:`SubprocessError`."
msgstr ""

#: ../../../library/subprocess.rst:587
msgid "The :exc:`SubprocessError` base class was added."
msgstr ""

#: ../../../library/subprocess.rst:592
msgid "Security"
msgstr ""

#: ../../../library/subprocess.rst:594
msgid ""
"Unlike some other popen functions, this implementation will never call a "
"system shell implicitly.  This means that all characters, including shell "
"metacharacters, can safely be passed to child processes. Obviously, if the "
"shell is invoked explicitly, then it is the application's responsibility to "
"ensure that all whitespace and metacharacters are quoted appropriately."
msgstr ""

#: ../../../library/subprocess.rst:602
msgid "Popen Objects"
msgstr ""

#: ../../../library/subprocess.rst:604
msgid "Instances of the :class:`Popen` class have the following methods:"
msgstr ""

#: ../../../library/subprocess.rst:609
msgid ""
"Check if child process has terminated.  Set and return :attr:`~Popen."
"returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:615
msgid ""
"Wait for child process to terminate.  Set and return :attr:`~Popen."
"returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:618
msgid ""
"If the process does not terminate after *timeout* seconds, raise a :exc:"
"`TimeoutExpired` exception.  It is safe to catch this exception and retry "
"the wait."
msgstr ""

#: ../../../library/subprocess.rst:624
msgid ""
"This will deadlock when using ``stdout=PIPE`` and/or ``stderr=PIPE`` and the "
"child process generates enough output to a pipe such that it blocks waiting "
"for the OS pipe buffer to accept more data.  Use :meth:`communicate` to "
"avoid that."
msgstr ""

#: ../../../library/subprocess.rst:635
msgid ""
"Interact with process: Send data to stdin.  Read data from stdout and "
"stderr, until end-of-file is reached.  Wait for process to terminate.  The "
"optional *input* argument should be data to be sent to the child process, or "
"``None``, if no data should be sent to the child.  The type of *input* must "
"be bytes or, if *universal_newlines* was ``True``, a string."
msgstr ""

#: ../../../library/subprocess.rst:641
msgid ":meth:`communicate` returns a tuple ``(stdoutdata, stderrdata)``."
msgstr ""

#: ../../../library/subprocess.rst:643
msgid ""
"Note that if you want to send data to the process's stdin, you need to "
"create the Popen object with ``stdin=PIPE``.  Similarly, to get anything "
"other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` "
"and/or ``stderr=PIPE`` too."
msgstr ""

#: ../../../library/subprocess.rst:648
msgid ""
"If the process does not terminate after *timeout* seconds, a :exc:"
"`TimeoutExpired` exception will be raised.  Catching this exception and "
"retrying communication will not lose any output."
msgstr ""

#: ../../../library/subprocess.rst:652
msgid ""
"The child process is not killed if the timeout expires, so in order to "
"cleanup properly a well-behaved application should kill the child process "
"and finish communication::"
msgstr ""

#: ../../../library/subprocess.rst:656
msgid ""
"proc = subprocess.Popen(...)\n"
"try:\n"
"    outs, errs = proc.communicate(timeout=15)\n"
"except TimeoutExpired:\n"
"    proc.kill()\n"
"    outs, errs = proc.communicate()"
msgstr ""

#: ../../../library/subprocess.rst:665
msgid ""
"The data read is buffered in memory, so do not use this method if the data "
"size is large or unlimited."
msgstr ""

#: ../../../library/subprocess.rst:674
msgid "Sends the signal *signal* to the child."
msgstr ""

#: ../../../library/subprocess.rst:678
msgid ""
"On Windows, SIGTERM is an alias for :meth:`terminate`. CTRL_C_EVENT and "
"CTRL_BREAK_EVENT can be sent to processes started with a *creationflags* "
"parameter which includes `CREATE_NEW_PROCESS_GROUP`."
msgstr ""

#: ../../../library/subprocess.rst:685
msgid ""
"Stop the child. On Posix OSs the method sends SIGTERM to the child. On "
"Windows the Win32 API function :c:func:`TerminateProcess` is called to stop "
"the child."
msgstr ""

#: ../../../library/subprocess.rst:692
msgid ""
"Kills the child. On Posix OSs the function sends SIGKILL to the child. On "
"Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""

#: ../../../library/subprocess.rst:696
msgid "The following attributes are also available:"
msgstr ""

#: ../../../library/subprocess.rst:700
msgid ""
"Use :meth:`~Popen.communicate` rather than :attr:`.stdin.write <Popen."
"stdin>`, :attr:`.stdout.read <Popen.stdout>` or :attr:`.stderr.read <Popen."
"stderr>` to avoid deadlocks due to any of the other OS pipe buffers filling "
"up and blocking the child process."
msgstr ""

#: ../../../library/subprocess.rst:707
msgid ""
"The *args* argument as it was passed to :class:`Popen` -- a sequence of "
"program arguments or else a single string."
msgstr ""

#: ../../../library/subprocess.rst:714
msgid ""
"If the *stdin* argument was :data:`PIPE`, this attribute is a writeable "
"stream object as returned by :func:`open`. If the *universal_newlines* "
"argument was ``True``, the stream is a text stream, otherwise it is a byte "
"stream. If the *stdin* argument was not :data:`PIPE`, this attribute is "
"``None``."
msgstr ""

#: ../../../library/subprocess.rst:723
msgid ""
"If the *stdout* argument was :data:`PIPE`, this attribute is a readable "
"stream object as returned by :func:`open`. Reading from the stream provides "
"output from the child process. If the *universal_newlines* argument was "
"``True``, the stream is a text stream, otherwise it is a byte stream. If the "
"*stdout* argument was not :data:`PIPE`, this attribute is ``None``."
msgstr ""

#: ../../../library/subprocess.rst:732
msgid ""
"If the *stderr* argument was :data:`PIPE`, this attribute is a readable "
"stream object as returned by :func:`open`. Reading from the stream provides "
"error output from the child process. If the *universal_newlines* argument "
"was ``True``, the stream is a text stream, otherwise it is a byte stream. If "
"the *stderr* argument was not :data:`PIPE`, this attribute is ``None``."
msgstr ""

#: ../../../library/subprocess.rst:741
msgid "The process ID of the child process."
msgstr ""

#: ../../../library/subprocess.rst:743
msgid ""
"Note that if you set the *shell* argument to ``True``, this is the process "
"ID of the spawned shell."
msgstr ""

#: ../../../library/subprocess.rst:749
msgid ""
"The child return code, set by :meth:`poll` and :meth:`wait` (and indirectly "
"by :meth:`communicate`).  A ``None`` value indicates that the process hasn't "
"terminated yet."
msgstr ""

#: ../../../library/subprocess.rst:753
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (Unix only)."
msgstr ""

#: ../../../library/subprocess.rst:758
msgid "Windows Popen Helpers"
msgstr ""

#: ../../../library/subprocess.rst:760
msgid ""
"The :class:`STARTUPINFO` class and following constants are only available on "
"Windows."
msgstr ""

#: ../../../library/subprocess.rst:765
msgid ""
"Partial support of the Windows `STARTUPINFO <http://msdn.microsoft.com/en-us/"
"library/ms686331(v=vs.85).aspx>`__ structure is used for :class:`Popen` "
"creation."
msgstr ""

#: ../../../library/subprocess.rst:771
msgid ""
"A bit field that determines whether certain :class:`STARTUPINFO` attributes "
"are used when the process creates a window. ::"
msgstr ""

#: ../../../library/subprocess.rst:774
msgid ""
"si = subprocess.STARTUPINFO()\n"
"si.dwFlags = subprocess.STARTF_USESTDHANDLES | subprocess."
"STARTF_USESHOWWINDOW"
msgstr ""

#: ../../../library/subprocess.rst:779
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is "
"the standard input handle for the process. If :data:`STARTF_USESTDHANDLES` "
"is not specified, the default for standard input is the keyboard buffer."
msgstr ""

#: ../../../library/subprocess.rst:786
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is "
"the standard output handle for the process. Otherwise, this attribute is "
"ignored and the default for standard output is the console window's buffer."
msgstr ""

#: ../../../library/subprocess.rst:793
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is "
"the standard error handle for the process. Otherwise, this attribute is "
"ignored and the default for standard error is the console window's buffer."
msgstr ""

#: ../../../library/subprocess.rst:799
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESHOWWINDOW`, this attribute "
"can be any of the values that can be specified in the ``nCmdShow`` parameter "
"for the `ShowWindow <http://msdn.microsoft.com/en-us/library/"
"ms633548(v=vs.85).aspx>`__ function, except for ``SW_SHOWDEFAULT``. "
"Otherwise, this attribute is ignored."
msgstr ""

#: ../../../library/subprocess.rst:806
msgid ""
":data:`SW_HIDE` is provided for this attribute. It is used when :class:"
"`Popen` is called with ``shell=True``."
msgstr ""

#: ../../../library/subprocess.rst:811
msgid "Constants"
msgstr ""

#: ../../../library/subprocess.rst:813
msgid "The :mod:`subprocess` module exposes the following constants."
msgstr ""

#: ../../../library/subprocess.rst:817
msgid ""
"The standard input device. Initially, this is the console input buffer, "
"``CONIN$``."
msgstr ""

#: ../../../library/subprocess.rst:822
msgid ""
"The standard output device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""

#: ../../../library/subprocess.rst:827
msgid ""
"The standard error device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""

#: ../../../library/subprocess.rst:832
msgid "Hides the window. Another window will be activated."
msgstr ""

#: ../../../library/subprocess.rst:836
msgid ""
"Specifies that the :attr:`STARTUPINFO.hStdInput`, :attr:`STARTUPINFO."
"hStdOutput`, and :attr:`STARTUPINFO.hStdError` attributes contain additional "
"information."
msgstr ""

#: ../../../library/subprocess.rst:842
msgid ""
"Specifies that the :attr:`STARTUPINFO.wShowWindow` attribute contains "
"additional information."
msgstr ""

#: ../../../library/subprocess.rst:847
msgid ""
"The new process has a new console, instead of inheriting its parent's "
"console (the default)."
msgstr ""

#: ../../../library/subprocess.rst:850
msgid ""
"This flag is always set when :class:`Popen` is created with ``shell=True``."
msgstr ""

#: ../../../library/subprocess.rst:854
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"group will be created. This flag is necessary for using :func:`os.kill` on "
"the subprocess."
msgstr ""

#: ../../../library/subprocess.rst:858
msgid "This flag is ignored if :data:`CREATE_NEW_CONSOLE` is specified."
msgstr ""

#: ../../../library/subprocess.rst:864
msgid "Replacing Older Functions with the :mod:`subprocess` Module"
msgstr ""

#: ../../../library/subprocess.rst:866
msgid ""
"In this section, \"a becomes b\" means that b can be used as a replacement "
"for a."
msgstr ""

#: ../../../library/subprocess.rst:870
msgid ""
"All \"a\" functions in this section fail (more or less) silently if the "
"executed program cannot be found; the \"b\" replacements raise :exc:"
"`OSError` instead."
msgstr ""

#: ../../../library/subprocess.rst:874
msgid ""
"In addition, the replacements using :func:`check_output` will fail with a :"
"exc:`CalledProcessError` if the requested operation produces a non-zero "
"return code. The output is still available as the :attr:`~CalledProcessError."
"output` attribute of the raised exception."
msgstr ""

#: ../../../library/subprocess.rst:879
msgid ""
"In the following examples, we assume that the relevant functions have "
"already been imported from the :mod:`subprocess` module."
msgstr ""

#: ../../../library/subprocess.rst:884
msgid "Replacing /bin/sh shell backquote"
msgstr ""

#: ../../../library/subprocess.rst:888
msgid ""
"output=`mycmd myarg`\n"
"# becomes\n"
"output = check_output([\"mycmd\", \"myarg\"])"
msgstr ""

#: ../../../library/subprocess.rst:894
msgid "Replacing shell pipeline"
msgstr ""

#: ../../../library/subprocess.rst:898
msgid ""
"output=`dmesg | grep hda`\n"
"# becomes\n"
"p1 = Popen([\"dmesg\"], stdout=PIPE)\n"
"p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\n"
"p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n"
"output = p2.communicate()[0]"
msgstr ""

#: ../../../library/subprocess.rst:905
msgid ""
"The p1.stdout.close() call after starting the p2 is important in order for "
"p1 to receive a SIGPIPE if p2 exits before p1."
msgstr ""

#: ../../../library/subprocess.rst:908
msgid ""
"Alternatively, for trusted input, the shell's own pipeline support may still "
"be used directly::"
msgstr ""

#: ../../../library/subprocess.rst:911
msgid ""
"output=`dmesg | grep hda`\n"
"# becomes\n"
"output=check_output(\"dmesg | grep hda\", shell=True)"
msgstr ""

#: ../../../library/subprocess.rst:917
msgid "Replacing :func:`os.system`"
msgstr ""

#: ../../../library/subprocess.rst:921
msgid ""
"sts = os.system(\"mycmd\" + \" myarg\")\n"
"# becomes\n"
"sts = call(\"mycmd\" + \" myarg\", shell=True)"
msgstr ""

#: ../../../library/subprocess.rst:925
msgid "Notes:"
msgstr ""

#: ../../../library/subprocess.rst:927
msgid "Calling the program through the shell is usually not required."
msgstr ""

#: ../../../library/subprocess.rst:929
msgid "A more realistic example would look like this::"
msgstr ""

#: ../../../library/subprocess.rst:931
msgid ""
"try:\n"
"    retcode = call(\"mycmd\" + \" myarg\", shell=True)\n"
"    if retcode < 0:\n"
"        print(\"Child was terminated by signal\", -retcode, file=sys."
"stderr)\n"
"    else:\n"
"        print(\"Child returned\", retcode, file=sys.stderr)\n"
"except OSError as e:\n"
"    print(\"Execution failed:\", e, file=sys.stderr)"
msgstr ""

#: ../../../library/subprocess.rst:942
msgid "Replacing the :func:`os.spawn <os.spawnl>` family"
msgstr ""

#: ../../../library/subprocess.rst:944
msgid "P_NOWAIT example::"
msgstr ""

#: ../../../library/subprocess.rst:946
msgid ""
"pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n"
"==>\n"
"pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid"
msgstr ""

#: ../../../library/subprocess.rst:950
msgid "P_WAIT example::"
msgstr ""

#: ../../../library/subprocess.rst:952
msgid ""
"retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n"
"==>\n"
"retcode = call([\"/bin/mycmd\", \"myarg\"])"
msgstr ""

#: ../../../library/subprocess.rst:956
msgid "Vector example::"
msgstr ""

#: ../../../library/subprocess.rst:958
msgid ""
"os.spawnvp(os.P_NOWAIT, path, args)\n"
"==>\n"
"Popen([path] + args[1:])"
msgstr ""

#: ../../../library/subprocess.rst:962
msgid "Environment example::"
msgstr ""

#: ../../../library/subprocess.rst:964
msgid ""
"os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\n"
"==>\n"
"Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})"
msgstr ""

#: ../../../library/subprocess.rst:971
msgid "Replacing :func:`os.popen`, :func:`os.popen2`, :func:`os.popen3`"
msgstr ""

#: ../../../library/subprocess.rst:975
msgid ""
"(child_stdin, child_stdout) = os.popen2(cmd, mode, bufsize)\n"
"==>\n"
"p = Popen(cmd, shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, close_fds=True)\n"
"(child_stdin, child_stdout) = (p.stdin, p.stdout)"
msgstr ""

#: ../../../library/subprocess.rst:983
msgid ""
"(child_stdin,\n"
" child_stdout,\n"
" child_stderr) = os.popen3(cmd, mode, bufsize)\n"
"==>\n"
"p = Popen(cmd, shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n"
"(child_stdin,\n"
" child_stdout,\n"
" child_stderr) = (p.stdin, p.stdout, p.stderr)"
msgstr ""

#: ../../../library/subprocess.rst:995
msgid ""
"(child_stdin, child_stdout_and_stderr) = os.popen4(cmd, mode, bufsize)\n"
"==>\n"
"p = Popen(cmd, shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)\n"
"(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)"
msgstr ""

#: ../../../library/subprocess.rst:1001
msgid "Return code handling translates as follows::"
msgstr ""

#: ../../../library/subprocess.rst:1003
msgid ""
"pipe = os.popen(cmd, 'w')\n"
"...\n"
"rc = pipe.close()\n"
"if rc is not None and rc >> 8:\n"
"    print(\"There were some errors\")\n"
"==>\n"
"process = Popen(cmd, 'w', stdin=PIPE)\n"
"...\n"
"process.stdin.close()\n"
"if process.wait() != 0:\n"
"    print(\"There were some errors\")"
msgstr ""

#: ../../../library/subprocess.rst:1017
msgid "Replacing functions from the :mod:`popen2` module"
msgstr ""

#: ../../../library/subprocess.rst:1021
msgid ""
"If the cmd argument to popen2 functions is a string, the command is executed "
"through /bin/sh.  If it is a list, the command is directly executed."
msgstr ""

#: ../../../library/subprocess.rst:1026
msgid ""
"(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)\n"
"==>\n"
"p = Popen([\"somestring\"], shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, close_fds=True)\n"
"(child_stdout, child_stdin) = (p.stdout, p.stdin)"
msgstr ""

#: ../../../library/subprocess.rst:1034
msgid ""
"(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize, "
"mode)\n"
"==>\n"
"p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, close_fds=True)\n"
"(child_stdout, child_stdin) = (p.stdout, p.stdin)"
msgstr ""

#: ../../../library/subprocess.rst:1040
msgid ""
":class:`popen2.Popen3` and :class:`popen2.Popen4` basically work as :class:"
"`subprocess.Popen`, except that:"
msgstr ""

#: ../../../library/subprocess.rst:1043
msgid ":class:`Popen` raises an exception if the execution fails."
msgstr ""

#: ../../../library/subprocess.rst:1045
msgid "the *capturestderr* argument is replaced with the *stderr* argument."
msgstr ""

#: ../../../library/subprocess.rst:1047
msgid "``stdin=PIPE`` and ``stdout=PIPE`` must be specified."
msgstr ""

#: ../../../library/subprocess.rst:1049
msgid ""
"popen2 closes all file descriptors by default, but you have to specify "
"``close_fds=True`` with :class:`Popen` to guarantee this behavior on all "
"platforms or past Python versions."
msgstr ""

#: ../../../library/subprocess.rst:1055
msgid "Legacy Shell Invocation Functions"
msgstr ""

#: ../../../library/subprocess.rst:1057
msgid ""
"This module also provides the following legacy functions from the 2.x "
"``commands`` module. These operations implicitly invoke the system shell and "
"none of the guarantees described above regarding security and exception "
"handling consistency are valid for these functions."
msgstr ""

#: ../../../library/subprocess.rst:1064
msgid "Return ``(status, output)`` of executing *cmd* in a shell."
msgstr ""

#: ../../../library/subprocess.rst:1066
msgid ""
"Execute the string *cmd* in a shell with :class:`Popen` and return a 2-tuple "
"``(status, output)`` via :func:`Popen.communicate`. Universal newlines mode "
"is used; see the notes on :ref:`frequently-used-arguments` for more details."
msgstr ""

#: ../../../library/subprocess.rst:1070
msgid ""
"A trailing newline is stripped from the output. The exit status for the "
"command can be interpreted according to the rules for the C function :c:func:"
"`wait`.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:1074
msgid ""
">>> subprocess.getstatusoutput('ls /bin/ls')\n"
"(0, '/bin/ls')\n"
">>> subprocess.getstatusoutput('cat /bin/junk')\n"
"(256, 'cat: /bin/junk: No such file or directory')\n"
">>> subprocess.getstatusoutput('/bin/junk')\n"
"(256, 'sh: /bin/junk: not found')"
msgstr ""

#: ../../../library/subprocess.rst:1081 ../../../library/subprocess.rst:1097
msgid "Availability: Unix & Windows"
msgstr ""

#: ../../../library/subprocess.rst:1083 ../../../library/subprocess.rst:1099
msgid "Windows support added"
msgstr ""

#: ../../../library/subprocess.rst:1089
msgid "Return output (stdout and stderr) of executing *cmd* in a shell."
msgstr ""

#: ../../../library/subprocess.rst:1091
msgid ""
"Like :func:`getstatusoutput`, except the exit status is ignored and the "
"return value is a string containing the command's output.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:1094
msgid ""
">>> subprocess.getoutput('ls /bin/ls')\n"
"'/bin/ls'"
msgstr ""

#: ../../../library/subprocess.rst:1104
msgid "Notes"
msgstr ""

#: ../../../library/subprocess.rst:1109
msgid "Converting an argument sequence to a string on Windows"
msgstr ""

#: ../../../library/subprocess.rst:1111
msgid ""
"On Windows, an *args* sequence is converted to a string that can be parsed "
"using the following rules (which correspond to the rules used by the MS C "
"runtime):"
msgstr ""

#: ../../../library/subprocess.rst:1115
msgid ""
"Arguments are delimited by white space, which is either a space or a tab."
msgstr ""

#: ../../../library/subprocess.rst:1118
msgid ""
"A string surrounded by double quotation marks is interpreted as a single "
"argument, regardless of white space contained within.  A quoted string can "
"be embedded in an argument."
msgstr ""

#: ../../../library/subprocess.rst:1123
msgid ""
"A double quotation mark preceded by a backslash is interpreted as a literal "
"double quotation mark."
msgstr ""

#: ../../../library/subprocess.rst:1126
msgid ""
"Backslashes are interpreted literally, unless they immediately precede a "
"double quotation mark."
msgstr ""

#: ../../../library/subprocess.rst:1129
msgid ""
"If backslashes immediately precede a double quotation mark, every pair of "
"backslashes is interpreted as a literal backslash.  If the number of "
"backslashes is odd, the last backslash escapes the next double quotation "
"mark as described in rule 3."
msgstr ""

#: ../../../library/subprocess.rst:1138
msgid ":mod:`shlex`"
msgstr ""

#: ../../../library/subprocess.rst:1139
msgid "Module which provides function to parse and escape command lines."
msgstr ""

#: ../../../library/subprocess.rst:290
msgid "universal newlines"
msgstr ""

#: ../../../library/subprocess.rst:290
msgid "subprocess module"
msgstr ""
