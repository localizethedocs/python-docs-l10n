# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/stdtypes.rst:8
msgid "Built-in Types"
msgstr ""

#: ../../../library/stdtypes.rst:10
msgid ""
"The following sections describe the standard types that are built into the "
"interpreter."
msgstr ""

#: ../../../library/stdtypes.rst:15
msgid ""
"The principal built-in types are numerics, sequences, mappings, classes, "
"instances and exceptions."
msgstr ""

#: ../../../library/stdtypes.rst:18
msgid ""
"Some collection classes are mutable.  The methods that add, subtract, or "
"rearrange their members in place, and don't return a specific item, never "
"return the collection instance itself but ``None``."
msgstr ""

#: ../../../library/stdtypes.rst:22
msgid ""
"Some operations are supported by several object types; in particular, "
"practically all objects can be compared, tested for truth value, and "
"converted to a string (with the :func:`repr` function or the slightly "
"different :func:`str` function).  The latter function is implicitly used "
"when an object is written by the :func:`print` function."
msgstr ""

#: ../../../library/stdtypes.rst:32
msgid "Truth Value Testing"
msgstr ""

#: ../../../library/stdtypes.rst:41
msgid ""
"Any object can be tested for truth value, for use in an :keyword:`if` or :"
"keyword:`while` condition or as operand of the Boolean operations below. The "
"following values are considered false:"
msgstr ""

#: ../../../library/stdtypes.rst:47
msgid "``None``"
msgstr ""

#: ../../../library/stdtypes.rst:51
msgid "``False``"
msgstr ""

#: ../../../library/stdtypes.rst:53
msgid "zero of any numeric type, for example, ``0``, ``0.0``, ``0j``."
msgstr ""

#: ../../../library/stdtypes.rst:55
msgid "any empty sequence, for example, ``''``, ``()``, ``[]``."
msgstr ""

#: ../../../library/stdtypes.rst:57
msgid "any empty mapping, for example, ``{}``."
msgstr ""

#: ../../../library/stdtypes.rst:59
msgid ""
"instances of user-defined classes, if the class defines a :meth:`__bool__` "
"or :meth:`__len__` method, when that method returns the integer zero or :"
"class:`bool` value ``False``. [1]_"
msgstr ""

#: ../../../library/stdtypes.rst:65
msgid ""
"All other values are considered true --- so objects of many types are always "
"true."
msgstr ""

#: ../../../library/stdtypes.rst:74
msgid ""
"Operations and built-in functions that have a Boolean result always return "
"``0`` or ``False`` for false and ``1`` or ``True`` for true, unless "
"otherwise stated. (Important exception: the Boolean operations ``or`` and "
"``and`` always return one of their operands.)"
msgstr ""

#: ../../../library/stdtypes.rst:83
msgid "Boolean Operations --- :keyword:`and`, :keyword:`or`, :keyword:`not`"
msgstr ""

#: ../../../library/stdtypes.rst:87
msgid "These are the Boolean operations, ordered by ascending priority:"
msgstr ""

#: ../../../library/stdtypes.rst:90 ../../../library/stdtypes.rst:148
#: ../../../library/stdtypes.rst:276 ../../../library/stdtypes.rst:365
#: ../../../library/stdtypes.rst:411 ../../../library/stdtypes.rst:847
#: ../../../library/stdtypes.rst:1037
msgid "Operation"
msgstr ""

#: ../../../library/stdtypes.rst:90 ../../../library/stdtypes.rst:276
#: ../../../library/stdtypes.rst:365 ../../../library/stdtypes.rst:411
#: ../../../library/stdtypes.rst:847 ../../../library/stdtypes.rst:1037
msgid "Result"
msgstr ""

#: ../../../library/stdtypes.rst:90 ../../../library/stdtypes.rst:276
#: ../../../library/stdtypes.rst:365 ../../../library/stdtypes.rst:411
#: ../../../library/stdtypes.rst:847 ../../../library/stdtypes.rst:1037
#: ../../../library/stdtypes.rst:2043
msgid "Notes"
msgstr ""

#: ../../../library/stdtypes.rst:92
msgid "``x or y``"
msgstr ""

#: ../../../library/stdtypes.rst:92
msgid "if *x* is false, then *y*, else *x*"
msgstr ""

#: ../../../library/stdtypes.rst:92 ../../../library/stdtypes.rst:286
#: ../../../library/stdtypes.rst:849 ../../../library/stdtypes.rst:852
#: ../../../library/stdtypes.rst:1048 ../../../library/stdtypes.rst:2049
msgid "\\(1)"
msgstr ""

#: ../../../library/stdtypes.rst:95
msgid "``x and y``"
msgstr ""

#: ../../../library/stdtypes.rst:95
msgid "if *x* is false, then *x*, else *y*"
msgstr ""

#: ../../../library/stdtypes.rst:95 ../../../library/stdtypes.rst:289
#: ../../../library/stdtypes.rst:309 ../../../library/stdtypes.rst:1072
#: ../../../library/stdtypes.rst:2053 ../../../library/stdtypes.rst:2055
msgid "\\(2)"
msgstr ""

#: ../../../library/stdtypes.rst:98
msgid "``not x``"
msgstr ""

#: ../../../library/stdtypes.rst:98
msgid "if *x* is false, then ``True``, else ``False``"
msgstr ""

#: ../../../library/stdtypes.rst:98 ../../../library/stdtypes.rst:861
#: ../../../library/stdtypes.rst:1075 ../../../library/stdtypes.rst:2057
#: ../../../library/stdtypes.rst:2059 ../../../library/stdtypes.rst:2061
#: ../../../library/stdtypes.rst:2063
msgid "\\(3)"
msgstr ""

#: ../../../library/stdtypes.rst:107 ../../../library/stdtypes.rst:320
#: ../../../library/stdtypes.rst:429 ../../../library/stdtypes.rst:888
#: ../../../library/stdtypes.rst:1083 ../../../library/stdtypes.rst:2089
msgid "Notes:"
msgstr ""

#: ../../../library/stdtypes.rst:110
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is :const:`False`."
msgstr ""

#: ../../../library/stdtypes.rst:114
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is :const:`True`."
msgstr ""

#: ../../../library/stdtypes.rst:118
msgid ""
"``not`` has a lower priority than non-Boolean operators, so ``not a == b`` "
"is interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error."
msgstr ""

#: ../../../library/stdtypes.rst:125
msgid "Comparisons"
msgstr ""

#: ../../../library/stdtypes.rst:139
msgid ""
"There are eight comparison operations in Python.  They all have the same "
"priority (which is higher than that of the Boolean operations).  Comparisons "
"can be chained arbitrarily; for example, ``x < y <= z`` is equivalent to ``x "
"< y and y <= z``, except that *y* is evaluated only once (but in both cases "
"*z* is not evaluated at all when ``x < y`` is found to be false)."
msgstr ""

#: ../../../library/stdtypes.rst:145
msgid "This table summarizes the comparison operations:"
msgstr ""

#: ../../../library/stdtypes.rst:148 ../../../library/stdtypes.rst:2020
#: ../../../library/stdtypes.rst:2043
msgid "Meaning"
msgstr ""

#: ../../../library/stdtypes.rst:150
msgid "``<``"
msgstr ""

#: ../../../library/stdtypes.rst:150
msgid "strictly less than"
msgstr ""

#: ../../../library/stdtypes.rst:152
msgid "``<=``"
msgstr ""

#: ../../../library/stdtypes.rst:152
msgid "less than or equal"
msgstr ""

#: ../../../library/stdtypes.rst:154
msgid "``>``"
msgstr ""

#: ../../../library/stdtypes.rst:154
msgid "strictly greater than"
msgstr ""

#: ../../../library/stdtypes.rst:156
msgid "``>=``"
msgstr ""

#: ../../../library/stdtypes.rst:156
msgid "greater than or equal"
msgstr ""

#: ../../../library/stdtypes.rst:158
msgid "``==``"
msgstr ""

#: ../../../library/stdtypes.rst:158
msgid "equal"
msgstr ""

#: ../../../library/stdtypes.rst:160
msgid "``!=``"
msgstr ""

#: ../../../library/stdtypes.rst:160
msgid "not equal"
msgstr ""

#: ../../../library/stdtypes.rst:162
msgid "``is``"
msgstr ""

#: ../../../library/stdtypes.rst:162
msgid "object identity"
msgstr ""

#: ../../../library/stdtypes.rst:164
msgid "``is not``"
msgstr ""

#: ../../../library/stdtypes.rst:164
msgid "negated object identity"
msgstr ""

#: ../../../library/stdtypes.rst:171
msgid ""
"Objects of different types, except different numeric types, never compare "
"equal. Furthermore, some types (for example, function objects) support only "
"a degenerate notion of comparison where any two objects of that type are "
"unequal.  The ``<``, ``<=``, ``>`` and ``>=`` operators will raise a :exc:"
"`TypeError` exception when comparing a complex number with another built-in "
"numeric type, when the objects are of different types that cannot be "
"compared, or in other cases where there is no defined ordering."
msgstr ""

#: ../../../library/stdtypes.rst:187
msgid ""
"Non-identical instances of a class normally compare as non-equal unless the "
"class defines the :meth:`__eq__` method."
msgstr ""

#: ../../../library/stdtypes.rst:190
msgid ""
"Instances of a class cannot be ordered with respect to other instances of "
"the same class, or other types of object, unless the class defines enough of "
"the methods :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, and :meth:"
"`__ge__` (in general, :meth:`__lt__` and :meth:`__eq__` are sufficient, if "
"you want the conventional meanings of the comparison operators)."
msgstr ""

#: ../../../library/stdtypes.rst:196
msgid ""
"The behavior of the :keyword:`is` and :keyword:`is not` operators cannot be "
"customized; also they can be applied to any two objects and never raise an "
"exception."
msgstr ""

#: ../../../library/stdtypes.rst:204
msgid ""
"Two more operations with the same syntactic priority, :keyword:`in` and :"
"keyword:`not in`, are supported only by sequence types (below)."
msgstr ""

#: ../../../library/stdtypes.rst:211
msgid "Numeric Types --- :class:`int`, :class:`float`, :class:`complex`"
msgstr ""

#: ../../../library/stdtypes.rst:221
msgid ""
"There are three distinct numeric types: :dfn:`integers`, :dfn:`floating "
"point numbers`, and :dfn:`complex numbers`.  In addition, Booleans are a "
"subtype of integers.  Integers have unlimited precision.  Floating point "
"numbers are usually implemented using :c:type:`double` in C; information "
"about the precision and internal representation of floating point numbers "
"for the machine on which your program is running is available in :data:`sys."
"float_info`.  Complex numbers have a real and imaginary part, which are each "
"a floating point number.  To extract these parts from a complex number *z*, "
"use ``z.real`` and ``z.imag``. (The standard library includes additional "
"numeric types, :mod:`fractions` that hold rationals, and :mod:`decimal` that "
"hold floating-point numbers with user-definable precision.)"
msgstr ""

#: ../../../library/stdtypes.rst:243
msgid ""
"Numbers are created by numeric literals or as the result of built-in "
"functions and operators.  Unadorned integer literals (including hex, octal "
"and binary numbers) yield integers.  Numeric literals containing a decimal "
"point or an exponent sign yield floating point numbers.  Appending ``'j'`` "
"or ``'J'`` to a numeric literal yields an imaginary number (a complex number "
"with a zero real part) which you can add to an integer or float to get a "
"complex number with real and imaginary parts."
msgstr ""

#: ../../../library/stdtypes.rst:264
msgid ""
"Python fully supports mixed arithmetic: when a binary arithmetic operator "
"has operands of different numeric types, the operand with the \"narrower\" "
"type is widened to that of the other, where integer is narrower than "
"floating point, which is narrower than complex.  Comparisons between numbers "
"of mixed type use the same rule. [2]_ The constructors :func:`int`, :func:"
"`float`, and :func:`complex` can be used to produce numbers of a specific "
"type."
msgstr ""

#: ../../../library/stdtypes.rst:271
msgid ""
"All numeric types (except complex) support the following operations, sorted "
"by ascending priority (operations in the same box have the same priority; "
"all numeric operations have a higher priority than comparison operations):"
msgstr ""

#: ../../../library/stdtypes.rst:276
msgid "Full documentation"
msgstr ""

#: ../../../library/stdtypes.rst:278
msgid "``x + y``"
msgstr ""

#: ../../../library/stdtypes.rst:278
msgid "sum of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:280
msgid "``x - y``"
msgstr ""

#: ../../../library/stdtypes.rst:280
msgid "difference of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:282
msgid "``x * y``"
msgstr ""

#: ../../../library/stdtypes.rst:282
msgid "product of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:284
msgid "``x / y``"
msgstr ""

#: ../../../library/stdtypes.rst:284
msgid "quotient of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:286
msgid "``x // y``"
msgstr ""

#: ../../../library/stdtypes.rst:286
msgid "floored quotient of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:289
msgid "``x % y``"
msgstr ""

#: ../../../library/stdtypes.rst:289
msgid "remainder of ``x / y``"
msgstr ""

#: ../../../library/stdtypes.rst:291
msgid "``-x``"
msgstr ""

#: ../../../library/stdtypes.rst:291
msgid "*x* negated"
msgstr ""

#: ../../../library/stdtypes.rst:293
msgid "``+x``"
msgstr ""

#: ../../../library/stdtypes.rst:293
msgid "*x* unchanged"
msgstr ""

#: ../../../library/stdtypes.rst:295
msgid "``abs(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:295
msgid "absolute value or magnitude of *x*"
msgstr ""

#: ../../../library/stdtypes.rst:295
msgid ":func:`abs`"
msgstr ""

#: ../../../library/stdtypes.rst:298
msgid "``int(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:298
msgid "*x* converted to integer"
msgstr ""

#: ../../../library/stdtypes.rst:298
msgid "\\(3)\\(6)"
msgstr ""

#: ../../../library/stdtypes.rst:298
msgid ":func:`int`"
msgstr ""

#: ../../../library/stdtypes.rst:300
msgid "``float(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:300
msgid "*x* converted to floating point"
msgstr ""

#: ../../../library/stdtypes.rst:300
msgid "\\(4)\\(6)"
msgstr ""

#: ../../../library/stdtypes.rst:300
msgid ":func:`float`"
msgstr ""

#: ../../../library/stdtypes.rst:302
msgid "``complex(re, im)``"
msgstr ""

#: ../../../library/stdtypes.rst:302
msgid ""
"a complex number with real part *re*, imaginary part *im*. *im* defaults to "
"zero."
msgstr ""

#: ../../../library/stdtypes.rst:302
msgid "\\(6)"
msgstr ""

#: ../../../library/stdtypes.rst:302
msgid ":func:`complex`"
msgstr ""

#: ../../../library/stdtypes.rst:306
msgid "``c.conjugate()``"
msgstr ""

#: ../../../library/stdtypes.rst:306
msgid "conjugate of the complex number *c*"
msgstr ""

#: ../../../library/stdtypes.rst:309
msgid "``divmod(x, y)``"
msgstr ""

#: ../../../library/stdtypes.rst:309
msgid "the pair ``(x // y, x % y)``"
msgstr ""

#: ../../../library/stdtypes.rst:309
msgid ":func:`divmod`"
msgstr ""

#: ../../../library/stdtypes.rst:311
msgid "``pow(x, y)``"
msgstr ""

#: ../../../library/stdtypes.rst:311 ../../../library/stdtypes.rst:313
msgid "*x* to the power *y*"
msgstr ""

#: ../../../library/stdtypes.rst:311 ../../../library/stdtypes.rst:313
#: ../../../library/stdtypes.rst:1058 ../../../library/stdtypes.rst:1061
#: ../../../library/stdtypes.rst:2076 ../../../library/stdtypes.rst:2079
#: ../../../library/stdtypes.rst:2082
msgid "\\(5)"
msgstr ""

#: ../../../library/stdtypes.rst:311
msgid ":func:`pow`"
msgstr ""

#: ../../../library/stdtypes.rst:313
msgid "``x ** y``"
msgstr ""

#: ../../../library/stdtypes.rst:323
msgid ""
"Also referred to as integer division.  The resultant value is a whole "
"integer, though the result's type is not necessarily int.  The result is "
"always rounded towards minus infinity: ``1//2`` is ``0``, ``(-1)//2`` is "
"``-1``, ``1//(-2)`` is ``-1``, and ``(-1)//(-2)`` is ``0``."
msgstr ""

#: ../../../library/stdtypes.rst:329
msgid ""
"Not for complex numbers.  Instead convert to floats using :func:`abs` if "
"appropriate."
msgstr ""

#: ../../../library/stdtypes.rst:341
msgid ""
"Conversion from floating point to integer may round or truncate as in C; see "
"functions :func:`math.floor` and :func:`math.ceil` for well-defined "
"conversions."
msgstr ""

#: ../../../library/stdtypes.rst:346
msgid ""
"float also accepts the strings \"nan\" and \"inf\" with an optional prefix "
"\"+\" or \"-\" for Not a Number (NaN) and positive or negative infinity."
msgstr ""

#: ../../../library/stdtypes.rst:350
msgid ""
"Python defines ``pow(0, 0)`` and ``0 ** 0`` to be ``1``, as is common for "
"programming languages."
msgstr ""

#: ../../../library/stdtypes.rst:354
msgid ""
"The numeric literals accepted include the digits ``0`` to ``9`` or any "
"Unicode equivalent (code points with the ``Nd`` property)."
msgstr ""

#: ../../../library/stdtypes.rst:357
msgid ""
"See http://www.unicode.org/Public/6.0.0/ucd/extracted/DerivedNumericType.txt "
"for a complete list of code points with the ``Nd`` property."
msgstr ""

#: ../../../library/stdtypes.rst:361
msgid ""
"All :class:`numbers.Real` types (:class:`int` and :class:`float`) also "
"include the following operations:"
msgstr ""

#: ../../../library/stdtypes.rst:367
msgid "``math.trunc(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:367
msgid "*x* truncated to Integral"
msgstr ""

#: ../../../library/stdtypes.rst:369
msgid "``round(x[, n])``"
msgstr ""

#: ../../../library/stdtypes.rst:369
msgid ""
"*x* rounded to n digits, rounding half to even. If n is omitted, it defaults "
"to 0."
msgstr ""

#: ../../../library/stdtypes.rst:373
msgid "``math.floor(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:373
msgid "the greatest integral float <= *x*"
msgstr ""

#: ../../../library/stdtypes.rst:375
msgid "``math.ceil(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:375
msgid "the least integral float >= *x*"
msgstr ""

#: ../../../library/stdtypes.rst:378
msgid ""
"For additional numeric operations see the :mod:`math` and :mod:`cmath` "
"modules."
msgstr ""

#: ../../../library/stdtypes.rst:387
msgid "Bitwise Operations on Integer Types"
msgstr ""

#: ../../../library/stdtypes.rst:399
msgid ""
"Bitwise operations only make sense for integers.  Negative numbers are "
"treated as their 2's complement value (this assumes a sufficiently large "
"number of bits that no overflow occurs during the operation)."
msgstr ""

#: ../../../library/stdtypes.rst:403
msgid ""
"The priorities of the binary bitwise operations are all lower than the "
"numeric operations and higher than the comparisons; the unary operation "
"``~`` has the same priority as the other unary numeric operations (``+`` and "
"``-``)."
msgstr ""

#: ../../../library/stdtypes.rst:407
msgid ""
"This table lists the bitwise operations sorted in ascending priority "
"(operations in the same box have the same priority):"
msgstr ""

#: ../../../library/stdtypes.rst:413
msgid "``x | y``"
msgstr ""

#: ../../../library/stdtypes.rst:413
msgid "bitwise :dfn:`or` of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:416
msgid "``x ^ y``"
msgstr ""

#: ../../../library/stdtypes.rst:416
msgid "bitwise :dfn:`exclusive or` of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:419
msgid "``x & y``"
msgstr ""

#: ../../../library/stdtypes.rst:419
msgid "bitwise :dfn:`and` of *x* and *y*"
msgstr ""

#: ../../../library/stdtypes.rst:422
msgid "``x << n``"
msgstr ""

#: ../../../library/stdtypes.rst:422
msgid "*x* shifted left by *n* bits"
msgstr ""

#: ../../../library/stdtypes.rst:422
msgid "(1)(2)"
msgstr ""

#: ../../../library/stdtypes.rst:424
msgid "``x >> n``"
msgstr ""

#: ../../../library/stdtypes.rst:424
msgid "*x* shifted right by *n* bits"
msgstr ""

#: ../../../library/stdtypes.rst:424
msgid "(1)(3)"
msgstr ""

#: ../../../library/stdtypes.rst:426
msgid "``~x``"
msgstr ""

#: ../../../library/stdtypes.rst:426
msgid "the bits of *x* inverted"
msgstr ""

#: ../../../library/stdtypes.rst:432
msgid ""
"Negative shift counts are illegal and cause a :exc:`ValueError` to be raised."
msgstr ""

#: ../../../library/stdtypes.rst:435
msgid ""
"A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)`` "
"without overflow check."
msgstr ""

#: ../../../library/stdtypes.rst:439
msgid ""
"A right shift by *n* bits is equivalent to division by ``pow(2, n)`` without "
"overflow check."
msgstr ""

#: ../../../library/stdtypes.rst:444
msgid "Additional Methods on Integer Types"
msgstr ""

#: ../../../library/stdtypes.rst:446
msgid ""
"The int type implements the :class:`numbers.Integral` :term:`abstract base "
"class`. In addition, it provides one more method:"
msgstr ""

#: ../../../library/stdtypes.rst:451
msgid ""
"Return the number of bits necessary to represent an integer in binary, "
"excluding the sign and leading zeros::"
msgstr ""

#: ../../../library/stdtypes.rst:454
msgid ""
">>> n = -37\n"
">>> bin(n)\n"
"'-0b100101'\n"
">>> n.bit_length()\n"
"6"
msgstr ""

#: ../../../library/stdtypes.rst:460
msgid ""
"More precisely, if ``x`` is nonzero, then ``x.bit_length()`` is the unique "
"positive integer ``k`` such that ``2**(k-1) <= abs(x) < 2**k``. "
"Equivalently, when ``abs(x)`` is small enough to have a correctly rounded "
"logarithm, then ``k = 1 + int(log(abs(x), 2))``. If ``x`` is zero, then ``x."
"bit_length()`` returns ``0``."
msgstr ""

#: ../../../library/stdtypes.rst:466
msgid "Equivalent to::"
msgstr ""

#: ../../../library/stdtypes.rst:468
msgid ""
"def bit_length(self):\n"
"    s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'\n"
"    s = s.lstrip('-0b') # remove leading zeros and minus sign\n"
"    return len(s)       # len('100101') --> 6"
msgstr ""

#: ../../../library/stdtypes.rst:477
msgid "Return an array of bytes representing an integer."
msgstr ""

#: ../../../library/stdtypes.rst:489
msgid ""
"The integer is represented using *length* bytes.  An :exc:`OverflowError` is "
"raised if the integer is not representable with the given number of bytes."
msgstr ""

#: ../../../library/stdtypes.rst:493 ../../../library/stdtypes.rst:525
msgid ""
"The *byteorder* argument determines the byte order used to represent the "
"integer.  If *byteorder* is ``\"big\"``, the most significant byte is at the "
"beginning of the byte array.  If *byteorder* is ``\"little\"``, the most "
"significant byte is at the end of the byte array.  To request the native "
"byte order of the host system, use :data:`sys.byteorder` as the byte order "
"value."
msgstr ""

#: ../../../library/stdtypes.rst:500
msgid ""
"The *signed* argument determines whether two's complement is used to "
"represent the integer.  If *signed* is ``False`` and a negative integer is "
"given, an :exc:`OverflowError` is raised. The default value for *signed* is "
"``False``."
msgstr ""

#: ../../../library/stdtypes.rst:509
msgid "Return the integer represented by the given array of bytes."
msgstr ""

#: ../../../library/stdtypes.rst:522
msgid ""
"The argument *bytes* must either be a :term:`bytes-like object` or an "
"iterable producing bytes."
msgstr ""

#: ../../../library/stdtypes.rst:532
msgid ""
"The *signed* argument indicates whether two's complement is used to "
"represent the integer."
msgstr ""

#: ../../../library/stdtypes.rst:539
msgid "Additional Methods on Float"
msgstr ""

#: ../../../library/stdtypes.rst:541
msgid ""
"The float type implements the :class:`numbers.Real` :term:`abstract base "
"class`. float also has the following additional methods."
msgstr ""

#: ../../../library/stdtypes.rst:546
msgid ""
"Return a pair of integers whose ratio is exactly equal to the original float "
"and with a positive denominator.  Raises :exc:`OverflowError` on infinities "
"and a :exc:`ValueError` on NaNs."
msgstr ""

#: ../../../library/stdtypes.rst:553
msgid ""
"Return ``True`` if the float instance is finite with integral value, and "
"``False`` otherwise::"
msgstr ""

#: ../../../library/stdtypes.rst:556
msgid ""
">>> (-2.0).is_integer()\n"
"True\n"
">>> (3.2).is_integer()\n"
"False"
msgstr ""

#: ../../../library/stdtypes.rst:561
msgid ""
"Two methods support conversion to and from hexadecimal strings.  Since "
"Python's floats are stored internally as binary numbers, converting a float "
"to or from a *decimal* string usually involves a small rounding error.  In "
"contrast, hexadecimal strings allow exact representation and specification "
"of floating-point numbers.  This can be useful when debugging, and in "
"numerical work."
msgstr ""

#: ../../../library/stdtypes.rst:572
msgid ""
"Return a representation of a floating-point number as a hexadecimal string.  "
"For finite floating-point numbers, this representation will always include a "
"leading ``0x`` and a trailing ``p`` and exponent."
msgstr ""

#: ../../../library/stdtypes.rst:580
msgid ""
"Class method to return the float represented by a hexadecimal string *s*.  "
"The string *s* may have leading and trailing whitespace."
msgstr ""

#: ../../../library/stdtypes.rst:585
msgid ""
"Note that :meth:`float.hex` is an instance method, while :meth:`float."
"fromhex` is a class method."
msgstr ""

#: ../../../library/stdtypes.rst:588
msgid "A hexadecimal string takes the form::"
msgstr ""

#: ../../../library/stdtypes.rst:590
msgid "[sign] ['0x'] integer ['.' fraction] ['p' exponent]"
msgstr ""

#: ../../../library/stdtypes.rst:592
msgid ""
"where the optional ``sign`` may by either ``+`` or ``-``, ``integer`` and "
"``fraction`` are strings of hexadecimal digits, and ``exponent`` is a "
"decimal integer with an optional leading sign.  Case is not significant, and "
"there must be at least one hexadecimal digit in either the integer or the "
"fraction.  This syntax is similar to the syntax specified in section 6.4.4.2 "
"of the C99 standard, and also to the syntax used in Java 1.5 onwards.  In "
"particular, the output of :meth:`float.hex` is usable as a hexadecimal "
"floating-point literal in C or Java code, and hexadecimal strings produced "
"by C's ``%a`` format character or Java's ``Double.toHexString`` are accepted "
"by :meth:`float.fromhex`."
msgstr ""

#: ../../../library/stdtypes.rst:605
msgid ""
"Note that the exponent is written in decimal rather than hexadecimal, and "
"that it gives the power of 2 by which to multiply the coefficient. For "
"example, the hexadecimal string ``0x3.a7p10`` represents the floating-point "
"number ``(3 + 10./16 + 7./16**2) * 2.0**10``, or ``3740.0``::"
msgstr ""

#: ../../../library/stdtypes.rst:611
msgid ""
">>> float.fromhex('0x3.a7p10')\n"
"3740.0"
msgstr ""

#: ../../../library/stdtypes.rst:615
msgid ""
"Applying the reverse conversion to ``3740.0`` gives a different hexadecimal "
"string representing the same number::"
msgstr ""

#: ../../../library/stdtypes.rst:618
msgid ""
">>> float.hex(3740.0)\n"
"'0x1.d380000000000p+11'"
msgstr ""

#: ../../../library/stdtypes.rst:625
msgid "Hashing of numeric types"
msgstr ""

#: ../../../library/stdtypes.rst:627
msgid ""
"For numbers ``x`` and ``y``, possibly of different types, it's a requirement "
"that ``hash(x) == hash(y)`` whenever ``x == y`` (see the :meth:`__hash__` "
"method documentation for more details).  For ease of implementation and "
"efficiency across a variety of numeric types (including :class:`int`, :class:"
"`float`, :class:`decimal.Decimal` and :class:`fractions.Fraction`) Python's "
"hash for numeric types is based on a single mathematical function that's "
"defined for any rational number, and hence applies to all instances of :"
"class:`int` and :class:`fractions.Fraction`, and all finite instances of :"
"class:`float` and :class:`decimal.Decimal`.  Essentially, this function is "
"given by reduction modulo ``P`` for a fixed prime ``P``.  The value of ``P`` "
"is made available to Python as the :attr:`modulus` attribute of :data:`sys."
"hash_info`."
msgstr ""

#: ../../../library/stdtypes.rst:642
msgid ""
"Currently, the prime used is ``P = 2**31 - 1`` on machines with 32-bit C "
"longs and ``P = 2**61 - 1`` on machines with 64-bit C longs."
msgstr ""

#: ../../../library/stdtypes.rst:645
msgid "Here are the rules in detail:"
msgstr ""

#: ../../../library/stdtypes.rst:647
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is not divisible "
"by ``P``, define ``hash(x)`` as ``m * invmod(n, P) % P``, where ``invmod(n, "
"P)`` gives the inverse of ``n`` modulo ``P``."
msgstr ""

#: ../../../library/stdtypes.rst:651
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is divisible by "
"``P`` (but ``m`` is not) then ``n`` has no inverse modulo ``P`` and the rule "
"above doesn't apply; in this case define ``hash(x)`` to be the constant "
"value ``sys.hash_info.inf``."
msgstr ""

#: ../../../library/stdtypes.rst:656
msgid ""
"If ``x = m / n`` is a negative rational number define ``hash(x)`` as ``-"
"hash(-x)``.  If the resulting hash is ``-1``, replace it with ``-2``."
msgstr ""

#: ../../../library/stdtypes.rst:660
msgid ""
"The particular values ``sys.hash_info.inf``, ``-sys.hash_info.inf`` and "
"``sys.hash_info.nan`` are used as hash values for positive infinity, "
"negative infinity, or nans (respectively).  (All hashable nans have the same "
"hash value.)"
msgstr ""

#: ../../../library/stdtypes.rst:665
msgid ""
"For a :class:`complex` number ``z``, the hash values of the real and "
"imaginary parts are combined by computing ``hash(z.real) + sys.hash_info."
"imag * hash(z.imag)``, reduced modulo ``2**sys.hash_info.width`` so that it "
"lies in ``range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - "
"1))``.  Again, if the result is ``-1``, it's replaced with ``-2``."
msgstr ""

#: ../../../library/stdtypes.rst:673
msgid ""
"To clarify the above rules, here's some example Python code, equivalent to "
"the built-in hash, for computing the hash of a rational number, :class:"
"`float`, or :class:`complex`::"
msgstr ""

#: ../../../library/stdtypes.rst:678
msgid ""
"import sys, math\n"
"\n"
"def hash_fraction(m, n):\n"
"    \"\"\"Compute the hash of a rational number m / n.\n"
"\n"
"    Assumes m and n are integers, with n positive.\n"
"    Equivalent to hash(fractions.Fraction(m, n)).\n"
"\n"
"    \"\"\"\n"
"    P = sys.hash_info.modulus\n"
"    # Remove common factors of P.  (Unnecessary if m and n already "
"coprime.)\n"
"    while m % P == n % P == 0:\n"
"        m, n = m // P, n // P\n"
"\n"
"    if n % P == 0:\n"
"        hash_ = sys.hash_info.inf\n"
"    else:\n"
"        # Fermat's Little Theorem: pow(n, P-1, P) is 1, so\n"
"        # pow(n, P-2, P) gives the inverse of n modulo P.\n"
"        hash_ = (abs(m) % P) * pow(n, P - 2, P) % P\n"
"    if m < 0:\n"
"        hash_ = -hash_\n"
"    if hash_ == -1:\n"
"        hash_ = -2\n"
"    return hash_\n"
"\n"
"def hash_float(x):\n"
"    \"\"\"Compute the hash of a float x.\"\"\"\n"
"\n"
"    if math.isnan(x):\n"
"        return sys.hash_info.nan\n"
"    elif math.isinf(x):\n"
"        return sys.hash_info.inf if x > 0 else -sys.hash_info.inf\n"
"    else:\n"
"        return hash_fraction(*x.as_integer_ratio())\n"
"\n"
"def hash_complex(z):\n"
"    \"\"\"Compute the hash of a complex number z.\"\"\"\n"
"\n"
"    hash_ = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)\n"
"    # do a signed reduction modulo 2**sys.hash_info.width\n"
"    M = 2**(sys.hash_info.width - 1)\n"
"    hash_ = (hash_ & (M - 1)) - (hash & M)\n"
"    if hash_ == -1:\n"
"        hash_ == -2\n"
"    return hash_"
msgstr ""

#: ../../../library/stdtypes.rst:728
msgid "Iterator Types"
msgstr ""

#: ../../../library/stdtypes.rst:736
msgid ""
"Python supports a concept of iteration over containers.  This is implemented "
"using two distinct methods; these are used to allow user-defined classes to "
"support iteration.  Sequences, described below in more detail, always "
"support the iteration methods."
msgstr ""

#: ../../../library/stdtypes.rst:741
msgid ""
"One method needs to be defined for container objects to provide iteration "
"support:"
msgstr ""

#: ../../../library/stdtypes.rst:748
msgid ""
"Return an iterator object.  The object is required to support the iterator "
"protocol described below.  If a container supports different types of "
"iteration, additional methods can be provided to specifically request "
"iterators for those iteration types.  (An example of an object supporting "
"multiple forms of iteration would be a tree structure which supports both "
"breadth-first and depth-first traversal.)  This method corresponds to the :c:"
"member:`~PyTypeObject.tp_iter` slot of the type structure for Python objects "
"in the Python/C API."
msgstr ""

#: ../../../library/stdtypes.rst:757
msgid ""
"The iterator objects themselves are required to support the following two "
"methods, which together form the :dfn:`iterator protocol`:"
msgstr ""

#: ../../../library/stdtypes.rst:763
msgid ""
"Return the iterator object itself.  This is required to allow both "
"containers and iterators to be used with the :keyword:`for` and :keyword:"
"`in` statements. This method corresponds to the :c:member:`~PyTypeObject."
"tp_iter` slot of the type structure for Python objects in the Python/C API."
msgstr ""

#: ../../../library/stdtypes.rst:771
msgid ""
"Return the next item from the container.  If there are no further items, "
"raise the :exc:`StopIteration` exception.  This method corresponds to the :c:"
"member:`~PyTypeObject.tp_iternext` slot of the type structure for Python "
"objects in the Python/C API."
msgstr ""

#: ../../../library/stdtypes.rst:776
msgid ""
"Python defines several iterator objects to support iteration over general "
"and specific sequence types, dictionaries, and other more specialized "
"forms.  The specific types are not important beyond their implementation of "
"the iterator protocol."
msgstr ""

#: ../../../library/stdtypes.rst:781
msgid ""
"Once an iterator's :meth:`~iterator.__next__` method raises :exc:"
"`StopIteration`, it must continue to do so on subsequent calls. "
"Implementations that do not obey this property are deemed broken."
msgstr ""

#: ../../../library/stdtypes.rst:789
msgid "Generator Types"
msgstr ""

#: ../../../library/stdtypes.rst:791
msgid ""
"Python's :term:`generator`\\s provide a convenient way to implement the "
"iterator protocol.  If a container object's :meth:`__iter__` method is "
"implemented as a generator, it will automatically return an iterator object "
"(technically, a generator object) supplying the :meth:`__iter__` and :meth:"
"`~generator.__next__` methods. More information about generators can be "
"found in :ref:`the documentation for the yield expression <yieldexpr>`."
msgstr ""

#: ../../../library/stdtypes.rst:803
msgid "Sequence Types --- :class:`list`, :class:`tuple`, :class:`range`"
msgstr ""

#: ../../../library/stdtypes.rst:805
msgid ""
"There are three basic sequence types: lists, tuples, and range objects. "
"Additional sequence types tailored for processing of :ref:`binary data "
"<binaryseq>` and :ref:`text strings <textseq>` are described in dedicated "
"sections."
msgstr ""

#: ../../../library/stdtypes.rst:814
msgid "Common Sequence Operations"
msgstr ""

#: ../../../library/stdtypes.rst:818
msgid ""
"The operations in the following table are supported by most sequence types, "
"both mutable and immutable. The :class:`collections.abc.Sequence` ABC is "
"provided to make it easier to correctly implement these operations on custom "
"sequence types."
msgstr ""

#: ../../../library/stdtypes.rst:823
msgid ""
"This table lists the sequence operations sorted in ascending priority "
"(operations in the same box have the same priority).  In the table, *s* and "
"*t* are sequences of the same type, *n*, *i*, *j* and *k* are integers and "
"*x* is an arbitrary object that meets any type and value restrictions "
"imposed by *s*."
msgstr ""

#: ../../../library/stdtypes.rst:828
msgid ""
"The ``in`` and ``not in`` operations have the same priorities as the "
"comparison operations. The ``+`` (concatenation) and ``*`` (repetition) "
"operations have the same priority as the corresponding numeric operations."
msgstr ""

#: ../../../library/stdtypes.rst:849
msgid "``x in s``"
msgstr ""

#: ../../../library/stdtypes.rst:849
msgid "``True`` if an item of *s* is equal to *x*, else ``False``"
msgstr ""

#: ../../../library/stdtypes.rst:852
msgid "``x not in s``"
msgstr ""

#: ../../../library/stdtypes.rst:852
msgid "``False`` if an item of *s* is equal to *x*, else ``True``"
msgstr ""

#: ../../../library/stdtypes.rst:855
msgid "``s + t``"
msgstr ""

#: ../../../library/stdtypes.rst:855
msgid "the concatenation of *s* and *t*"
msgstr ""

#: ../../../library/stdtypes.rst:855
msgid "(6)(7)"
msgstr ""

#: ../../../library/stdtypes.rst:858
msgid "``s * n`` or ``n * s``"
msgstr ""

#: ../../../library/stdtypes.rst:858
msgid "*n* shallow copies of *s* concatenated"
msgstr ""

#: ../../../library/stdtypes.rst:858
msgid "(2)(7)"
msgstr ""

#: ../../../library/stdtypes.rst:861
msgid "``s[i]``"
msgstr ""

#: ../../../library/stdtypes.rst:861
msgid "*i*\\ th item of *s*, origin 0"
msgstr ""

#: ../../../library/stdtypes.rst:863
msgid "``s[i:j]``"
msgstr ""

#: ../../../library/stdtypes.rst:863
msgid "slice of *s* from *i* to *j*"
msgstr ""

#: ../../../library/stdtypes.rst:863
msgid "(3)(4)"
msgstr ""

#: ../../../library/stdtypes.rst:865
msgid "``s[i:j:k]``"
msgstr ""

#: ../../../library/stdtypes.rst:865
msgid "slice of *s* from *i* to *j* with step *k*"
msgstr ""

#: ../../../library/stdtypes.rst:865
msgid "(3)(5)"
msgstr ""

#: ../../../library/stdtypes.rst:868
msgid "``len(s)``"
msgstr ""

#: ../../../library/stdtypes.rst:868
msgid "length of *s*"
msgstr ""

#: ../../../library/stdtypes.rst:870
msgid "``min(s)``"
msgstr ""

#: ../../../library/stdtypes.rst:870
msgid "smallest item of *s*"
msgstr ""

#: ../../../library/stdtypes.rst:872
msgid "``max(s)``"
msgstr ""

#: ../../../library/stdtypes.rst:872
msgid "largest item of *s*"
msgstr ""

#: ../../../library/stdtypes.rst:874
msgid "``s.index(x[, i[, j]])``"
msgstr ""

#: ../../../library/stdtypes.rst:874
msgid ""
"index of the first occurrence of *x* in *s* (at or after index *i* and "
"before index *j*)"
msgstr ""

#: ../../../library/stdtypes.rst:874
msgid "\\(8)"
msgstr ""

#: ../../../library/stdtypes.rst:878
msgid "``s.count(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:878
msgid "total number of occurrences of *x* in *s*"
msgstr ""

#: ../../../library/stdtypes.rst:882
msgid ""
"Sequences of the same type also support comparisons.  In particular, tuples "
"and lists are compared lexicographically by comparing corresponding "
"elements. This means that to compare equal, every element must compare equal "
"and the two sequences must be of the same type and have the same length.  "
"(For full details see :ref:`comparisons` in the language reference.)"
msgstr ""

#: ../../../library/stdtypes.rst:891
msgid ""
"While the ``in`` and ``not in`` operations are used only for simple "
"containment testing in the general case, some specialised sequences (such "
"as :class:`str`, :class:`bytes` and :class:`bytearray`) also use them for "
"subsequence testing::"
msgstr ""

#: ../../../library/stdtypes.rst:896
msgid ""
">>> \"gg\" in \"eggs\"\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:900
msgid ""
"Values of *n* less than ``0`` are treated as ``0`` (which yields an empty "
"sequence of the same type as *s*).  Note also that the copies are shallow; "
"nested structures are not copied.  This often haunts new Python programmers; "
"consider::"
msgstr ""

#: ../../../library/stdtypes.rst:905
msgid ""
">>> lists = [[]] * 3\n"
">>> lists\n"
"[[], [], []]\n"
">>> lists[0].append(3)\n"
">>> lists\n"
"[[3], [3], [3]]"
msgstr ""

#: ../../../library/stdtypes.rst:912
msgid ""
"What has happened is that ``[[]]`` is a one-element list containing an empty "
"list, so all three elements of ``[[]] * 3`` are (pointers to) this single "
"empty list.  Modifying any of the elements of ``lists`` modifies this single "
"list. You can create a list of different lists this way::"
msgstr ""

#: ../../../library/stdtypes.rst:917
msgid ""
">>> lists = [[] for i in range(3)]\n"
">>> lists[0].append(3)\n"
">>> lists[1].append(5)\n"
">>> lists[2].append(7)\n"
">>> lists\n"
"[[3], [5], [7]]"
msgstr ""

#: ../../../library/stdtypes.rst:925
msgid ""
"If *i* or *j* is negative, the index is relative to the end of the string: "
"``len(s) + i`` or ``len(s) + j`` is substituted.  But note that ``-0`` is "
"still ``0``."
msgstr ""

#: ../../../library/stdtypes.rst:930
msgid ""
"The slice of *s* from *i* to *j* is defined as the sequence of items with "
"index *k* such that ``i <= k < j``.  If *i* or *j* is greater than "
"``len(s)``, use ``len(s)``.  If *i* is omitted or ``None``, use ``0``.  If "
"*j* is omitted or ``None``, use ``len(s)``.  If *i* is greater than or equal "
"to *j*, the slice is empty."
msgstr ""

#: ../../../library/stdtypes.rst:937
msgid ""
"The slice of *s* from *i* to *j* with step *k* is defined as the sequence of "
"items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other "
"words, the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, "
"stopping when *j* is reached (but never including *j*).  If *i* or *j* is "
"greater than ``len(s)``, use ``len(s)``.  If *i* or *j* are omitted or "
"``None``, they become \"end\" values (which end depends on the sign of "
"*k*).  Note, *k* cannot be zero. If *k* is ``None``, it is treated like "
"``1``."
msgstr ""

#: ../../../library/stdtypes.rst:946
msgid ""
"Concatenating immutable sequences always results in a new object.  This "
"means that building up a sequence by repeated concatenation will have a "
"quadratic runtime cost in the total sequence length.  To get a linear "
"runtime cost, you must switch to one of the alternatives below:"
msgstr ""

#: ../../../library/stdtypes.rst:951
msgid ""
"if concatenating :class:`str` objects, you can build a list and use :meth:"
"`str.join` at the end or else write to a :class:`io.StringIO` instance and "
"retrieve its value when complete"
msgstr ""

#: ../../../library/stdtypes.rst:955
msgid ""
"if concatenating :class:`bytes` objects, you can similarly use :meth:`bytes."
"join` or :class:`io.BytesIO`, or you can do in-place concatenation with a :"
"class:`bytearray` object.  :class:`bytearray` objects are mutable and have "
"an efficient overallocation mechanism"
msgstr ""

#: ../../../library/stdtypes.rst:960
msgid "if concatenating :class:`tuple` objects, extend a :class:`list` instead"
msgstr ""

#: ../../../library/stdtypes.rst:962
msgid "for other types, investigate the relevant class documentation"
msgstr ""

#: ../../../library/stdtypes.rst:966
msgid ""
"Some sequence types (such as :class:`range`) only support item sequences "
"that follow specific patterns, and hence don't support sequence "
"concatenation or repetition."
msgstr ""

#: ../../../library/stdtypes.rst:971
msgid ""
"``index`` raises :exc:`ValueError` when *x* is not found in *s*. When "
"supported, the additional arguments to the index method allow efficient "
"searching of subsections of the sequence. Passing the extra arguments is "
"roughly equivalent to using ``s[i:j].index(x)``, only without copying any "
"data and with the returned index being relative to the start of the sequence "
"rather than the start of the slice."
msgstr ""

#: ../../../library/stdtypes.rst:982
msgid "Immutable Sequence Types"
msgstr ""

#: ../../../library/stdtypes.rst:989
msgid ""
"The only operation that immutable sequence types generally implement that is "
"not also implemented by mutable sequence types is support for the :func:"
"`hash` built-in."
msgstr ""

#: ../../../library/stdtypes.rst:993
msgid ""
"This support allows immutable sequences, such as :class:`tuple` instances, "
"to be used as :class:`dict` keys and stored in :class:`set` and :class:"
"`frozenset` instances."
msgstr ""

#: ../../../library/stdtypes.rst:997
msgid ""
"Attempting to hash an immutable sequence that contains unhashable values "
"will result in :exc:`TypeError`."
msgstr ""

#: ../../../library/stdtypes.rst:1004
msgid "Mutable Sequence Types"
msgstr ""

#: ../../../library/stdtypes.rst:1011
msgid ""
"The operations in the following table are defined on mutable sequence types. "
"The :class:`collections.abc.MutableSequence` ABC is provided to make it "
"easier to correctly implement these operations on custom sequence types."
msgstr ""

#: ../../../library/stdtypes.rst:1015
msgid ""
"In the table *s* is an instance of a mutable sequence type, *t* is any "
"iterable object and *x* is an arbitrary object that meets any type and value "
"restrictions imposed by *s* (for example, :class:`bytearray` only accepts "
"integers that meet the value restriction ``0 <= x <= 255``)."
msgstr ""

#: ../../../library/stdtypes.rst:1039
msgid "``s[i] = x``"
msgstr ""

#: ../../../library/stdtypes.rst:1039
msgid "item *i* of *s* is replaced by *x*"
msgstr ""

#: ../../../library/stdtypes.rst:1042
msgid "``s[i:j] = t``"
msgstr ""

#: ../../../library/stdtypes.rst:1042
msgid ""
"slice of *s* from *i* to *j* is replaced by the contents of the iterable *t*"
msgstr ""

#: ../../../library/stdtypes.rst:1046
msgid "``del s[i:j]``"
msgstr ""

#: ../../../library/stdtypes.rst:1046
msgid "same as ``s[i:j] = []``"
msgstr ""

#: ../../../library/stdtypes.rst:1048
msgid "``s[i:j:k] = t``"
msgstr ""

#: ../../../library/stdtypes.rst:1048
msgid "the elements of ``s[i:j:k]`` are replaced by those of *t*"
msgstr ""

#: ../../../library/stdtypes.rst:1051
msgid "``del s[i:j:k]``"
msgstr ""

#: ../../../library/stdtypes.rst:1051
msgid "removes the elements of ``s[i:j:k]`` from the list"
msgstr ""

#: ../../../library/stdtypes.rst:1054
msgid "``s.append(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:1054
msgid ""
"appends *x* to the end of the sequence (same as ``s[len(s):len(s)] = [x]``)"
msgstr ""

#: ../../../library/stdtypes.rst:1058
msgid "``s.clear()``"
msgstr ""

#: ../../../library/stdtypes.rst:1058
msgid "removes all items from ``s`` (same as ``del s[:]``)"
msgstr ""

#: ../../../library/stdtypes.rst:1061
msgid "``s.copy()``"
msgstr ""

#: ../../../library/stdtypes.rst:1061
msgid "creates a shallow copy of ``s`` (same as ``s[:]``)"
msgstr ""

#: ../../../library/stdtypes.rst:1064
msgid "``s.extend(t)``"
msgstr ""

#: ../../../library/stdtypes.rst:1064
msgid "extends *s* with the contents of *t* (same as ``s[len(s):len(s)] = t``)"
msgstr ""

#: ../../../library/stdtypes.rst:1068
msgid "``s.insert(i, x)``"
msgstr ""

#: ../../../library/stdtypes.rst:1068
msgid ""
"inserts *x* into *s* at the index given by *i* (same as ``s[i:i] = [x]``)"
msgstr ""

#: ../../../library/stdtypes.rst:1072
msgid "``s.pop([i])``"
msgstr ""

#: ../../../library/stdtypes.rst:1072
msgid "retrieves the item at *i* and also removes it from *s*"
msgstr ""

#: ../../../library/stdtypes.rst:1075
msgid "``s.remove(x)``"
msgstr ""

#: ../../../library/stdtypes.rst:1075
msgid "remove the first item from *s* where ``s[i] == x``"
msgstr ""

#: ../../../library/stdtypes.rst:1078
msgid "``s.reverse()``"
msgstr ""

#: ../../../library/stdtypes.rst:1078
msgid "reverses the items of *s* in place"
msgstr ""

#: ../../../library/stdtypes.rst:1078 ../../../library/stdtypes.rst:2065
#: ../../../library/stdtypes.rst:2069
msgid "\\(4)"
msgstr ""

#: ../../../library/stdtypes.rst:1086
msgid "*t* must have the same length as the slice it is replacing."
msgstr ""

#: ../../../library/stdtypes.rst:1089
msgid ""
"The optional argument *i* defaults to ``-1``, so that by default the last "
"item is removed and returned."
msgstr ""

#: ../../../library/stdtypes.rst:1093
msgid "``remove`` raises :exc:`ValueError` when *x* is not found in *s*."
msgstr ""

#: ../../../library/stdtypes.rst:1096
msgid ""
"The :meth:`reverse` method modifies the sequence in place for economy of "
"space when reversing a large sequence.  To remind users that it operates by "
"side effect, it does not return the reversed sequence."
msgstr ""

#: ../../../library/stdtypes.rst:1101
msgid ""
":meth:`clear` and :meth:`!copy` are included for consistency with the "
"interfaces of mutable containers that don't support slicing operations (such "
"as :class:`dict` and :class:`set`)"
msgstr ""

#: ../../../library/stdtypes.rst:1105
msgid ":meth:`clear` and :meth:`!copy` methods."
msgstr ""

#: ../../../library/stdtypes.rst:1112
msgid "Lists"
msgstr ""

#: ../../../library/stdtypes.rst:1116
msgid ""
"Lists are mutable sequences, typically used to store collections of "
"homogeneous items (where the precise degree of similarity will vary by "
"application)."
msgstr ""

#: ../../../library/stdtypes.rst:1122
msgid "Lists may be constructed in several ways:"
msgstr ""

#: ../../../library/stdtypes.rst:1124
msgid "Using a pair of square brackets to denote the empty list: ``[]``"
msgstr ""

#: ../../../library/stdtypes.rst:1125
msgid ""
"Using square brackets, separating items with commas: ``[a]``, ``[a, b, c]``"
msgstr ""

#: ../../../library/stdtypes.rst:1126
msgid "Using a list comprehension: ``[x for x in iterable]``"
msgstr ""

#: ../../../library/stdtypes.rst:1127
msgid "Using the type constructor: ``list()`` or ``list(iterable)``"
msgstr ""

#: ../../../library/stdtypes.rst:1129
msgid ""
"The constructor builds a list whose items are the same and in the same order "
"as *iterable*'s items.  *iterable* may be either a sequence, a container "
"that supports iteration, or an iterator object.  If *iterable* is already a "
"list, a copy is made and returned, similar to ``iterable[:]``. For example, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``. If no argument is given, the constructor creates a "
"new empty list, ``[]``."
msgstr ""

#: ../../../library/stdtypes.rst:1138
msgid ""
"Many other operations also produce lists, including the :func:`sorted` built-"
"in."
msgstr ""

#: ../../../library/stdtypes.rst:1141
msgid ""
"Lists implement all of the :ref:`common <typesseq-common>` and :ref:`mutable "
"<typesseq-mutable>` sequence operations. Lists also provide the following "
"additional method:"
msgstr ""

#: ../../../library/stdtypes.rst:1147
msgid ""
"This method sorts the list in place, using only ``<`` comparisons between "
"items. Exceptions are not suppressed - if any comparison operations fail, "
"the entire sort operation will fail (and the list will likely be left in a "
"partially modified state)."
msgstr ""

#: ../../../library/stdtypes.rst:1152
msgid ""
":meth:`sort` accepts two arguments that can only be passed by keyword (:ref:"
"`keyword-only arguments <keyword-only_parameter>`):"
msgstr ""

#: ../../../library/stdtypes.rst:1155
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element (for example, ``key=str.lower``). The "
"key corresponding to each item in the list is calculated once and then used "
"for the entire sorting process. The default value of ``None`` means that "
"list items are sorted directly without calculating a separate key value."
msgstr ""

#: ../../../library/stdtypes.rst:1162
msgid ""
"The :func:`functools.cmp_to_key` utility is available to convert a 2.x style "
"*cmp* function to a *key* function."
msgstr ""

#: ../../../library/stdtypes.rst:1165
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""

#: ../../../library/stdtypes.rst:1168
msgid ""
"This method modifies the sequence in place for economy of space when sorting "
"a large sequence.  To remind users that it operates by side effect, it does "
"not return the sorted sequence (use :func:`sorted` to explicitly request a "
"new sorted list instance)."
msgstr ""

#: ../../../library/stdtypes.rst:1173
msgid ""
"The :meth:`sort` method is guaranteed to be stable.  A sort is stable if it "
"guarantees not to change the relative order of elements that compare equal "
"--- this is helpful for sorting in multiple passes (for example, sort by "
"department, then by salary grade)."
msgstr ""

#: ../../../library/stdtypes.rst:1180
msgid ""
"While a list is being sorted, the effect of attempting to mutate, or even "
"inspect, the list is undefined.  The C implementation of Python makes the "
"list appear empty for the duration, and raises :exc:`ValueError` if it can "
"detect that the list has been mutated during a sort."
msgstr ""

#: ../../../library/stdtypes.rst:1189
msgid "Tuples"
msgstr ""

#: ../../../library/stdtypes.rst:1193
msgid ""
"Tuples are immutable sequences, typically used to store collections of "
"heterogeneous data (such as the 2-tuples produced by the :func:`enumerate` "
"built-in). Tuples are also used for cases where an immutable sequence of "
"homogeneous data is needed (such as allowing storage in a :class:`set` or :"
"class:`dict` instance)."
msgstr ""

#: ../../../library/stdtypes.rst:1201
msgid "Tuples may be constructed in a number of ways:"
msgstr ""

#: ../../../library/stdtypes.rst:1203
msgid "Using a pair of parentheses to denote the empty tuple: ``()``"
msgstr ""

#: ../../../library/stdtypes.rst:1204
msgid "Using a trailing comma for a singleton tuple: ``a,`` or ``(a,)``"
msgstr ""

#: ../../../library/stdtypes.rst:1205
msgid "Separating items with commas: ``a, b, c`` or ``(a, b, c)``"
msgstr ""

#: ../../../library/stdtypes.rst:1206
msgid "Using the :func:`tuple` built-in: ``tuple()`` or ``tuple(iterable)``"
msgstr ""

#: ../../../library/stdtypes.rst:1208
msgid ""
"The constructor builds a tuple whose items are the same and in the same "
"order as *iterable*'s items.  *iterable* may be either a sequence, a "
"container that supports iteration, or an iterator object.  If *iterable* is "
"already a tuple, it is returned unchanged. For example, ``tuple('abc')`` "
"returns ``('a', 'b', 'c')`` and ``tuple( [1, 2, 3] )`` returns ``(1, 2, "
"3)``. If no argument is given, the constructor creates a new empty tuple, "
"``()``."
msgstr ""

#: ../../../library/stdtypes.rst:1216
msgid ""
"Note that it is actually the comma which makes a tuple, not the parentheses. "
"The parentheses are optional, except in the empty tuple case, or when they "
"are needed to avoid syntactic ambiguity. For example, ``f(a, b, c)`` is a "
"function call with three arguments, while ``f((a, b, c))`` is a function "
"call with a 3-tuple as the sole argument."
msgstr ""

#: ../../../library/stdtypes.rst:1222
msgid ""
"Tuples implement all of the :ref:`common <typesseq-common>` sequence "
"operations."
msgstr ""

#: ../../../library/stdtypes.rst:1225
msgid ""
"For heterogeneous collections of data where access by name is clearer than "
"access by index, :func:`collections.namedtuple` may be a more appropriate "
"choice than a simple tuple object."
msgstr ""

#: ../../../library/stdtypes.rst:1233
msgid "Ranges"
msgstr ""

#: ../../../library/stdtypes.rst:1237
msgid ""
"The :class:`range` type represents an immutable sequence of numbers and is "
"commonly used for looping a specific number of times in :keyword:`for` loops."
msgstr ""

#: ../../../library/stdtypes.rst:1244
msgid ""
"The arguments to the range constructor must be integers (either built-in :"
"class:`int` or any object that implements the ``__index__`` special "
"method).  If the *step* argument is omitted, it defaults to ``1``. If the "
"*start* argument is omitted, it defaults to ``0``. If *step* is zero, :exc:"
"`ValueError` is raised."
msgstr ""

#: ../../../library/stdtypes.rst:1250
msgid ""
"For a positive *step*, the contents of a range ``r`` are determined by the "
"formula ``r[i] = start + step*i`` where ``i >= 0`` and ``r[i] < stop``."
msgstr ""

#: ../../../library/stdtypes.rst:1254
msgid ""
"For a negative *step*, the contents of the range are still determined by the "
"formula ``r[i] = start + step*i``, but the constraints are ``i >= 0`` and "
"``r[i] > stop``."
msgstr ""

#: ../../../library/stdtypes.rst:1258
msgid ""
"A range object will be empty if ``r[0]`` does not meet the value constraint. "
"Ranges do support negative indices, but these are interpreted as indexing "
"from the end of the sequence determined by the positive indices."
msgstr ""

#: ../../../library/stdtypes.rst:1263
msgid ""
"Ranges containing absolute values larger than :data:`sys.maxsize` are "
"permitted but some features (such as :func:`len`) may raise :exc:"
"`OverflowError`."
msgstr ""

#: ../../../library/stdtypes.rst:1267
msgid "Range examples::"
msgstr ""

#: ../../../library/stdtypes.rst:1269
msgid ""
">>> list(range(10))\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
">>> list(range(1, 11))\n"
"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> list(range(0, 30, 5))\n"
"[0, 5, 10, 15, 20, 25]\n"
">>> list(range(0, 10, 3))\n"
"[0, 3, 6, 9]\n"
">>> list(range(0, -10, -1))\n"
"[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n"
">>> list(range(0))\n"
"[]\n"
">>> list(range(1, 0))\n"
"[]"
msgstr ""

#: ../../../library/stdtypes.rst:1284
msgid ""
"Ranges implement all of the :ref:`common <typesseq-common>` sequence "
"operations except concatenation and repetition (due to the fact that range "
"objects can only represent sequences that follow a strict pattern and "
"repetition and concatenation will usually violate that pattern)."
msgstr ""

#: ../../../library/stdtypes.rst:1303
msgid ""
"The advantage of the :class:`range` type over a regular :class:`list` or :"
"class:`tuple` is that a :class:`range` object will always take the same "
"(small) amount of memory, no matter the size of the range it represents (as "
"it only stores the ``start``, ``stop`` and ``step`` values, calculating "
"individual items and subranges as needed)."
msgstr ""

#: ../../../library/stdtypes.rst:1309
msgid ""
"Range objects implement the :class:`collections.abc.Sequence` ABC, and "
"provide features such as containment tests, element index lookup, slicing "
"and support for negative indices (see :ref:`typesseq`):"
msgstr ""

#: ../../../library/stdtypes.rst:1329
msgid ""
"Testing range objects for equality with ``==`` and ``!=`` compares them as "
"sequences.  That is, two range objects are considered equal if they "
"represent the same sequence of values.  (Note that two range objects that "
"compare equal might have different :attr:`~range.start`, :attr:`~range.stop` "
"and :attr:`~range.step` attributes, for example ``range(0) == range(2, 1, "
"3)`` or ``range(0, 3, 2) == range(0, 4, 2)``.)"
msgstr ""

#: ../../../library/stdtypes.rst:1336
msgid ""
"Implement the Sequence ABC. Support slicing and negative indices. Test :"
"class:`int` objects for membership in constant time instead of iterating "
"through all items."
msgstr ""

#: ../../../library/stdtypes.rst:1342
msgid ""
"Define '==' and '!=' to compare range objects based on the sequence of "
"values they define (instead of comparing based on object identity)."
msgstr ""

#: ../../../library/stdtypes.rst:1347
msgid ""
"The :attr:`~range.start`, :attr:`~range.stop` and :attr:`~range.step` "
"attributes."
msgstr ""

#: ../../../library/stdtypes.rst:1360
msgid "Text Sequence Type --- :class:`str`"
msgstr ""

#: ../../../library/stdtypes.rst:1362
msgid ""
"Textual data in Python is handled with :class:`str` objects, or :dfn:"
"`strings`. Strings are immutable :ref:`sequences <typesseq>` of Unicode code "
"points.  String literals are written in a variety of ways:"
msgstr ""

#: ../../../library/stdtypes.rst:1367
msgid "Single quotes: ``'allows embedded \"double\" quotes'``"
msgstr ""

#: ../../../library/stdtypes.rst:1368
msgid "Double quotes: ``\"allows embedded 'single' quotes\"``."
msgstr ""

#: ../../../library/stdtypes.rst:1369
msgid ""
"Triple quoted: ``'''Three single quotes'''``, ``\"\"\"Three double "
"quotes\"\"\"``"
msgstr ""

#: ../../../library/stdtypes.rst:1371
msgid ""
"Triple quoted strings may span multiple lines - all associated whitespace "
"will be included in the string literal."
msgstr ""

#: ../../../library/stdtypes.rst:1374
msgid ""
"String literals that are part of a single expression and have only "
"whitespace between them will be implicitly converted to a single string "
"literal. That is, ``(\"spam \" \"eggs\") == \"spam eggs\"``."
msgstr ""

#: ../../../library/stdtypes.rst:1378
msgid ""
"See :ref:`strings` for more about the various forms of string literal, "
"including supported escape sequences, and the ``r`` (\"raw\") prefix that "
"disables most escape sequence processing."
msgstr ""

#: ../../../library/stdtypes.rst:1382
msgid ""
"Strings may also be created from other objects using the :class:`str` "
"constructor."
msgstr ""

#: ../../../library/stdtypes.rst:1385
msgid ""
"Since there is no separate \"character\" type, indexing a string produces "
"strings of length 1. That is, for a non-empty string *s*, ``s[0] == s[0:1]``."
msgstr ""

#: ../../../library/stdtypes.rst:1391
msgid ""
"There is also no mutable string type, but :meth:`str.join` or :class:`io."
"StringIO` can be used to efficiently construct strings from multiple "
"fragments."
msgstr ""

#: ../../../library/stdtypes.rst:1395
msgid ""
"For backwards compatibility with the Python 2 series, the ``u`` prefix is "
"once again permitted on string literals. It has no effect on the meaning of "
"string literals and cannot be combined with the ``r`` prefix."
msgstr ""

#: ../../../library/stdtypes.rst:1407
msgid ""
"Return a :ref:`string <textseq>` version of *object*.  If *object* is not "
"provided, returns the empty string.  Otherwise, the behavior of ``str()`` "
"depends on whether *encoding* or *errors* is given, as follows."
msgstr ""

#: ../../../library/stdtypes.rst:1411
msgid ""
"If neither *encoding* nor *errors* is given, ``str(object)`` returns :meth:"
"`object.__str__() <object.__str__>`, which is the \"informal\" or nicely "
"printable string representation of *object*.  For string objects, this is "
"the string itself.  If *object* does not have a :meth:`~object.__str__` "
"method, then :func:`str` falls back to returning :meth:`repr(object) <repr>`."
msgstr ""

#: ../../../library/stdtypes.rst:1422
msgid ""
"If at least one of *encoding* or *errors* is given, *object* should be a :"
"term:`bytes-like object` (e.g. :class:`bytes` or :class:`bytearray`).  In "
"this case, if *object* is a :class:`bytes` (or :class:`bytearray`) object, "
"then ``str(bytes, encoding, errors)`` is equivalent to :meth:`bytes."
"decode(encoding, errors) <bytes.decode>`.  Otherwise, the bytes object "
"underlying the buffer object is obtained before calling :meth:`bytes."
"decode`.  See :ref:`binaryseq` and :ref:`bufferobjects` for information on "
"buffer objects."
msgstr ""

#: ../../../library/stdtypes.rst:1431
msgid ""
"Passing a :class:`bytes` object to :func:`str` without the *encoding* or "
"*errors* arguments falls under the first case of returning the informal "
"string representation (see also the :option:`-b` command-line option to "
"Python).  For example::"
msgstr ""

#: ../../../library/stdtypes.rst:1436
msgid ""
">>> str(b'Zoot!')\n"
"\"b'Zoot!'\""
msgstr ""

#: ../../../library/stdtypes.rst:1439
msgid ""
"For more information on the ``str`` class and its methods, see :ref:"
"`textseq` and the :ref:`string-methods` section below.  To output formatted "
"strings, see the :ref:`string-formatting` section.  In addition, see the :"
"ref:`stringservices` section."
msgstr ""

#: ../../../library/stdtypes.rst:1451
msgid "String Methods"
msgstr ""

#: ../../../library/stdtypes.rst:1456
msgid ""
"Strings implement all of the :ref:`common <typesseq-common>` sequence "
"operations, along with the additional methods described below."
msgstr ""

#: ../../../library/stdtypes.rst:1459
msgid ""
"Strings also support two styles of string formatting, one providing a large "
"degree of flexibility and customization (see :meth:`str.format`, :ref:"
"`formatstrings` and :ref:`string-formatting`) and the other based on C "
"``printf`` style formatting that handles a narrower range of types and is "
"slightly harder to use correctly, but is often faster for the cases it can "
"handle (:ref:`old-string-formatting`)."
msgstr ""

#: ../../../library/stdtypes.rst:1466
msgid ""
"The :ref:`textservices` section of the standard library covers a number of "
"other modules that provide various text related utilities (including regular "
"expression support in the :mod:`re` module)."
msgstr ""

#: ../../../library/stdtypes.rst:1472
msgid ""
"Return a copy of the string with its first character capitalized and the "
"rest lowercased."
msgstr ""

#: ../../../library/stdtypes.rst:1478
msgid ""
"Return a casefolded copy of the string. Casefolded strings may be used for "
"caseless matching."
msgstr ""

#: ../../../library/stdtypes.rst:1481
msgid ""
"Casefolding is similar to lowercasing but more aggressive because it is "
"intended to remove all case distinctions in a string. For example, the "
"German lowercase letter ``'ß'`` is equivalent to ``\"ss\"``. Since it is "
"already lowercase, :meth:`lower` would do nothing to ``'ß'``; :meth:"
"`casefold` converts it to ``\"ss\"``."
msgstr ""

#: ../../../library/stdtypes.rst:1487
msgid ""
"The casefolding algorithm is described in section 3.13 of the Unicode "
"Standard."
msgstr ""

#: ../../../library/stdtypes.rst:1495
msgid ""
"Return centered in a string of length *width*. Padding is done using the "
"specified *fillchar* (default is a space)."
msgstr ""

#: ../../../library/stdtypes.rst:1501
msgid ""
"Return the number of non-overlapping occurrences of substring *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""

#: ../../../library/stdtypes.rst:1508
msgid ""
"Return an encoded version of the string as a bytes object. Default encoding "
"is ``'utf-8'``. *errors* may be given to set a different error handling "
"scheme. The default for *errors* is ``'strict'``, meaning that encoding "
"errors raise a :exc:`UnicodeError`. Other possible values are ``'ignore'``, "
"``'replace'``, ``'xmlcharrefreplace'``, ``'backslashreplace'`` and any other "
"name registered via :func:`codecs.register_error`, see section :ref:`codec-"
"base-classes`. For a list of possible encodings, see section :ref:`standard-"
"encodings`."
msgstr ""

#: ../../../library/stdtypes.rst:1517
msgid "Support for keyword arguments added."
msgstr ""

#: ../../../library/stdtypes.rst:1523
msgid ""
"Return ``True`` if the string ends with the specified *suffix*, otherwise "
"return ``False``.  *suffix* can also be a tuple of suffixes to look for.  "
"With optional *start*, test beginning at that position.  With optional "
"*end*, stop comparing at that position."
msgstr ""

#: ../../../library/stdtypes.rst:1531
msgid ""
"Return a copy of the string where all tab characters are replaced by one or "
"more spaces, depending on the current column and the given tab size.  Tab "
"positions occur every *tabsize* characters (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the string, the current "
"column is set to zero and the string is examined character by character.  If "
"the character is a tab (``\\t``), one or more space characters are inserted "
"in the result until the current column is equal to the next tab position. "
"(The tab character itself is not copied.)  If the character is a newline "
"(``\\n``) or return (``\\r``), it is copied and the current column is reset "
"to zero.  Any other character is copied unchanged and the current column is "
"incremented by one regardless of how the character is represented when "
"printed."
msgstr ""

#: ../../../library/stdtypes.rst:1552
msgid ""
"Return the lowest index in the string where substring *sub* is found, such "
"that *sub* is contained in the slice ``s[start:end]``.  Optional arguments "
"*start* and *end* are interpreted as in slice notation.  Return ``-1`` if "
"*sub* is not found."
msgstr ""

#: ../../../library/stdtypes.rst:1559
msgid ""
"The :meth:`~str.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the :"
"keyword:`in` operator::"
msgstr ""

#: ../../../library/stdtypes.rst:1563
msgid ""
">>> 'Py' in 'Python'\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:1569
msgid ""
"Perform a string formatting operation.  The string on which this method is "
"called can contain literal text or replacement fields delimited by braces "
"``{}``.  Each replacement field contains either the numeric index of a "
"positional argument, or the name of a keyword argument.  Returns a copy of "
"the string where each replacement field is replaced with the string value of "
"the corresponding argument."
msgstr ""

#: ../../../library/stdtypes.rst:1579
msgid ""
"See :ref:`formatstrings` for a description of the various formatting options "
"that can be specified in format strings."
msgstr ""

#: ../../../library/stdtypes.rst:1585
msgid ""
"Similar to ``str.format(**mapping)``, except that ``mapping`` is used "
"directly and not copied to a :class:`dict`.  This is useful if for example "
"``mapping`` is a dict subclass:"
msgstr ""

#: ../../../library/stdtypes.rst:1601
msgid ""
"Like :meth:`find`, but raise :exc:`ValueError` when the substring is not "
"found."
msgstr ""

#: ../../../library/stdtypes.rst:1606
msgid ""
"Return true if all characters in the string are alphanumeric and there is at "
"least one character, false otherwise.  A character ``c`` is alphanumeric if "
"one of the following returns ``True``: ``c.isalpha()``, ``c.isdecimal()``, "
"``c.isdigit()``, or ``c.isnumeric()``."
msgstr ""

#: ../../../library/stdtypes.rst:1614
msgid ""
"Return true if all characters in the string are alphabetic and there is at "
"least one character, false otherwise.  Alphabetic characters are those "
"characters defined in the Unicode character database as \"Letter\", i.e., "
"those with general category property being one of \"Lm\", \"Lt\", \"Lu\", "
"\"Ll\", or \"Lo\".  Note that this is different from the \"Alphabetic\" "
"property defined in the Unicode Standard."
msgstr ""

#: ../../../library/stdtypes.rst:1623
msgid ""
"Return true if all characters in the string are decimal characters and there "
"is at least one character, false otherwise. Decimal characters are those "
"from general category \"Nd\". This category includes digit characters, and "
"all characters that can be used to form decimal-radix numbers, e.g. U+0660, "
"ARABIC-INDIC DIGIT ZERO."
msgstr ""

#: ../../../library/stdtypes.rst:1633
msgid ""
"Return true if all characters in the string are digits and there is at least "
"one character, false otherwise.  Digits include decimal characters and "
"digits that need special handling, such as the compatibility superscript "
"digits.  Formally, a digit is a character that has the property value "
"Numeric_Type=Digit or Numeric_Type=Decimal."
msgstr ""

#: ../../../library/stdtypes.rst:1641
msgid ""
"Return true if the string is a valid identifier according to the language "
"definition, section :ref:`identifiers`."
msgstr ""

#: ../../../library/stdtypes.rst:1644
msgid ""
"Use :func:`keyword.iskeyword` to test for reserved identifiers such as :"
"keyword:`def` and :keyword:`class`."
msgstr ""

#: ../../../library/stdtypes.rst:1649
msgid ""
"Return true if all cased characters [4]_ in the string are lowercase and "
"there is at least one cased character, false otherwise."
msgstr ""

#: ../../../library/stdtypes.rst:1655
msgid ""
"Return true if all characters in the string are numeric characters, and "
"there is at least one character, false otherwise. Numeric characters include "
"digit characters, and all characters that have the Unicode numeric value "
"property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.  Formally, numeric "
"characters are those with the property value Numeric_Type=Digit, "
"Numeric_Type=Decimal or Numeric_Type=Numeric."
msgstr ""

#: ../../../library/stdtypes.rst:1665
msgid ""
"Return true if all characters in the string are printable or the string is "
"empty, false otherwise.  Nonprintable characters are those characters "
"defined in the Unicode character database as \"Other\" or \"Separator\", "
"excepting the ASCII space (0x20) which is considered printable.  (Note that "
"printable characters in this context are those which should not be escaped "
"when :func:`repr` is invoked on a string.  It has no bearing on the handling "
"of strings written to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../../../library/stdtypes.rst:1676
msgid ""
"Return true if there are only whitespace characters in the string and there "
"is at least one character, false otherwise.  Whitespace characters  are "
"those characters defined in the Unicode character database as \"Other\" or "
"\"Separator\" and those with bidirectional property being one of \"WS\", "
"\"B\", or \"S\"."
msgstr ""

#: ../../../library/stdtypes.rst:1683
msgid ""
"Return true if the string is a titlecased string and there is at least one "
"character, for example uppercase characters may only follow uncased "
"characters and lowercase characters only cased ones.  Return false otherwise."
msgstr ""

#: ../../../library/stdtypes.rst:1690
msgid ""
"Return true if all cased characters [4]_ in the string are uppercase and "
"there is at least one cased character, false otherwise."
msgstr ""

#: ../../../library/stdtypes.rst:1696
msgid ""
"Return a string which is the concatenation of the strings in the :term:"
"`iterable` *iterable*.  A :exc:`TypeError` will be raised if there are any "
"non-string values in *iterable*, including :class:`bytes` objects.  The "
"separator between elements is the string providing this method."
msgstr ""

#: ../../../library/stdtypes.rst:1704
msgid ""
"Return the string left justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is a space).  The original "
"string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../../library/stdtypes.rst:1711
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"lowercase."
msgstr ""

#: ../../../library/stdtypes.rst:1714
msgid ""
"The lowercasing algorithm used is described in section 3.13 of the Unicode "
"Standard."
msgstr ""

#: ../../../library/stdtypes.rst:1720
msgid ""
"Return a copy of the string with leading characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a prefix; rather, all combinations of its values "
"are stripped:"
msgstr ""

#: ../../../library/stdtypes.rst:1733
msgid ""
"This static method returns a translation table usable for :meth:`str."
"translate`."
msgstr ""

#: ../../../library/stdtypes.rst:1735
msgid ""
"If there is only one argument, it must be a dictionary mapping Unicode "
"ordinals (integers) or characters (strings of length 1) to Unicode ordinals, "
"strings (of arbitrary lengths) or None.  Character keys will then be "
"converted to ordinals."
msgstr ""

#: ../../../library/stdtypes.rst:1740
msgid ""
"If there are two arguments, they must be strings of equal length, and in the "
"resulting dictionary, each character in x will be mapped to the character at "
"the same position in y.  If there is a third argument, it must be a string, "
"whose characters will be mapped to None in the result."
msgstr ""

#: ../../../library/stdtypes.rst:1748
msgid ""
"Split the string at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part "
"after the separator.  If the separator is not found, return a 3-tuple "
"containing the string itself, followed by two empty strings."
msgstr ""

#: ../../../library/stdtypes.rst:1756
msgid ""
"Return a copy of the string with all occurrences of substring *old* replaced "
"by *new*.  If the optional argument *count* is given, only the first *count* "
"occurrences are replaced."
msgstr ""

#: ../../../library/stdtypes.rst:1763
msgid ""
"Return the highest index in the string where substring *sub* is found, such "
"that *sub* is contained within ``s[start:end]``.  Optional arguments *start* "
"and *end* are interpreted as in slice notation.  Return ``-1`` on failure."
msgstr ""

#: ../../../library/stdtypes.rst:1770
msgid ""
"Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is "
"not found."
msgstr ""

#: ../../../library/stdtypes.rst:1776
msgid ""
"Return the string right justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is a space). The original "
"string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../../library/stdtypes.rst:1783
msgid ""
"Split the string at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part "
"after the separator.  If the separator is not found, return a 3-tuple "
"containing two empty strings, followed by the string itself."
msgstr ""

#: ../../../library/stdtypes.rst:1791
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string. If *maxsplit* is given, at most *maxsplit* splits are done, the "
"*rightmost* ones.  If *sep* is not specified or ``None``, any whitespace "
"string is a separator.  Except for splitting from the right, :meth:`rsplit` "
"behaves like :meth:`split` which is described in detail below."
msgstr ""

#: ../../../library/stdtypes.rst:1800
msgid ""
"Return a copy of the string with trailing characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a suffix; rather, all combinations of its values "
"are stripped:"
msgstr ""

#: ../../../library/stdtypes.rst:1813
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string.  If *maxsplit* is given, at most *maxsplit* splits are done (thus, "
"the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not "
"specified or ``-1``, then there is no limit on the number of splits (all "
"possible splits are made)."
msgstr ""

#: ../../../library/stdtypes.rst:1819
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty strings (for example, ``'1,,2'.split(',')`` returns "
"``['1', '', '2']``).  The *sep* argument may consist of multiple characters "
"(for example, ``'1<>2<>3'.split('<>')`` returns ``['1', '2', '3']``). "
"Splitting an empty string with a specified separator returns ``['']``."
msgstr ""

#: ../../../library/stdtypes.rst:1825
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is "
"applied: runs of consecutive whitespace are regarded as a single separator, "
"and the result will contain no empty strings at the start or end if the "
"string has leading or trailing whitespace.  Consequently, splitting an empty "
"string or a string consisting of just whitespace with a ``None`` separator "
"returns ``[]``."
msgstr ""

#: ../../../library/stdtypes.rst:1832
msgid ""
"For example, ``' 1  2   3  '.split()`` returns ``['1', '2', '3']``, and ``'  "
"1  2   3  '.split(None, 1)`` returns ``['1', '2   3  ']``."
msgstr ""

#: ../../../library/stdtypes.rst:1841
msgid ""
"Return a list of the lines in the string, breaking at line boundaries. This "
"method uses the :term:`universal newlines` approach to splitting lines. Line "
"breaks are not included in the resulting list unless *keepends* is given and "
"true."
msgstr ""

#: ../../../library/stdtypes.rst:1846
msgid ""
"For example, ``'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()`` returns ``['ab "
"c', '', 'de fg', 'kl']``, while the same call with ``splitlines(True)`` "
"returns ``['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']``."
msgstr ""

#: ../../../library/stdtypes.rst:1850
msgid ""
"Unlike :meth:`~str.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break "
"does not result in an extra line."
msgstr ""

#: ../../../library/stdtypes.rst:1857
msgid ""
"Return ``True`` if string starts with the *prefix*, otherwise return "
"``False``. *prefix* can also be a tuple of prefixes to look for.  With "
"optional *start*, test string beginning at that position.  With optional "
"*end*, stop comparing string at that position."
msgstr ""

#: ../../../library/stdtypes.rst:1865
msgid ""
"Return a copy of the string with the leading and trailing characters "
"removed. The *chars* argument is a string specifying the set of characters "
"to be removed. If omitted or ``None``, the *chars* argument defaults to "
"removing whitespace. The *chars* argument is not a prefix or suffix; rather, "
"all combinations of its values are stripped:"
msgstr ""

#: ../../../library/stdtypes.rst:1879
msgid ""
"Return a copy of the string with uppercase characters converted to lowercase "
"and vice versa. Note that it is not necessarily true that ``s.swapcase()."
"swapcase() == s``."
msgstr ""

#: ../../../library/stdtypes.rst:1886
msgid ""
"Return a titlecased version of the string where words start with an "
"uppercase character and the remaining characters are lowercase."
msgstr ""

#: ../../../library/stdtypes.rst:1889
msgid ""
"The algorithm uses a simple language-independent definition of a word as "
"groups of consecutive letters.  The definition works in many contexts but it "
"means that apostrophes in contractions and possessives form word boundaries, "
"which may not be the desired result::"
msgstr ""

#: ../../../library/stdtypes.rst:1894
msgid ""
">>> \"they're bill's friends from the UK\".title()\n"
"\"They'Re Bill'S Friends From The Uk\""
msgstr ""

#: ../../../library/stdtypes.rst:1897
msgid ""
"A workaround for apostrophes can be constructed using regular expressions::"
msgstr ""

#: ../../../library/stdtypes.rst:1899
msgid ""
">>> import re\n"
">>> def titlecase(s):\n"
"...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n"
"...                   lambda mo: mo.group(0)[0].upper() +\n"
"...                              mo.group(0)[1:].lower(),\n"
"...                   s)\n"
"...\n"
">>> titlecase(\"they're bill's friends.\")\n"
"\"They're Bill's Friends.\""
msgstr ""

#: ../../../library/stdtypes.rst:1912
msgid ""
"Return a copy of the *s* where all characters have been mapped through the "
"*map* which must be a dictionary of Unicode ordinals (integers) to Unicode "
"ordinals, strings or ``None``.  Unmapped characters are left untouched. "
"Characters mapped to ``None`` are deleted."
msgstr ""

#: ../../../library/stdtypes.rst:1917
msgid ""
"You can use :meth:`str.maketrans` to create a translation map from character-"
"to-character mappings in different formats."
msgstr ""

#: ../../../library/stdtypes.rst:1922
msgid ""
"An even more flexible approach is to create a custom character mapping codec "
"using the :mod:`codecs` module (see :mod:`encodings.cp1251` for an example)."
msgstr ""

#: ../../../library/stdtypes.rst:1929
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"uppercase.  Note that ``str.upper().isupper()`` might be ``False`` if ``s`` "
"contains uncased characters or if the Unicode category of the resulting "
"character(s) is not \"Lu\" (Letter, uppercase), but e.g. \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../../library/stdtypes.rst:1935
msgid ""
"The uppercasing algorithm used is described in section 3.13 of the Unicode "
"Standard."
msgstr ""

#: ../../../library/stdtypes.rst:1941
msgid ""
"Return the numeric string left filled with zeros in a string of length "
"*width*.  A sign prefix is handled correctly.  The original string is "
"returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../../library/stdtypes.rst:1950
msgid "``printf``-style String Formatting"
msgstr ""

#: ../../../library/stdtypes.rst:1964
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  Using the newer :meth:`str.format` interface helps "
"avoid these errors, and also provides a generally more powerful, flexible "
"and extensible approach to formatting text."
msgstr ""

#: ../../../library/stdtypes.rst:1970
msgid ""
"String objects have one unique built-in operation: the ``%`` operator "
"(modulo). This is also known as the string *formatting* or *interpolation* "
"operator. Given ``format % values`` (where *format* is a string), ``%`` "
"conversion specifications in *format* are replaced with zero or more "
"elements of *values*. The effect is similar to using the :c:func:`sprintf` "
"in the C language."
msgstr ""

#: ../../../library/stdtypes.rst:1976
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of "
"items specified by the format string, or a single mapping object (for "
"example, a dictionary)."
msgstr ""

#: ../../../library/stdtypes.rst:1981
msgid ""
"A conversion specifier contains two or more characters and has the following "
"components, which must occur in this order:"
msgstr ""

#: ../../../library/stdtypes.rst:1984
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr ""

#: ../../../library/stdtypes.rst:1986
msgid ""
"Mapping key (optional), consisting of a parenthesised sequence of characters "
"(for example, ``(somename)``)."
msgstr ""

#: ../../../library/stdtypes.rst:1989
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr ""

#: ../../../library/stdtypes.rst:1992
msgid ""
"Minimum field width (optional).  If specified as an ``'*'`` (asterisk), the "
"actual width is read from the next element of the tuple in *values*, and the "
"object to convert comes after the minimum field width and optional precision."
msgstr ""

#: ../../../library/stdtypes.rst:1996
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision.  "
"If specified as ``'*'`` (an asterisk), the actual precision is read from the "
"next element of the tuple in *values*, and the value to convert comes after "
"the precision."
msgstr ""

#: ../../../library/stdtypes.rst:2001
msgid "Length modifier (optional)."
msgstr ""

#: ../../../library/stdtypes.rst:2003
msgid "Conversion type."
msgstr ""

#: ../../../library/stdtypes.rst:2005
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the string *must* include a parenthesised mapping key into that "
"dictionary inserted immediately after the ``'%'`` character. The mapping key "
"selects the value to be formatted from the mapping.  For example:"
msgstr ""

#: ../../../library/stdtypes.rst:2014
msgid ""
"In this case no ``*`` specifiers may occur in a format (since they require a "
"sequential parameter list)."
msgstr ""

#: ../../../library/stdtypes.rst:2017
msgid "The conversion flag characters are:"
msgstr ""

#: ../../../library/stdtypes.rst:2020
msgid "Flag"
msgstr ""

#: ../../../library/stdtypes.rst:2022
msgid "``'#'``"
msgstr ""

#: ../../../library/stdtypes.rst:2022
msgid ""
"The value conversion will use the \"alternate form\" (where defined below)."
msgstr ""

#: ../../../library/stdtypes.rst:2025
msgid "``'0'``"
msgstr ""

#: ../../../library/stdtypes.rst:2025
msgid "The conversion will be zero padded for numeric values."
msgstr ""

#: ../../../library/stdtypes.rst:2027
msgid "``'-'``"
msgstr ""

#: ../../../library/stdtypes.rst:2027
msgid ""
"The converted value is left adjusted (overrides the ``'0'`` conversion if "
"both are given)."
msgstr ""

#: ../../../library/stdtypes.rst:2030
msgid "``' '``"
msgstr ""

#: ../../../library/stdtypes.rst:2030
msgid ""
"(a space) A blank should be left before a positive number (or empty string) "
"produced by a signed conversion."
msgstr ""

#: ../../../library/stdtypes.rst:2033
msgid "``'+'``"
msgstr ""

#: ../../../library/stdtypes.rst:2033
msgid ""
"A sign character (``'+'`` or ``'-'``) will precede the conversion (overrides "
"a \"space\" flag)."
msgstr ""

#: ../../../library/stdtypes.rst:2037
msgid ""
"A length modifier (``h``, ``l``, or ``L``) may be present, but is ignored as "
"it is not necessary for Python -- so e.g. ``%ld`` is identical to ``%d``."
msgstr ""

#: ../../../library/stdtypes.rst:2040
msgid "The conversion types are:"
msgstr ""

#: ../../../library/stdtypes.rst:2043
msgid "Conversion"
msgstr ""

#: ../../../library/stdtypes.rst:2045
msgid "``'d'``"
msgstr ""

#: ../../../library/stdtypes.rst:2045 ../../../library/stdtypes.rst:2047
msgid "Signed integer decimal."
msgstr ""

#: ../../../library/stdtypes.rst:2047
msgid "``'i'``"
msgstr ""

#: ../../../library/stdtypes.rst:2049
msgid "``'o'``"
msgstr ""

#: ../../../library/stdtypes.rst:2049
msgid "Signed octal value."
msgstr ""

#: ../../../library/stdtypes.rst:2051
msgid "``'u'``"
msgstr ""

#: ../../../library/stdtypes.rst:2051
msgid "Obsolete type -- it is identical to ``'d'``."
msgstr ""

#: ../../../library/stdtypes.rst:2051
msgid "\\(7)"
msgstr ""

#: ../../../library/stdtypes.rst:2053
msgid "``'x'``"
msgstr ""

#: ../../../library/stdtypes.rst:2053
msgid "Signed hexadecimal (lowercase)."
msgstr ""

#: ../../../library/stdtypes.rst:2055
msgid "``'X'``"
msgstr ""

#: ../../../library/stdtypes.rst:2055
msgid "Signed hexadecimal (uppercase)."
msgstr ""

#: ../../../library/stdtypes.rst:2057
msgid "``'e'``"
msgstr ""

#: ../../../library/stdtypes.rst:2057
msgid "Floating point exponential format (lowercase)."
msgstr ""

#: ../../../library/stdtypes.rst:2059
msgid "``'E'``"
msgstr ""

#: ../../../library/stdtypes.rst:2059
msgid "Floating point exponential format (uppercase)."
msgstr ""

#: ../../../library/stdtypes.rst:2061
msgid "``'f'``"
msgstr ""

#: ../../../library/stdtypes.rst:2061 ../../../library/stdtypes.rst:2063
msgid "Floating point decimal format."
msgstr ""

#: ../../../library/stdtypes.rst:2063
msgid "``'F'``"
msgstr ""

#: ../../../library/stdtypes.rst:2065
msgid "``'g'``"
msgstr ""

#: ../../../library/stdtypes.rst:2065
msgid ""
"Floating point format. Uses lowercase exponential format if exponent is less "
"than -4 or not less than precision, decimal format otherwise."
msgstr ""

#: ../../../library/stdtypes.rst:2069
msgid "``'G'``"
msgstr ""

#: ../../../library/stdtypes.rst:2069
msgid ""
"Floating point format. Uses uppercase exponential format if exponent is less "
"than -4 or not less than precision, decimal format otherwise."
msgstr ""

#: ../../../library/stdtypes.rst:2073
msgid "``'c'``"
msgstr ""

#: ../../../library/stdtypes.rst:2073
msgid "Single character (accepts integer or single character string)."
msgstr ""

#: ../../../library/stdtypes.rst:2076
msgid "``'r'``"
msgstr ""

#: ../../../library/stdtypes.rst:2076
msgid "String (converts any Python object using :func:`repr`)."
msgstr ""

#: ../../../library/stdtypes.rst:2079
msgid "``'s'``"
msgstr ""

#: ../../../library/stdtypes.rst:2079
msgid "String (converts any Python object using :func:`str`)."
msgstr ""

#: ../../../library/stdtypes.rst:2082
msgid "``'a'``"
msgstr ""

#: ../../../library/stdtypes.rst:2082
msgid "String (converts any Python object using :func:`ascii`)."
msgstr ""

#: ../../../library/stdtypes.rst:2085
msgid "``'%'``"
msgstr ""

#: ../../../library/stdtypes.rst:2085
msgid "No argument is converted, results in a ``'%'`` character in the result."
msgstr ""

#: ../../../library/stdtypes.rst:2092
msgid ""
"The alternate form causes a leading zero (``'0'``) to be inserted between "
"left-hand padding and the formatting of the number if the leading character "
"of the result is not already a zero."
msgstr ""

#: ../../../library/stdtypes.rst:2097
msgid ""
"The alternate form causes a leading ``'0x'`` or ``'0X'`` (depending on "
"whether the ``'x'`` or ``'X'`` format was used) to be inserted between left-"
"hand padding and the formatting of the number if the leading character of "
"the result is not already a zero."
msgstr ""

#: ../../../library/stdtypes.rst:2103
msgid ""
"The alternate form causes the result to always contain a decimal point, even "
"if no digits follow it."
msgstr ""

#: ../../../library/stdtypes.rst:2106
msgid ""
"The precision determines the number of digits after the decimal point and "
"defaults to 6."
msgstr ""

#: ../../../library/stdtypes.rst:2110
msgid ""
"The alternate form causes the result to always contain a decimal point, and "
"trailing zeroes are not removed as they would otherwise be."
msgstr ""

#: ../../../library/stdtypes.rst:2113
msgid ""
"The precision determines the number of significant digits before and after "
"the decimal point and defaults to 6."
msgstr ""

#: ../../../library/stdtypes.rst:2117
msgid "If precision is ``N``, the output is truncated to ``N`` characters."
msgstr ""

#: ../../../library/stdtypes.rst:2121
msgid "See :pep:`237`."
msgstr ""

#: ../../../library/stdtypes.rst:2123
msgid ""
"Since Python strings have an explicit length, ``%s`` conversions do not "
"assume that ``'\\0'`` is the end of the string."
msgstr ""

#: ../../../library/stdtypes.rst:2128
msgid ""
"``%f`` conversions for numbers whose absolute value is over 1e50 are no "
"longer replaced by ``%g`` conversions."
msgstr ""

#: ../../../library/stdtypes.rst:2139
msgid ""
"Binary Sequence Types --- :class:`bytes`, :class:`bytearray`, :class:"
"`memoryview`"
msgstr ""

#: ../../../library/stdtypes.rst:2147
msgid ""
"The core built-in types for manipulating binary data are :class:`bytes` and :"
"class:`bytearray`. They are supported by :class:`memoryview` which uses the :"
"ref:`buffer protocol <bufferobjects>` to access the memory of other binary "
"objects without needing to make a copy."
msgstr ""

#: ../../../library/stdtypes.rst:2152
msgid ""
"The :mod:`array` module supports efficient storage of basic data types like "
"32-bit integers and IEEE754 double-precision floating values."
msgstr ""

#: ../../../library/stdtypes.rst:2158
msgid "Bytes"
msgstr ""

#: ../../../library/stdtypes.rst:2162
msgid ""
"Bytes objects are immutable sequences of single bytes. Since many major "
"binary protocols are based on the ASCII text encoding, bytes objects offer "
"several methods that are only valid when working with ASCII compatible data "
"and are closely related to string objects in a variety of other ways."
msgstr ""

#: ../../../library/stdtypes.rst:2167
msgid ""
"Firstly, the syntax for bytes literals is largely the same as that for "
"string literals, except that a ``b`` prefix is added:"
msgstr ""

#: ../../../library/stdtypes.rst:2170
msgid "Single quotes: ``b'still allows embedded \"double\" quotes'``"
msgstr ""

#: ../../../library/stdtypes.rst:2171
msgid "Double quotes: ``b\"still allows embedded 'single' quotes\"``."
msgstr ""

#: ../../../library/stdtypes.rst:2172
msgid ""
"Triple quoted: ``b'''3 single quotes'''``, ``b\"\"\"3 double quotes\"\"\"``"
msgstr ""

#: ../../../library/stdtypes.rst:2174
msgid ""
"Only ASCII characters are permitted in bytes literals (regardless of the "
"declared source code encoding). Any binary values over 127 must be entered "
"into bytes literals using the appropriate escape sequence."
msgstr ""

#: ../../../library/stdtypes.rst:2178
msgid ""
"As with string literals, bytes literals may also use a ``r`` prefix to "
"disable processing of escape sequences. See :ref:`strings` for more about "
"the various forms of bytes literal, including supported escape sequences."
msgstr ""

#: ../../../library/stdtypes.rst:2182
msgid ""
"While bytes literals and representations are based on ASCII text, bytes "
"objects actually behave like immutable sequences of integers, with each "
"value in the sequence restricted such that ``0 <= x < 256`` (attempts to "
"violate this restriction will trigger :exc:`ValueError`. This is done "
"deliberately to emphasise that while many binary formats include ASCII based "
"elements and can be usefully manipulated with some text-oriented algorithms, "
"this is not generally the case for arbitrary binary data (blindly applying "
"text processing algorithms to binary data formats that are not ASCII "
"compatible will usually lead to data corruption)."
msgstr ""

#: ../../../library/stdtypes.rst:2192
msgid ""
"In addition to the literal forms, bytes objects can be created in a number "
"of other ways:"
msgstr ""

#: ../../../library/stdtypes.rst:2195
msgid "A zero-filled bytes object of a specified length: ``bytes(10)``"
msgstr ""

#: ../../../library/stdtypes.rst:2196
msgid "From an iterable of integers: ``bytes(range(20))``"
msgstr ""

#: ../../../library/stdtypes.rst:2197
msgid "Copying existing binary data via the buffer protocol:  ``bytes(obj)``"
msgstr ""

#: ../../../library/stdtypes.rst:2199
msgid "Also see the :ref:`bytes <func-bytes>` built-in."
msgstr ""

#: ../../../library/stdtypes.rst:2201
msgid ""
"Since bytes objects are sequences of integers, for a bytes object *b*, "
"``b[0]`` will be an integer, while ``b[0:1]`` will be a bytes object of "
"length 1.  (This contrasts with text strings, where both indexing and "
"slicing will produce a string of length 1)"
msgstr ""

#: ../../../library/stdtypes.rst:2206
msgid ""
"The representation of bytes objects uses the literal format (``b'...'``) "
"since it is often more useful than e.g. ``bytes([46, 46, 46])``.  You can "
"always convert a bytes object into a list of integers using ``list(b)``."
msgstr ""

#: ../../../library/stdtypes.rst:2212
msgid ""
"For Python 2.x users: In the Python 2.x series, a variety of implicit "
"conversions between 8-bit strings (the closest thing 2.x offers to a built-"
"in binary data type) and Unicode strings were permitted. This was a "
"backwards compatibility workaround to account for the fact that Python "
"originally only supported 8-bit text, and Unicode text was a later addition. "
"In Python 3.x, those implicit conversions are gone - conversions between 8-"
"bit binary data and Unicode text must be explicit, and bytes and string "
"objects will always compare unequal."
msgstr ""

#: ../../../library/stdtypes.rst:2225
msgid "Bytearray Objects"
msgstr ""

#: ../../../library/stdtypes.rst:2229
msgid ""
":class:`bytearray` objects are a mutable counterpart to :class:`bytes` "
"objects. There is no dedicated literal syntax for bytearray objects, instead "
"they are always created by calling the constructor:"
msgstr ""

#: ../../../library/stdtypes.rst:2233
msgid "Creating an empty instance: ``bytearray()``"
msgstr ""

#: ../../../library/stdtypes.rst:2234
msgid "Creating a zero-filled instance with a given length: ``bytearray(10)``"
msgstr ""

#: ../../../library/stdtypes.rst:2235
msgid "From an iterable of integers: ``bytearray(range(20))``"
msgstr ""

#: ../../../library/stdtypes.rst:2236
msgid ""
"Copying existing binary data via the buffer protocol:  ``bytearray(b'Hi!')``"
msgstr ""

#: ../../../library/stdtypes.rst:2238
msgid ""
"As bytearray objects are mutable, they support the :ref:`mutable <typesseq-"
"mutable>` sequence operations in addition to the common bytes and bytearray "
"operations described in :ref:`bytes-methods`."
msgstr ""

#: ../../../library/stdtypes.rst:2242
msgid "Also see the :ref:`bytearray <func-bytearray>` built-in."
msgstr ""

#: ../../../library/stdtypes.rst:2248
msgid "Bytes and Bytearray Operations"
msgstr ""

#: ../../../library/stdtypes.rst:2253
msgid ""
"Both bytes and bytearray objects support the :ref:`common <typesseq-common>` "
"sequence operations. They interoperate not just with operands of the same "
"type, but with any object that supports the :ref:`buffer protocol "
"<bufferobjects>`. Due to this flexibility, they can be freely mixed in "
"operations without causing errors. However, the return type of the result "
"may depend on the order of operands."
msgstr ""

#: ../../../library/stdtypes.rst:2260
msgid ""
"Due to the common use of ASCII text as the basis for binary protocols, bytes "
"and bytearray objects provide almost all methods found on text strings, with "
"the exceptions of:"
msgstr ""

#: ../../../library/stdtypes.rst:2264
msgid ":meth:`str.encode` (which converts text strings to bytes objects)"
msgstr ""

#: ../../../library/stdtypes.rst:2265
msgid ""
":meth:`str.format` and :meth:`str.format_map` (which are used to format text "
"for display to users)"
msgstr ""

#: ../../../library/stdtypes.rst:2267
msgid ""
":meth:`str.isidentifier`, :meth:`str.isnumeric`, :meth:`str.isdecimal`, :"
"meth:`str.isprintable` (which are used to check various properties of text "
"strings which are not typically applicable to binary protocols)."
msgstr ""

#: ../../../library/stdtypes.rst:2271
msgid ""
"All other string methods are supported, although sometimes with slight "
"differences in functionality and semantics (as described below)."
msgstr ""

#: ../../../library/stdtypes.rst:2276
msgid ""
"The methods on bytes and bytearray objects don't accept strings as their "
"arguments, just as the methods on strings don't accept bytes as their "
"arguments.  For example, you have to write::"
msgstr ""

#: ../../../library/stdtypes.rst:2280
msgid ""
"a = \"abc\"\n"
"b = a.replace(\"a\", \"f\")"
msgstr ""

#: ../../../library/stdtypes.rst:2283
msgid "and::"
msgstr ""

#: ../../../library/stdtypes.rst:2285
msgid ""
"a = b\"abc\"\n"
"b = a.replace(b\"a\", b\"f\")"
msgstr ""

#: ../../../library/stdtypes.rst:2288
msgid ""
"Whenever a bytes or bytearray method needs to interpret the bytes as "
"characters (e.g. the :meth:`is...` methods, :meth:`split`, :meth:`strip`), "
"the ASCII character set is assumed (text strings use Unicode semantics)."
msgstr ""

#: ../../../library/stdtypes.rst:2293
msgid ""
"Using these ASCII based methods to manipulate binary data that is not stored "
"in an ASCII based format may lead to data corruption."
msgstr ""

#: ../../../library/stdtypes.rst:2296
msgid ""
"The search operations (:keyword:`in`, :meth:`count`, :meth:`find`, :meth:"
"`index`, :meth:`rfind` and :meth:`rindex`) all accept both integers in the "
"range 0 to 255 (inclusive) as well as bytes and byte array sequences."
msgstr ""

#: ../../../library/stdtypes.rst:2300
msgid ""
"All of the search methods also accept an integer in the range 0 to 255 "
"(inclusive) as their first argument."
msgstr ""

#: ../../../library/stdtypes.rst:2305
msgid ""
"Each bytes and bytearray instance provides a :meth:`~bytes.decode` "
"convenience method that is the inverse of :meth:`str.encode`:"
msgstr ""

#: ../../../library/stdtypes.rst:2311
msgid ""
"Return a string decoded from the given bytes.  Default encoding is "
"``'utf-8'``. *errors* may be given to set a different error handling "
"scheme.  The default for *errors* is ``'strict'``, meaning that encoding "
"errors raise a :exc:`UnicodeError`.  Other possible values are ``'ignore'``, "
"``'replace'`` and any other name registered via :func:`codecs."
"register_error`, see section :ref:`codec-base-classes`. For a list of "
"possible encodings, see section :ref:`standard-encodings`."
msgstr ""

#: ../../../library/stdtypes.rst:2319
msgid "Added support for keyword arguments."
msgstr ""

#: ../../../library/stdtypes.rst:2322
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytes and bytearray types have an additional class method "
"to read data in that format:"
msgstr ""

#: ../../../library/stdtypes.rst:2330
msgid ""
"This :class:`bytes` class method returns a bytes or bytearray object, "
"decoding the given string object.  The string must contain two hexadecimal "
"digits per byte, spaces are ignored."
msgstr ""

#: ../../../library/stdtypes.rst:2338
msgid ""
"The maketrans and translate methods differ in semantics from the versions "
"available on strings:"
msgstr ""

#: ../../../library/stdtypes.rst:2344
msgid ""
"Return a copy of the bytes or bytearray object where all bytes occurring in "
"the optional argument *delete* are removed, and the remaining bytes have "
"been mapped through the given translation table, which must be a bytes "
"object of length 256."
msgstr ""

#: ../../../library/stdtypes.rst:2349
msgid ""
"You can use the :func:`bytes.maketrans` method to create a translation table."
msgstr ""

#: ../../../library/stdtypes.rst:2351
msgid ""
"Set the *table* argument to ``None`` for translations that only delete "
"characters::"
msgstr ""

#: ../../../library/stdtypes.rst:2354
msgid ""
">>> b'read this short text'.translate(None, b'aeiou')\n"
"b'rd ths shrt txt'"
msgstr ""

#: ../../../library/stdtypes.rst:2361
msgid ""
"This static method returns a translation table usable for :meth:`bytes."
"translate` that will map each character in *from* into the character at the "
"same position in *to*; *from* and *to* must be bytes objects and have the "
"same length."
msgstr ""

#: ../../../library/stdtypes.rst:2372
msgid "Memory Views"
msgstr ""

#: ../../../library/stdtypes.rst:2374
msgid ""
":class:`memoryview` objects allow Python code to access the internal data of "
"an object that supports the :ref:`buffer protocol <bufferobjects>` without "
"copying."
msgstr ""

#: ../../../library/stdtypes.rst:2380
msgid ""
"Create a :class:`memoryview` that references *obj*.  *obj* must support the "
"buffer protocol.  Built-in objects that support the buffer protocol include :"
"class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../../library/stdtypes.rst:2384
msgid ""
"A :class:`memoryview` has the notion of an *element*, which is the atomic "
"memory unit handled by the originating object *obj*.  For many simple types "
"such as :class:`bytes` and :class:`bytearray`, an element is a single byte, "
"but other types such as :class:`array.array` may have bigger elements."
msgstr ""

#: ../../../library/stdtypes.rst:2390
msgid ""
"``len(view)`` is equal to the length of :class:`~memoryview.tolist`. If "
"``view.ndim = 0``, the length is 1. If ``view.ndim = 1``, the length is "
"equal to the number of elements in the view. For higher dimensions, the "
"length is equal to the length of the nested list representation of the view. "
"The :class:`~memoryview.itemsize` attribute will give you the number of "
"bytes in a single element."
msgstr ""

#: ../../../library/stdtypes.rst:2397
msgid ""
"A :class:`memoryview` supports slicing to expose its data. If :class:"
"`~memoryview.format` is one of the native format specifiers from the :mod:"
"`struct` module, indexing will return a single element with the correct "
"type. Full slicing will result in a subview::"
msgstr ""

#: ../../../library/stdtypes.rst:2402
msgid ""
">>> v = memoryview(b'abcefg')\n"
">>> v[1]\n"
"98\n"
">>> v[-1]\n"
"103\n"
">>> v[1:4]\n"
"<memory at 0x7f3ddc9f4350>\n"
">>> bytes(v[1:4])\n"
"b'bce'"
msgstr ""

#: ../../../library/stdtypes.rst:2412
msgid "Other native formats::"
msgstr ""

#: ../../../library/stdtypes.rst:2414
msgid ""
">>> import array\n"
">>> a = array.array('l', [-11111111, 22222222, -33333333, 44444444])\n"
">>> a[0]\n"
"-11111111\n"
">>> a[-1]\n"
"44444444\n"
">>> a[2:3].tolist()\n"
"[-33333333]\n"
">>> a[::2].tolist()\n"
"[-11111111, -33333333]\n"
">>> a[::-1].tolist()\n"
"[44444444, -33333333, 22222222, -11111111]"
msgstr ""

#: ../../../library/stdtypes.rst:2429
msgid ""
"If the underlying object is writable, the memoryview supports slice "
"assignment. Resizing is not allowed::"
msgstr ""

#: ../../../library/stdtypes.rst:2432
msgid ""
">>> data = bytearray(b'abcefg')\n"
">>> v = memoryview(data)\n"
">>> v.readonly\n"
"False\n"
">>> v[0] = ord(b'z')\n"
">>> data\n"
"bytearray(b'zbcefg')\n"
">>> v[1:4] = b'123'\n"
">>> data\n"
"bytearray(b'z123fg')\n"
">>> v[2:3] = b'spam'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: memoryview assignment: lvalue and rvalue have different "
"structures\n"
">>> v[2:6] = b'spam'\n"
">>> data\n"
"bytearray(b'z1spam')"
msgstr ""

#: ../../../library/stdtypes.rst:2450
msgid ""
"One-dimensional memoryviews of hashable (read-only) types with formats 'B', "
"'b' or 'c' are also hashable. The hash is defined as ``hash(m) == hash(m."
"tobytes())``::"
msgstr ""

#: ../../../library/stdtypes.rst:2454
msgid ""
">>> v = memoryview(b'abcefg')\n"
">>> hash(v) == hash(b'abcefg')\n"
"True\n"
">>> hash(v[2:4]) == hash(b'ce')\n"
"True\n"
">>> hash(v[::-2]) == hash(b'abcefg'[::-2])\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:2462
msgid ""
"One-dimensional memoryviews with formats 'B', 'b' or 'c' are now hashable."
msgstr ""

#: ../../../library/stdtypes.rst:2465
msgid ":class:`memoryview` has several methods:"
msgstr ""

#: ../../../library/stdtypes.rst:2469
msgid ""
"A memoryview and a :pep:`3118` exporter are equal if their shapes are "
"equivalent and if all corresponding values are equal when the operands' "
"respective format codes are interpreted using :mod:`struct` syntax."
msgstr ""

#: ../../../library/stdtypes.rst:2473
msgid ""
"For the subset of :mod:`struct` format strings currently supported by :meth:"
"`tolist`, ``v`` and ``w`` are equal if ``v.tolist() == w.tolist()``::"
msgstr ""

#: ../../../library/stdtypes.rst:2476
msgid ""
">>> import array\n"
">>> a = array.array('I', [1, 2, 3, 4, 5])\n"
">>> b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])\n"
">>> c = array.array('b', [5, 3, 1])\n"
">>> x = memoryview(a)\n"
">>> y = memoryview(b)\n"
">>> x == a == y == b\n"
"True\n"
">>> x.tolist() == a.tolist() == y.tolist() == b.tolist()\n"
"True\n"
">>> z = y[::-2]\n"
">>> z == c\n"
"True\n"
">>> z.tolist() == c.tolist()\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:2492
msgid ""
"If either format string is not supported by the :mod:`struct` module, then "
"the objects will always compare as unequal (even if the format strings and "
"buffer contents are identical)::"
msgstr ""

#: ../../../library/stdtypes.rst:2496
msgid ""
">>> from ctypes import BigEndianStructure, c_long\n"
">>> class BEPoint(BigEndianStructure):\n"
"...     _fields_ = [(\"x\", c_long), (\"y\", c_long)]\n"
"...\n"
">>> point = BEPoint(100, 200)\n"
">>> a = memoryview(point)\n"
">>> b = memoryview(point)\n"
">>> a == point\n"
"False\n"
">>> a == b\n"
"False"
msgstr ""

#: ../../../library/stdtypes.rst:2508
msgid ""
"Note that, as with floating point numbers, ``v is w`` does *not* imply ``v "
"== w`` for memoryview objects."
msgstr ""

#: ../../../library/stdtypes.rst:2511
msgid ""
"Previous versions compared the raw memory disregarding the item format and "
"the logical array structure."
msgstr ""

#: ../../../library/stdtypes.rst:2517
msgid ""
"Return the data in the buffer as a bytestring.  This is equivalent to "
"calling the :class:`bytes` constructor on the memoryview. ::"
msgstr ""

#: ../../../library/stdtypes.rst:2520
msgid ""
">>> m = memoryview(b\"abc\")\n"
">>> m.tobytes()\n"
"b'abc'\n"
">>> bytes(m)\n"
"b'abc'"
msgstr ""

#: ../../../library/stdtypes.rst:2526
msgid ""
"For non-contiguous arrays the result is equal to the flattened list "
"representation with all elements converted to bytes. :meth:`tobytes` "
"supports all format strings, including those that are not in :mod:`struct` "
"module syntax."
msgstr ""

#: ../../../library/stdtypes.rst:2533
msgid "Return the data in the buffer as a list of elements. ::"
msgstr ""

#: ../../../library/stdtypes.rst:2535
msgid ""
">>> memoryview(b'abc').tolist()\n"
"[97, 98, 99]\n"
">>> import array\n"
">>> a = array.array('d', [1.1, 2.2, 3.3])\n"
">>> m = memoryview(a)\n"
">>> m.tolist()\n"
"[1.1, 2.2, 3.3]"
msgstr ""

#: ../../../library/stdtypes.rst:2543
msgid ""
":meth:`tolist` now supports all single character native formats in :mod:"
"`struct` module syntax as well as multi-dimensional representations."
msgstr ""

#: ../../../library/stdtypes.rst:2550
msgid ""
"Release the underlying buffer exposed by the memoryview object.  Many "
"objects take special actions when a view is held on them (for example, a :"
"class:`bytearray` would temporarily forbid resizing); therefore, calling "
"release() is handy to remove these restrictions (and free any dangling "
"resources) as soon as possible."
msgstr ""

#: ../../../library/stdtypes.rst:2556
msgid ""
"After this method has been called, any further operation on the view raises "
"a :class:`ValueError` (except :meth:`release()` itself which can be called "
"multiple times)::"
msgstr ""

#: ../../../library/stdtypes.rst:2560
msgid ""
">>> m = memoryview(b'abc')\n"
">>> m.release()\n"
">>> m[0]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: operation forbidden on released memoryview object"
msgstr ""

#: ../../../library/stdtypes.rst:2567
msgid ""
"The context management protocol can be used for a similar effect, using the "
"``with`` statement::"
msgstr ""

#: ../../../library/stdtypes.rst:2570
msgid ""
">>> with memoryview(b'abc') as m:\n"
"...     m[0]\n"
"...\n"
"97\n"
">>> m[0]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: operation forbidden on released memoryview object"
msgstr ""

#: ../../../library/stdtypes.rst:2583
msgid ""
"Cast a memoryview to a new format or shape. *shape* defaults to "
"``[byte_length//new_itemsize]``, which means that the result view will be "
"one-dimensional. The return value is a new memoryview, but the buffer itself "
"is not copied. Supported casts are 1D -> C-contiguous and C-contiguous -> 1D."
msgstr ""

#: ../../../library/stdtypes.rst:2589
msgid ""
"Both formats are restricted to single element native formats in :mod:"
"`struct` syntax. One of the formats must be a byte format ('B', 'b' or 'c'). "
"The byte length of the result must be the same as the original length."
msgstr ""

#: ../../../library/stdtypes.rst:2594
msgid "Cast 1D/long to 1D/unsigned bytes::"
msgstr ""

#: ../../../library/stdtypes.rst:2596
msgid ""
">>> import array\n"
">>> a = array.array('l', [1,2,3])\n"
">>> x = memoryview(a)\n"
">>> x.format\n"
"'l'\n"
">>> x.itemsize\n"
"8\n"
">>> len(x)\n"
"3\n"
">>> x.nbytes\n"
"24\n"
">>> y = x.cast('B')\n"
">>> y.format\n"
"'B'\n"
">>> y.itemsize\n"
"1\n"
">>> len(y)\n"
"24\n"
">>> y.nbytes\n"
"24"
msgstr ""

#: ../../../library/stdtypes.rst:2617
msgid "Cast 1D/unsigned bytes to 1D/char::"
msgstr ""

#: ../../../library/stdtypes.rst:2619
msgid ""
">>> b = bytearray(b'zyz')\n"
">>> x = memoryview(b)\n"
">>> x[0] = b'a'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"ValueError: memoryview: invalid value for format \"B\"\n"
">>> y = x.cast('c')\n"
">>> y[0] = b'a'\n"
">>> b\n"
"bytearray(b'ayz')"
msgstr ""

#: ../../../library/stdtypes.rst:2630
msgid "Cast 1D/bytes to 3D/ints to 1D/signed char::"
msgstr ""

#: ../../../library/stdtypes.rst:2632
msgid ""
">>> import struct\n"
">>> buf = struct.pack(\"i\"*12, *list(range(12)))\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('i', shape=[2,2,3])\n"
">>> y.tolist()\n"
"[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\n"
">>> y.format\n"
"'i'\n"
">>> y.itemsize\n"
"4\n"
">>> len(y)\n"
"2\n"
">>> y.nbytes\n"
"48\n"
">>> z = y.cast('b')\n"
">>> z.format\n"
"'b'\n"
">>> z.itemsize\n"
"1\n"
">>> len(z)\n"
"48\n"
">>> z.nbytes\n"
"48"
msgstr ""

#: ../../../library/stdtypes.rst:2656
msgid "Cast 1D/unsigned char to 2D/unsigned long::"
msgstr ""

#: ../../../library/stdtypes.rst:2658
msgid ""
">>> buf = struct.pack(\"L\"*6, *list(range(6)))\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('L', shape=[2,3])\n"
">>> len(y)\n"
"2\n"
">>> y.nbytes\n"
"48\n"
">>> y.tolist()\n"
"[[0, 1, 2], [3, 4, 5]]"
msgstr ""

#: ../../../library/stdtypes.rst:2670
msgid "There are also several readonly attributes available:"
msgstr ""

#: ../../../library/stdtypes.rst:2674
msgid "The underlying object of the memoryview::"
msgstr ""

#: ../../../library/stdtypes.rst:2676
msgid ""
">>> b  = bytearray(b'xyz')\n"
">>> m = memoryview(b)\n"
">>> m.obj is b\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:2685
msgid ""
"``nbytes == product(shape) * itemsize == len(m.tobytes())``. This is the "
"amount of space in bytes that the array would use in a contiguous "
"representation. It is not necessarily equal to len(m)::"
msgstr ""

#: ../../../library/stdtypes.rst:2689
msgid ""
">>> import array\n"
">>> a = array.array('i', [1,2,3,4,5])\n"
">>> m = memoryview(a)\n"
">>> len(m)\n"
"5\n"
">>> m.nbytes\n"
"20\n"
">>> y = m[::2]\n"
">>> len(y)\n"
"3\n"
">>> y.nbytes\n"
"12\n"
">>> len(y.tobytes())\n"
"12"
msgstr ""

#: ../../../library/stdtypes.rst:2704
msgid "Multi-dimensional arrays::"
msgstr ""

#: ../../../library/stdtypes.rst:2706
msgid ""
">>> import struct\n"
">>> buf = struct.pack(\"d\"*12, *[1.5*x for x in range(12)])\n"
">>> x = memoryview(buf)\n"
">>> y = x.cast('d', shape=[3,4])\n"
">>> y.tolist()\n"
"[[0.0, 1.5, 3.0, 4.5], [6.0, 7.5, 9.0, 10.5], [12.0, 13.5, 15.0, 16.5]]\n"
">>> len(y)\n"
"3\n"
">>> y.nbytes\n"
"96"
msgstr ""

#: ../../../library/stdtypes.rst:2721
msgid "A bool indicating whether the memory is read only."
msgstr ""

#: ../../../library/stdtypes.rst:2725
msgid ""
"A string containing the format (in :mod:`struct` module style) for each "
"element in the view. A memoryview can be created from exporters with "
"arbitrary format strings, but some methods (e.g. :meth:`tolist`) are "
"restricted to native single element formats."
msgstr ""

#: ../../../library/stdtypes.rst:2730
msgid ""
"format ``'B'`` is now handled according to the struct module syntax. This "
"means that ``memoryview(b'abc')[0] == b'abc'[0] == 97``."
msgstr ""

#: ../../../library/stdtypes.rst:2736
msgid "The size in bytes of each element of the memoryview::"
msgstr ""

#: ../../../library/stdtypes.rst:2738
msgid ""
">>> import array, struct\n"
">>> m = memoryview(array.array('H', [32000, 32001, 32002]))\n"
">>> m.itemsize\n"
"2\n"
">>> m[0]\n"
"32000\n"
">>> struct.calcsize('H') == m.itemsize\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:2749
msgid ""
"An integer indicating how many dimensions of a multi-dimensional array the "
"memory represents."
msgstr ""

#: ../../../library/stdtypes.rst:2754
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the shape of the "
"memory as an N-dimensional array."
msgstr ""

#: ../../../library/stdtypes.rst:2757 ../../../library/stdtypes.rst:2765
msgid "An empty tuple instead of None when ndim = 0."
msgstr ""

#: ../../../library/stdtypes.rst:2762
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the size in bytes to "
"access each element for each dimension of the array."
msgstr ""

#: ../../../library/stdtypes.rst:2770
msgid "Used internally for PIL-style arrays. The value is informational only."
msgstr ""

#: ../../../library/stdtypes.rst:2774
msgid "A bool indicating whether the memory is C-contiguous."
msgstr ""

#: ../../../library/stdtypes.rst:2780
msgid "A bool indicating whether the memory is Fortran contiguous."
msgstr ""

#: ../../../library/stdtypes.rst:2786
msgid "A bool indicating whether the memory is contiguous."
msgstr ""

#: ../../../library/stdtypes.rst:2794
msgid "Set Types --- :class:`set`, :class:`frozenset`"
msgstr ""

#: ../../../library/stdtypes.rst:2798
msgid ""
"A :dfn:`set` object is an unordered collection of distinct :term:`hashable` "
"objects. Common uses include membership testing, removing duplicates from a "
"sequence, and computing mathematical operations such as intersection, union, "
"difference, and symmetric difference. (For other containers see the built-"
"in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the :mod:"
"`collections` module.)"
msgstr ""

#: ../../../library/stdtypes.rst:2805
msgid ""
"Like other collections, sets support ``x in set``, ``len(set)``, and ``for x "
"in set``.  Being an unordered collection, sets do not record element "
"position or order of insertion.  Accordingly, sets do not support indexing, "
"slicing, or other sequence-like behavior."
msgstr ""

#: ../../../library/stdtypes.rst:2810
msgid ""
"There are currently two built-in set types, :class:`set` and :class:"
"`frozenset`. The :class:`set` type is mutable --- the contents can be "
"changed using methods like :meth:`~set.add` and :meth:`~set.remove`.  Since "
"it is mutable, it has no hash value and cannot be used as either a "
"dictionary key or as an element of another set.  The :class:`frozenset` type "
"is immutable and :term:`hashable` --- its contents cannot be altered after "
"it is created; it can therefore be used as a dictionary key or as an element "
"of another set."
msgstr ""

#: ../../../library/stdtypes.rst:2818
msgid ""
"Non-empty sets (not frozensets) can be created by placing a comma-separated "
"list of elements within braces, for example: ``{'jack', 'sjoerd'}``, in "
"addition to the :class:`set` constructor."
msgstr ""

#: ../../../library/stdtypes.rst:2822
msgid "The constructors for both classes work the same:"
msgstr ""

#: ../../../library/stdtypes.rst:2827
msgid ""
"Return a new set or frozenset object whose elements are taken from "
"*iterable*.  The elements of a set must be :term:`hashable`.  To represent "
"sets of sets, the inner sets must be :class:`frozenset` objects.  If "
"*iterable* is not specified, a new empty set is returned."
msgstr ""

#: ../../../library/stdtypes.rst:2833
msgid ""
"Instances of :class:`set` and :class:`frozenset` provide the following "
"operations:"
msgstr ""

#: ../../../library/stdtypes.rst:2838
msgid "Return the cardinality of set *s*."
msgstr ""

#: ../../../library/stdtypes.rst:2842
msgid "Test *x* for membership in *s*."
msgstr ""

#: ../../../library/stdtypes.rst:2846
msgid "Test *x* for non-membership in *s*."
msgstr ""

#: ../../../library/stdtypes.rst:2850
msgid ""
"Return ``True`` if the set has no elements in common with *other*.  Sets are "
"disjoint if and only if their intersection is the empty set."
msgstr ""

#: ../../../library/stdtypes.rst:2856
msgid "Test whether every element in the set is in *other*."
msgstr ""

#: ../../../library/stdtypes.rst:2860
msgid ""
"Test whether the set is a proper subset of *other*, that is, ``set <= other "
"and set != other``."
msgstr ""

#: ../../../library/stdtypes.rst:2866
msgid "Test whether every element in *other* is in the set."
msgstr ""

#: ../../../library/stdtypes.rst:2870
msgid ""
"Test whether the set is a proper superset of *other*, that is, ``set >= "
"other and set != other``."
msgstr ""

#: ../../../library/stdtypes.rst:2876
msgid "Return a new set with elements from the set and all others."
msgstr ""

#: ../../../library/stdtypes.rst:2881
msgid "Return a new set with elements common to the set and all others."
msgstr ""

#: ../../../library/stdtypes.rst:2886
msgid "Return a new set with elements in the set that are not in the others."
msgstr ""

#: ../../../library/stdtypes.rst:2891
msgid ""
"Return a new set with elements in either the set or *other* but not both."
msgstr ""

#: ../../../library/stdtypes.rst:2895
msgid "Return a new set with a shallow copy of *s*."
msgstr ""

#: ../../../library/stdtypes.rst:2898
msgid ""
"Note, the non-operator versions of :meth:`union`, :meth:`intersection`, :"
"meth:`difference`, and :meth:`symmetric_difference`, :meth:`issubset`, and :"
"meth:`issuperset` methods will accept any iterable as an argument.  In "
"contrast, their operator based counterparts require their arguments to be "
"sets.  This precludes error-prone constructions like ``set('abc') & 'cbs'`` "
"in favor of the more readable ``set('abc').intersection('cbs')``."
msgstr ""

#: ../../../library/stdtypes.rst:2905
msgid ""
"Both :class:`set` and :class:`frozenset` support set to set comparisons. Two "
"sets are equal if and only if every element of each set is contained in the "
"other (each is a subset of the other). A set is less than another set if and "
"only if the first set is a proper subset of the second set (is a subset, but "
"is not equal). A set is greater than another set if and only if the first "
"set is a proper superset of the second set (is a superset, but is not equal)."
msgstr ""

#: ../../../library/stdtypes.rst:2912
msgid ""
"Instances of :class:`set` are compared to instances of :class:`frozenset` "
"based on their members.  For example, ``set('abc') == frozenset('abc')`` "
"returns ``True`` and so does ``set('abc') in set([frozenset('abc')])``."
msgstr ""

#: ../../../library/stdtypes.rst:2916
msgid ""
"The subset and equality comparisons do not generalize to a total ordering "
"function.  For example, any two nonempty disjoint sets are not equal and are "
"not subsets of each other, so *all* of the following return ``False``: "
"``a<b``, ``a==b``, or ``a>b``."
msgstr ""

#: ../../../library/stdtypes.rst:2921
msgid ""
"Since sets only define partial ordering (subset relationships), the output "
"of the :meth:`list.sort` method is undefined for lists of sets."
msgstr ""

#: ../../../library/stdtypes.rst:2924
msgid "Set elements, like dictionary keys, must be :term:`hashable`."
msgstr ""

#: ../../../library/stdtypes.rst:2926
msgid ""
"Binary operations that mix :class:`set` instances with :class:`frozenset` "
"return the type of the first operand.  For example: ``frozenset('ab') | "
"set('bc')`` returns an instance of :class:`frozenset`."
msgstr ""

#: ../../../library/stdtypes.rst:2930
msgid ""
"The following table lists operations available for :class:`set` that do not "
"apply to immutable instances of :class:`frozenset`:"
msgstr ""

#: ../../../library/stdtypes.rst:2936
msgid "Update the set, adding elements from all others."
msgstr ""

#: ../../../library/stdtypes.rst:2941
msgid "Update the set, keeping only elements found in it and all others."
msgstr ""

#: ../../../library/stdtypes.rst:2946
msgid "Update the set, removing elements found in others."
msgstr ""

#: ../../../library/stdtypes.rst:2951
msgid ""
"Update the set, keeping only elements found in either set, but not in both."
msgstr ""

#: ../../../library/stdtypes.rst:2955
msgid "Add element *elem* to the set."
msgstr ""

#: ../../../library/stdtypes.rst:2959
msgid ""
"Remove element *elem* from the set.  Raises :exc:`KeyError` if *elem* is not "
"contained in the set."
msgstr ""

#: ../../../library/stdtypes.rst:2964
msgid "Remove element *elem* from the set if it is present."
msgstr ""

#: ../../../library/stdtypes.rst:2968
msgid ""
"Remove and return an arbitrary element from the set.  Raises :exc:`KeyError` "
"if the set is empty."
msgstr ""

#: ../../../library/stdtypes.rst:2973
msgid "Remove all elements from the set."
msgstr ""

#: ../../../library/stdtypes.rst:2976
msgid ""
"Note, the non-operator versions of the :meth:`update`, :meth:"
"`intersection_update`, :meth:`difference_update`, and :meth:"
"`symmetric_difference_update` methods will accept any iterable as an "
"argument."
msgstr ""

#: ../../../library/stdtypes.rst:2981
msgid ""
"Note, the *elem* argument to the :meth:`__contains__`, :meth:`remove`, and :"
"meth:`discard` methods may be a set.  To support searching for an equivalent "
"frozenset, the *elem* set is temporarily mutated during the search and then "
"restored.  During the search, the *elem* set should not be read or mutated "
"since it does not have a meaningful value."
msgstr ""

#: ../../../library/stdtypes.rst:2991
msgid "Mapping Types --- :class:`dict`"
msgstr ""

#: ../../../library/stdtypes.rst:3001
msgid ""
"A :term:`mapping` object maps :term:`hashable` values to arbitrary objects. "
"Mappings are mutable objects.  There is currently only one standard mapping "
"type, the :dfn:`dictionary`.  (For other containers see the built-in :class:"
"`list`, :class:`set`, and :class:`tuple` classes, and the :mod:`collections` "
"module.)"
msgstr ""

#: ../../../library/stdtypes.rst:3007
msgid ""
"A dictionary's keys are *almost* arbitrary values.  Values that are not :"
"term:`hashable`, that is, values containing lists, dictionaries or other "
"mutable types (that are compared by value rather than by object identity) "
"may not be used as keys.  Numeric types used for keys obey the normal rules "
"for numeric comparison: if two numbers compare equal (such as ``1`` and "
"``1.0``) then they can be used interchangeably to index the same dictionary "
"entry.  (Note however, that since computers store floating-point numbers as "
"approximations it is usually unwise to use them as dictionary keys.)"
msgstr ""

#: ../../../library/stdtypes.rst:3016
msgid ""
"Dictionaries can be created by placing a comma-separated list of ``key: "
"value`` pairs within braces, for example: ``{'jack': 4098, 'sjoerd': 4127}`` "
"or ``{4098: 'jack', 4127: 'sjoerd'}``, or by the :class:`dict` constructor."
msgstr ""

#: ../../../library/stdtypes.rst:3024
msgid ""
"Return a new dictionary initialized from an optional positional argument and "
"a possibly empty set of keyword arguments."
msgstr ""

#: ../../../library/stdtypes.rst:3027
msgid ""
"If no positional argument is given, an empty dictionary is created. If a "
"positional argument is given and it is a mapping object, a dictionary is "
"created with the same key-value pairs as the mapping object.  Otherwise, the "
"positional argument must be an :term:`iterator` object.  Each item in the "
"iterable must itself be an iterator with exactly two objects.  The first "
"object of each item becomes a key in the new dictionary, and the second "
"object the corresponding value.  If a key occurs more than once, the last "
"value for that key becomes the corresponding value in the new dictionary."
msgstr ""

#: ../../../library/stdtypes.rst:3037
msgid ""
"If keyword arguments are given, the keyword arguments and their values are "
"added to the dictionary created from the positional argument.  If a key "
"being added is already present, the value from the keyword argument replaces "
"the value from the positional argument."
msgstr ""

#: ../../../library/stdtypes.rst:3042
msgid ""
"To illustrate, the following examples all return a dictionary equal to "
"``{\"one\": 1, \"two\": 2, \"three\": 3}``::"
msgstr ""

#: ../../../library/stdtypes.rst:3045
msgid ""
">>> a = dict(one=1, two=2, three=3)\n"
">>> b = {'one': 1, 'two': 2, 'three': 3}\n"
">>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n"
">>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n"
">>> e = dict({'three': 3, 'one': 1, 'two': 2})\n"
">>> a == b == c == d == e\n"
"True"
msgstr ""

#: ../../../library/stdtypes.rst:3053
msgid ""
"Providing keyword arguments as in the first example only works for keys that "
"are valid Python identifiers.  Otherwise, any valid keys can be used."
msgstr ""

#: ../../../library/stdtypes.rst:3057
msgid ""
"These are the operations that dictionaries support (and therefore, custom "
"mapping types should support too):"
msgstr ""

#: ../../../library/stdtypes.rst:3062
msgid "Return the number of items in the dictionary *d*."
msgstr ""

#: ../../../library/stdtypes.rst:3066
msgid ""
"Return the item of *d* with key *key*.  Raises a :exc:`KeyError` if *key* is "
"not in the map."
msgstr ""

#: ../../../library/stdtypes.rst:3069
msgid ""
"If a subclass of dict defines a method :meth:`__missing__`, if the key *key* "
"is not present, the ``d[key]`` operation calls that method with the key "
"*key* as argument.  The ``d[key]`` operation then returns or raises whatever "
"is returned or raised by the ``__missing__(key)`` call if the key is not "
"present. No other operations or methods invoke :meth:`__missing__`. If :meth:"
"`__missing__` is not defined, :exc:`KeyError` is raised. :meth:`__missing__` "
"must be a method; it cannot be an instance variable::"
msgstr ""

#: ../../../library/stdtypes.rst:3077
msgid ""
">>> class Counter(dict):\n"
"...     def __missing__(self, key):\n"
"...         return 0\n"
">>> c = Counter()\n"
">>> c['red']\n"
"0\n"
">>> c['red'] += 1\n"
">>> c['red']\n"
"1"
msgstr ""

#: ../../../library/stdtypes.rst:3087
msgid ""
"See :class:`collections.Counter` for a complete implementation including "
"other methods helpful for accumulating and managing tallies."
msgstr ""

#: ../../../library/stdtypes.rst:3092
msgid "Set ``d[key]`` to *value*."
msgstr ""

#: ../../../library/stdtypes.rst:3096
msgid ""
"Remove ``d[key]`` from *d*.  Raises a :exc:`KeyError` if *key* is not in the "
"map."
msgstr ""

#: ../../../library/stdtypes.rst:3101
msgid "Return ``True`` if *d* has a key *key*, else ``False``."
msgstr ""

#: ../../../library/stdtypes.rst:3105
msgid "Equivalent to ``not key in d``."
msgstr ""

#: ../../../library/stdtypes.rst:3109
msgid ""
"Return an iterator over the keys of the dictionary.  This is a shortcut for "
"``iter(d.keys())``."
msgstr ""

#: ../../../library/stdtypes.rst:3114
msgid "Remove all items from the dictionary."
msgstr ""

#: ../../../library/stdtypes.rst:3118
msgid "Return a shallow copy of the dictionary."
msgstr ""

#: ../../../library/stdtypes.rst:3122
msgid "Create a new dictionary with keys from *seq* and values set to *value*."
msgstr ""

#: ../../../library/stdtypes.rst:3124
msgid ""
":meth:`fromkeys` is a class method that returns a new dictionary. *value* "
"defaults to ``None``."
msgstr ""

#: ../../../library/stdtypes.rst:3129
msgid ""
"Return the value for *key* if *key* is in the dictionary, else *default*. If "
"*default* is not given, it defaults to ``None``, so that this method never "
"raises a :exc:`KeyError`."
msgstr ""

#: ../../../library/stdtypes.rst:3135
msgid ""
"Return a new view of the dictionary's items (``(key, value)`` pairs). See "
"the :ref:`documentation of view objects <dict-views>`."
msgstr ""

#: ../../../library/stdtypes.rst:3140
msgid ""
"Return a new view of the dictionary's keys.  See the :ref:`documentation of "
"view objects <dict-views>`."
msgstr ""

#: ../../../library/stdtypes.rst:3145
msgid ""
"If *key* is in the dictionary, remove it and return its value, else return "
"*default*.  If *default* is not given and *key* is not in the dictionary, a :"
"exc:`KeyError` is raised."
msgstr ""

#: ../../../library/stdtypes.rst:3151
msgid ""
"Remove and return an arbitrary ``(key, value)`` pair from the dictionary."
msgstr ""

#: ../../../library/stdtypes.rst:3153
msgid ""
":meth:`popitem` is useful to destructively iterate over a dictionary, as "
"often used in set algorithms.  If the dictionary is empty, calling :meth:"
"`popitem` raises a :exc:`KeyError`."
msgstr ""

#: ../../../library/stdtypes.rst:3159
msgid ""
"If *key* is in the dictionary, return its value.  If not, insert *key* with "
"a value of *default* and return *default*.  *default* defaults to ``None``."
msgstr ""

#: ../../../library/stdtypes.rst:3165
msgid ""
"Update the dictionary with the key/value pairs from *other*, overwriting "
"existing keys.  Return ``None``."
msgstr ""

#: ../../../library/stdtypes.rst:3168
msgid ""
":meth:`update` accepts either another dictionary object or an iterable of "
"key/value pairs (as tuples or other iterables of length two).  If keyword "
"arguments are specified, the dictionary is then updated with those key/value "
"pairs: ``d.update(red=1, blue=2)``."
msgstr ""

#: ../../../library/stdtypes.rst:3175
msgid ""
"Return a new view of the dictionary's values.  See the :ref:`documentation "
"of view objects <dict-views>`."
msgstr ""

#: ../../../library/stdtypes.rst:3179
msgid ""
":class:`types.MappingProxyType` can be used to create a read-only view of a :"
"class:`dict`."
msgstr ""

#: ../../../library/stdtypes.rst:3186
msgid "Dictionary view objects"
msgstr ""

#: ../../../library/stdtypes.rst:3188
msgid ""
"The objects returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:"
"`dict.items` are *view objects*.  They provide a dynamic view on the "
"dictionary's entries, which means that when the dictionary changes, the view "
"reflects these changes."
msgstr ""

#: ../../../library/stdtypes.rst:3193
msgid ""
"Dictionary views can be iterated over to yield their respective data, and "
"support membership tests:"
msgstr ""

#: ../../../library/stdtypes.rst:3198
msgid "Return the number of entries in the dictionary."
msgstr ""

#: ../../../library/stdtypes.rst:3202
msgid ""
"Return an iterator over the keys, values or items (represented as tuples of "
"``(key, value)``) in the dictionary."
msgstr ""

#: ../../../library/stdtypes.rst:3205
msgid ""
"Keys and values are iterated over in an arbitrary order which is non-random, "
"varies across Python implementations, and depends on the dictionary's "
"history of insertions and deletions. If keys, values and items views are "
"iterated over with no intervening modifications to the dictionary, the order "
"of items will directly correspond.  This allows the creation of ``(value, "
"key)`` pairs using :func:`zip`: ``pairs = zip(d.values(), d.keys())``.  "
"Another way to create the same list is ``pairs = [(v, k) for (k, v) in d."
"items()]``."
msgstr ""

#: ../../../library/stdtypes.rst:3213
msgid ""
"Iterating views while adding or deleting entries in the dictionary may raise "
"a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../../library/stdtypes.rst:3218
msgid ""
"Return ``True`` if *x* is in the underlying dictionary's keys, values or "
"items (in the latter case, *x* should be a ``(key, value)`` tuple)."
msgstr ""

#: ../../../library/stdtypes.rst:3222
msgid ""
"Keys views are set-like since their entries are unique and hashable.  If all "
"values are hashable, so that ``(key, value)`` pairs are unique and hashable, "
"then the items view is also set-like.  (Values views are not treated as set-"
"like since the entries are generally not unique.)  For set-like views, all "
"of the operations defined for the abstract base class :class:`collections."
"abc.Set` are available (for example, ``==``, ``<``, or ``^``)."
msgstr ""

#: ../../../library/stdtypes.rst:3229
msgid "An example of dictionary view usage::"
msgstr ""

#: ../../../library/stdtypes.rst:3231
msgid ""
">>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n"
">>> keys = dishes.keys()\n"
">>> values = dishes.values()\n"
"\n"
">>> # iteration\n"
">>> n = 0\n"
">>> for val in values:\n"
"...     n += val\n"
">>> print(n)\n"
"504\n"
"\n"
">>> # keys and values are iterated over in the same order\n"
">>> list(keys)\n"
"['eggs', 'bacon', 'sausage', 'spam']\n"
">>> list(values)\n"
"[2, 1, 1, 500]\n"
"\n"
">>> # view objects are dynamic and reflect dict changes\n"
">>> del dishes['eggs']\n"
">>> del dishes['sausage']\n"
">>> list(keys)\n"
"['spam', 'bacon']\n"
"\n"
">>> # set operations\n"
">>> keys & {'eggs', 'bacon', 'salad'}\n"
"{'bacon'}\n"
">>> keys ^ {'sausage', 'juice'}\n"
"{'juice', 'sausage', 'bacon', 'spam'}"
msgstr ""

#: ../../../library/stdtypes.rst:3264
msgid "Context Manager Types"
msgstr ""

#: ../../../library/stdtypes.rst:3271
msgid ""
"Python's :keyword:`with` statement supports the concept of a runtime context "
"defined by a context manager.  This is implemented using a pair of methods "
"that allow user-defined classes to define a runtime context that is entered "
"before the statement body is executed and exited when the statement ends:"
msgstr ""

#: ../../../library/stdtypes.rst:3279
msgid ""
"Enter the runtime context and return either this object or another object "
"related to the runtime context. The value returned by this method is bound "
"to the identifier in the :keyword:`as` clause of :keyword:`with` statements "
"using this context manager."
msgstr ""

#: ../../../library/stdtypes.rst:3284
msgid ""
"An example of a context manager that returns itself is a :term:`file "
"object`. File objects return themselves from __enter__() to allow :func:"
"`open` to be used as the context expression in a :keyword:`with` statement."
msgstr ""

#: ../../../library/stdtypes.rst:3288
msgid ""
"An example of a context manager that returns a related object is the one "
"returned by :func:`decimal.localcontext`. These managers set the active "
"decimal context to a copy of the original decimal context and then return "
"the copy. This allows changes to be made to the current decimal context in "
"the body of the :keyword:`with` statement without affecting code outside "
"the :keyword:`with` statement."
msgstr ""

#: ../../../library/stdtypes.rst:3298
msgid ""
"Exit the runtime context and return a Boolean flag indicating if any "
"exception that occurred should be suppressed. If an exception occurred while "
"executing the body of the :keyword:`with` statement, the arguments contain "
"the exception type, value and traceback information. Otherwise, all three "
"arguments are ``None``."
msgstr ""

#: ../../../library/stdtypes.rst:3303
msgid ""
"Returning a true value from this method will cause the :keyword:`with` "
"statement to suppress the exception and continue execution with the "
"statement immediately following the :keyword:`with` statement. Otherwise the "
"exception continues propagating after this method has finished executing. "
"Exceptions that occur during execution of this method will replace any "
"exception that occurred in the body of the :keyword:`with` statement."
msgstr ""

#: ../../../library/stdtypes.rst:3310
msgid ""
"The exception passed in should never be reraised explicitly - instead, this "
"method should return a false value to indicate that the method completed "
"successfully and does not want to suppress the raised exception. This allows "
"context management code (such as ``contextlib.nested``) to easily detect "
"whether or not an :meth:`__exit__` method has actually failed."
msgstr ""

#: ../../../library/stdtypes.rst:3316
msgid ""
"Python defines several context managers to support easy thread "
"synchronisation, prompt closure of files or other objects, and simpler "
"manipulation of the active decimal arithmetic context. The specific types "
"are not treated specially beyond their implementation of the context "
"management protocol. See the :mod:`contextlib` module for some examples."
msgstr ""

#: ../../../library/stdtypes.rst:3322
msgid ""
"Python's :term:`generator`\\s and the :class:`contextlib.contextmanager` "
"decorator provide a convenient way to implement these protocols.  If a "
"generator function is decorated with the :class:`contextlib.contextmanager` "
"decorator, it will return a context manager implementing the necessary :meth:"
"`__enter__` and :meth:`__exit__` methods, rather than the iterator produced "
"by an undecorated generator function."
msgstr ""

#: ../../../library/stdtypes.rst:3329
msgid ""
"Note that there is no specific slot for any of these methods in the type "
"structure for Python objects in the Python/C API. Extension types wanting to "
"define these methods must provide them as a normal Python accessible method. "
"Compared to the overhead of setting up the runtime context, the overhead of "
"a single class dictionary lookup is negligible."
msgstr ""

#: ../../../library/stdtypes.rst:3339
msgid "Other Built-in Types"
msgstr ""

#: ../../../library/stdtypes.rst:3341
msgid ""
"The interpreter supports several other kinds of objects. Most of these "
"support only one or two operations."
msgstr ""

#: ../../../library/stdtypes.rst:3348
msgid "Modules"
msgstr ""

#: ../../../library/stdtypes.rst:3350
msgid ""
"The only special operation on a module is attribute access: ``m.name``, "
"where *m* is a module and *name* accesses a name defined in *m*'s symbol "
"table. Module attributes can be assigned to.  (Note that the :keyword:"
"`import` statement is not, strictly speaking, an operation on a module "
"object; ``import foo`` does not require a module object named *foo* to "
"exist, rather it requires an (external) *definition* for a module named "
"*foo* somewhere.)"
msgstr ""

#: ../../../library/stdtypes.rst:3357
msgid ""
"A special attribute of every module is :attr:`~object.__dict__`. This is the "
"dictionary containing the module's symbol table. Modifying this dictionary "
"will actually change the module's symbol table, but direct assignment to "
"the :attr:`__dict__` attribute is not possible (you can write ``m."
"__dict__['a'] = 1``, which defines ``m.a`` to be ``1``, but you can't write "
"``m.__dict__ = {}``).  Modifying :attr:`__dict__` directly is not "
"recommended."
msgstr ""

#: ../../../library/stdtypes.rst:3364
msgid ""
"Modules built into the interpreter are written like this: ``<module "
"'sys' (built-in)>``.  If loaded from a file, they are written as ``<module "
"'os' from '/usr/local/lib/pythonX.Y/os.pyc'>``."
msgstr ""

#: ../../../library/stdtypes.rst:3372
msgid "Classes and Class Instances"
msgstr ""

#: ../../../library/stdtypes.rst:3374
msgid "See :ref:`objects` and :ref:`class` for these."
msgstr ""

#: ../../../library/stdtypes.rst:3380
msgid "Functions"
msgstr ""

#: ../../../library/stdtypes.rst:3382
msgid ""
"Function objects are created by function definitions.  The only operation on "
"a function object is to call it: ``func(argument-list)``."
msgstr ""

#: ../../../library/stdtypes.rst:3385
msgid ""
"There are really two flavors of function objects: built-in functions and "
"user-defined functions.  Both support the same operation (to call the "
"function), but the implementation is different, hence the different object "
"types."
msgstr ""

#: ../../../library/stdtypes.rst:3389
msgid "See :ref:`function` for more information."
msgstr ""

#: ../../../library/stdtypes.rst:3395
msgid "Methods"
msgstr ""

#: ../../../library/stdtypes.rst:3399
msgid ""
"Methods are functions that are called using the attribute notation. There "
"are two flavors: built-in methods (such as :meth:`append` on lists) and "
"class instance methods.  Built-in methods are described with the types that "
"support them."
msgstr ""

#: ../../../library/stdtypes.rst:3404
msgid ""
"If you access a method (a function defined in a class namespace) through an "
"instance, you get a special object: a :dfn:`bound method` (also called :dfn:"
"`instance method`) object. When called, it will add the ``self`` argument to "
"the argument list.  Bound methods have two special read-only attributes: ``m."
"__self__`` is the object on which the method operates, and ``m.__func__`` is "
"the function implementing the method.  Calling ``m(arg-1, arg-2, ..., arg-"
"n)`` is completely equivalent to calling ``m.__func__(m.__self__, arg-1, "
"arg-2, ..., arg-n)``."
msgstr ""

#: ../../../library/stdtypes.rst:3413
msgid ""
"Like function objects, bound method objects support getting arbitrary "
"attributes.  However, since method attributes are actually stored on the "
"underlying function object (``meth.__func__``), setting method attributes on "
"bound methods is disallowed.  Attempting to set an attribute on a method "
"results in an :exc:`AttributeError` being raised.  In order to set a method "
"attribute, you need to explicitly set it on the underlying function object::"
msgstr ""

#: ../../../library/stdtypes.rst:3420
msgid ""
">>> class C:\n"
"...     def method(self):\n"
"...         pass\n"
"...\n"
">>> c = C()\n"
">>> c.method.whoami = 'my name is method'  # can't set on the method\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: 'method' object has no attribute 'whoami'\n"
">>> c.method.__func__.whoami = 'my name is method'\n"
">>> c.method.whoami\n"
"'my name is method'"
msgstr ""

#: ../../../library/stdtypes.rst:3433 ../../../library/stdtypes.rst:3461
msgid "See :ref:`types` for more information."
msgstr ""

#: ../../../library/stdtypes.rst:3439
msgid "Code Objects"
msgstr ""

#: ../../../library/stdtypes.rst:3447
msgid ""
"Code objects are used by the implementation to represent \"pseudo-compiled\" "
"executable Python code such as a function body. They differ from function "
"objects because they don't contain a reference to their global execution "
"environment.  Code objects are returned by the built-in :func:`compile` "
"function and can be extracted from function objects through their :attr:"
"`__code__` attribute. See also the :mod:`code` module."
msgstr ""

#: ../../../library/stdtypes.rst:3458
msgid ""
"A code object can be executed or evaluated by passing it (instead of a "
"source string) to the :func:`exec` or :func:`eval`  built-in functions."
msgstr ""

#: ../../../library/stdtypes.rst:3467
msgid "Type Objects"
msgstr ""

#: ../../../library/stdtypes.rst:3473
msgid ""
"Type objects represent the various object types.  An object's type is "
"accessed by the built-in function :func:`type`.  There are no special "
"operations on types.  The standard module :mod:`types` defines names for all "
"standard built-in types."
msgstr ""

#: ../../../library/stdtypes.rst:3478
msgid "Types are written like this: ``<class 'int'>``."
msgstr ""

#: ../../../library/stdtypes.rst:3484
msgid "The Null Object"
msgstr ""

#: ../../../library/stdtypes.rst:3486
msgid ""
"This object is returned by functions that don't explicitly return a value.  "
"It supports no special operations.  There is exactly one null object, named "
"``None`` (a built-in name).  ``type(None)()`` produces the same singleton."
msgstr ""

#: ../../../library/stdtypes.rst:3490
msgid "It is written as ``None``."
msgstr ""

#: ../../../library/stdtypes.rst:3496
msgid "The Ellipsis Object"
msgstr ""

#: ../../../library/stdtypes.rst:3498
msgid ""
"This object is commonly used by slicing (see :ref:`slicings`).  It supports "
"no special operations.  There is exactly one ellipsis object, named :const:"
"`Ellipsis` (a built-in name).  ``type(Ellipsis)()`` produces the :const:"
"`Ellipsis` singleton."
msgstr ""

#: ../../../library/stdtypes.rst:3503
msgid "It is written as ``Ellipsis`` or ``...``."
msgstr ""

#: ../../../library/stdtypes.rst:3509
msgid "The NotImplemented Object"
msgstr ""

#: ../../../library/stdtypes.rst:3511
msgid ""
"This object is returned from comparisons and binary operations when they are "
"asked to operate on types they don't support. See :ref:`comparisons` for "
"more information.  There is exactly one ``NotImplemented`` object. "
"``type(NotImplemented)()`` produces the singleton instance."
msgstr ""

#: ../../../library/stdtypes.rst:3516
msgid "It is written as ``NotImplemented``."
msgstr ""

#: ../../../library/stdtypes.rst:3522
msgid "Boolean Values"
msgstr ""

#: ../../../library/stdtypes.rst:3524
msgid ""
"Boolean values are the two constant objects ``False`` and ``True``.  They "
"are used to represent truth values (although other values can also be "
"considered false or true).  In numeric contexts (for example when used as "
"the argument to an arithmetic operator), they behave like the integers 0 and "
"1, respectively. The built-in function :func:`bool` can be used to convert "
"any value to a Boolean, if the value can be interpreted as a truth value "
"(see section :ref:`truth` above)."
msgstr ""

#: ../../../library/stdtypes.rst:3537
msgid "They are written as ``False`` and ``True``, respectively."
msgstr ""

#: ../../../library/stdtypes.rst:3543
msgid "Internal Objects"
msgstr ""

#: ../../../library/stdtypes.rst:3545
msgid ""
"See :ref:`types` for this information.  It describes stack frame objects, "
"traceback objects, and slice objects."
msgstr ""

#: ../../../library/stdtypes.rst:3552
msgid "Special Attributes"
msgstr ""

#: ../../../library/stdtypes.rst:3554
msgid ""
"The implementation adds a few special read-only attributes to several object "
"types, where they are relevant.  Some of these are not reported by the :func:"
"`dir` built-in function."
msgstr ""

#: ../../../library/stdtypes.rst:3561
msgid ""
"A dictionary or other mapping object used to store an object's (writable) "
"attributes."
msgstr ""

#: ../../../library/stdtypes.rst:3567
msgid "The class to which a class instance belongs."
msgstr ""

#: ../../../library/stdtypes.rst:3572
msgid "The tuple of base classes of a class object."
msgstr ""

#: ../../../library/stdtypes.rst:3577
msgid "The name of the class or type."
msgstr ""

#: ../../../library/stdtypes.rst:3582
msgid "The :term:`qualified name` of the class or type."
msgstr ""

#: ../../../library/stdtypes.rst:3589
msgid ""
"This attribute is a tuple of classes that are considered when looking for "
"base classes during method resolution."
msgstr ""

#: ../../../library/stdtypes.rst:3595
msgid ""
"This method can be overridden by a metaclass to customize the method "
"resolution order for its instances.  It is called at class instantiation, "
"and its result is stored in :attr:`~class.__mro__`."
msgstr ""

#: ../../../library/stdtypes.rst:3602
msgid ""
"Each class keeps a list of weak references to its immediate subclasses.  "
"This method returns a list of all those references still alive. Example::"
msgstr ""

#: ../../../library/stdtypes.rst:3606
msgid ""
">>> int.__subclasses__()\n"
"[<class 'bool'>]"
msgstr ""

#: ../../../library/stdtypes.rst:3611
msgid "Footnotes"
msgstr ""

#: ../../../library/stdtypes.rst:3612
msgid ""
"Additional information on these special methods may be found in the Python "
"Reference Manual (:ref:`customization`)."
msgstr ""

#: ../../../library/stdtypes.rst:3615
msgid ""
"As a consequence, the list ``[1, 2]`` is considered equal to ``[1.0, 2.0]``, "
"and similarly for tuples."
msgstr ""

#: ../../../library/stdtypes.rst:3618
msgid "They must have since the parser can't tell the type of the operands."
msgstr ""

#: ../../../library/stdtypes.rst:3620
msgid ""
"Cased characters are those with general category property being one of "
"\"Lu\" (Letter, uppercase), \"Ll\" (Letter, lowercase), or \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../../library/stdtypes.rst:3623
msgid ""
"To format only a tuple you should therefore provide a singleton tuple whose "
"only element is the tuple to be formatted."
msgstr ""

#: ../../../library/stdtypes.rst:13
msgid "built-in"
msgstr ""

#: ../../../library/stdtypes.rst:13 ../../../library/stdtypes.rst:316
#: ../../../library/stdtypes.rst:389 ../../../library/stdtypes.rst:832
#: ../../../library/stdtypes.rst:984 ../../../library/stdtypes.rst:1006
#: ../../../library/stdtypes.rst:1021 ../../../library/stdtypes.rst:2993
#: ../../../library/stdtypes.rst:3469
msgid "types"
msgstr ""

#: ../../../library/stdtypes.rst:34
msgid "if"
msgstr ""

#: ../../../library/stdtypes.rst:34
msgid "while"
msgstr ""

#: ../../../library/stdtypes.rst:34
msgid "truth"
msgstr ""

#: ../../../library/stdtypes.rst:34
msgid "value"
msgstr ""

#: ../../../library/stdtypes.rst:34 ../../../library/stdtypes.rst:85
#: ../../../library/stdtypes.rst:213 ../../../library/stdtypes.rst:3532
msgid "Boolean"
msgstr ""

#: ../../../library/stdtypes.rst:34 ../../../library/stdtypes.rst:85
#: ../../../library/stdtypes.rst:389
msgid "operations"
msgstr ""

#: ../../../library/stdtypes.rst:34
msgid "false"
msgstr ""

#: ../../../library/stdtypes.rst:45
msgid "None (Built-in object)"
msgstr ""

#: ../../../library/stdtypes.rst:49
msgid "False (Built-in object)"
msgstr ""

#: ../../../library/stdtypes.rst:63
msgid "true"
msgstr ""

#: ../../../library/stdtypes.rst:68 ../../../library/stdtypes.rst:102
msgid "or"
msgstr ""

#: ../../../library/stdtypes.rst:68 ../../../library/stdtypes.rst:102
msgid "and"
msgstr ""

#: ../../../library/stdtypes.rst:68 ../../../library/stdtypes.rst:3532
msgid "False"
msgstr ""

#: ../../../library/stdtypes.rst:68 ../../../library/stdtypes.rst:3532
msgid "True"
msgstr ""

#: ../../../library/stdtypes.rst:102
msgid "not"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "chaining"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "comparisons"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "comparison"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "=="
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "<"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "<="
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid ">"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid ">="
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "!="
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "is"
msgstr ""

#: ../../../library/stdtypes.rst:127
msgid "is not"
msgstr ""

#: ../../../library/stdtypes.rst:167 ../../../library/stdtypes.rst:213
#: ../../../library/stdtypes.rst:234 ../../../library/stdtypes.rst:316
#: ../../../library/stdtypes.rst:333
msgid "numeric"
msgstr ""

#: ../../../library/stdtypes.rst:167
msgid "objects"
msgstr ""

#: ../../../library/stdtypes.rst:167
msgid "comparing"
msgstr ""

#: ../../../library/stdtypes.rst:179
msgid "__eq__() (instance method)"
msgstr ""

#: ../../../library/stdtypes.rst:179
msgid "__ne__() (instance method)"
msgstr ""

#: ../../../library/stdtypes.rst:179
msgid "__lt__() (instance method)"
msgstr ""

#: ../../../library/stdtypes.rst:179
msgid "__le__() (instance method)"
msgstr ""

#: ../../../library/stdtypes.rst:179
msgid "__gt__() (instance method)"
msgstr ""

#: ../../../library/stdtypes.rst:179
msgid "__ge__() (instance method)"
msgstr ""

#: ../../../library/stdtypes.rst:200 ../../../library/stdtypes.rst:832
msgid "in"
msgstr ""

#: ../../../library/stdtypes.rst:200 ../../../library/stdtypes.rst:832
msgid "not in"
msgstr ""

#: ../../../library/stdtypes.rst:213 ../../../library/stdtypes.rst:234
#: ../../../library/stdtypes.rst:389
msgid "integer"
msgstr ""

#: ../../../library/stdtypes.rst:213 ../../../library/stdtypes.rst:234
msgid "floating point"
msgstr ""

#: ../../../library/stdtypes.rst:213 ../../../library/stdtypes.rst:234
msgid "complex number"
msgstr ""

#: ../../../library/stdtypes.rst:213 ../../../library/stdtypes.rst:333
msgid "C"
msgstr ""

#: ../../../library/stdtypes.rst:213 ../../../library/stdtypes.rst:333
msgid "language"
msgstr ""

#: ../../../library/stdtypes.rst:234
msgid "literals"
msgstr ""

#: ../../../library/stdtypes.rst:234
msgid "hexadecimal"
msgstr ""

#: ../../../library/stdtypes.rst:234
msgid "octal"
msgstr ""

#: ../../../library/stdtypes.rst:234
msgid "binary"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "arithmetic"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "int"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "float"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "complex"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "+"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "-"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "*"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "/"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "//"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "%"
msgstr ""

#: ../../../library/stdtypes.rst:251
msgid "**"
msgstr ""

#: ../../../library/stdtypes.rst:316 ../../../library/stdtypes.rst:389
#: ../../../library/stdtypes.rst:832 ../../../library/stdtypes.rst:1021
#: ../../../library/stdtypes.rst:2993
msgid "operations on"
msgstr ""

#: ../../../library/stdtypes.rst:316
msgid "conjugate() (complex number method)"
msgstr ""

#: ../../../library/stdtypes.rst:333
msgid "math"
msgstr ""

#: ../../../library/stdtypes.rst:333
msgid "floor() (in module math)"
msgstr ""

#: ../../../library/stdtypes.rst:333
msgid "ceil() (in module math)"
msgstr ""

#: ../../../library/stdtypes.rst:333
msgid "trunc() (in module math)"
msgstr ""

#: ../../../library/stdtypes.rst:333
msgid "conversions"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid "bitwise"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid "shifting"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid "masking"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid "^"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid "&"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid "<<"
msgstr ""

#: ../../../library/stdtypes.rst:389
msgid ">>"
msgstr ""

#: ../../../library/stdtypes.rst:730
msgid "iterator protocol"
msgstr ""

#: ../../../library/stdtypes.rst:730 ../../../library/stdtypes.rst:3266
msgid "protocol"
msgstr ""

#: ../../../library/stdtypes.rst:730
msgid "iterator"
msgstr ""

#: ../../../library/stdtypes.rst:730 ../../../library/stdtypes.rst:816
#: ../../../library/stdtypes.rst:832 ../../../library/stdtypes.rst:984
#: ../../../library/stdtypes.rst:1006 ../../../library/stdtypes.rst:1021
msgid "sequence"
msgstr ""

#: ../../../library/stdtypes.rst:730
msgid "iteration"
msgstr ""

#: ../../../library/stdtypes.rst:730
msgid "container"
msgstr ""

#: ../../../library/stdtypes.rst:730
msgid "iteration over"
msgstr ""

#: ../../../library/stdtypes.rst:832 ../../../library/stdtypes.rst:2993
msgid "len"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "min"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "max"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "concatenation"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "operation"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "repetition"
msgstr ""

#: ../../../library/stdtypes.rst:832 ../../../library/stdtypes.rst:1021
msgid "subscript"
msgstr ""

#: ../../../library/stdtypes.rst:832 ../../../library/stdtypes.rst:1021
msgid "slice"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "count() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:832
msgid "index() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:984
msgid "immutable"
msgstr ""

#: ../../../library/stdtypes.rst:984 ../../../library/stdtypes.rst:1191
msgid "tuple"
msgstr ""

#: ../../../library/stdtypes.rst:984
msgid "hash"
msgstr ""

#: ../../../library/stdtypes.rst:1006
msgid "mutable"
msgstr ""

#: ../../../library/stdtypes.rst:1006 ../../../library/stdtypes.rst:1021
#: ../../../library/stdtypes.rst:1114
msgid "list"
msgstr ""

#: ../../../library/stdtypes.rst:1006 ../../../library/stdtypes.rst:2141
#: ../../../library/stdtypes.rst:2227 ../../../library/stdtypes.rst:2250
msgid "bytearray"
msgstr ""

#: ../../../library/stdtypes.rst:1021 ../../../library/stdtypes.rst:2993
#: ../../../library/stdtypes.rst:3469
msgid "type"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "assignment"
msgstr ""

#: ../../../library/stdtypes.rst:1021 ../../../library/stdtypes.rst:2993
msgid "del"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "append() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "clear() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "copy() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "extend() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "insert() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "pop() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "remove() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1021
msgid "reverse() (sequence method)"
msgstr ""

#: ../../../library/stdtypes.rst:1235
msgid "range"
msgstr ""

#: ../../../library/stdtypes.rst:1352 ../../../library/stdtypes.rst:1401
#: ../../../library/stdtypes.rst:1445 ../../../library/stdtypes.rst:1952
msgid "string"
msgstr ""

#: ../../../library/stdtypes.rst:1352
msgid "text sequence type"
msgstr ""

#: ../../../library/stdtypes.rst:1352 ../../../library/stdtypes.rst:1401
#: ../../../library/stdtypes.rst:1418
msgid "str (built-in class)"
msgstr ""

#: ../../../library/stdtypes.rst:1352
msgid "(see also string)"
msgstr ""

#: ../../../library/stdtypes.rst:1388
msgid "io.StringIO"
msgstr ""

#: ../../../library/stdtypes.rst:1418 ../../../library/stdtypes.rst:2133
msgid "buffer protocol"
msgstr ""

#: ../../../library/stdtypes.rst:1418 ../../../library/stdtypes.rst:2141
#: ../../../library/stdtypes.rst:2160 ../../../library/stdtypes.rst:2250
msgid "bytes"
msgstr ""

#: ../../../library/stdtypes.rst:1445 ../../../library/stdtypes.rst:2250
msgid "methods"
msgstr ""

#: ../../../library/stdtypes.rst:1453
msgid "re"
msgstr ""

#: ../../../library/stdtypes.rst:1836
msgid "universal newlines"
msgstr ""

#: ../../../library/stdtypes.rst:1836
msgid "str.splitlines method"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "formatting, string (%)"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "interpolation, string (%)"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "formatting"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "interpolation"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "printf-style formatting"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "sprintf-style formatting"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "% formatting"
msgstr ""

#: ../../../library/stdtypes.rst:1952
msgid "% interpolation"
msgstr ""

#: ../../../library/stdtypes.rst:2133
msgid "binary sequence types"
msgstr ""

#: ../../../library/stdtypes.rst:2141
msgid "memoryview"
msgstr ""

#: ../../../library/stdtypes.rst:2141
msgid "array"
msgstr ""

#: ../../../library/stdtypes.rst:2796
msgid "set"
msgstr ""

#: ../../../library/stdtypes.rst:2993
msgid "mapping"
msgstr ""

#: ../../../library/stdtypes.rst:2993
msgid "dictionary"
msgstr ""

#: ../../../library/stdtypes.rst:3266
msgid "context manager"
msgstr ""

#: ../../../library/stdtypes.rst:3266
msgid "context management protocol"
msgstr ""

#: ../../../library/stdtypes.rst:3266
msgid "context management"
msgstr ""

#: ../../../library/stdtypes.rst:3397
msgid "method"
msgstr ""

#: ../../../library/stdtypes.rst:3441
msgid "code"
msgstr ""

#: ../../../library/stdtypes.rst:3443
msgid "compile"
msgstr ""

#: ../../../library/stdtypes.rst:3443
msgid "__code__ (function object attribute)"
msgstr ""

#: ../../../library/stdtypes.rst:3454
msgid "exec"
msgstr ""

#: ../../../library/stdtypes.rst:3454
msgid "eval"
msgstr ""

#: ../../../library/stdtypes.rst:3532
msgid "values"
msgstr ""
