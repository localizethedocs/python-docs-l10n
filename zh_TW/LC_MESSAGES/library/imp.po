# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/imp.rst:2
msgid ":mod:`imp` --- Access the :keyword:`import` internals"
msgstr ""

#: ../../../library/imp.rst:10
msgid ""
"This module provides an interface to the mechanisms used to implement the :"
"keyword:`import` statement.  It defines the following constants and "
"functions:"
msgstr ""

#: ../../../library/imp.rst:18
msgid ""
"Return the magic string value used to recognize byte-compiled code files (:"
"file:`.pyc` files).  (This value may be different for each Python version.)"
msgstr ""

#: ../../../library/imp.rst:24
msgid ""
"Return a list of 3-element tuples, each describing a particular type of "
"module. Each triple has the form ``(suffix, mode, type)``, where *suffix* is "
"a string to be appended to the module name to form the filename to search "
"for, *mode* is the mode string to pass to the built-in :func:`open` function "
"to open the file (this can be ``'r'`` for text files or ``'rb'`` for binary "
"files), and *type* is the file type, which has one of the values :const:"
"`PY_SOURCE`, :const:`PY_COMPILED`, or :const:`C_EXTENSION`, described below."
msgstr ""

#: ../../../library/imp.rst:36
msgid ""
"Try to find the module *name*.  If *path* is omitted or ``None``, the list "
"of directory names given by ``sys.path`` is searched, but first a few "
"special places are searched: the function tries to find a built-in module "
"with the given name (:const:`C_BUILTIN`), then a frozen module (:const:"
"`PY_FROZEN`), and on some systems some other places are looked in as well "
"(on Windows, it looks in the registry which may point to a specific file)."
msgstr ""

#: ../../../library/imp.rst:43
msgid ""
"Otherwise, *path* must be a list of directory names; each directory is "
"searched for files with any of the suffixes returned by :func:`get_suffixes` "
"above.  Invalid names in the list are silently ignored (but all list items "
"must be strings)."
msgstr ""

#: ../../../library/imp.rst:48
msgid ""
"If search is successful, the return value is a 3-element tuple ``(file, "
"pathname, description)``:"
msgstr ""

#: ../../../library/imp.rst:51
msgid ""
"*file* is an open :term:`file object` positioned at the beginning, "
"*pathname* is the pathname of the file found, and *description* is a 3-"
"element tuple as contained in the list returned by :func:`get_suffixes` "
"describing the kind of module found."
msgstr ""

#: ../../../library/imp.rst:56
msgid ""
"If the module does not live in a file, the returned *file* is ``None``, "
"*pathname* is the empty string, and the *description* tuple contains empty "
"strings for its suffix and mode; the module type is indicated as given in "
"parentheses above.  If the search is unsuccessful, :exc:`ImportError` is "
"raised.  Other exceptions indicate problems with the arguments or "
"environment."
msgstr ""

#: ../../../library/imp.rst:63
msgid ""
"If the module is a package, *file* is ``None``, *pathname* is the package "
"path and the last item in the *description* tuple is :const:`PKG_DIRECTORY`."
msgstr ""

#: ../../../library/imp.rst:66
msgid ""
"This function does not handle hierarchical module names (names containing "
"dots).  In order to find *P*.*M*, that is, submodule *M* of package *P*, "
"use :func:`find_module` and :func:`load_module` to find and load package "
"*P*, and then use :func:`find_module` with the *path* argument set to ``P."
"__path__``. When *P* itself has a dotted name, apply this recipe recursively."
msgstr ""

#: ../../../library/imp.rst:75
msgid ""
"Load a module that was previously found by :func:`find_module` (or by an "
"otherwise conducted search yielding compatible results).  This function does "
"more than importing the module: if the module was already imported, it will "
"reload the module!  The *name* argument indicates the full module name "
"(including the package name, if this is a submodule of a package).  The "
"*file* argument is an open file, and *pathname* is the corresponding file "
"name; these can be ``None`` and ``''``, respectively, when the module is a "
"package or not being loaded from a file.  The *description* argument is a "
"tuple, as would be returned by :func:`get_suffixes`, describing what kind of "
"module must be loaded."
msgstr ""

#: ../../../library/imp.rst:86
msgid ""
"If the load is successful, the return value is the module object; otherwise, "
"an exception (usually :exc:`ImportError`) is raised."
msgstr ""

#: ../../../library/imp.rst:89
msgid ""
"**Important:** the caller is responsible for closing the *file* argument, if "
"it was not ``None``, even when an exception is raised.  This is best done "
"using a :keyword:`try` ... :keyword:`finally` statement."
msgstr ""

#: ../../../library/imp.rst:96
msgid ""
"Return a new empty module object called *name*.  This object is *not* "
"inserted in ``sys.modules``."
msgstr ""

#: ../../../library/imp.rst:102
msgid ""
"Return ``True`` if the import lock is currently held, else ``False``. On "
"platforms without threads, always return ``False``."
msgstr ""

#: ../../../library/imp.rst:105
msgid ""
"On platforms with threads, a thread executing an import holds an internal "
"lock until the import is complete. This lock blocks other threads from doing "
"an import until the original import completes, which in turn prevents other "
"threads from seeing incomplete module objects constructed by the original "
"thread while in the process of completing its import (and the imports, if "
"any, triggered by that)."
msgstr ""

#: ../../../library/imp.rst:115
msgid ""
"Acquire the interpreter's import lock for the current thread.  This lock "
"should be used by import hooks to ensure thread-safety when importing "
"modules."
msgstr ""

#: ../../../library/imp.rst:118
msgid ""
"Once a thread has acquired the import lock, the same thread may acquire it "
"again without blocking; the thread must release it once for each time it has "
"acquired it."
msgstr ""

#: ../../../library/imp.rst:122
msgid "On platforms without threads, this function does nothing."
msgstr ""

#: ../../../library/imp.rst:127
msgid ""
"Release the interpreter's import lock. On platforms without threads, this "
"function does nothing."
msgstr ""

#: ../../../library/imp.rst:133
msgid ""
"Reload a previously imported *module*.  The argument must be a module "
"object, so it must have been successfully imported before.  This is useful "
"if you have edited the module source file using an external editor and want "
"to try out the new version without leaving the Python interpreter.  The "
"return value is the module object (the same as the *module* argument)."
msgstr ""

#: ../../../library/imp.rst:139
msgid "When ``reload(module)`` is executed:"
msgstr ""

#: ../../../library/imp.rst:141
msgid ""
"Python modules' code is recompiled and the module-level code reexecuted, "
"defining a new set of objects which are bound to names in the module's "
"dictionary.  The ``init`` function of extension modules is not called a "
"second time."
msgstr ""

#: ../../../library/imp.rst:146
msgid ""
"As with all other objects in Python the old objects are only reclaimed after "
"their reference counts drop to zero."
msgstr ""

#: ../../../library/imp.rst:149
msgid ""
"The names in the module namespace are updated to point to any new or changed "
"objects."
msgstr ""

#: ../../../library/imp.rst:152
msgid ""
"Other references to the old objects (such as names external to the module) "
"are not rebound to refer to the new objects and must be updated in each "
"namespace where they occur if that is desired."
msgstr ""

#: ../../../library/imp.rst:156
msgid "There are a number of other caveats:"
msgstr ""

#: ../../../library/imp.rst:158
msgid ""
"If a module is syntactically correct but its initialization fails, the "
"first :keyword:`import` statement for it does not bind its name locally, but "
"does store a (partially initialized) module object in ``sys.modules``.  To "
"reload the module you must first :keyword:`import` it again (this will bind "
"the name to the partially initialized module object) before you can :func:"
"`reload` it."
msgstr ""

#: ../../../library/imp.rst:164
msgid ""
"When a module is reloaded, its dictionary (containing the module's global "
"variables) is retained.  Redefinitions of names will override the old "
"definitions, so this is generally not a problem.  If the new version of a "
"module does not define a name that was defined by the old version, the old "
"definition remains.  This feature can be used to the module's advantage if "
"it maintains a global table or cache of objects --- with a :keyword:`try` "
"statement it can test for the table's presence and skip its initialization "
"if desired::"
msgstr ""

#: ../../../library/imp.rst:177
msgid ""
"It is legal though generally not very useful to reload built-in or "
"dynamically loaded modules, except for :mod:`sys`, :mod:`__main__` and :mod:"
"`__builtin__`. In many cases, however, extension modules are not designed to "
"be initialized more than once, and may fail in arbitrary ways when reloaded."
msgstr ""

#: ../../../library/imp.rst:182
msgid ""
"If a module imports objects from another module using :keyword:`from` ... :"
"keyword:`import` ..., calling :func:`reload` for the other module does not "
"redefine the objects imported from it --- one way around this is to re-"
"execute the :keyword:`from` statement, another is to use :keyword:`import` "
"and qualified names (*module*.*name*) instead."
msgstr ""

#: ../../../library/imp.rst:188
msgid ""
"If a module instantiates instances of a class, reloading the module that "
"defines the class does not affect the method definitions of the instances "
"--- they continue to use the old class definition.  The same is true for "
"derived classes."
msgstr ""

#: ../../../library/imp.rst:193
msgid ""
"The following constants with integer values, defined in this module, are "
"used to indicate the search result of :func:`find_module`."
msgstr ""

#: ../../../library/imp.rst:199
msgid "The module was found as a source file."
msgstr ""

#: ../../../library/imp.rst:204
msgid "The module was found as a compiled code object file."
msgstr ""

#: ../../../library/imp.rst:209
msgid "The module was found as dynamically loadable shared library."
msgstr ""

#: ../../../library/imp.rst:214
msgid "The module was found as a package directory."
msgstr ""

#: ../../../library/imp.rst:219
msgid "The module was found as a built-in module."
msgstr ""

#: ../../../library/imp.rst:224
msgid "The module was found as a frozen module (see :func:`init_frozen`)."
msgstr ""

#: ../../../library/imp.rst:229
msgid ""
"The :class:`NullImporter` type is a :pep:`302` import hook that handles non-"
"directory path strings by failing to find any modules.  Calling this type "
"with an existing directory or empty string raises :exc:`ImportError`. "
"Otherwise, a :class:`NullImporter` instance is returned."
msgstr ""

#: ../../../library/imp.rst:234
msgid ""
"Python adds instances of this type to ``sys.path_importer_cache`` for any "
"path entries that are not directories and are not handled by any other path "
"hooks on ``sys.path_hooks``.  Instances have only one method:"
msgstr ""

#: ../../../library/imp.rst:241
msgid ""
"This method always returns ``None``, indicating that the requested module "
"could not be found."
msgstr ""

#: ../../../library/imp.rst:248
msgid "Examples"
msgstr ""

#: ../../../library/imp.rst:250
msgid ""
"The following function emulates what was the standard import statement up to "
"Python 1.4 (no hierarchical module names).  (This *implementation* wouldn't "
"work in that version, since :func:`find_module` has been extended and :func:"
"`load_module` has been added in 1.4.) ::"
msgstr ""

#: ../../../library/imp.rst:279
msgid ""
"A more complete example that implements hierarchical module names and "
"includes a :func:`reload` function can be found in the module :mod:`knee`.  "
"The :mod:`knee` module can be found in :file:`Demo/imputil/` in the Python "
"source distribution."
msgstr ""

#: ../../../library/imp.rst:8
msgid "import"
msgstr ""

#: ../../../library/imp.rst:16
msgid "file"
msgstr ""

#: ../../../library/imp.rst:16
msgid "byte-code"
msgstr ""

#: ../../../library/imp.rst:277
msgid "knee"
msgstr ""
