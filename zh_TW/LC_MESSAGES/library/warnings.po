# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/warnings.rst:3
msgid ":mod:`warnings` --- Warning control"
msgstr ""

#: ../../../library/warnings.rst:11
msgid ""
"Warning messages are typically issued in situations where it is useful to "
"alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the "
"program.  For example, one might want to issue a warning when a program uses "
"an obsolete module."
msgstr ""

#: ../../../library/warnings.rst:16
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :cfunc:`PyErr_WarnEx`; see :ref:"
"`exceptionhandling` for details)."
msgstr ""

#: ../../../library/warnings.rst:20
msgid ""
"Warning messages are normally written to ``sys.stderr``, but their "
"disposition can be changed flexibly, from ignoring all warnings to turning "
"them into exceptions.  The disposition of warnings can vary based on the "
"warning category (see below), the text of the warning message, and the "
"source location where it is issued.  Repetitions of a particular warning for "
"the same source location are typically suppressed."
msgstr ""

#: ../../../library/warnings.rst:27
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or not; "
"next, if a message is to be issued, it is formatted and printed using a user-"
"settable hook."
msgstr ""

#: ../../../library/warnings.rst:31
msgid ""
"The determination whether to issue a warning message is controlled by the "
"warning filter, which is a sequence of matching rules and actions. Rules can "
"be added to the filter by calling :func:`filterwarnings` and reset to its "
"default state by calling :func:`resetwarnings`."
msgstr ""

#: ../../../library/warnings.rst:36
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function formats "
"the message by calling :func:`formatwarning`, which is also available for "
"use by custom implementations."
msgstr ""

#: ../../../library/warnings.rst:45
msgid "Warning Categories"
msgstr ""

#: ../../../library/warnings.rst:47
msgid ""
"There are a number of built-in exceptions that represent warning categories. "
"This categorization is useful to be able to filter out groups of warnings.  "
"The following warnings category classes are currently defined:"
msgstr ""

#: ../../../library/warnings.rst:52
msgid "Class"
msgstr ""

#: ../../../library/warnings.rst:52
msgid "Description"
msgstr ""

#: ../../../library/warnings.rst:54
msgid ":exc:`Warning`"
msgstr ""

#: ../../../library/warnings.rst:54
msgid ""
"This is the base class of all warning category classes.  It is a subclass "
"of :exc:`Exception`."
msgstr ""

#: ../../../library/warnings.rst:58
msgid ":exc:`UserWarning`"
msgstr ""

#: ../../../library/warnings.rst:58
msgid "The default category for :func:`warn`."
msgstr ""

#: ../../../library/warnings.rst:60
msgid ":exc:`DeprecationWarning`"
msgstr ""

#: ../../../library/warnings.rst:60
msgid "Base category for warnings about deprecated features."
msgstr ""

#: ../../../library/warnings.rst:63
msgid ":exc:`SyntaxWarning`"
msgstr ""

#: ../../../library/warnings.rst:63
msgid "Base category for warnings about dubious syntactic features."
msgstr ""

#: ../../../library/warnings.rst:66
msgid ":exc:`RuntimeWarning`"
msgstr ""

#: ../../../library/warnings.rst:66
msgid "Base category for warnings about dubious runtime features."
msgstr ""

#: ../../../library/warnings.rst:69
msgid ":exc:`FutureWarning`"
msgstr ""

#: ../../../library/warnings.rst:69
msgid ""
"Base category for warnings about constructs that will change semantically in "
"the future."
msgstr ""

#: ../../../library/warnings.rst:72
msgid ":exc:`PendingDeprecationWarning`"
msgstr ""

#: ../../../library/warnings.rst:72
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr ""

#: ../../../library/warnings.rst:76
msgid ":exc:`ImportWarning`"
msgstr ""

#: ../../../library/warnings.rst:76
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr ""

#: ../../../library/warnings.rst:80
msgid ":exc:`UnicodeWarning`"
msgstr ""

#: ../../../library/warnings.rst:80
msgid "Base category for warnings related to Unicode."
msgstr ""

#: ../../../library/warnings.rst:83
msgid ":exc:`BytesWarning`"
msgstr ""

#: ../../../library/warnings.rst:83
msgid ""
"Base category for warnings related to :class:`bytes` and :class:`buffer`."
msgstr ""

#: ../../../library/warnings.rst:88
msgid ""
"While these are technically built-in exceptions, they are documented here, "
"because conceptually they belong to the warnings mechanism."
msgstr ""

#: ../../../library/warnings.rst:91
msgid ""
"User code can define additional warning categories by subclassing one of the "
"standard warning categories.  A warning category must always be a subclass "
"of the :exc:`Warning` class."
msgstr ""

#: ../../../library/warnings.rst:99
msgid "The Warnings Filter"
msgstr ""

#: ../../../library/warnings.rst:101
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr ""

#: ../../../library/warnings.rst:104
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the match "
"determines the disposition of the match.  Each entry is a tuple of the form "
"(*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""

#: ../../../library/warnings.rst:110
msgid "*action* is one of the following strings:"
msgstr ""

#: ../../../library/warnings.rst:113
msgid "Value"
msgstr ""

#: ../../../library/warnings.rst:113
msgid "Disposition"
msgstr ""

#: ../../../library/warnings.rst:115
msgid "``\"error\"``"
msgstr ""

#: ../../../library/warnings.rst:115
msgid "turn matching warnings into exceptions"
msgstr ""

#: ../../../library/warnings.rst:117
msgid "``\"ignore\"``"
msgstr ""

#: ../../../library/warnings.rst:117
msgid "never print matching warnings"
msgstr ""

#: ../../../library/warnings.rst:119
msgid "``\"always\"``"
msgstr ""

#: ../../../library/warnings.rst:119
msgid "always print matching warnings"
msgstr ""

#: ../../../library/warnings.rst:121
msgid "``\"default\"``"
msgstr ""

#: ../../../library/warnings.rst:121
msgid ""
"print the first occurrence of matching warnings for each location where the "
"warning is issued"
msgstr ""

#: ../../../library/warnings.rst:125
msgid "``\"module\"``"
msgstr ""

#: ../../../library/warnings.rst:125
msgid ""
"print the first occurrence of matching warnings for each module where the "
"warning is issued"
msgstr ""

#: ../../../library/warnings.rst:129
msgid "``\"once\"``"
msgstr ""

#: ../../../library/warnings.rst:129
msgid ""
"print only the first occurrence of matching warnings, regardless of location"
msgstr ""

#: ../../../library/warnings.rst:133
msgid ""
"*message* is a string containing a regular expression that the warning "
"message must match (the match is compiled to always be  case-insensitive)"
msgstr ""

#: ../../../library/warnings.rst:136
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning "
"category must be a subclass in order to match"
msgstr ""

#: ../../../library/warnings.rst:139
msgid ""
"*module* is a string containing a regular expression that the module name "
"must match (the match is compiled to be case-sensitive)"
msgstr ""

#: ../../../library/warnings.rst:142
msgid ""
"*lineno* is an integer that the line number where the warning occurred must "
"match, or ``0`` to match all line numbers"
msgstr ""

#: ../../../library/warnings.rst:145
msgid ""
"Since the :exc:`Warning` class is derived from the built-in :exc:`Exception` "
"class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""

#: ../../../library/warnings.rst:148
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line.  The interpreter saves the arguments for "
"all :option:`-W` options without interpretation in ``sys.warnoptions``; the :"
"mod:`warnings` module parses these when it is first imported (invalid "
"options are ignored, after printing a message to ``sys.stderr``)."
msgstr ""

#: ../../../library/warnings.rst:154
msgid ""
"The warnings that are ignored by default may be enabled by passing :option:`-"
"Wd` to the interpreter. This enables default handling for all warnings, "
"including those that are normally ignored by default. This is particular "
"useful for enabling ImportWarning when debugging problems importing a "
"developed package. ImportWarning can also be enabled explicitly in Python "
"code using::"
msgstr ""

#: ../../../library/warnings.rst:166
msgid "Temporarily Suppressing Warnings"
msgstr ""

#: ../../../library/warnings.rst:168
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning, then it is possible "
"to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""

#: ../../../library/warnings.rst:181
msgid ""
"While within the context manager all warnings will simply be ignored. This "
"allows you to use known-deprecated code without having to see the warning "
"while not suppressing the warning for other code that might not be aware of "
"its use of deprecated code."
msgstr ""

#: ../../../library/warnings.rst:190
msgid "Testing Warnings"
msgstr ""

#: ../../../library/warnings.rst:192
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""

#: ../../../library/warnings.rst:212
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` instead "
"of ``always``. One thing to be aware of is that if a warning has already "
"been raised because of a ``once``/``default`` rule, then no matter what "
"filters are set the warning will not be seen again unless the warnings "
"registry related to the warning has been cleared."
msgstr ""

#: ../../../library/warnings.rst:218
msgid ""
"Once the context manager exits, the warnings filter is restored to its state "
"when the context was entered. This prevents tests from changing the warnings "
"filter in unexpected ways between tests and leading to indeterminate test "
"results. The :func:`showwarning` function in the module is also restored to "
"its original value."
msgstr ""

#: ../../../library/warnings.rst:224
msgid ""
"When testing multiple operations that raise the same kind of warning, it is "
"important to test them in a manner that confirms each operation is raising a "
"new warning (e.g. set warnings to be raised as exceptions and check the "
"operations raise exceptions, check that the length of the warning list "
"continues to increase after each operation, or else delete the previous "
"entries from the warnings list before each new operation)."
msgstr ""

#: ../../../library/warnings.rst:235
msgid "Available Functions"
msgstr ""

#: ../../../library/warnings.rst:240
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The *category* "
"argument, if given, must be a warning category class (see above); it "
"defaults to :exc:`UserWarning`.  Alternatively *message* can be a :exc:"
"`Warning` instance, in which case *category* will be ignored and ``message."
"__class__`` will be used. In this case the message text will be "
"``str(message)``. This function raises an exception if the particular "
"warning issued is changed into an error by the warnings filter see above.  "
"The *stacklevel* argument can be used by wrapper functions written in "
"Python, like this::"
msgstr ""

#: ../../../library/warnings.rst:252
msgid ""
"This makes the warning refer to :func:`deprecation`'s caller, rather than to "
"the source of :func:`deprecation` itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""

#: ../../../library/warnings.rst:259
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, passing "
"in explicitly the message, category, filename and line number, and "
"optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name defaults "
"to the filename with ``.py`` stripped; if no registry is passed, the warning "
"is never suppressed. *message* must be a string and *category* a subclass "
"of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in which "
"case *category* will be ignored."
msgstr ""

#: ../../../library/warnings.rst:268
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by the "
"code for which the warning is issued.  (This argument is used to support "
"displaying source for modules found in zipfiles or other non-filesystem "
"import sources)."
msgstr ""

#: ../../../library/warnings.rst:276
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes the "
"resulting string to *file*, which defaults to ``sys.stderr``.  You may "
"replace this function with an alternative implementation by assigning to "
"``warnings.showwarning``. *line* is a line of source code to be included in "
"the warning message; if *line* is not supplied, :func:`showwarning` will try "
"to read the line specified by *filename* and *lineno*."
msgstr ""

#: ../../../library/warnings.rst:288
msgid ""
"Format a warning the standard way.  This returns a string  which may contain "
"embedded newlines and ends in a newline.  *line* is a line of source code to "
"be included in the warning message; if *line* is not supplied, :func:"
"`formatwarning` will try to read the line specified by *filename* and "
"*lineno*."
msgstr ""

#: ../../../library/warnings.rst:296
msgid ""
"Insert an entry into the list of warnings filters.  The entry is inserted at "
"the front by default; if *append* is true, it is inserted at the end. This "
"checks the types of the arguments, compiles the message and module regular "
"expressions, and inserts them as a tuple in the  list of warnings filters.  "
"Entries closer to the front of the list override entries later in the list, "
"if both match a particular warning.  Omitted arguments default to a value "
"that matches everything."
msgstr ""

#: ../../../library/warnings.rst:307
msgid ""
"Insert a simple entry into the list of warnings filters. The meaning of the "
"function parameters is as for :func:`filterwarnings`, but regular "
"expressions are not needed as the filter inserted always matches any message "
"in any module as long as the category and line number match."
msgstr ""

#: ../../../library/warnings.rst:315
msgid ""
"Reset the warnings filter.  This discards the effect of all previous calls "
"to :func:`filterwarnings`, including that of the :option:`-W` command line "
"options and calls to :func:`simplefilter`."
msgstr ""

#: ../../../library/warnings.rst:321
msgid "Available Context Managers"
msgstr ""

#: ../../../library/warnings.rst:325
msgid ""
"A context manager that copies and, upon exit, restores the warnings filter "
"and the :func:`showwarning` function. If the *record* argument is :const:"
"`False` (the default) the context manager returns :class:`None` on entry. If "
"*record* is :const:`True`, a list is returned that is progressively "
"populated with objects as seen by a custom :func:`showwarning` function "
"(which also suppresses output to ``sys.stdout``). Each object in the list "
"has attributes with the same names as the arguments to :func:`showwarning`."
msgstr ""

#: ../../../library/warnings.rst:334
msgid ""
"The *module* argument takes a module that will be used instead of the module "
"returned when you import :mod:`warnings` whose filter will be protected. "
"This argument exists primarily for testing the :mod:`warnings` module itself."
msgstr ""

#: ../../../library/warnings.rst:5
msgid "warnings"
msgstr ""
