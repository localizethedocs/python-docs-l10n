# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/email.mime.rst:2
msgid ":mod:`email`: Creating email and MIME objects from scratch"
msgstr ""

#: ../../../library/email.mime.rst:8
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`Message` objects by hand.  In fact, you "
"can also take an existing structure and add new :class:`Message` objects, "
"move them around, etc.  This makes a very convenient interface for slicing-"
"and-dicing MIME messages."
msgstr ""

#: ../../../library/email.mime.rst:15
msgid ""
"You can create a new object structure by creating :class:`Message` "
"instances, adding attachments and all the appropriate headers manually.  For "
"MIME messages though, the :mod:`email` package provides some convenient "
"subclasses to make things easier."
msgstr ""

#: ../../../library/email.mime.rst:20
msgid "Here are the classes:"
msgstr ""

#: ../../../library/email.mime.rst:26
msgid "Module: :mod:`email.mime.base`"
msgstr ""

#: ../../../library/email.mime.rst:28
msgid ""
"This is the base class for all the MIME-specific subclasses of :class:"
"`Message`. Ordinarily you won't create instances specifically of :class:"
"`MIMEBase`, although you could.  :class:`MIMEBase` is provided primarily as "
"a convenient base class for more specific MIME-aware subclasses."
msgstr ""

#: ../../../library/email.mime.rst:33
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:"
"`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-"
"Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is "
"a parameter key/value dictionary and is passed directly to :meth:`Message."
"add_header`."
msgstr ""

#: ../../../library/email.mime.rst:38
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""

#: ../../../library/email.mime.rst:47
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr ""

#: ../../../library/email.mime.rst:49
msgid ""
"A subclass of :class:`MIMEBase`, this is an intermediate base class for MIME "
"messages that are not :mimetype:`multipart`.  The primary purpose of this "
"class is to prevent the use of the :meth:`attach` method, which only makes "
"sense for :mimetype:`multipart` messages.  If :meth:`attach` is called, a :"
"exc:`MultipartConversionError` exception is raised."
msgstr ""

#: ../../../library/email.mime.rst:60
msgid "Module: :mod:`email.mime.multipart`"
msgstr ""

#: ../../../library/email.mime.rst:62
msgid ""
"A subclass of :class:`MIMEBase`, this is an intermediate base class for MIME "
"messages that are :mimetype:`multipart`.  Optional *_subtype* defaults to :"
"mimetype:`mixed`, but can be used to specify the subtype of the message.  A :"
"mailheader:`Content-Type` header of :mimetype:`multipart/_subtype` will be "
"added to the message object.  A :mailheader:`MIME-Version` header will also "
"be added."
msgstr ""

#: ../../../library/email.mime.rst:69
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed."
msgstr ""

#: ../../../library/email.mime.rst:72
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach` method."
msgstr ""

#: ../../../library/email.mime.rst:76
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""

#: ../../../library/email.mime.rst:85
msgid "Module: :mod:`email.mime.application`"
msgstr ""

#: ../../../library/email.mime.rst:87
msgid ""
"A subclass of :class:`MIMENonMultipart`, the :class:`MIMEApplication` class "
"is used to represent MIME message objects of major type :mimetype:"
"`application`. *_data* is a string containing the raw byte data.  Optional "
"*_subtype* specifies the MIME subtype and defaults to :mimetype:`octet-"
"stream`."
msgstr ""

#: ../../../library/email.mime.rst:92
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use :"
"meth:`get_payload` and :meth:`set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../../library/email.mime.rst:100 ../../../library/email.mime.rst:125
msgid "*_params* are passed straight through to the base class constructor."
msgstr ""

#: ../../../library/email.mime.rst:107
msgid "Module: :mod:`email.mime.audio`"
msgstr ""

#: ../../../library/email.mime.rst:109
msgid ""
"A subclass of :class:`MIMENonMultipart`, the :class:`MIMEAudio` class is "
"used to create MIME message objects of major type :mimetype:`audio`. "
"*_audiodata* is a string containing the raw audio data.  If this data can be "
"decoded by the standard Python module :mod:`sndhdr`, then the subtype will "
"be automatically included in the :mailheader:`Content-Type` header.  "
"Otherwise you can explicitly specify the audio subtype via the *_subtype* "
"parameter.  If the minor type could not be guessed and *_subtype* was not "
"given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../../library/email.mime.rst:117
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use :meth:"
"`get_payload` and :meth:`set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../../library/email.mime.rst:132
msgid "Module: :mod:`email.mime.image`"
msgstr ""

#: ../../../library/email.mime.rst:134
msgid ""
"A subclass of :class:`MIMENonMultipart`, the :class:`MIMEImage` class is "
"used to create MIME message objects of major type :mimetype:`image`. "
"*_imagedata* is a string containing the raw image data.  If this data can be "
"decoded by the standard Python module :mod:`imghdr`, then the subtype will "
"be automatically included in the :mailheader:`Content-Type` header.  "
"Otherwise you can explicitly specify the image subtype via the *_subtype* "
"parameter.  If the minor type could not be guessed and *_subtype* was not "
"given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../../library/email.mime.rst:142
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use :meth:"
"`get_payload` and :meth:`set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../../library/email.mime.rst:150
msgid ""
"*_params* are passed straight through to the :class:`MIMEBase` constructor."
msgstr ""

#: ../../../library/email.mime.rst:157
msgid "Module: :mod:`email.mime.message`"
msgstr ""

#: ../../../library/email.mime.rst:159
msgid ""
"A subclass of :class:`MIMENonMultipart`, the :class:`MIMEMessage` class is "
"used to create MIME objects of main type :mimetype:`message`. *_msg* is used "
"as the payload, and must be an instance of class :class:`Message` (or a "
"subclass thereof), otherwise a :exc:`TypeError` is raised."
msgstr ""

#: ../../../library/email.mime.rst:164
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to :"
"mimetype:`rfc822`."
msgstr ""

#: ../../../library/email.mime.rst:172
msgid "Module: :mod:`email.mime.text`"
msgstr ""

#: ../../../library/email.mime.rst:174
msgid ""
"A subclass of :class:`MIMENonMultipart`, the :class:`MIMEText` class is used "
"to create MIME objects of major type :mimetype:`text`. *_text* is the string "
"for the payload.  *_subtype* is the minor type and defaults to :mimetype:"
"`plain`. *_charset* is the character set of the text and is passed as a "
"parameter to the :class:`MIMENonMultipart` constructor; it defaults to ``us-"
"ascii``.  No guessing or encoding is performed on the text data."
msgstr ""
