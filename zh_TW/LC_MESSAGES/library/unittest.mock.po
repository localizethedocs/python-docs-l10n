# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/unittest.mock.rst:3
msgid ":mod:`unittest.mock` --- mock object library"
msgstr ""

#: ../../../library/unittest.mock.rst:12
msgid ""
":mod:`unittest.mock` is a library for testing in Python. It allows you to "
"replace parts of your system under test with mock objects and make "
"assertions about how they have been used."
msgstr ""

#: ../../../library/unittest.mock.rst:16
msgid ""
"`unittest.mock` provides a core :class:`Mock` class removing the need to "
"create a host of stubs throughout your test suite. After performing an "
"action, you can make assertions about which methods / attributes were used "
"and arguments they were called with. You can also specify return values and "
"set needed attributes in the normal way."
msgstr ""

#: ../../../library/unittest.mock.rst:22
msgid ""
"Additionally, mock provides a :func:`patch` decorator that handles patching "
"module and class level attributes within the scope of a test, along with :"
"const:`sentinel` for creating unique objects. See the `quick guide`_ for "
"some examples of how to use :class:`Mock`, :class:`MagicMock` and :func:"
"`patch`."
msgstr ""

#: ../../../library/unittest.mock.rst:28
msgid ""
"Mock is very easy to use and is designed for use with :mod:`unittest`. Mock "
"is based on the 'action -> assertion' pattern instead of `'record -> "
"replay'` used by many mocking frameworks."
msgstr ""

#: ../../../library/unittest.mock.rst:32
msgid ""
"There is a backport of `unittest.mock` for earlier versions of Python, "
"available as `mock on PyPI <http://pypi.python.org/pypi/mock>`_."
msgstr ""

#: ../../../library/unittest.mock.rst:35
msgid "**Source code:** :source:`Lib/unittest/mock.py`"
msgstr ""

#: ../../../library/unittest.mock.rst:39
msgid "Quick Guide"
msgstr ""

#: ../../../library/unittest.mock.rst:41
msgid ""
":class:`Mock` and :class:`MagicMock` objects create all attributes and "
"methods as you access them and store details of how they have been used. You "
"can configure them, to specify return values or limit what attributes are "
"available, and then make assertions about how they have been used:"
msgstr ""

#: ../../../library/unittest.mock.rst:53
msgid ""
":attr:`side_effect` allows you to perform side effects, including raising an "
"exception when a mock is called:"
msgstr ""

#: ../../../library/unittest.mock.rst:73
msgid ""
"Mock has many other ways you can configure it and control its behaviour. For "
"example the `spec` argument configures the mock to take its specification "
"from another object. Attempting to access attributes or methods on the mock "
"that don't exist on the spec will fail with an `AttributeError`."
msgstr ""

#: ../../../library/unittest.mock.rst:78
msgid ""
"The :func:`patch` decorator / context manager makes it easy to mock classes "
"or objects in a module under test. The object you specify will be replaced "
"with a mock (or other object) during the test and restored when the test "
"ends:"
msgstr ""

#: ../../../library/unittest.mock.rst:97
msgid ""
"When you nest patch decorators the mocks are passed in to the decorated "
"function in the same order they applied (the normal *python* order that "
"decorators are applied). This means from the bottom up, so in the example "
"above the mock for `module.ClassName1` is passed in first."
msgstr ""

#: ../../../library/unittest.mock.rst:102
msgid ""
"With `patch` it matters that you patch objects in the namespace where they "
"are looked up. This is normally straightforward, but for a quick guide read :"
"ref:`where to patch <where-to-patch>`."
msgstr ""

#: ../../../library/unittest.mock.rst:106
msgid ""
"As well as a decorator `patch` can be used as a context manager in a with "
"statement:"
msgstr ""

#: ../../../library/unittest.mock.rst:116
msgid ""
"There is also :func:`patch.dict` for setting values in a dictionary just "
"during a scope and restoring the dictionary to its original state when the "
"test ends:"
msgstr ""

#: ../../../library/unittest.mock.rst:127
msgid ""
"Mock supports the mocking of Python :ref:`magic methods <magic-methods>`. "
"The easiest way of using magic methods is with the :class:`MagicMock` class. "
"It allows you to do things like:"
msgstr ""

#: ../../../library/unittest.mock.rst:137
msgid ""
"Mock allows you to assign functions (or other Mock instances) to magic "
"methods and they will be called appropriately. The `MagicMock` class is just "
"a Mock variant that has all of the magic methods pre-created for you (well, "
"all the useful ones anyway)."
msgstr ""

#: ../../../library/unittest.mock.rst:142
msgid ""
"The following is an example of using magic methods with the ordinary Mock "
"class:"
msgstr ""

#: ../../../library/unittest.mock.rst:150
msgid ""
"For ensuring that the mock objects in your tests have the same api as the "
"objects they are replacing, you can use :ref:`auto-speccing <auto-"
"speccing>`. Auto-speccing can be done through the `autospec` argument to "
"patch, or the :func:`create_autospec` function. Auto-speccing creates mock "
"objects that have the same attributes and methods as the objects they are "
"replacing, and any functions and methods (including constructors) have the "
"same call signature as the real object."
msgstr ""

#: ../../../library/unittest.mock.rst:158
msgid ""
"This ensures that your mocks will fail in the same way as your production "
"code if they are used incorrectly:"
msgstr ""

#: ../../../library/unittest.mock.rst:174
msgid ""
"`create_autospec` can also be used on classes, where it copies the signature "
"of the `__init__` method, and on callable objects where it copies the "
"signature of the `__call__` method."
msgstr ""

#: ../../../library/unittest.mock.rst:181
msgid "The Mock Class"
msgstr ""

#: ../../../library/unittest.mock.rst:184
msgid ""
"`Mock` is a flexible mock object intended to replace the use of stubs and "
"test doubles throughout your code. Mocks are callable and create attributes "
"as new mocks when you access them [#]_. Accessing the same attribute will "
"always return the same mock. Mocks record how you use them, allowing you to "
"make assertions about what your code has done to them."
msgstr ""

#: ../../../library/unittest.mock.rst:190
msgid ""
":class:`MagicMock` is a subclass of `Mock` with all the magic methods pre-"
"created and ready to use. There are also non-callable variants, useful when "
"you are mocking out objects that aren't callable: :class:`NonCallableMock` "
"and :class:`NonCallableMagicMock`"
msgstr ""

#: ../../../library/unittest.mock.rst:195
msgid ""
"The :func:`patch` decorators makes it easy to temporarily replace classes in "
"a particular module with a `Mock` object. By default `patch` will create a "
"`MagicMock` for you. You can specify an alternative class of `Mock` using "
"the `new_callable` argument to `patch`."
msgstr ""

#: ../../../library/unittest.mock.rst:203
msgid ""
"Create a new `Mock` object. `Mock` takes several optional arguments that "
"specify the behaviour of the Mock object:"
msgstr ""

#: ../../../library/unittest.mock.rst:206
msgid ""
"`spec`: This can be either a list of strings or an existing object (a class "
"or instance) that acts as the specification for the mock object. If you pass "
"in an object then a list of strings is formed by calling dir on the object "
"(excluding unsupported magic attributes and methods). Accessing any "
"attribute not in this list will raise an `AttributeError`."
msgstr ""

#: ../../../library/unittest.mock.rst:212
msgid ""
"If `spec` is an object (rather than a list of strings) then :attr:`~instance."
"__class__` returns the class of the spec object. This allows mocks to pass "
"`isinstance` tests."
msgstr ""

#: ../../../library/unittest.mock.rst:216
msgid ""
"`spec_set`: A stricter variant of `spec`. If used, attempting to *set* or "
"get an attribute on the mock that isn't on the object passed as `spec_set` "
"will raise an `AttributeError`."
msgstr ""

#: ../../../library/unittest.mock.rst:220
msgid ""
"`side_effect`: A function to be called whenever the Mock is called. See the :"
"attr:`~Mock.side_effect` attribute. Useful for raising exceptions or "
"dynamically changing return values. The function is called with the same "
"arguments as the mock, and unless it returns :data:`DEFAULT`, the return "
"value of this function is used as the return value."
msgstr ""

#: ../../../library/unittest.mock.rst:226
msgid ""
"Alternatively `side_effect` can be an exception class or instance. In this "
"case the exception will be raised when the mock is called."
msgstr ""

#: ../../../library/unittest.mock.rst:229
msgid ""
"If `side_effect` is an iterable then each call to the mock will return the "
"next value from the iterable."
msgstr ""

#: ../../../library/unittest.mock.rst:232
msgid "A `side_effect` can be cleared by setting it to `None`."
msgstr ""

#: ../../../library/unittest.mock.rst:234
msgid ""
"`return_value`: The value returned when the mock is called. By default this "
"is a new Mock (created on first access). See the :attr:`return_value` "
"attribute."
msgstr ""

#: ../../../library/unittest.mock.rst:238
msgid ""
"`wraps`: Item for the mock object to wrap. If `wraps` is not None then "
"calling the Mock will pass the call through to the wrapped object (returning "
"the real result). Attribute access on the mock will return a Mock object "
"that wraps the corresponding attribute of the wrapped object (so attempting "
"to access an attribute that doesn't exist will raise an `AttributeError`)."
msgstr ""

#: ../../../library/unittest.mock.rst:245
msgid ""
"If the mock has an explicit `return_value` set then calls are not passed to "
"the wrapped object and the `return_value` is returned instead."
msgstr ""

#: ../../../library/unittest.mock.rst:248
msgid ""
"`name`: If the mock has a name then it will be used in the repr of the mock. "
"This can be useful for debugging. The name is propagated to child mocks."
msgstr ""

#: ../../../library/unittest.mock.rst:252
msgid ""
"Mocks can also be called with arbitrary keyword arguments. These will be "
"used to set attributes on the mock after it is created. See the :meth:"
"`configure_mock` method for details."
msgstr ""

#: ../../../library/unittest.mock.rst:259
msgid ""
"This method is a convenient way of asserting that calls are made in a "
"particular way:"
msgstr ""

#: ../../../library/unittest.mock.rst:270
msgid ""
"Assert that the mock was called exactly once and with the specified "
"arguments."
msgstr ""

#: ../../../library/unittest.mock.rst:285
msgid "assert the mock has been called with the specified arguments."
msgstr ""

#: ../../../library/unittest.mock.rst:287
msgid ""
"The assert passes if the mock has *ever* been called, unlike :meth:"
"`assert_called_with` and :meth:`assert_called_once_with` that only pass if "
"the call is the most recent one."
msgstr ""

#: ../../../library/unittest.mock.rst:299
msgid ""
"assert the mock has been called with the specified calls. The `mock_calls` "
"list is checked for the calls."
msgstr ""

#: ../../../library/unittest.mock.rst:302
msgid ""
"If `any_order` is false (the default) then the calls must be sequential. "
"There can be extra calls before or after the specified calls."
msgstr ""

#: ../../../library/unittest.mock.rst:306
msgid ""
"If `any_order` is true then the calls can be in any order, but they must all "
"appear in :attr:`mock_calls`."
msgstr ""

#: ../../../library/unittest.mock.rst:322
msgid "The reset_mock method resets all the call attributes on a mock object:"
msgstr ""

#: ../../../library/unittest.mock.rst:332
msgid ""
"This can be useful where you want to make a series of assertions that reuse "
"the same object. Note that `reset_mock` *doesn't* clear the return value, :"
"attr:`side_effect` or any child attributes you have set using normal "
"assignment. Child mocks and the return value mock (if any) are reset as well."
msgstr ""

#: ../../../library/unittest.mock.rst:341
msgid ""
"Add a spec to a mock. `spec` can either be an object or a list of strings. "
"Only attributes on the `spec` can be fetched as attributes from the mock."
msgstr ""

#: ../../../library/unittest.mock.rst:345
msgid "If `spec_set` is `True` then only attributes on the spec can be set."
msgstr ""

#: ../../../library/unittest.mock.rst:350
msgid ""
"Attach a mock as an attribute of this one, replacing its name and parent. "
"Calls to the attached mock will be recorded in the :attr:`method_calls` and :"
"attr:`mock_calls` attributes of this one."
msgstr ""

#: ../../../library/unittest.mock.rst:357
msgid "Set attributes on the mock through keyword arguments."
msgstr ""

#: ../../../library/unittest.mock.rst:359
msgid ""
"Attributes plus return values and side effects can be set on child mocks "
"using standard dot notation and unpacking a dictionary in the method call:"
msgstr ""

#: ../../../library/unittest.mock.rst:373
msgid "The same thing can be achieved in the constructor call to mocks:"
msgstr ""

#: ../../../library/unittest.mock.rst:386
msgid ""
"`configure_mock` exists to make it easier to do configuration after the mock "
"has been created."
msgstr ""

#: ../../../library/unittest.mock.rst:392
msgid ""
"`Mock` objects limit the results of `dir(some_mock)` to useful results. For "
"mocks with a `spec` this includes all the permitted attributes for the mock."
msgstr ""

#: ../../../library/unittest.mock.rst:396
msgid ""
"See :data:`FILTER_DIR` for what this filtering does, and how to switch it "
"off."
msgstr ""

#: ../../../library/unittest.mock.rst:402
msgid ""
"Create the child mocks for attributes and return value. By default child "
"mocks will be the same type as the parent. Subclasses of Mock may want to "
"override this to customize the way child mocks are made."
msgstr ""

#: ../../../library/unittest.mock.rst:407
msgid ""
"For non-callable mocks the callable variant will be used (rather than any "
"custom subclass)."
msgstr ""

#: ../../../library/unittest.mock.rst:413
msgid "A boolean representing whether or not the mock object has been called:"
msgstr ""

#: ../../../library/unittest.mock.rst:424
msgid "An integer telling you how many times the mock object has been called:"
msgstr ""

#: ../../../library/unittest.mock.rst:437
msgid "Set this to configure the value returned by calling the mock:"
msgstr ""

#: ../../../library/unittest.mock.rst:444
msgid ""
"The default return value is a mock object and you can configure it in the "
"normal way:"
msgstr ""

#: ../../../library/unittest.mock.rst:453
msgid "`return_value` can also be set in the constructor:"
msgstr ""

#: ../../../library/unittest.mock.rst:464
msgid ""
"This can either be a function to be called when the mock is called, or an "
"exception (class or instance) to be raised."
msgstr ""

#: ../../../library/unittest.mock.rst:467
msgid ""
"If you pass in a function it will be called with same arguments as the mock "
"and unless the function returns the :data:`DEFAULT` singleton the call to "
"the mock will then return whatever the function returns. If the function "
"returns :data:`DEFAULT` then the mock will return its normal value (from "
"the :attr:`return_value`)."
msgstr ""

#: ../../../library/unittest.mock.rst:473
msgid ""
"An example of a mock that raises an exception (to test exception handling of "
"an API):"
msgstr ""

#: ../../../library/unittest.mock.rst:483
msgid "Using `side_effect` to return a sequence of values:"
msgstr ""

#: ../../../library/unittest.mock.rst:490
msgid ""
"The `side_effect` function is called with the same arguments as the mock (so "
"it is wise for it to take arbitrary args and keyword arguments) and whatever "
"it returns is used as the return value for the call. The exception is if "
"`side_effect` returns :data:`DEFAULT`, in which case the normal :attr:"
"`return_value` is used."
msgstr ""

#: ../../../library/unittest.mock.rst:504
msgid ""
"`side_effect` can be set in the constructor. Here's an example that adds one "
"to the value the mock is called with and returns it:"
msgstr ""

#: ../../../library/unittest.mock.rst:514
msgid "Setting `side_effect` to `None` clears it:"
msgstr ""

#: ../../../library/unittest.mock.rst:528
msgid ""
"This is either `None` (if the mock hasn't been called), or the arguments "
"that the mock was last called with. This will be in the form of a tuple: the "
"first member is any ordered arguments the mock was called with (or an empty "
"tuple) and the second member is any keyword arguments (or an empty "
"dictionary)."
msgstr ""

#: ../../../library/unittest.mock.rst:551
msgid ""
"`call_args`, along with members of the lists :attr:`call_args_list`, :attr:"
"`method_calls` and :attr:`mock_calls` are :data:`call` objects. These are "
"tuples, so they can be unpacked to get at the individual arguments and make "
"more complex assertions. See :ref:`calls as tuples <calls-as-tuples>`."
msgstr ""

#: ../../../library/unittest.mock.rst:560
msgid ""
"This is a list of all the calls made to the mock object in sequence (so the "
"length of the list is the number of times it has been called). Before any "
"calls have been made it is an empty list. The :data:`call` object can be "
"used for conveniently constructing lists of calls to compare with "
"`call_args_list`."
msgstr ""

#: ../../../library/unittest.mock.rst:576
msgid ""
"Members of `call_args_list` are :data:`call` objects. These can be unpacked "
"as tuples to get at the individual arguments. See :ref:`calls as tuples "
"<calls-as-tuples>`."
msgstr ""

#: ../../../library/unittest.mock.rst:583
msgid ""
"As well as tracking calls to themselves, mocks also track calls to methods "
"and attributes, and *their* methods and attributes:"
msgstr ""

#: ../../../library/unittest.mock.rst:594
msgid ""
"Members of `method_calls` are :data:`call` objects. These can be unpacked as "
"tuples to get at the individual arguments. See :ref:`calls as tuples <calls-"
"as-tuples>`."
msgstr ""

#: ../../../library/unittest.mock.rst:601
msgid ""
"`mock_calls` records *all* calls to the mock object, its methods, magic "
"methods *and* return value mocks."
msgstr ""

#: ../../../library/unittest.mock.rst:619
msgid ""
"Members of `mock_calls` are :data:`call` objects. These can be unpacked as "
"tuples to get at the individual arguments. See :ref:`calls as tuples <calls-"
"as-tuples>`."
msgstr ""

#: ../../../library/unittest.mock.rst:626
msgid ""
"Normally the `__class__` attribute of an object will return its type. For a "
"mock object with a `spec` `__class__` returns the spec class instead. This "
"allows mock objects to pass `isinstance` tests for the object they are "
"replacing / masquerading as:"
msgstr ""

#: ../../../library/unittest.mock.rst:635
msgid ""
"`__class__` is assignable to, this allows a mock to pass an `isinstance` "
"check without forcing you to use a spec:"
msgstr ""

#: ../../../library/unittest.mock.rst:645
msgid ""
"A non-callable version of `Mock`. The constructor parameters have the same "
"meaning of `Mock`, with the exception of `return_value` and `side_effect` "
"which have no meaning on a non-callable mock."
msgstr ""

#: ../../../library/unittest.mock.rst:649
msgid ""
"Mock objects that use a class or an instance as a `spec` or `spec_set` are "
"able to pass `isinstance` tests:"
msgstr ""

#: ../../../library/unittest.mock.rst:659
msgid ""
"The `Mock` classes have support for mocking magic methods. See :ref:`magic "
"methods <magic-methods>` for the full details."
msgstr ""

#: ../../../library/unittest.mock.rst:662
msgid ""
"The mock classes and the :func:`patch` decorators all take arbitrary keyword "
"arguments for configuration. For the `patch` decorators the keywords are "
"passed to the constructor of the mock being created. The keyword arguments "
"are for configuring attributes of the mock:"
msgstr ""

#: ../../../library/unittest.mock.rst:673
msgid ""
"The return value and side effect of child mocks can be set in the same way, "
"using dotted notation. As you can't use dotted names directly in a call you "
"have to create a dictionary and unpack it using `**`:"
msgstr ""

#: ../../../library/unittest.mock.rst:691
msgid ""
"A mock intended to be used as a property, or other descriptor, on a class. "
"`PropertyMock` provides `__get__` and `__set__` methods so you can specify a "
"return value when it is fetched."
msgstr ""

#: ../../../library/unittest.mock.rst:695
msgid ""
"Fetching a `PropertyMock` instance from an object calls the mock, with no "
"args. Setting it calls the mock with the value being set."
msgstr ""

#: ../../../library/unittest.mock.rst:716
msgid ""
"Because of the way mock attributes are stored you can't directly attach a "
"`PropertyMock` to a mock object. Instead you can attach it to the mock type "
"object::"
msgstr ""

#: ../../../library/unittest.mock.rst:729
msgid "Calling"
msgstr ""

#: ../../../library/unittest.mock.rst:731
msgid ""
"Mock objects are callable. The call will return the value set as the :attr:"
"`~Mock.return_value` attribute. The default return value is a new Mock "
"object; it is created the first time the return value is accessed (either "
"explicitly or by calling the Mock) - but it is stored and the same one "
"returned each time."
msgstr ""

#: ../../../library/unittest.mock.rst:737
msgid ""
"Calls made to the object will be recorded in the attributes like :attr:"
"`~Mock.call_args` and :attr:`~Mock.call_args_list`."
msgstr ""

#: ../../../library/unittest.mock.rst:740
msgid ""
"If :attr:`~Mock.side_effect` is set then it will be called after the call "
"has been recorded, so if `side_effect` raises an exception the call is still "
"recorded."
msgstr ""

#: ../../../library/unittest.mock.rst:744
msgid ""
"The simplest way to make a mock raise an exception when called is to make :"
"attr:`~Mock.side_effect` an exception class or instance:"
msgstr ""

#: ../../../library/unittest.mock.rst:762
msgid ""
"If `side_effect` is a function then whatever that function returns is what "
"calls to the mock return. The `side_effect` function is called with the same "
"arguments as the mock. This allows you to vary the return value of the call "
"dynamically, based on the input:"
msgstr ""

#: ../../../library/unittest.mock.rst:778
msgid ""
"If you want the mock to still return the default return value (a new mock), "
"or any set return value, then there are two ways of doing this. Either "
"return `mock.return_value` from inside `side_effect`, or return :data:"
"`DEFAULT`:"
msgstr ""

#: ../../../library/unittest.mock.rst:797
msgid ""
"To remove a `side_effect`, and return to the default behaviour, set the "
"`side_effect` to `None`:"
msgstr ""

#: ../../../library/unittest.mock.rst:811
msgid ""
"The `side_effect` can also be any iterable object. Repeated calls to the "
"mock will return values from the iterable (until the iterable is exhausted "
"and a `StopIteration` is raised):"
msgstr ""

#: ../../../library/unittest.mock.rst:827
msgid ""
"If any members of the iterable are exceptions they will be raised instead of "
"returned::"
msgstr ""

#: ../../../library/unittest.mock.rst:845
msgid "Deleting Attributes"
msgstr ""

#: ../../../library/unittest.mock.rst:847
msgid ""
"Mock objects create attributes on demand. This allows them to pretend to be "
"objects of any type."
msgstr ""

#: ../../../library/unittest.mock.rst:850
msgid ""
"You may want a mock object to return `False` to a `hasattr` call, or raise "
"an `AttributeError` when an attribute is fetched. You can do this by "
"providing an object as a `spec` for a mock, but that isn't always convenient."
msgstr ""

#: ../../../library/unittest.mock.rst:854
msgid ""
"You \"block\" attributes by deleting them. Once deleted, accessing an "
"attribute will raise an `AttributeError`."
msgstr ""

#: ../../../library/unittest.mock.rst:871
msgid "Mock names and the name attribute"
msgstr ""

#: ../../../library/unittest.mock.rst:873
msgid ""
"Since \"name\" is an argument to the :class:`Mock` constructor, if you want "
"your mock object to have a \"name\" attribute you can't just pass it in at "
"creation time. There are two alternatives. One option is to use :meth:`~Mock."
"configure_mock`::"
msgstr ""

#: ../../../library/unittest.mock.rst:883
msgid ""
"A simpler option is to simply set the \"name\" attribute after mock "
"creation::"
msgstr ""

#: ../../../library/unittest.mock.rst:890
msgid "Attaching Mocks as Attributes"
msgstr ""

#: ../../../library/unittest.mock.rst:892
msgid ""
"When you attach a mock as an attribute of another mock (or as the return "
"value) it becomes a \"child\" of that mock. Calls to the child are recorded "
"in the :attr:`~Mock.method_calls` and :attr:`~Mock.mock_calls` attributes of "
"the parent. This is useful for configuring child mocks and then attaching "
"them to the parent, or for attaching mocks to a parent that records all "
"calls to the children and allows you to make assertions about the order of "
"calls between mocks:"
msgstr ""

#: ../../../library/unittest.mock.rst:910
msgid ""
"The exception to this is if the mock has a name. This allows you to prevent "
"the \"parenting\" if for some reason you don't want it to happen."
msgstr ""

#: ../../../library/unittest.mock.rst:921
msgid ""
"Mocks created for you by :func:`patch` are automatically given names. To "
"attach mocks that have names to a parent you use the :meth:`~Mock."
"attach_mock` method:"
msgstr ""

#: ../../../library/unittest.mock.rst:939
msgid ""
"The only exceptions are magic methods and attributes (those that have "
"leading and trailing double underscores). Mock doesn't create these but "
"instead raises an ``AttributeError``. This is because the interpreter will "
"often implicitly request these methods, and gets *very* confused to get a "
"new Mock object when it expects a magic method. If you need magic method "
"support see :ref:`magic methods <magic-methods>`."
msgstr ""

#: ../../../library/unittest.mock.rst:948
msgid "The patchers"
msgstr ""

#: ../../../library/unittest.mock.rst:950
msgid ""
"The patch decorators are used for patching objects only within the scope of "
"the function they decorate. They automatically handle the unpatching for "
"you, even if exceptions are raised. All of these functions can also be used "
"in with statements or as class decorators."
msgstr ""

#: ../../../library/unittest.mock.rst:957
msgid "patch"
msgstr ""

#: ../../../library/unittest.mock.rst:961
msgid ""
"`patch` is straightforward to use. The key is to do the patching in the "
"right namespace. See the section `where to patch`_."
msgstr ""

#: ../../../library/unittest.mock.rst:966
msgid ""
"`patch` acts as a function decorator, class decorator or a context manager. "
"Inside the body of the function or with statement, the `target` is patched "
"with a `new` object. When the function/with statement exits the patch is "
"undone."
msgstr ""

#: ../../../library/unittest.mock.rst:971
msgid ""
"If `new` is omitted, then the target is replaced with a :class:`MagicMock`. "
"If `patch` is used as a decorator and `new` is omitted, the created mock is "
"passed in as an extra argument to the decorated function. If `patch` is used "
"as a context manager the created mock is returned by the context manager."
msgstr ""

#: ../../../library/unittest.mock.rst:977
msgid ""
"`target` should be a string in the form `'package.module.ClassName'`. The "
"`target` is imported and the specified object replaced with the `new` "
"object, so the `target` must be importable from the environment you are "
"calling `patch` from. The target is imported when the decorated function is "
"executed, not at decoration time."
msgstr ""

#: ../../../library/unittest.mock.rst:983
msgid ""
"The `spec` and `spec_set` keyword arguments are passed to the `MagicMock` if "
"patch is creating one for you."
msgstr ""

#: ../../../library/unittest.mock.rst:986
msgid ""
"In addition you can pass `spec=True` or `spec_set=True`, which causes patch "
"to pass in the object being mocked as the spec/spec_set object."
msgstr ""

#: ../../../library/unittest.mock.rst:989
msgid ""
"`new_callable` allows you to specify a different class, or callable object, "
"that will be called to create the `new` object. By default `MagicMock` is "
"used."
msgstr ""

#: ../../../library/unittest.mock.rst:993
msgid ""
"A more powerful form of `spec` is `autospec`. If you set `autospec=True` "
"then the mock with be created with a spec from the object being replaced. "
"All attributes of the mock will also have the spec of the corresponding "
"attribute of the object being replaced. Methods and functions being mocked "
"will have their arguments checked and will raise a `TypeError` if they are "
"called with the wrong signature. For mocks replacing a class, their return "
"value (the 'instance') will have the same spec as the class. See the :func:"
"`create_autospec` function and :ref:`auto-speccing`."
msgstr ""

#: ../../../library/unittest.mock.rst:1003
msgid ""
"Instead of `autospec=True` you can pass `autospec=some_object` to use an "
"arbitrary object as the spec instead of the one being replaced."
msgstr ""

#: ../../../library/unittest.mock.rst:1006
msgid ""
"By default `patch` will fail to replace attributes that don't exist. If you "
"pass in `create=True`, and the attribute doesn't exist, patch will create "
"the attribute for you when the patched function is called, and delete it "
"again afterwards. This is useful for writing tests against attributes that "
"your production code creates at runtime. It is off by default because it can "
"be dangerous. With it switched on you can write passing tests against APIs "
"that don't actually exist!"
msgstr ""

#: ../../../library/unittest.mock.rst:1014
msgid ""
"Patch can be used as a `TestCase` class decorator. It works by decorating "
"each test method in the class. This reduces the boilerplate code when your "
"test methods share a common patchings set. `patch` finds tests by looking "
"for method names that start with `patch.TEST_PREFIX`. By default this is "
"`test`, which matches the way `unittest` finds tests. You can specify an "
"alternative prefix by setting `patch.TEST_PREFIX`."
msgstr ""

#: ../../../library/unittest.mock.rst:1021
msgid ""
"Patch can be used as a context manager, with the with statement. Here the "
"patching applies to the indented block after the with statement. If you use "
"\"as\" then the patched object will be bound to the name after the \"as\"; "
"very useful if `patch` is creating a mock object for you."
msgstr ""

#: ../../../library/unittest.mock.rst:1026
msgid ""
"`patch` takes arbitrary keyword arguments. These will be passed to the "
"`Mock` (or `new_callable`) on construction."
msgstr ""

#: ../../../library/unittest.mock.rst:1029
msgid ""
"`patch.dict(...)`, `patch.multiple(...)` and `patch.object(...)` are "
"available for alternate use-cases."
msgstr ""

#: ../../../library/unittest.mock.rst:1032
msgid ""
"`patch` as function decorator, creating the mock for you and passing it into "
"the decorated function:"
msgstr ""

#: ../../../library/unittest.mock.rst:1042
msgid ""
"Patching a class replaces the class with a `MagicMock` *instance*. If the "
"class is instantiated in the code under test then it will be the :attr:"
"`~Mock.return_value` of the mock that will be used."
msgstr ""

#: ../../../library/unittest.mock.rst:1046
msgid ""
"If the class is instantiated multiple times you could use :attr:`~Mock."
"side_effect` to return a new mock each time. Alternatively you can set the "
"`return_value` to be anything you want."
msgstr ""

#: ../../../library/unittest.mock.rst:1050
msgid ""
"To configure return values on methods of *instances* on the patched class "
"you must do this on the `return_value`. For example:"
msgstr ""

#: ../../../library/unittest.mock.rst:1064
msgid ""
"If you use `spec` or `spec_set` and `patch` is replacing a *class*, then the "
"return value of the created mock will have the same spec."
msgstr ""

#: ../../../library/unittest.mock.rst:1074
msgid ""
"The `new_callable` argument is useful where you want to use an alternative "
"class to the default :class:`MagicMock` for the created mock. For example, "
"if you wanted a :class:`NonCallableMock` to be used:"
msgstr ""

#: ../../../library/unittest.mock.rst:1087
msgid ""
"Another use case might be to replace an object with a `io.StringIO` instance:"
msgstr ""

#: ../../../library/unittest.mock.rst:1100
msgid ""
"When `patch` is creating a mock for you, it is common that the first thing "
"you need to do is to configure the mock. Some of that configuration can be "
"done in the call to patch. Any arbitrary keywords you pass into the call "
"will be used to set attributes on the created mock:"
msgstr ""

#: ../../../library/unittest.mock.rst:1112
msgid ""
"As well as attributes on the created mock attributes, like the :attr:`~Mock."
"return_value` and :attr:`~Mock.side_effect`, of child mocks can also be "
"configured. These aren't syntactically valid to pass in directly as keyword "
"arguments, but a dictionary with these as keys can still be expanded into a "
"`patch` call using `**`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1130
msgid "patch.object"
msgstr ""

#: ../../../library/unittest.mock.rst:1134
msgid ""
"patch the named member (`attribute`) on an object (`target`) with a mock "
"object."
msgstr ""

#: ../../../library/unittest.mock.rst:1137
msgid ""
"`patch.object` can be used as a decorator, class decorator or a context "
"manager. Arguments `new`, `spec`, `create`, `spec_set`, `autospec` and "
"`new_callable` have the same meaning as for `patch`. Like `patch`, `patch."
"object` takes arbitrary keyword arguments for configuring the mock object it "
"creates."
msgstr ""

#: ../../../library/unittest.mock.rst:1143
msgid ""
"When used as a class decorator `patch.object` honours `patch.TEST_PREFIX` "
"for choosing which methods to wrap."
msgstr ""

#: ../../../library/unittest.mock.rst:1146
msgid ""
"You can either call `patch.object` with three arguments or two arguments. "
"The three argument form takes the object to be patched, the attribute name "
"and the object to replace the attribute with."
msgstr ""

#: ../../../library/unittest.mock.rst:1150
msgid ""
"When calling with the two argument form you omit the replacement object, and "
"a mock is created for you and passed in as an extra argument to the "
"decorated function:"
msgstr ""

#: ../../../library/unittest.mock.rst:1161
msgid ""
"`spec`, `create` and the other arguments to `patch.object` have the same "
"meaning as they do for `patch`."
msgstr ""

#: ../../../library/unittest.mock.rst:1166
msgid "patch.dict"
msgstr ""

#: ../../../library/unittest.mock.rst:1170
msgid ""
"Patch a dictionary, or dictionary like object, and restore the dictionary to "
"its original state after the test."
msgstr ""

#: ../../../library/unittest.mock.rst:1173
msgid ""
"`in_dict` can be a dictionary or a mapping like container. If it is a "
"mapping then it must at least support getting, setting and deleting items "
"plus iterating over keys."
msgstr ""

#: ../../../library/unittest.mock.rst:1177
msgid ""
"`in_dict` can also be a string specifying the name of the dictionary, which "
"will then be fetched by importing it."
msgstr ""

#: ../../../library/unittest.mock.rst:1180
msgid ""
"`values` can be a dictionary of values to set in the dictionary. `values` "
"can also be an iterable of `(key, value)` pairs."
msgstr ""

#: ../../../library/unittest.mock.rst:1183
msgid ""
"If `clear` is true then the dictionary will be cleared before the new values "
"are set."
msgstr ""

#: ../../../library/unittest.mock.rst:1186
msgid ""
"`patch.dict` can also be called with arbitrary keyword arguments to set "
"values in the dictionary."
msgstr ""

#: ../../../library/unittest.mock.rst:1189
msgid ""
"`patch.dict` can be used as a context manager, decorator or class decorator. "
"When used as a class decorator `patch.dict` honours `patch.TEST_PREFIX` for "
"choosing which methods to wrap."
msgstr ""

#: ../../../library/unittest.mock.rst:1193
msgid ""
"`patch.dict` can be used to add members to a dictionary, or simply let a "
"test change a dictionary, and ensure the dictionary is restored when the "
"test ends."
msgstr ""

#: ../../../library/unittest.mock.rst:1210
msgid ""
"Keywords can be used in the `patch.dict` call to set values in the "
"dictionary:"
msgstr ""

#: ../../../library/unittest.mock.rst:1220
msgid ""
"`patch.dict` can be used with dictionary like objects that aren't actually "
"dictionaries. At the very minimum they must support item getting, setting, "
"deleting and either iteration or membership test. This corresponds to the "
"magic methods `__getitem__`, `__setitem__`, `__delitem__` and either "
"`__iter__` or `__contains__`."
msgstr ""

#: ../../../library/unittest.mock.rst:1249
msgid "patch.multiple"
msgstr ""

#: ../../../library/unittest.mock.rst:1253
msgid ""
"Perform multiple patches in a single call. It takes the object to be patched "
"(either as an object or a string to fetch the object by importing) and "
"keyword arguments for the patches::"
msgstr ""

#: ../../../library/unittest.mock.rst:1260
msgid ""
"Use :data:`DEFAULT` as the value if you want `patch.multiple` to create "
"mocks for you. In this case the created mocks are passed into a decorated "
"function by keyword, and a dictionary is returned when `patch.multiple` is "
"used as a context manager."
msgstr ""

#: ../../../library/unittest.mock.rst:1265
msgid ""
"`patch.multiple` can be used as a decorator, class decorator or a context "
"manager. The arguments `spec`, `spec_set`, `create`, `autospec` and "
"`new_callable` have the same meaning as for `patch`. These arguments will be "
"applied to *all* patches done by `patch.multiple`."
msgstr ""

#: ../../../library/unittest.mock.rst:1270
msgid ""
"When used as a class decorator `patch.multiple` honours `patch.TEST_PREFIX` "
"for choosing which methods to wrap."
msgstr ""

#: ../../../library/unittest.mock.rst:1273
msgid ""
"If you want `patch.multiple` to create mocks for you, then you can use :data:"
"`DEFAULT` as the value. If you use `patch.multiple` as a decorator then the "
"created mocks are passed into the decorated function by keyword."
msgstr ""

#: ../../../library/unittest.mock.rst:1287
msgid ""
"`patch.multiple` can be nested with other `patch` decorators, but put "
"arguments passed by keyword *after* any of the standard arguments created by "
"`patch`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1299
msgid ""
"If `patch.multiple` is used as a context manager, the value returned by the "
"context manger is a dictionary where created mocks are keyed by name:"
msgstr ""

#: ../../../library/unittest.mock.rst:1313
msgid "patch methods: start and stop"
msgstr ""

#: ../../../library/unittest.mock.rst:1315
msgid ""
"All the patchers have `start` and `stop` methods. These make it simpler to "
"do patching in `setUp` methods or where you want to do multiple patches "
"without nesting decorators or with statements."
msgstr ""

#: ../../../library/unittest.mock.rst:1319
msgid ""
"To use them call `patch`, `patch.object` or `patch.dict` as normal and keep "
"a reference to the returned `patcher` object. You can then call `start` to "
"put the patch in place and `stop` to undo it."
msgstr ""

#: ../../../library/unittest.mock.rst:1323
msgid ""
"If you are using `patch` to create a mock for you then it will be returned "
"by the call to `patcher.start`."
msgstr ""

#: ../../../library/unittest.mock.rst:1337
msgid ""
"A typical use case for this might be for doing multiple patches in the "
"`setUp` method of a `TestCase`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1359
msgid ""
"If you use this technique you must ensure that the patching is \"undone\" by "
"calling `stop`. This can be fiddlier than you might think, because if an "
"exception is raised in the ``setUp`` then ``tearDown`` is not called. :meth:"
"`unittest.TestCase.addCleanup` makes this easier:"
msgstr ""

#: ../../../library/unittest.mock.rst:1374
msgid ""
"As an added bonus you no longer need to keep a reference to the `patcher` "
"object."
msgstr ""

#: ../../../library/unittest.mock.rst:1377
msgid ""
"It is also possible to stop all patches which have been started by using "
"`patch.stopall`."
msgstr ""

#: ../../../library/unittest.mock.rst:1382
msgid "Stop all active patches. Only stops patches started with `start`."
msgstr ""

#: ../../../library/unittest.mock.rst:1386
msgid "TEST_PREFIX"
msgstr ""

#: ../../../library/unittest.mock.rst:1388
msgid ""
"All of the patchers can be used as class decorators. When used in this way "
"they wrap every test method on the class. The patchers recognise methods "
"that start with `test` as being test methods. This is the same way that the :"
"class:`unittest.TestLoader` finds test methods by default."
msgstr ""

#: ../../../library/unittest.mock.rst:1393
msgid ""
"It is possible that you want to use a different prefix for your tests. You "
"can inform the patchers of the different prefix by setting `patch."
"TEST_PREFIX`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1416
msgid "Nesting Patch Decorators"
msgstr ""

#: ../../../library/unittest.mock.rst:1418
msgid ""
"If you want to perform multiple patches then you can simply stack up the "
"decorators."
msgstr ""

#: ../../../library/unittest.mock.rst:1421
msgid "You can stack up multiple patch decorators using this pattern:"
msgstr ""

#: ../../../library/unittest.mock.rst:1437
msgid ""
"Note that the decorators are applied from the bottom upwards. This is the "
"standard way that Python applies decorators. The order of the created mocks "
"passed into your test function matches this order."
msgstr ""

#: ../../../library/unittest.mock.rst:1445
msgid "Where to patch"
msgstr ""

#: ../../../library/unittest.mock.rst:1447
msgid ""
"`patch` works by (temporarily) changing the object that a *name* points to "
"with another one. There can be many names pointing to any individual object, "
"so for patching to work you must ensure that you patch the name used by the "
"system under test."
msgstr ""

#: ../../../library/unittest.mock.rst:1452
msgid ""
"The basic principle is that you patch where an object is *looked up*, which "
"is not necessarily the same place as where it is defined. A couple of "
"examples will help to clarify this."
msgstr ""

#: ../../../library/unittest.mock.rst:1456
msgid ""
"Imagine we have a project that we want to test with the following structure::"
msgstr ""

#: ../../../library/unittest.mock.rst:1465
msgid ""
"Now we want to test `some_function` but we want to mock out `SomeClass` "
"using `patch`. The problem is that when we import module b, which we will "
"have to do then it imports `SomeClass` from module a. If we use `patch` to "
"mock out `a.SomeClass` then it will have no effect on our test; module b "
"already has a reference to the *real* `SomeClass` and it looks like our "
"patching had no effect."
msgstr ""

#: ../../../library/unittest.mock.rst:1472
msgid ""
"The key is to patch out `SomeClass` where it is used (or where it is looked "
"up ). In this case `some_function` will actually look up `SomeClass` in "
"module b, where we have imported it. The patching should look like::"
msgstr ""

#: ../../../library/unittest.mock.rst:1478
msgid ""
"However, consider the alternative scenario where instead of `from a import "
"SomeClass` module b does `import a` and `some_function` uses `a.SomeClass`. "
"Both of these import forms are common. In this case the class we want to "
"patch is being looked up on the a module and so we have to patch `a."
"SomeClass` instead::"
msgstr ""

#: ../../../library/unittest.mock.rst:1487
msgid "Patching Descriptors and Proxy Objects"
msgstr ""

#: ../../../library/unittest.mock.rst:1489
msgid ""
"Both patch_ and patch.object_ correctly patch and restore descriptors: class "
"methods, static methods and properties. You should patch these on the "
"*class* rather than an instance. They also work with *some* objects that "
"proxy attribute access, like the `django settings object <http://www."
"voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198>`_."
msgstr ""

#: ../../../library/unittest.mock.rst:1497
msgid "MagicMock and magic method support"
msgstr ""

#: ../../../library/unittest.mock.rst:1502
msgid "Mocking Magic Methods"
msgstr ""

#: ../../../library/unittest.mock.rst:1504
msgid ""
":class:`Mock` supports mocking the Python protocol methods, also known as "
"\"magic methods\". This allows mock objects to replace containers or other "
"objects that implement Python protocols."
msgstr ""

#: ../../../library/unittest.mock.rst:1508
msgid ""
"Because magic methods are looked up differently from normal methods [#]_, "
"this support has been specially implemented. This means that only specific "
"magic methods are supported. The supported list includes *almost* all of "
"them. If there are any missing that you need please let us know."
msgstr ""

#: ../../../library/unittest.mock.rst:1513
msgid ""
"You mock magic methods by setting the method you are interested in to a "
"function or a mock instance. If you are using a function then it *must* take "
"``self`` as the first argument [#]_."
msgstr ""

#: ../../../library/unittest.mock.rst:1536
msgid ""
"One use case for this is for mocking objects used as context managers in a "
"`with` statement:"
msgstr ""

#: ../../../library/unittest.mock.rst:1548
msgid ""
"Calls to magic methods do not appear in :attr:`~Mock.method_calls`, but they "
"are recorded in :attr:`~Mock.mock_calls`."
msgstr ""

#: ../../../library/unittest.mock.rst:1553
msgid ""
"If you use the `spec` keyword argument to create a mock then attempting to "
"set a magic method that isn't in the spec will raise an `AttributeError`."
msgstr ""

#: ../../../library/unittest.mock.rst:1556
msgid "The full list of supported magic methods is:"
msgstr ""

#: ../../../library/unittest.mock.rst:1558
msgid "``__hash__``, ``__sizeof__``, ``__repr__`` and ``__str__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1559
msgid "``__dir__``, ``__format__`` and ``__subclasses__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1560
msgid "``__floor__``, ``__trunc__`` and ``__ceil__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1561
msgid ""
"Comparisons: ``__cmp__``, ``__lt__``, ``__gt__``, ``__le__``, ``__ge__``, "
"``__eq__`` and ``__ne__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1563
msgid ""
"Container methods: ``__getitem__``, ``__setitem__``, ``__delitem__``, "
"``__contains__``, ``__len__``, ``__iter__``, ``__getslice__``, "
"``__setslice__``, ``__reversed__`` and ``__missing__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1566
msgid "Context manager: ``__enter__`` and ``__exit__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1567
msgid "Unary numeric methods: ``__neg__``, ``__pos__`` and ``__invert__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1568
msgid ""
"The numeric methods (including right hand and in-place variants): "
"``__add__``, ``__sub__``, ``__mul__``, ``__div__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__lshift__``, ``__rshift__``, ``__and__``, "
"``__xor__``, ``__or__``, and ``__pow__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1572
msgid ""
"Numeric conversion methods: ``__complex__``, ``__int__``, ``__float__``, "
"``__index__`` and ``__coerce__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1574
msgid "Descriptor methods: ``__get__``, ``__set__`` and ``__delete__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1575
msgid ""
"Pickling: ``__reduce__``, ``__reduce_ex__``, ``__getinitargs__``, "
"``__getnewargs__``, ``__getstate__`` and ``__setstate__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1579
msgid ""
"The following methods exist but are *not* supported as they are either in "
"use by mock, can't be set dynamically, or can cause problems:"
msgstr ""

#: ../../../library/unittest.mock.rst:1582
msgid "``__getattr__``, ``__setattr__``, ``__init__`` and ``__new__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1583
msgid ""
"``__prepare__``, ``__instancecheck__``, ``__subclasscheck__``, ``__del__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1588
msgid "Magic Mock"
msgstr ""

#: ../../../library/unittest.mock.rst:1590
msgid ""
"There are two `MagicMock` variants: `MagicMock` and `NonCallableMagicMock`."
msgstr ""

#: ../../../library/unittest.mock.rst:1595
msgid ""
"``MagicMock`` is a subclass of :class:`Mock` with default implementations of "
"most of the magic methods. You can use ``MagicMock`` without having to "
"configure the magic methods yourself."
msgstr ""

#: ../../../library/unittest.mock.rst:1599
msgid "The constructor parameters have the same meaning as for :class:`Mock`."
msgstr ""

#: ../../../library/unittest.mock.rst:1601
msgid ""
"If you use the `spec` or `spec_set` arguments then *only* magic methods that "
"exist in the spec will be created."
msgstr ""

#: ../../../library/unittest.mock.rst:1607
msgid "A non-callable version of `MagicMock`."
msgstr ""

#: ../../../library/unittest.mock.rst:1609
msgid ""
"The constructor parameters have the same meaning as for :class:`MagicMock`, "
"with the exception of `return_value` and `side_effect` which have no meaning "
"on a non-callable mock."
msgstr ""

#: ../../../library/unittest.mock.rst:1613
msgid ""
"The magic methods are setup with `MagicMock` objects, so you can configure "
"them and use them in the usual way:"
msgstr ""

#: ../../../library/unittest.mock.rst:1623
msgid ""
"By default many of the protocol methods are required to return objects of a "
"specific type. These methods are preconfigured with a default return value, "
"so that they can be used without you having to do anything if you aren't "
"interested in the return value. You can still *set* the return value "
"manually if you want to change the default."
msgstr ""

#: ../../../library/unittest.mock.rst:1629
msgid "Methods and their defaults:"
msgstr ""

#: ../../../library/unittest.mock.rst:1631
msgid "``__lt__``: NotImplemented"
msgstr ""

#: ../../../library/unittest.mock.rst:1632
msgid "``__gt__``: NotImplemented"
msgstr ""

#: ../../../library/unittest.mock.rst:1633
msgid "``__le__``: NotImplemented"
msgstr ""

#: ../../../library/unittest.mock.rst:1634
msgid "``__ge__``: NotImplemented"
msgstr ""

#: ../../../library/unittest.mock.rst:1635
msgid "``__int__``: 1"
msgstr ""

#: ../../../library/unittest.mock.rst:1636
msgid "``__contains__``: False"
msgstr ""

#: ../../../library/unittest.mock.rst:1637
msgid "``__len__``: 1"
msgstr ""

#: ../../../library/unittest.mock.rst:1638
msgid "``__iter__``: iter([])"
msgstr ""

#: ../../../library/unittest.mock.rst:1639
msgid "``__exit__``: False"
msgstr ""

#: ../../../library/unittest.mock.rst:1640
msgid "``__complex__``: 1j"
msgstr ""

#: ../../../library/unittest.mock.rst:1641
msgid "``__float__``: 1.0"
msgstr ""

#: ../../../library/unittest.mock.rst:1642
msgid "``__bool__``: True"
msgstr ""

#: ../../../library/unittest.mock.rst:1643
msgid "``__index__``: 1"
msgstr ""

#: ../../../library/unittest.mock.rst:1644
msgid "``__hash__``: default hash for the mock"
msgstr ""

#: ../../../library/unittest.mock.rst:1645
msgid "``__str__``: default str for the mock"
msgstr ""

#: ../../../library/unittest.mock.rst:1646
msgid "``__sizeof__``: default sizeof for the mock"
msgstr ""

#: ../../../library/unittest.mock.rst:1648
msgid "For example:"
msgstr ""

#: ../../../library/unittest.mock.rst:1660
msgid ""
"The two equality method, `__eq__` and `__ne__`, are special. They do the "
"default equality comparison on identity, using a side effect, unless you "
"change their return value to return something else:"
msgstr ""

#: ../../../library/unittest.mock.rst:1673
msgid ""
"The return value of `MagicMock.__iter__` can be any iterable object and "
"isn't required to be an iterator:"
msgstr ""

#: ../../../library/unittest.mock.rst:1683
msgid ""
"If the return value *is* an iterator, then iterating over it once will "
"consume it and subsequent iterations will result in an empty list:"
msgstr ""

#: ../../../library/unittest.mock.rst:1692
msgid ""
"``MagicMock`` has all of the supported magic methods configured except for "
"some of the obscure and obsolete ones. You can still set these up if you "
"want."
msgstr ""

#: ../../../library/unittest.mock.rst:1695
msgid ""
"Magic methods that are supported but not setup by default in ``MagicMock`` "
"are:"
msgstr ""

#: ../../../library/unittest.mock.rst:1697
msgid "``__subclasses__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1698
msgid "``__dir__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1699
msgid "``__format__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1700
msgid "``__get__``, ``__set__`` and ``__delete__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1701
msgid "``__reversed__`` and ``__missing__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1702
msgid ""
"``__reduce__``, ``__reduce_ex__``, ``__getinitargs__``, ``__getnewargs__``, "
"``__getstate__`` and ``__setstate__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1704
msgid "``__getformat__`` and ``__setformat__``"
msgstr ""

#: ../../../library/unittest.mock.rst:1708
msgid ""
"Magic methods *should* be looked up on the class rather than the instance. "
"Different versions of Python are inconsistent about applying this rule. The "
"supported protocol methods should work with all supported versions of Python."
msgstr ""

#: ../../../library/unittest.mock.rst:1712
msgid ""
"The function is basically hooked up to the class, but each ``Mock`` instance "
"is kept isolated from the others."
msgstr ""

#: ../../../library/unittest.mock.rst:1717
msgid "Helpers"
msgstr ""

#: ../../../library/unittest.mock.rst:1720
msgid "sentinel"
msgstr ""

#: ../../../library/unittest.mock.rst:1724
msgid ""
"The ``sentinel`` object provides a convenient way of providing unique "
"objects for your tests."
msgstr ""

#: ../../../library/unittest.mock.rst:1727
msgid ""
"Attributes are created on demand when you access them by name. Accessing the "
"same attribute will always return the same object. The objects returned have "
"a sensible repr so that test failure messages are readable."
msgstr ""

#: ../../../library/unittest.mock.rst:1731
msgid ""
"Sometimes when testing you need to test that a specific object is passed as "
"an argument to another method, or returned. It can be common to create named "
"sentinel objects to test this. `sentinel` provides a convenient way of "
"creating and testing the identity of objects like this."
msgstr ""

#: ../../../library/unittest.mock.rst:1736
msgid ""
"In this example we monkey patch `method` to return `sentinel.some_object`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1748
msgid "DEFAULT"
msgstr ""

#: ../../../library/unittest.mock.rst:1753
msgid ""
"The `DEFAULT` object is a pre-created sentinel (actually `sentinel."
"DEFAULT`). It can be used by :attr:`~Mock.side_effect` functions to indicate "
"that the normal return value should be used."
msgstr ""

#: ../../../library/unittest.mock.rst:1759
msgid "call"
msgstr ""

#: ../../../library/unittest.mock.rst:1763
msgid ""
"`call` is a helper object for making simpler assertions, for comparing with :"
"attr:`~Mock.call_args`, :attr:`~Mock.call_args_list`, :attr:`~Mock."
"mock_calls` and :attr:`~Mock.method_calls`. `call` can also be used with :"
"meth:`~Mock.assert_has_calls`."
msgstr ""

#: ../../../library/unittest.mock.rst:1776
msgid ""
"For a call object that represents multiple calls, `call_list` returns a list "
"of all the intermediate calls as well as the final call."
msgstr ""

#: ../../../library/unittest.mock.rst:1780
msgid ""
"`call_list` is particularly useful for making assertions on \"chained "
"calls\". A chained call is multiple calls on a single line of code. This "
"results in multiple entries in :attr:`~Mock.mock_calls` on a mock. Manually "
"constructing the sequence of calls can be tedious."
msgstr ""

#: ../../../library/unittest.mock.rst:1785
msgid ""
":meth:`~call.call_list` can construct the sequence of calls from the same "
"chained call:"
msgstr ""

#: ../../../library/unittest.mock.rst:1802
msgid ""
"A `call` object is either a tuple of (positional args, keyword args) or "
"(name, positional args, keyword args) depending on how it was constructed. "
"When you construct them yourself this isn't particularly interesting, but "
"the `call` objects that are in the :attr:`Mock.call_args`, :attr:`Mock."
"call_args_list` and :attr:`Mock.mock_calls` attributes can be introspected "
"to get at the individual arguments they contain."
msgstr ""

#: ../../../library/unittest.mock.rst:1809
msgid ""
"The `call` objects in :attr:`Mock.call_args` and :attr:`Mock.call_args_list` "
"are two-tuples of (positional args, keyword args) whereas the `call` objects "
"in :attr:`Mock.mock_calls`, along with ones you construct yourself, are "
"three-tuples of (name, positional args, keyword args)."
msgstr ""

#: ../../../library/unittest.mock.rst:1814
msgid ""
"You can use their \"tupleness\" to pull out the individual arguments for "
"more complex introspection and assertions. The positional arguments are a "
"tuple (an empty tuple if there are no positional arguments) and the keyword "
"arguments are a dictionary:"
msgstr ""

#: ../../../library/unittest.mock.rst:1848
msgid "create_autospec"
msgstr ""

#: ../../../library/unittest.mock.rst:1852
msgid ""
"Create a mock object using another object as a spec. Attributes on the mock "
"will use the corresponding attribute on the `spec` object as their spec."
msgstr ""

#: ../../../library/unittest.mock.rst:1856
msgid ""
"Functions or methods being mocked will have their arguments checked to "
"ensure that they are called with the correct signature."
msgstr ""

#: ../../../library/unittest.mock.rst:1859
msgid ""
"If `spec_set` is `True` then attempting to set attributes that don't exist "
"on the spec object will raise an `AttributeError`."
msgstr ""

#: ../../../library/unittest.mock.rst:1862
msgid ""
"If a class is used as a spec then the return value of the mock (the instance "
"of the class) will have the same spec. You can use a class as the spec for "
"an instance object by passing `instance=True`. The returned mock will only "
"be callable if instances of the mock are callable."
msgstr ""

#: ../../../library/unittest.mock.rst:1867
msgid ""
"`create_autospec` also takes arbitrary keyword arguments that are passed to "
"the constructor of the created mock."
msgstr ""

#: ../../../library/unittest.mock.rst:1870
msgid ""
"See :ref:`auto-speccing` for examples of how to use auto-speccing with "
"`create_autospec` and the `autospec` argument to :func:`patch`."
msgstr ""

#: ../../../library/unittest.mock.rst:1875
msgid "ANY"
msgstr ""

#: ../../../library/unittest.mock.rst:1879
msgid ""
"Sometimes you may need to make assertions about *some* of the arguments in a "
"call to mock, but either not care about some of the arguments or want to "
"pull them individually out of :attr:`~Mock.call_args` and make more complex "
"assertions on them."
msgstr ""

#: ../../../library/unittest.mock.rst:1884
msgid ""
"To ignore certain arguments you can pass in objects that compare equal to "
"*everything*. Calls to :meth:`~Mock.assert_called_with` and :meth:`~Mock."
"assert_called_once_with` will then succeed no matter what was passed in."
msgstr ""

#: ../../../library/unittest.mock.rst:1893
msgid ""
"`ANY` can also be used in comparisons with call lists like :attr:`~Mock."
"mock_calls`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1906
msgid "FILTER_DIR"
msgstr ""

#: ../../../library/unittest.mock.rst:1910
msgid ""
"`FILTER_DIR` is a module level variable that controls the way mock objects "
"respond to `dir` (only for Python 2.6 or more recent). The default is "
"`True`, which uses the filtering described below, to only show useful "
"members. If you dislike this filtering, or need to switch it off for "
"diagnostic purposes, then set `mock.FILTER_DIR = False`."
msgstr ""

#: ../../../library/unittest.mock.rst:1916
msgid ""
"With filtering on, `dir(some_mock)` shows only useful attributes and will "
"include any dynamically created attributes that wouldn't normally be shown. "
"If the mock was created with a `spec` (or `autospec` of course) then all the "
"attributes from the original are shown, even if they haven't been accessed "
"yet:"
msgstr ""

#: ../../../library/unittest.mock.rst:1937
msgid ""
"Many of the not-very-useful (private to `Mock` rather than the thing being "
"mocked) underscore and double underscore prefixed attributes have been "
"filtered from the result of calling `dir` on a `Mock`. If you dislike this "
"behaviour you can switch it off by setting the module level switch "
"`FILTER_DIR`:"
msgstr ""

#: ../../../library/unittest.mock.rst:1955
msgid ""
"Alternatively you can just use `vars(my_mock)` (instance members) and "
"`dir(type(my_mock))` (type members) to bypass the filtering irrespective of "
"`mock.FILTER_DIR`."
msgstr ""

#: ../../../library/unittest.mock.rst:1961
msgid "mock_open"
msgstr ""

#: ../../../library/unittest.mock.rst:1965
msgid ""
"A helper function to create a mock to replace the use of `open`. It works "
"for `open` called directly or used as a context manager."
msgstr ""

#: ../../../library/unittest.mock.rst:1968
msgid ""
"The `mock` argument is the mock object to configure. If `None` (the default) "
"then a `MagicMock` will be created for you, with the API limited to methods "
"or attributes available on standard file handles."
msgstr ""

#: ../../../library/unittest.mock.rst:1972
msgid ""
"`read_data` is a string for the `~io.IOBase.read` method of the file handle "
"to return.  This is an empty string by default."
msgstr ""

#: ../../../library/unittest.mock.rst:1975
msgid ""
"Using `open` as a context manager is a great way to ensure your file handles "
"are closed properly and is becoming common::"
msgstr ""

#: ../../../library/unittest.mock.rst:1981
msgid ""
"The issue is that even if you mock out the call to `open` it is the "
"*returned object* that is used as a context manager (and has `__enter__` and "
"`__exit__` called)."
msgstr ""

#: ../../../library/unittest.mock.rst:1985
msgid ""
"Mocking context managers with a :class:`MagicMock` is common enough and "
"fiddly enough that a helper function is useful."
msgstr ""

#: ../../../library/unittest.mock.rst:2002
msgid "And for reading files:"
msgstr ""

#: ../../../library/unittest.mock.rst:2015
msgid "Autospeccing"
msgstr ""

#: ../../../library/unittest.mock.rst:2017
msgid ""
"Autospeccing is based on the existing `spec` feature of mock. It limits the "
"api of mocks to the api of an original object (the spec), but it is "
"recursive (implemented lazily) so that attributes of mocks only have the "
"same api as the attributes of the spec. In addition mocked functions / "
"methods have the same call signature as the original so they raise a "
"`TypeError` if they are called incorrectly."
msgstr ""

#: ../../../library/unittest.mock.rst:2024
msgid "Before I explain how auto-speccing works, here's why it is needed."
msgstr ""

#: ../../../library/unittest.mock.rst:2026
msgid ""
"`Mock` is a very powerful and flexible object, but it suffers from two flaws "
"when used to mock out objects from a system under test. One of these flaws "
"is specific to the `Mock` api and the other is a more general problem with "
"using mock objects."
msgstr ""

#: ../../../library/unittest.mock.rst:2031
msgid ""
"First the problem specific to `Mock`. `Mock` has two assert methods that are "
"extremely handy: :meth:`~Mock.assert_called_with` and :meth:`~Mock."
"assert_called_once_with`."
msgstr ""

#: ../../../library/unittest.mock.rst:2044
msgid ""
"Because mocks auto-create attributes on demand, and allow you to call them "
"with arbitrary arguments, if you misspell one of these assert methods then "
"your assertion is gone:"
msgstr ""

#: ../../../library/unittest.mock.rst:2054
msgid "Your tests can pass silently and incorrectly because of the typo."
msgstr ""

#: ../../../library/unittest.mock.rst:2056
msgid ""
"The second issue is more general to mocking. If you refactor some of your "
"code, rename members and so on, any tests for code that is still using the "
"*old api* but uses mocks instead of the real objects will still pass. This "
"means your tests can all pass even though your code is broken."
msgstr ""

#: ../../../library/unittest.mock.rst:2061
msgid ""
"Note that this is another reason why you need integration tests as well as "
"unit tests. Testing everything in isolation is all fine and dandy, but if "
"you don't test how your units are \"wired together\" there is still lots of "
"room for bugs that tests might have caught."
msgstr ""

#: ../../../library/unittest.mock.rst:2066
msgid ""
"`mock` already provides a feature to help with this, called speccing. If you "
"use a class or instance as the `spec` for a mock then you can only access "
"attributes on the mock that exist on the real class:"
msgstr ""

#: ../../../library/unittest.mock.rst:2077
msgid ""
"The spec only applies to the mock itself, so we still have the same issue "
"with any methods on the mock:"
msgstr ""

#: ../../../library/unittest.mock.rst:2086
msgid ""
"Auto-speccing solves this problem. You can either pass `autospec=True` to "
"`patch` / `patch.object` or use the `create_autospec` function to create a "
"mock with a spec. If you use the `autospec=True` argument to `patch` then "
"the object that is being replaced will be used as the spec object. Because "
"the speccing is done \"lazily\" (the spec is created as attributes on the "
"mock are accessed) you can use it with very complex or deeply nested objects "
"(like modules that import modules that import modules) without a big "
"performance hit."
msgstr ""

#: ../../../library/unittest.mock.rst:2095
msgid "Here's an example of it in use:"
msgstr ""

#: ../../../library/unittest.mock.rst:2105
msgid ""
"You can see that `request.Request` has a spec. `request.Request` takes two "
"arguments in the constructor (one of which is `self`). Here's what happens "
"if we try to call it incorrectly:"
msgstr ""

#: ../../../library/unittest.mock.rst:2114
msgid ""
"The spec also applies to instantiated classes (i.e. the return value of "
"specced mocks):"
msgstr ""

#: ../../../library/unittest.mock.rst:2121
msgid ""
"`Request` objects are not callable, so the return value of instantiating our "
"mocked out `request.Request` is a non-callable mock. With the spec in place "
"any typos in our asserts will raise the correct error:"
msgstr ""

#: ../../../library/unittest.mock.rst:2133
msgid ""
"In many cases you will just be able to add `autospec=True` to your existing "
"`patch` calls and then be protected against bugs due to typos and api "
"changes."
msgstr ""

#: ../../../library/unittest.mock.rst:2137
msgid ""
"As well as using `autospec` through `patch` there is a :func:"
"`create_autospec` for creating autospecced mocks directly:"
msgstr ""

#: ../../../library/unittest.mock.rst:2145
msgid ""
"This isn't without caveats and limitations however, which is why it is not "
"the default behaviour. In order to know what attributes are available on the "
"spec object, autospec has to introspect (access attributes) the spec. As you "
"traverse attributes on the mock a corresponding traversal of the original "
"object is happening under the hood. If any of your specced objects have "
"properties or descriptors that can trigger code execution then you may not "
"be able to use autospec. On the other hand it is much better to design your "
"objects so that introspection is safe [#]_."
msgstr ""

#: ../../../library/unittest.mock.rst:2154
msgid ""
"A more serious problem is that it is common for instance attributes to be "
"created in the `__init__` method and not to exist on the class at all. "
"`autospec` can't know about any dynamically created attributes and restricts "
"the api to visible attributes."
msgstr ""

#: ../../../library/unittest.mock.rst:2171
msgid ""
"There are a few different ways of resolving this problem. The easiest, but "
"not necessarily the least annoying, way is to simply set the required "
"attributes on the mock after creation. Just because `autospec` doesn't allow "
"you to fetch attributes that don't exist on the spec it doesn't prevent you "
"setting them:"
msgstr ""

#: ../../../library/unittest.mock.rst:2182
msgid ""
"There is a more aggressive version of both `spec` and `autospec` that *does* "
"prevent you setting non-existent attributes. This is useful if you want to "
"ensure your code only *sets* valid attributes too, but obviously it prevents "
"this particular scenario:"
msgstr ""

#: ../../../library/unittest.mock.rst:2195
msgid ""
"Probably the best way of solving the problem is to add class attributes as "
"default values for instance members initialised in `__init__`. Note that if "
"you are only setting default attributes in `__init__` then providing them "
"via class attributes (shared between instances of course) is faster too. e.g."
msgstr ""

#: ../../../library/unittest.mock.rst:2205
msgid ""
"This brings up another issue. It is relatively common to provide a default "
"value of `None` for members that will later be an object of a different "
"type. `None` would be useless as a spec because it wouldn't let you access "
"*any* attributes or methods on it. As `None` is *never* going to be useful "
"as a spec, and probably indicates a member that will normally of some other "
"type, `autospec` doesn't use a spec for members that are set to `None`. "
"These will just be ordinary mocks (well - `MagicMocks`):"
msgstr ""

#: ../../../library/unittest.mock.rst:2220
msgid ""
"If modifying your production classes to add defaults isn't to your liking "
"then there are more options. One of these is simply to use an instance as "
"the spec rather than the class. The other is to create a subclass of the "
"production class and add the defaults to the subclass without affecting the "
"production class. Both of these require you to use an alternative object as "
"the spec. Thankfully `patch` supports this - you can simply pass the "
"alternative object as the `autospec` argument:"
msgstr ""

#: ../../../library/unittest.mock.rst:2241
msgid ""
"This only applies to classes or already instantiated objects. Calling a "
"mocked class to create a mock instance *does not* create a real instance. It "
"is only attribute lookups - along with calls to `dir` - that are done."
msgstr ""
