# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/buffer.rst:6
msgid "Buffer Objects"
msgstr ""

#: ../../../c-api/buffer.rst:16
msgid ""
"Python objects implemented in C can export a \"buffer interface.\"  These "
"functions can be used by an object to expose its data in a raw, byte-"
"oriented format. Clients of the object can use the buffer interface to "
"access the object data directly, without needing to copy it first."
msgstr ""

#: ../../../c-api/buffer.rst:21
msgid ""
"Two examples of objects that support the buffer interface are bytes and "
"arrays. The bytes object exposes the character contents in the buffer "
"interface's byte-oriented form. An array can also expose its contents, but "
"it should be noted that array elements may be multi-byte values."
msgstr ""

#: ../../../c-api/buffer.rst:26
msgid ""
"An example user of the buffer interface is the file object's :meth:`write` "
"method. Any object that can export a series of bytes through the buffer "
"interface can be written to a file. There are a number of format codes to :"
"cfunc:`PyArg_ParseTuple` that operate against an object's buffer interface, "
"returning data from the target object."
msgstr ""

#: ../../../c-api/buffer.rst:34
msgid ""
"More information on the buffer interface is provided in the section :ref:"
"`buffer-structs`, under the description for :ctype:`PyBufferProcs`."
msgstr ""

#: ../../../c-api/buffer.rst:37
msgid ""
"Buffer objects are useful as a way to expose the data from another object's "
"buffer interface to the Python programmer.  They can also be used as a zero-"
"copy slicing mechanism.  Using their ability to reference a block of memory, "
"it is possible to expose any data to the Python programmer quite easily.  "
"The memory could be a large, constant array in a C extension, it could be a "
"raw block of memory for manipulation before passing to an operating system "
"library, or it could be used to pass around structured data in its native, "
"in-memory format."
msgstr ""

#: ../../../c-api/buffer.rst:132
msgid "Buffer related functions"
msgstr ""

#: ../../../c-api/buffer.rst:301
msgid "MemoryView objects"
msgstr ""

#: ../../../c-api/buffer.rst:303
msgid ""
"A memoryview object is an extended buffer object that could replace the "
"buffer object (but doesn't have to as that could be kept as a simple 1-d "
"memoryview object).  It, unlike :ctype:`Py_buffer`, is a Python object "
"(exposed as :class:`memoryview` in :mod:`builtins`), so it can be used with "
"Python code."
msgstr ""

#: ../../../c-api/buffer.rst:12
msgid "buffer"
msgstr ""

#: ../../../c-api/buffer.rst:12
msgid "buffer interface"
msgstr ""

#: ../../../c-api/buffer.rst:32
msgid "PyBufferProcs"
msgstr ""
