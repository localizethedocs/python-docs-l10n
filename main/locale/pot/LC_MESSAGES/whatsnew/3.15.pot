# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../whatsnew/3.15.rst:4
msgid "What's new in Python 3.15"
msgstr ""

#: ../../../whatsnew/3.15.rst:0
msgid "Editor"
msgstr ""

#: ../../../whatsnew/3.15.rst:6
msgid "TBD"
msgstr ""

#: ../../../whatsnew/3.15.rst:48
msgid ""
"This article explains the new features in Python 3.15, compared to 3.14."
msgstr ""

#: ../../../whatsnew/3.15.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../../whatsnew/3.15.rst:54
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.15 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../../whatsnew/3.15.rst:60
msgid "Summary --- release highlights"
msgstr ""

#: ../../../whatsnew/3.15.rst:71 ../../../whatsnew/3.15.rst:829
msgid "New features"
msgstr ""

#: ../../../whatsnew/3.15.rst:76
msgid "High frequency statistical sampling profiler"
msgstr ""

#: ../../../whatsnew/3.15.rst:78
msgid ""
"A new statistical sampling profiler has been added to the new :mod:`!"
"profiling` module as :mod:`!profiling.sampling`. This profiler enables low-"
"overhead performance analysis of running Python processes without requiring "
"code modification or process restart."
msgstr ""

#: ../../../whatsnew/3.15.rst:82
msgid ""
"Unlike deterministic profilers (:mod:`cProfile` and :mod:`profile`) that "
"instrument every function call, the sampling profiler periodically captures "
"stack traces from running processes.  This approach provides virtually zero "
"overhead while achieving sampling rates of **up to 1,000,000 Hz**, making it "
"the fastest sampling profiler available for Python (at the time of its "
"contribution) and ideal for debugging performance issues in production "
"environments."
msgstr ""

#: ../../../whatsnew/3.15.rst:89
msgid "Key features include:"
msgstr ""

#: ../../../whatsnew/3.15.rst:91
msgid ""
"**Zero-overhead profiling**: Attach to any running Python process without "
"affecting its performance"
msgstr ""

#: ../../../whatsnew/3.15.rst:93
msgid ""
"**No code modification required**: Profile existing applications without "
"restart"
msgstr ""

#: ../../../whatsnew/3.15.rst:94
msgid ""
"**Real-time statistics**: Monitor sampling quality during data collection"
msgstr ""

#: ../../../whatsnew/3.15.rst:95
msgid ""
"**Multiple output formats**: Generate both detailed statistics and "
"flamegraph data"
msgstr ""

#: ../../../whatsnew/3.15.rst:96
msgid ""
"**Thread-aware profiling**: Option to profile all threads or just the main "
"thread"
msgstr ""

#: ../../../whatsnew/3.15.rst:98
msgid "Profile process 1234 for 10 seconds with default settings::"
msgstr ""

#: ../../../whatsnew/3.15.rst:102
msgid "Profile with custom interval and duration, save to file::"
msgstr ""

#: ../../../whatsnew/3.15.rst:106
msgid "Generate collapsed stacks for flamegraph::"
msgstr ""

#: ../../../whatsnew/3.15.rst:110
msgid "Profile all threads and sort by total time::"
msgstr ""

#: ../../../whatsnew/3.15.rst:114
msgid "The profiler generates statistical estimates of where time is spent::"
msgstr ""

#: ../../../whatsnew/3.15.rst:163
msgid ""
"The profiler automatically identifies performance bottlenecks through "
"statistical analysis, highlighting functions with high CPU usage and call "
"frequency patterns."
msgstr ""

#: ../../../whatsnew/3.15.rst:166
msgid ""
"This capability is particularly valuable for debugging performance issues in "
"production systems where traditional profiling approaches would be too "
"intrusive."
msgstr ""

#: ../../../whatsnew/3.15.rst:169
msgid "(Contributed by Pablo Galindo and László Kiss Kollár in :gh:`135953`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:173
msgid "Improved error messages"
msgstr ""

#: ../../../whatsnew/3.15.rst:175
msgid ""
"The interpreter now provides more helpful suggestions in :exc:"
"`AttributeError` exceptions when accessing an attribute on an object that "
"does not exist, but a similar attribute is available through one of its "
"members."
msgstr ""

#: ../../../whatsnew/3.15.rst:179
msgid ""
"For example, if the object has an attribute that itself exposes the "
"requested name, the error message will suggest accessing it via that inner "
"attribute:"
msgstr ""

#: ../../../whatsnew/3.15.rst:200
msgid "Running this code now produces a clearer suggestion:"
msgstr ""

#: ../../../whatsnew/3.15.rst:212
msgid "Other language changes"
msgstr ""

#: ../../../whatsnew/3.15.rst:214
msgid ""
"Python now uses UTF-8_ as the default encoding, independent of the system's "
"environment. This means that I/O operations without an explicit encoding, e."
"g. ``open('flying-circus.txt')``, will use UTF-8. UTF-8 is a widely-"
"supported Unicode_ character encoding that has become a *de facto* standard "
"for representing text, including nearly every webpage on the internet, many "
"common file formats, programming languages, and more."
msgstr ""

#: ../../../whatsnew/3.15.rst:221
msgid ""
"This only applies when no ``encoding`` argument is given. For best "
"compatibility between versions of Python, ensure that an explicit "
"``encoding`` argument is always provided. The :ref:`opt-in encoding warning "
"<io-encoding-warning>` can be used to identify code that may be affected by "
"this change. The special ``encoding='locale'`` argument uses the current "
"locale encoding, and has been supported since Python 3.10."
msgstr ""

#: ../../../whatsnew/3.15.rst:228
msgid ""
"To retain the previous behaviour, Python's UTF-8 mode may be disabled with "
"the :envvar:`PYTHONUTF8=0 <PYTHONUTF8>` environment variable or the :option:"
"`-X utf8=0 <-X>` command line option."
msgstr ""

#: ../../../whatsnew/3.15.rst:232
msgid ":pep:`686` for further details."
msgstr ""

#: ../../../whatsnew/3.15.rst:237
msgid ""
"(Contributed by Adam Turner in :gh:`133711`; PEP 686 written by Inada Naoki.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:239
msgid ""
"Several error messages incorrectly using the term \"argument\" have been "
"corrected. (Contributed by Stan Ulbrych in :gh:`133382`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:242
msgid ""
"The interpreter now tries to provide a suggestion when :func:`delattr` fails "
"due to a missing attribute. When an attribute name that closely resembles an "
"existing attribute is used, the interpreter will suggest the correct "
"attribute name in the error message. For example:"
msgstr ""

#: ../../../whatsnew/3.15.rst:259
msgid "(Contributed by Nikita Sobolev and Pranjal Prajapati in :gh:`136588`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:261
msgid ""
"Unraisable exceptions are now highlighted with color by default. This can be "
"controlled by :ref:`environment variables <using-on-controlling-color>`. "
"(Contributed by Peter Bierma in :gh:`134170`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:265
msgid ""
"The :meth:`~object.__repr__` of :class:`ImportError` and :class:"
"`ModuleNotFoundError` now shows \"name\" and \"path\" as ``name=<name>`` and "
"``path=<path>`` if they were given as keyword arguments at construction "
"time. (Contributed by Serhiy Storchaka, Oleg Iarygin, and Yoav Nir in :gh:"
"`74185`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:270
msgid ""
"The :attr:`~object.__dict__` and :attr:`!__weakref__` descriptors now use a "
"single descriptor instance per interpreter, shared across all types that "
"need them. This speeds up class creation, and helps avoid reference cycles. "
"(Contributed by Petr Viktorin in :gh:`135228`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:276
msgid ""
"The :option:`-W` option and the :envvar:`PYTHONWARNINGS` environment "
"variable can now specify regular expressions instead of literal strings to "
"match the warning message and the module name, if the corresponding field "
"starts and ends with a forward slash (``/``). (Contributed by Serhiy "
"Storchaka in :gh:`134716`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:282
msgid ""
"Functions that take timestamp or timeout arguments now accept any real "
"numbers (such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`), not only integers or floats, although this does not improve "
"precision. (Contributed by Serhiy Storchaka in :gh:`67795`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:289
msgid "New modules"
msgstr ""

#: ../../../whatsnew/3.15.rst:291
msgid "None yet."
msgstr ""

#: ../../../whatsnew/3.15.rst:295
msgid "Improved modules"
msgstr ""

#: ../../../whatsnew/3.15.rst:298
msgid "collections"
msgstr ""

#: ../../../whatsnew/3.15.rst:300
msgid ""
"Added :meth:`!collections.Counter.__xor__` and :meth:`!collections.Counter."
"__ixor__` to compute the symmetric difference between :class:`~collections."
"Counter` objects. (Contributed by Raymond Hettinger in :gh:`138682`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:306
msgid "collections.abc"
msgstr ""

#: ../../../whatsnew/3.15.rst:308
msgid ""
":class:`collections.abc.ByteString` has been removed from ``collections.abc."
"__all__``. :class:`!collections.abc.ByteString` has been deprecated since "
"Python 3.12, and is scheduled for removal in Python 3.17."
msgstr ""

#: ../../../whatsnew/3.15.rst:312 ../../../whatsnew/3.15.rst:774
msgid ""
"The following statements now cause ``DeprecationWarning``\\ s to be emitted "
"at runtime:"
msgstr ""

#: ../../../whatsnew/3.15.rst:315
msgid "``from collections.abc import ByteString``"
msgstr ""

#: ../../../whatsnew/3.15.rst:316
msgid "``import collections.abc; collections.abc.ByteString``."
msgstr ""

#: ../../../whatsnew/3.15.rst:318
msgid ""
"``DeprecationWarning``\\ s were already emitted if :class:`collections.abc."
"ByteString` was subclassed or used as the second argument to :func:"
"`isinstance` or :func:`issubclass`, but warnings were not previously emitted "
"if it was merely imported or accessed from the :mod:`!collections.abc` "
"module."
msgstr ""

#: ../../../whatsnew/3.15.rst:325
msgid "dbm"
msgstr ""

#: ../../../whatsnew/3.15.rst:327
msgid ""
"Added new :meth:`!reorganize` methods to :mod:`dbm.dumb` and :mod:`dbm."
"sqlite3` which allow to recover unused free space previously occupied by "
"deleted entries. (Contributed by Andrea Oliveri in :gh:`134004`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:334
msgid "difflib"
msgstr ""

#: ../../../whatsnew/3.15.rst:338
msgid ""
"Introduced the optional *color* parameter to :func:`difflib.unified_diff`, "
"enabling color output similar to :program:`git diff`. This can be controlled "
"by :ref:`environment variables <using-on-controlling-color>`. (Contributed "
"by Douglas Thor in :gh:`133725`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:344
msgid ""
"Improved the styling of HTML diff pages generated by the :class:`difflib."
"HtmlDiff` class, and migrated the output to the HTML5 standard. (Contributed "
"by Jiahao Li in :gh:`134580`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:350 ../../../whatsnew/3.15.rst:620
msgid "hashlib"
msgstr ""

#: ../../../whatsnew/3.15.rst:352
msgid ""
"Ensure that hash functions guaranteed to be always *available* exist as "
"attributes of :mod:`hashlib` even if they will not work at runtime due to "
"missing backend implementations. For instance, ``hashlib.md5`` will no "
"longer raise :exc:`AttributeError` if OpenSSL is not available and Python "
"has been built without MD5 support. (Contributed by Bénédikt Tran in :gh:"
"`136929`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:361
msgid "http.client"
msgstr ""

#: ../../../whatsnew/3.15.rst:363
msgid ""
"A new *max_response_headers* keyword-only parameter has been added to :class:"
"`~http.client.HTTPConnection` and :class:`~http.client.HTTPSConnection` "
"constructors. This parameter overrides the default maximum number of allowed "
"response headers. (Contributed by Alexander Enrique Urieles Nieto in :gh:"
"`131724`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:371
msgid "http.cookies"
msgstr ""

#: ../../../whatsnew/3.15.rst:373
msgid ""
"Allow '``\"``' double quotes in cookie values. (Contributed by Nick Burns "
"and Senthil Kumaran in :gh:`92936`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:378
msgid "locale"
msgstr ""

#: ../../../whatsnew/3.15.rst:380
msgid ""
":func:`~locale.setlocale` now supports language codes with ``@``-modifiers. "
"``@``-modifier are no longer silently removed in :func:`~locale.getlocale`, "
"but included in the language code. (Contributed by Serhiy Storchaka in :gh:"
"`137729`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:387
msgid "math"
msgstr ""

#: ../../../whatsnew/3.15.rst:389
msgid ""
"Add :func:`math.isnormal` and :func:`math.issubnormal` functions. "
"(Contributed by Sergey B Kirpichev in :gh:`132908`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:392
msgid ""
"Add :func:`math.fmax`, :func:`math.fmin` and :func:`math.signbit` functions. "
"(Contributed by Bénédikt Tran in :gh:`135853`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:397
msgid "mmap"
msgstr ""

#: ../../../whatsnew/3.15.rst:399
msgid ""
":class:`mmap.mmap` now has a *trackfd* parameter on Windows; if it is "
"``False``, the file handle corresponding to *fileno* will not be duplicated. "
"(Contributed by Serhiy Storchaka in :gh:`78502`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:406
msgid "os.path"
msgstr ""

#: ../../../whatsnew/3.15.rst:408
msgid ""
"Add support of the all-but-last mode in :func:`~os.path.realpath`. "
"(Contributed by Serhiy Storchaka in :gh:`71189`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:411
msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, :"
"data:`os.path.ALLOW_MISSING`. If used, errors other than :exc:"
"`FileNotFoundError` will be re-raised; the resulting path can be missing but "
"it will be free of symlinks. (Contributed by Petr Viktorin for :cve:"
"`2025-4517`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:419
msgid "resource"
msgstr ""

#: ../../../whatsnew/3.15.rst:421
msgid ""
"Add new constants: :data:`~resource.RLIMIT_NTHR`, :data:`~resource."
"RLIMIT_UMTXP`, :data:`~resource.RLIMIT_THREADS`, :data:`~resource."
"RLIM_SAVED_CUR`, and :data:`~resource.RLIM_SAVED_MAX`. (Contributed by "
"Serhiy Storchaka in :gh:`137512`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:428
msgid "shelve"
msgstr ""

#: ../../../whatsnew/3.15.rst:430
msgid ""
"Added new :meth:`!reorganize` method to :mod:`shelve` used to recover unused "
"free space previously occupied by deleted entries. (Contributed by Andrea "
"Oliveri in :gh:`134004`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:436
msgid "socket"
msgstr ""

#: ../../../whatsnew/3.15.rst:438
msgid ""
"Add constants for the ISO-TP CAN protocol. (Contributed by Patrick Menschel "
"and Stefan Tatschner in :gh:`86819`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:443
msgid "sqlite3"
msgstr ""

#: ../../../whatsnew/3.15.rst:445
msgid ""
"The :ref:`command-line interface <sqlite3-cli>` has several new features:"
msgstr ""

#: ../../../whatsnew/3.15.rst:447
msgid ""
"SQL keyword completion on <tab>. (Contributed by Long Tan in :gh:`133393`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:450
msgid ""
"Prompts, error messages, and help text are now colored. This is enabled by "
"default, see :ref:`using-on-controlling-color` for details. (Contributed by "
"Stan Ulbrych and Łukasz Langa in :gh:`133461`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:457
msgid "ssl"
msgstr ""

#: ../../../whatsnew/3.15.rst:459
msgid ""
"Indicate through :data:`ssl.HAS_PSK_TLS13` whether the :mod:`ssl` module "
"supports \"External PSKs\" in TLSv1.3, as described in RFC 9258. "
"(Contributed by Will Childs-Klein in :gh:`133624`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:463
msgid "Added new methods for managing groups used for SSL key agreement"
msgstr ""

#: ../../../whatsnew/3.15.rst:465
msgid ""
":meth:`ssl.SSLContext.set_groups` sets the groups allowed for doing key "
"agreement, extending the previous :meth:`ssl.SSLContext.set_ecdh_curve` "
"method. This new API provides the ability to list multiple groups and "
"supports fixed-field and post-quantum groups in addition to ECDH curves. "
"This method can also be used to control what key shares are sent in the TLS "
"handshake."
msgstr ""

#: ../../../whatsnew/3.15.rst:472
msgid ""
":meth:`ssl.SSLSocket.group` returns the group selected for doing key "
"agreement on the current connection after the TLS handshake completes. This "
"call requires OpenSSL 3.2 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:475
msgid ""
":meth:`ssl.SSLContext.get_groups` returns a list of all available key "
"agreement groups compatible with the minimum and maximum TLS versions "
"currently set in the context. This call requires OpenSSL 3.5 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:479
msgid "(Contributed by Ron Frederick in :gh:`136306`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:481
msgid ""
"Added a new method :meth:`ssl.SSLContext.set_ciphersuites` for setting TLS "
"1.3 ciphers. For TLS 1.2 or earlier, :meth:`ssl.SSLContext.set_ciphers` "
"should continue to be used. Both calls can be made on the same context and "
"the selected cipher suite will depend on the TLS version negotiated when a "
"connection is made. (Contributed by Ron Frederick in :gh:`137197`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:488
msgid "Added new methods for managing signature algorithms:"
msgstr ""

#: ../../../whatsnew/3.15.rst:490
msgid ""
":func:`ssl.get_sigalgs` returns a list of all available TLS signature "
"algorithms. This call requires OpenSSL 3.4 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:492
msgid ""
":meth:`ssl.SSLContext.set_client_sigalgs` sets the signature algorithms "
"allowed for certificate-based client authentication."
msgstr ""

#: ../../../whatsnew/3.15.rst:494
msgid ""
":meth:`ssl.SSLContext.set_server_sigalgs` sets the signature algorithms "
"allowed for the server to complete the TLS handshake."
msgstr ""

#: ../../../whatsnew/3.15.rst:496
msgid ""
":meth:`ssl.SSLSocket.client_sigalg` returns the signature algorithm selected "
"for client authentication on the current connection. This call requires "
"OpenSSL 3.5 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:499
msgid ""
":meth:`ssl.SSLSocket.server_sigalg` returns the signature algorithm selected "
"for the server to complete the TLS handshake on the current connection. This "
"call requires OpenSSL 3.5 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:503
msgid "(Contributed by Ron Frederick in :gh:`138252`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:507
msgid "sys"
msgstr ""

#: ../../../whatsnew/3.15.rst:509
msgid ""
"Add :data:`sys.abi_info` namespace to improve access to ABI information. "
"(Contributed by Klaus Zimmermann in :gh:`137476`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:514
msgid "tarfile"
msgstr ""

#: ../../../whatsnew/3.15.rst:516
msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in :gh:"
"`127987` and :cve:`2025-4138`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:519
msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes "
"when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:522
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"(re-)apply the extraction filter when substituting a link (hard or symbolic) "
"with a copy of another archive member, and when fixing up directory "
"attributes. The former raises a new exception, :exc:`~tarfile."
"LinkFallbackError`. (Contributed by Petr Viktorin for :cve:`2025-4330` and :"
"cve:`2024-12718`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:528
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and :"
"cve:`2025-4435`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:533
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"replace slashes by backslashes in symlink targets on Windows to prevent "
"creation of corrupted links. (Contributed by Christoph Walcher in :gh:"
"`57911`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:540
msgid "timeit"
msgstr ""

#: ../../../whatsnew/3.15.rst:542
msgid ""
"The command-line interface now colorizes error tracebacks by default. This "
"can be controlled with :ref:`environment variables <using-on-controlling-"
"color>`. (Contributed by Yi Hong in :gh:`139374`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:549
msgid "types"
msgstr ""

#: ../../../whatsnew/3.15.rst:551
msgid ""
"Expose the write-through :func:`locals` proxy type as :data:`types."
"FrameLocalsProxyType`. This represents the type of the :attr:`frame."
"f_locals` attribute, as described in :pep:`667`."
msgstr ""

#: ../../../whatsnew/3.15.rst:558
msgid "unittest"
msgstr ""

#: ../../../whatsnew/3.15.rst:560
msgid ""
":func:`unittest.TestCase.assertLogs` will now accept a formatter to control "
"how messages are formatted. (Contributed by Garry Cairns in :gh:`134567`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:566
msgid "xml.parsers.expat"
msgstr ""

#: ../../../whatsnew/3.15.rst:568
msgid ""
"Add :meth:`~xml.parsers.expat.xmlparser.SetAllocTrackerActivationThreshold` "
"and :meth:`~xml.parsers.expat.xmlparser.SetAllocTrackerMaximumAmplification` "
"to :ref:`xmlparser <xmlparser-objects>` objects to tune protections against "
"disproportional amounts of dynamic memory usage from within an Expat parser. "
"(Contributed by Bénédikt Tran in :gh:`90949`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:574
msgid ""
"Add :meth:`~xml.parsers.expat.xmlparser."
"SetBillionLaughsAttackProtectionActivationThreshold` and :meth:`~xml.parsers."
"expat.xmlparser.SetBillionLaughsAttackProtectionMaximumAmplification` to :"
"ref:`xmlparser <xmlparser-objects>` objects to tune protections against "
"`billion laughs`_ attacks. (Contributed by Bénédikt Tran in :gh:`90949`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:584
msgid "zlib"
msgstr ""

#: ../../../whatsnew/3.15.rst:586
msgid ""
"Allow combining two Adler-32 checksums via :func:`~zlib.adler32_combine`. "
"(Contributed by Callum Attryde and Bénédikt Tran in :gh:`134635`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:589
msgid ""
"Allow combining two CRC-32 checksums via :func:`~zlib.crc32_combine`. "
"(Contributed by Bénédikt Tran in :gh:`134635`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:596
msgid "Optimizations"
msgstr ""

#: ../../../whatsnew/3.15.rst:599
msgid "module_name"
msgstr ""

#: ../../../whatsnew/3.15.rst:601
msgid "TODO"
msgstr ""

#: ../../../whatsnew/3.15.rst:606
msgid "Deprecated"
msgstr ""

#: ../../../whatsnew/3.15.rst:609
msgid "CLI"
msgstr ""

#: ../../../whatsnew/3.15.rst:611
msgid ""
"Deprecate :option:`-b` and :option:`!-bb` command line options and schedule "
"them to become no-op in Python 3.17. These were primarily helpers for the "
"Python 2 -> 3 transition. Starting with Python 3.17, no :exc:`BytesWarning` "
"will be raised for these cases; use a type checker instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:617
msgid "(Contributed by Nikita Sobolev in :gh:`136355`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:622
msgid ""
"In hash function constructors such as :func:`~hashlib.new` or the direct "
"hash-named constructors such as :func:`~hashlib.md5` and :func:`~hashlib."
"sha256`, their optional initial data parameter could also be passed a "
"keyword argument named ``data=`` or ``string=`` in various :mod:`hashlib` "
"implementations."
msgstr ""

#: ../../../whatsnew/3.15.rst:628
msgid ""
"Support for the ``string`` keyword argument name is now deprecated and is "
"slated for removal in Python 3.19. Prefer passing the initial data as a "
"positional argument for maximum backwards compatibility."
msgstr ""

#: ../../../whatsnew/3.15.rst:632
msgid "(Contributed by Bénédikt Tran in :gh:`134978`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:635
msgid "__version__"
msgstr ""

#: ../../../whatsnew/3.15.rst:637
#: ../../../deprecations/pending-removal-in-3.20.rst:4
msgid ""
"The ``__version__`` attribute has been deprecated in these standard library "
"modules and will be removed in Python 3.20. Use :py:data:`sys.version_info` "
"instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:641
#: ../../../deprecations/pending-removal-in-3.20.rst:8
msgid ":mod:`argparse`"
msgstr ""

#: ../../../whatsnew/3.15.rst:642
#: ../../../deprecations/pending-removal-in-3.20.rst:9
msgid ":mod:`csv`"
msgstr ""

#: ../../../whatsnew/3.15.rst:643
#: ../../../deprecations/pending-removal-in-3.20.rst:10
msgid ":mod:`!ctypes.macholib`"
msgstr ""

#: ../../../whatsnew/3.15.rst:644
#: ../../../deprecations/pending-removal-in-3.20.rst:11
msgid ":mod:`ipaddress`"
msgstr ""

#: ../../../whatsnew/3.15.rst:645
#: ../../../deprecations/pending-removal-in-3.20.rst:12
msgid ":mod:`json`"
msgstr ""

#: ../../../whatsnew/3.15.rst:646
#: ../../../deprecations/pending-removal-in-3.20.rst:13
msgid ":mod:`logging` (``__date__`` also deprecated)"
msgstr ""

#: ../../../whatsnew/3.15.rst:647
#: ../../../deprecations/pending-removal-in-3.20.rst:14
msgid ":mod:`optparse`"
msgstr ""

#: ../../../whatsnew/3.15.rst:648
#: ../../../deprecations/pending-removal-in-3.20.rst:15
msgid ":mod:`pickle`"
msgstr ""

#: ../../../whatsnew/3.15.rst:649
#: ../../../deprecations/pending-removal-in-3.20.rst:16
msgid ":mod:`platform`"
msgstr ""

#: ../../../whatsnew/3.15.rst:650
#: ../../../deprecations/pending-removal-in-3.20.rst:17
msgid ":mod:`re`"
msgstr ""

#: ../../../whatsnew/3.15.rst:651
#: ../../../deprecations/pending-removal-in-3.20.rst:18
msgid ":mod:`socketserver`"
msgstr ""

#: ../../../whatsnew/3.15.rst:652
#: ../../../deprecations/pending-removal-in-3.20.rst:19
msgid ":mod:`tabnanny`"
msgstr ""

#: ../../../whatsnew/3.15.rst:653
#: ../../../deprecations/pending-removal-in-3.20.rst:20
msgid ":mod:`tkinter.font`"
msgstr ""

#: ../../../whatsnew/3.15.rst:654
#: ../../../deprecations/pending-removal-in-3.20.rst:21
msgid ":mod:`tkinter.ttk`"
msgstr ""

#: ../../../whatsnew/3.15.rst:656
#: ../../../deprecations/pending-removal-in-3.20.rst:23
msgid "(Contributed by Hugo van Kemenade in :gh:`76007`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:50
#: ../../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`collections.abc`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
":class:`collections.abc.ByteString` is scheduled for removal in Python 3.17."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:8
#: ../../../deprecations/pending-removal-in-3.17.rst:36
msgid ""
"Use ``isinstance(obj, collections.abc.Buffer)`` to test if ``obj`` "
"implements the :ref:`buffer protocol <bufferobjects>` at runtime. For use in "
"type annotations, either use :class:`~collections.abc.Buffer` or a union "
"that explicitly specifies the types your code supports (e.g., ``bytes | "
"bytearray | memoryview``)."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:14
#: ../../../deprecations/pending-removal-in-3.17.rst:42
msgid ""
":class:`!ByteString` was originally intended to be an abstract class that "
"would serve as a supertype of both :class:`bytes` and :class:`bytearray`. "
"However, since the ABC never had any methods, knowing that an object was an "
"instance of :class:`!ByteString` never actually told you anything useful "
"about the object. Other common buffer types such as :class:`memoryview` were "
"also never understood as subtypes of :class:`!ByteString` (either at runtime "
"or by static type checkers)."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:22
#: ../../../deprecations/pending-removal-in-3.17.rst:50
msgid ""
"See :pep:`PEP 688 <688#current-options>` for more details. (Contributed by "
"Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:26
msgid ":mod:`typing`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:28
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.17.rst:33
msgid ""
":class:`typing.ByteString`, deprecated since Python 3.9, is scheduled for "
"removal in Python 3.17."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:2
msgid "Pending removal in Python 3.19"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:4
msgid ":mod:`ctypes`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:6
msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting :attr:"
"`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` on non-"
"Windows platforms."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:10
msgid ":mod:`hashlib`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:12
msgid ""
"In hash function constructors such as :func:`~hashlib.new` or the direct "
"hash-named constructors such as :func:`~hashlib.md5` and :func:`~hashlib."
"sha256`, their optional initial data parameter could also be passed a "
"keyword argument named ``data=`` or ``string=`` in various :mod:`!hashlib` "
"implementations."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:18
msgid ""
"Support for the ``string`` keyword argument name is now deprecated and "
"slated for removal in Python 3.19."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.19.rst:21
msgid ""
"Before Python 3.13, the ``string`` keyword parameter was not correctly "
"supported depending on the backend implementation of hash functions. Prefer "
"passing the initial data as a positional argument for maximum backwards "
"compatibility."
msgstr ""

#: ../../../deprecations/pending-removal-in-3.20.rst:2
msgid "Pending removal in Python 3.20"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:18
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:21
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:29
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:32
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:35
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:38
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:39
msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:44
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:49
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:51
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:54
msgid ":mod:`datetime`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:56
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:58
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:61
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:63
msgid ":mod:`importlib`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:65
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:68
msgid ":mod:`importlib.metadata`:"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:70
msgid "``EntryPoints`` tuple interface."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:71
msgid "Implicit ``None`` on return values."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:73
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:76
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:79
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:81
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:84
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:91
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:94
msgid ":mod:`ssl` options and protocols:"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:96
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:97
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:100
msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:101
msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:102
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:111
msgid ":mod:`threading` methods:"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:113
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:114
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:115
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:117
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:119
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:120
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:122
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:124
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:129
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:132
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:134
msgid "``splitattr()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:135
msgid "``splithost()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:136
msgid "``splitnport()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:137
msgid "``splitpasswd()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:138
msgid "``splitport()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:139
msgid "``splitquery()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:140
msgid "``splittag()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:141
msgid "``splittype()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:142
msgid "``splituser()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:143
msgid "``splitvalue()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:144
msgid "``to_bytes()``"
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:146
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""

#: ../../../deprecations/pending-removal-in-future.rst:154
msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:671
msgid "Removed"
msgstr ""

#: ../../../whatsnew/3.15.rst:674
msgid "ctypes"
msgstr ""

#: ../../../whatsnew/3.15.rst:676
msgid ""
"Removed the undocumented function :func:`!ctypes.SetPointerType`, which has "
"been deprecated since Python 3.13. (Contributed by Bénédikt Tran in :gh:"
"`133866`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:682
msgid "glob"
msgstr ""

#: ../../../whatsnew/3.15.rst:684
msgid ""
"Removed the undocumented :func:`!glob.glob0` and :func:`!glob.glob1` "
"functions, which have been deprecated since Python 3.13. Use :func:`glob."
"glob` and pass a directory to its *root_dir* argument instead. (Contributed "
"by Barney Gale in :gh:`137466`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:691
msgid "http.server"
msgstr ""

#: ../../../whatsnew/3.15.rst:693
msgid ""
"Removed the :class:`!CGIHTTPRequestHandler` class and the ``--cgi`` flag "
"from the :program:`python -m http.server` command-line interface. They were "
"deprecated in Python 3.13. (Contributed by Bénédikt Tran in :gh:`133810`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:700
msgid "importlib.resources"
msgstr ""

#: ../../../whatsnew/3.15.rst:702
msgid ""
"Removed deprecated ``package`` parameter from :func:`importlib.resources."
"files` function. (Contributed by Semyon Moroz in :gh:`138044`)"
msgstr ""

#: ../../../whatsnew/3.15.rst:708
msgid "pathlib"
msgstr ""

#: ../../../whatsnew/3.15.rst:710
msgid ""
"Removed deprecated :meth:`!pathlib.PurePath.is_reserved`. Use :func:`os.path."
"isreserved` to detect reserved paths on Windows. (Contributed by Nikita "
"Sobolev in :gh:`133875`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:716
msgid "platform"
msgstr ""

#: ../../../whatsnew/3.15.rst:718
msgid ""
"Removed the :func:`!platform.java_ver` function, which was deprecated since "
"Python 3.13. (Contributed by Alexey Makridenko in :gh:`133604`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:724
msgid "sre_*"
msgstr ""

#: ../../../whatsnew/3.15.rst:726
msgid ""
"Removed :mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` "
"modules. (Contributed by Stan Ulbrych in :gh:`135994`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:731
msgid "sysconfig"
msgstr ""

#: ../../../whatsnew/3.15.rst:733
msgid ""
"Removed the *check_home* parameter of :func:`sysconfig.is_python_build`. "
"(Contributed by Filipe Laíns in :gh:`92897`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:738
msgid "threading"
msgstr ""

#: ../../../whatsnew/3.15.rst:740
msgid ""
"Remove support for arbitrary positional or keyword arguments in the C "
"implementation of :class:`~threading.RLock` objects. This was deprecated in "
"Python 3.14. (Contributed by Bénédikt Tran in :gh:`134087`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:747
msgid "typing"
msgstr ""

#: ../../../whatsnew/3.15.rst:749
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) is no longer supported. Use the class-based syntax or the "
"functional syntax instead. (Contributed by Bénédikt Tran in :gh:`133817`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:755
msgid ""
"Using ``TD = TypedDict(\"TD\")`` or ``TD = TypedDict(\"TD\", None)`` to "
"construct a :class:`~typing.TypedDict` type with zero field is no longer "
"supported. Use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", "
"{})`` instead. (Contributed by Bénédikt Tran in :gh:`133823`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:761
msgid ""
"Code like ``class ExtraTypeVars(P1[S], Protocol[T, T2]): ...`` now raises a :"
"exc:`TypeError`, because ``S`` is not listed in ``Protocol`` parameters. "
"(Contributed by Nikita Sobolev in :gh:`137191`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:765
msgid ""
"Code like ``class B2(A[T2], Protocol[T1, T2]): ...`` now correctly handles "
"type parameters order: it is ``(T1, T2)``, not ``(T2, T1)`` as it was "
"incorrectly infered in runtime before. (Contributed by Nikita Sobolev in :gh:"
"`137191`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:770
msgid ""
":class:`typing.ByteString` has been removed from ``typing.__all__``. :class:"
"`!typing.ByteString` has been deprecated since Python 3.9, and is scheduled "
"for removal in Python 3.17."
msgstr ""

#: ../../../whatsnew/3.15.rst:777
msgid "``from typing import ByteString``"
msgstr ""

#: ../../../whatsnew/3.15.rst:778
msgid "``import typing; typing.ByteString``."
msgstr ""

#: ../../../whatsnew/3.15.rst:780
msgid ""
"``DeprecationWarning``\\ s were already emitted if :class:`typing."
"ByteString` was subclassed or used as the second argument to :func:"
"`isinstance` or :func:`issubclass`, but warnings were not previously emitted "
"if it was merely imported or accessed from the :mod:`!typing` module."
msgstr ""

#: ../../../whatsnew/3.15.rst:787
msgid "unicodedata"
msgstr ""

#: ../../../whatsnew/3.15.rst:789
msgid "The Unicode database has been updated to Unicode 17.0.0."
msgstr ""

#: ../../../whatsnew/3.15.rst:793
msgid "wave"
msgstr ""

#: ../../../whatsnew/3.15.rst:795
msgid ""
"Removed the ``getmark()``, ``setmark()`` and ``getmarkers()`` methods of "
"the :class:`~wave.Wave_read` and :class:`~wave.Wave_write` classes, which "
"were deprecated since Python 3.13. (Contributed by Bénédikt Tran in :gh:"
"`133873`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:802
msgid "zipimport"
msgstr ""

#: ../../../whatsnew/3.15.rst:804
msgid ""
"Remove deprecated :meth:`!zipimport.zipimporter.load_module`. Use :meth:"
"`zipimport.zipimporter.exec_module` instead. (Contributed by Jiahao Li in :"
"gh:`133656`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:810 ../../../whatsnew/3.15.rst:868
msgid "Porting to Python 3.15"
msgstr ""

#: ../../../whatsnew/3.15.rst:812
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

#: ../../../whatsnew/3.15.rst:817
msgid "Build changes"
msgstr ""

#: ../../../whatsnew/3.15.rst:819
msgid ""
"Removed implicit fallback to the bundled copy of the ``libmpdec`` library. "
"Now this should be explicitly enabled with :option:`--with-system-libmpdec` "
"set to ``no`` or with :option:`!--without-system-libmpdec`. (Contributed by "
"Sergey B Kirpichev in :gh:`115119`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:826
msgid "C API changes"
msgstr ""

#: ../../../whatsnew/3.15.rst:831
msgid ""
"Add :c:func:`PySys_GetAttr`, :c:func:`PySys_GetAttrString`, :c:func:"
"`PySys_GetOptionalAttr`, and :c:func:`PySys_GetOptionalAttrString` functions "
"as replacements for :c:func:`PySys_GetObject`. (Contributed by Serhiy "
"Storchaka in :gh:`108512`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:836
msgid ""
"Add :c:type:`PyUnstable_Unicode_GET_CACHED_HASH` to get the cached hash of a "
"string. See the documentation for caveats. (Contributed by Petr Viktorin in :"
"gh:`131510`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:840
msgid ""
"Add API for checking an extension module's ABI compatibility: :c:data:"
"`Py_mod_abi`, :c:func:`PyABIInfo_Check`, :c:macro:`PyABIInfo_VAR` and :c:"
"data:`Py_mod_abi`. (Contributed by Petr Viktorin in :gh:`137210`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:845
msgid ""
"Implement :pep:`782`, the :ref:`PyBytesWriter API <pybyteswriter>`. Add "
"functions:"
msgstr ""

#: ../../../whatsnew/3.15.rst:848
msgid ":c:func:`PyBytesWriter_Create`"
msgstr ""

#: ../../../whatsnew/3.15.rst:849
msgid ":c:func:`PyBytesWriter_Discard`"
msgstr ""

#: ../../../whatsnew/3.15.rst:850
msgid ":c:func:`PyBytesWriter_FinishWithPointer`"
msgstr ""

#: ../../../whatsnew/3.15.rst:851
msgid ":c:func:`PyBytesWriter_FinishWithSize`"
msgstr ""

#: ../../../whatsnew/3.15.rst:852
msgid ":c:func:`PyBytesWriter_Finish`"
msgstr ""

#: ../../../whatsnew/3.15.rst:853
msgid ":c:func:`PyBytesWriter_Format`"
msgstr ""

#: ../../../whatsnew/3.15.rst:854
msgid ":c:func:`PyBytesWriter_GetData`"
msgstr ""

#: ../../../whatsnew/3.15.rst:855
msgid ":c:func:`PyBytesWriter_GetSize`"
msgstr ""

#: ../../../whatsnew/3.15.rst:856
msgid ":c:func:`PyBytesWriter_GrowAndUpdatePointer`"
msgstr ""

#: ../../../whatsnew/3.15.rst:857
msgid ":c:func:`PyBytesWriter_Grow`"
msgstr ""

#: ../../../whatsnew/3.15.rst:858
msgid ":c:func:`PyBytesWriter_Resize`"
msgstr ""

#: ../../../whatsnew/3.15.rst:859
msgid ":c:func:`PyBytesWriter_WriteBytes`"
msgstr ""

#: ../../../whatsnew/3.15.rst:861
msgid "(Contributed by Victor Stinner in :gh:`129813`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:863
msgid ""
"Add :c:func:`PyTuple_FromArray` to create a :class:`tuple` from an array. "
"(Contributed by Victor Stinner in :gh:`111489`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:870
msgid ":class:`sqlite3.Connection` APIs has been cleaned up."
msgstr ""

#: ../../../whatsnew/3.15.rst:872
msgid ""
"All parameters of :func:`sqlite3.connect` except *database* are now keyword-"
"only."
msgstr ""

#: ../../../whatsnew/3.15.rst:873
msgid ""
"The first three parameters of methods :meth:`~sqlite3.Connection."
"create_function` and :meth:`~sqlite3.Connection.create_aggregate` are now "
"positional-only."
msgstr ""

#: ../../../whatsnew/3.15.rst:875
msgid ""
"The first parameter of methods :meth:`~sqlite3.Connection.set_authorizer`, :"
"meth:`~sqlite3.Connection.set_progress_handler` and :meth:`~sqlite3."
"Connection.set_trace_callback` is now positional-only."
msgstr ""

#: ../../../whatsnew/3.15.rst:879
msgid "(Contributed by Serhiy Storchaka in :gh:`133595`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:881
msgid "Private functions promoted to public C APIs:"
msgstr ""

#: ../../../whatsnew/3.15.rst:883
msgid ""
"The |pythoncapi_compat_project| can be used to get most of these new "
"functions on Python 3.14 and older."
msgstr ""

#: ../../../whatsnew/3.15.rst:886
msgid ""
":data:`resource.RLIM_INFINITY` is now always positive. Passing a negative "
"integer value that corresponded to its old value (such as ``-1`` or ``-3``, "
"depending on platform) to :func:`resource.setrlimit` and :func:`resource."
"prlimit` is now deprecated. (Contributed by Serhiy Storchaka in :gh:"
"`137044`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:892
msgid ""
":meth:`~mmap.mmap.resize` has been removed on platforms that don't support "
"the underlying syscall, instead of raising a :exc:`SystemError`."
msgstr ""

#: ../../../whatsnew/3.15.rst:897
msgid "Deprecated C APIs"
msgstr ""

#: ../../../whatsnew/3.15.rst:899
msgid ""
"For unsigned integer formats in :c:func:`PyArg_ParseTuple`, accepting Python "
"integers with value that is larger than the maximal value for the C type or "
"less than the minimal value for the corresponding signed integer type of the "
"same size is now deprecated. (Contributed by Serhiy Storchaka in :gh:"
"`132629`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:905
msgid ""
":c:func:`PyBytes_FromStringAndSize(NULL, len) <PyBytes_FromStringAndSize>` "
"and :c:func:`_PyBytes_Resize` are :term:`soft deprecated`, use the :c:type:"
"`PyBytesWriter` API instead. (Contributed by Victor Stinner in :gh:`129813`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:910
msgid ""
"Deprecate :c:member:`~PyComplexObject.cval` field of the the :c:type:"
"`PyComplexObject` type. Use :c:func:`PyComplex_AsCComplex` and :c:func:"
"`PyComplex_FromCComplex` to convert a Python complex number to/from the C :c:"
"type:`Py_complex` representation. (Contributed by Sergey B Kirpichev in :gh:"
"`128813`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:917
msgid ""
"Functions :c:func:`_Py_c_sum`, :c:func:`_Py_c_diff`, :c:func:`_Py_c_neg`, :c:"
"func:`_Py_c_prod`, :c:func:`_Py_c_quot`, :c:func:`_Py_c_pow` and :c:func:"
"`_Py_c_abs` are :term:`soft deprecated`. (Contributed by Sergey B Kirpichev "
"in :gh:`128813`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:922
msgid ""
":c:member:`~PyConfig.bytes_warning` is deprecated since 3.15 and will be "
"removed in 3.17. (Contributed by Nikita Sobolev in :gh:`136355`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:930
msgid "Removed C APIs"
msgstr ""

#: ../../../whatsnew/3.15.rst:932
msgid "Remove deprecated ``PyUnicode`` functions:"
msgstr ""

#: ../../../whatsnew/3.15.rst:934
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:936
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""

#: ../../../whatsnew/3.15.rst:939
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:941
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""

#: ../../../whatsnew/3.15.rst:945
msgid "(Contributed by Stan Ulbrych in :gh:`133612`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:947
msgid ""
":c:func:`!PyImport_ImportModuleNoBlock`: deprecated alias of :c:func:"
"`PyImport_ImportModule`. (Contributed by Bénédikt Tran in :gh:`133644`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:951
msgid ""
":c:func:`!PyWeakref_GetObject` and :c:macro:`!PyWeakref_GET_OBJECT`: use :c:"
"func:`PyWeakref_GetRef` instead. The |pythoncapi_compat_project| can be used "
"to get :c:func:`!PyWeakref_GetRef` on Python 3.12 and older. (Contributed by "
"Bénédikt Tran in :gh:`133644`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:956
msgid ""
"Remove deprecated :c:func:`!PySys_ResetWarnOptions`. Clear :data:`sys."
"warnoptions` and :data:`!warnings.filters` instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:959
msgid "(Contributed by Nikita Sobolev in :gh:`138886`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:961
msgid ""
"The following functions are removed in favor of :c:func:`PyConfig_Get`. The |"
"pythoncapi_compat_project| can be used to get :c:func:`!PyConfig_Get` on "
"Python 3.13 and older."
msgstr ""

#: ../../../whatsnew/3.15.rst:965
msgid "Python initialization functions:"
msgstr ""

#: ../../../whatsnew/3.15.rst:967
msgid ""
":c:func:`!Py_GetExecPrefix`: use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../../whatsnew/3.15.rst:973
msgid ""
":c:func:`!Py_GetPath`: use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:976
msgid ""
":c:func:`!Py_GetPrefix`: use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../../whatsnew/3.15.rst:982
msgid ""
":c:func:`!Py_GetProgramFullPath`: use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:985
msgid ""
":c:func:`!Py_GetProgramName`: use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:988
msgid ""
":c:func:`!Py_GetPythonHome`: use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:992
msgid "(Contributed by Bénédikt Tran in :gh:`133644`.)"
msgstr ""
