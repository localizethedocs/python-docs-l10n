# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 08:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr ""

#: ../../../c-api/complex.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr ""

#: ../../../c-api/complex.rst:17
msgid ""
"The complex number value, using the C :c:type:`Py_complex` representation."
msgstr ""

#: ../../../c-api/complex.rst:19
msgid ""
"Use :c:func:`PyComplex_AsCComplex` and :c:func:`PyComplex_FromCComplex` to "
"convert a Python complex number to/from the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../../c-api/complex.rst:28
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""

#: ../../../c-api/complex.rst:34
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""

#: ../../../c-api/complex.rst:40
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""

#: ../../../c-api/complex.rst:46
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return "
"``NULL`` with an exception set on error."
msgstr ""

#: ../../../c-api/complex.rst:52
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr ""

#: ../../../c-api/complex.rst:54
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to call :c:func:`PyFloat_AsDouble` and returns its result."
msgstr ""

#: ../../../c-api/complex.rst:60 ../../../c-api/complex.rst:76
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../../c-api/complex.rst:63 ../../../c-api/complex.rst:79
msgid "Use :meth:`~object.__complex__` if available."
msgstr ""

#: ../../../c-api/complex.rst:68
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr ""

#: ../../../c-api/complex.rst:70
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to call :c:func:`PyFloat_AsDouble` and returns ``0.0`` on "
"success."
msgstr ""

#: ../../../c-api/complex.rst:85
msgid ""
"This C structure defines export format for a Python complex number object."
msgstr ""

#: ../../../c-api/complex.rst:91
msgid "The structure is defined as::"
msgstr ""

#: ../../../c-api/complex.rst:101
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""

#: ../../../c-api/complex.rst:107
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr ""

#: ../../../c-api/complex.rst:109
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`."
msgstr ""

#: ../../../c-api/complex.rst:115
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with :c:member:"
"`~Py_complex.real` set to ``-1.0`` and with an exception set, so one should "
"call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../../c-api/complex.rst:119
msgid "Use :meth:`~object.__index__` if available."
msgstr ""

#: ../../../c-api/complex.rst:124
msgid "Complex Numbers as C Structures"
msgstr ""

#: ../../../c-api/complex.rst:126
msgid ""
"The API also provides functions for working with complex numbers, using the :"
"c:type:`Py_complex` representation.  Note that the functions which accept "
"these structures as parameters and return them as results do so *by value* "
"rather than dereferencing them through pointers."
msgstr ""

#: ../../../c-api/complex.rst:131
msgid ""
"Please note, that these functions are :term:`soft deprecated` since Python "
"3.15.  Avoid using this API in a new code to do complex arithmetic: either "
"use the `Number Protocol <number>`_ API or use native complex types, like :c:"
"expr:`double complex`."
msgstr ""

#: ../../../c-api/complex.rst:139
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../../c-api/complex.rst:147
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

#: ../../../c-api/complex.rst:155
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

#: ../../../c-api/complex.rst:163
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../../c-api/complex.rst:171
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../../c-api/complex.rst:174
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:macro:`!EDOM`."
msgstr ""

#: ../../../c-api/complex.rst:182
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr ""

#: ../../../c-api/complex.rst:185
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""

#: ../../../c-api/complex.rst:188 ../../../c-api/complex.rst:197
msgid "Set :c:data:`errno` to :c:macro:`!ERANGE` on overflows."
msgstr ""

#: ../../../c-api/complex.rst:195
msgid "Return the absolute value of the complex number *num*."
msgstr ""

#: ../../../c-api/complex.rst:8
msgid "object"
msgstr ""

#: ../../../c-api/complex.rst:8
msgid "complex number"
msgstr ""
