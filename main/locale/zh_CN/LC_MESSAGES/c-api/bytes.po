# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-29 08:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/bytes.rst:6
msgid "Bytes Objects"
msgstr ""

#: ../../../c-api/bytes.rst:8
msgid ""
"These functions raise :exc:`TypeError` when expecting a bytes parameter and "
"called with a non-bytes parameter."
msgstr ""

#: ../../../c-api/bytes.rst:16
msgid "This subtype of :c:type:`PyObject` represents a Python bytes object."
msgstr ""

#: ../../../c-api/bytes.rst:21
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytes type; it "
"is the same object as :class:`bytes` in the Python layer."
msgstr ""

#: ../../../c-api/bytes.rst:27
msgid ""
"Return true if the object *o* is a bytes object or an instance of a subtype "
"of the bytes type.  This function always succeeds."
msgstr ""

#: ../../../c-api/bytes.rst:33
msgid ""
"Return true if the object *o* is a bytes object, but not an instance of a "
"subtype of the bytes type.  This function always succeeds."
msgstr ""

#: ../../../c-api/bytes.rst:39
msgid ""
"Return a new bytes object with a copy of the string *v* as value on success, "
"and ``NULL`` on failure.  The parameter *v* must not be ``NULL``; it will "
"not be checked."
msgstr ""

#: ../../../c-api/bytes.rst:46
msgid ""
"Return a new bytes object with a copy of the string *v* as value and length "
"*len* on success, and ``NULL`` on failure.  If *v* is ``NULL``, the contents "
"of the bytes object are uninitialized."
msgstr ""

#: ../../../c-api/bytes.rst:50
msgid ""
"``PyBytes_FromStringAndSize(NULL, len)`` is :term:`soft deprecated`, use "
"the :c:type:`PyBytesWriter` API instead."
msgstr ""

#: ../../../c-api/bytes.rst:57
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python bytes object and "
"return a bytes object with the values formatted into it.  The variable "
"arguments must be C types and must correspond exactly to the format "
"characters in the *format* string.  The following format characters are "
"allowed:"
msgstr ""

#: ../../../c-api/bytes.rst:69
msgid "Format Characters"
msgstr ""

#: ../../../c-api/bytes.rst:69
msgid "Type"
msgstr ""

#: ../../../c-api/bytes.rst:69
msgid "Comment"
msgstr ""

#: ../../../c-api/bytes.rst:71
msgid "``%%``"
msgstr ""

#: ../../../c-api/bytes.rst:71
msgid "*n/a*"
msgstr ""

#: ../../../c-api/bytes.rst:71
msgid "The literal % character."
msgstr ""

#: ../../../c-api/bytes.rst:73
msgid "``%c``"
msgstr ""

#: ../../../c-api/bytes.rst:73 ../../../c-api/bytes.rst:76
#: ../../../c-api/bytes.rst:94 ../../../c-api/bytes.rst:97
msgid "int"
msgstr ""

#: ../../../c-api/bytes.rst:73
msgid "A single byte, represented as a C int."
msgstr ""

#: ../../../c-api/bytes.rst:76
msgid "``%d``"
msgstr ""

#: ../../../c-api/bytes.rst:76
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:79
msgid "``%u``"
msgstr ""

#: ../../../c-api/bytes.rst:79
msgid "unsigned int"
msgstr ""

#: ../../../c-api/bytes.rst:79
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:82
msgid "``%ld``"
msgstr ""

#: ../../../c-api/bytes.rst:82
msgid "long"
msgstr ""

#: ../../../c-api/bytes.rst:82
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:85
msgid "``%lu``"
msgstr ""

#: ../../../c-api/bytes.rst:85
msgid "unsigned long"
msgstr ""

#: ../../../c-api/bytes.rst:85
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:88
msgid "``%zd``"
msgstr ""

#: ../../../c-api/bytes.rst:88
msgid ":c:type:`\\ Py_ssize_t`"
msgstr ""

#: ../../../c-api/bytes.rst:88
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:91
msgid "``%zu``"
msgstr ""

#: ../../../c-api/bytes.rst:91
msgid "size_t"
msgstr ""

#: ../../../c-api/bytes.rst:91
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:94
msgid "``%i``"
msgstr ""

#: ../../../c-api/bytes.rst:94
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:97
msgid "``%x``"
msgstr ""

#: ../../../c-api/bytes.rst:97
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr ""

#: ../../../c-api/bytes.rst:100
msgid "``%s``"
msgstr ""

#: ../../../c-api/bytes.rst:100
msgid "const char\\*"
msgstr ""

#: ../../../c-api/bytes.rst:100
msgid "A null-terminated C character array."
msgstr ""

#: ../../../c-api/bytes.rst:103
msgid "``%p``"
msgstr ""

#: ../../../c-api/bytes.rst:103
msgid "const void\\*"
msgstr ""

#: ../../../c-api/bytes.rst:103
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../../../c-api/bytes.rst:112
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result object, and any extra arguments discarded."
msgstr ""

#: ../../../c-api/bytes.rst:115
msgid ""
"For integer specifiers (d, u, ld, lu, zd, zu, i, x): the 0-conversion flag "
"has effect even when a precision is given."
msgstr ""

#: ../../../c-api/bytes.rst:121
msgid ""
"Identical to :c:func:`PyBytes_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

#: ../../../c-api/bytes.rst:127
msgid ""
"Return the bytes representation of object *o* that implements the buffer "
"protocol."
msgstr ""

#: ../../../c-api/bytes.rst:133
msgid "Return the length of the bytes in bytes object *o*."
msgstr ""

#: ../../../c-api/bytes.rst:138
msgid "Similar to :c:func:`PyBytes_Size`, but without error checking."
msgstr ""

#: ../../../c-api/bytes.rst:143
msgid ""
"Return a pointer to the contents of *o*.  The pointer refers to the internal "
"buffer of *o*, which consists of ``len(o) + 1`` bytes.  The last byte in the "
"buffer is always null, regardless of whether there are any other null "
"bytes.  The data must not be modified in any way, unless the object was just "
"created using ``PyBytes_FromStringAndSize(NULL, size)``. It must not be "
"deallocated.  If *o* is not a bytes object at all, :c:func:"
"`PyBytes_AsString` returns ``NULL`` and raises :exc:`TypeError`."
msgstr ""

#: ../../../c-api/bytes.rst:155
msgid "Similar to :c:func:`PyBytes_AsString`, but without error checking."
msgstr ""

#: ../../../c-api/bytes.rst:160
msgid ""
"Return the null-terminated contents of the object *obj* through the output "
"variables *buffer* and *length*. Returns ``0`` on success."
msgstr ""

#: ../../../c-api/bytes.rst:164
msgid ""
"If *length* is ``NULL``, the bytes object may not contain embedded null "
"bytes; if it does, the function returns ``-1`` and a :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../../c-api/bytes.rst:168
msgid ""
"The buffer refers to an internal buffer of *obj*, which includes an "
"additional null byte at the end (not counted in *length*).  The data must "
"not be modified in any way, unless the object was just created using "
"``PyBytes_FromStringAndSize(NULL, size)``.  It must not be deallocated.  If "
"*obj* is not a bytes object at all, :c:func:`PyBytes_AsStringAndSize` "
"returns ``-1`` and raises :exc:`TypeError`."
msgstr ""

#: ../../../c-api/bytes.rst:175
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null bytes were "
"encountered in the bytes object."
msgstr ""

#: ../../../c-api/bytes.rst:182
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of *newpart* "
"appended to *bytes*; the caller will own the new reference.  The reference "
"to the old value of *bytes* will be stolen.  If the new object cannot be "
"created, the old reference to *bytes* will still be discarded and the value "
"of *\\*bytes* will be set to ``NULL``; the appropriate exception will be set."
msgstr ""

#: ../../../c-api/bytes.rst:191
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of *newpart* "
"appended to *bytes*.  This version releases the :term:`strong reference` to "
"*newpart* (i.e. decrements its reference count)."
msgstr ""

#: ../../../c-api/bytes.rst:198
msgid "Similar to ``sep.join(iterable)`` in Python."
msgstr ""

#: ../../../c-api/bytes.rst:200
msgid ""
"*sep* must be Python :class:`bytes` object. (Note that :c:func:"
"`PyUnicode_Join` accepts ``NULL`` separator and treats it as a space, "
"whereas :c:func:`PyBytes_Join` doesn't accept ``NULL`` separator.)"
msgstr ""

#: ../../../c-api/bytes.rst:205
msgid ""
"*iterable* must be an iterable object yielding objects that implement the :"
"ref:`buffer protocol <bufferobjects>`."
msgstr ""

#: ../../../c-api/bytes.rst:208
msgid ""
"On success, return a new :class:`bytes` object. On error, set an exception "
"and return ``NULL``."
msgstr ""

#: ../../../c-api/bytes.rst:216
msgid ""
"Resize a bytes object. *newsize* will be the new length of the bytes object. "
"You can think of it as creating a new bytes object and destroying the old "
"one, only more efficiently. Pass the address of an existing bytes object as "
"an lvalue (it may be written into), and the new size desired.  On success, "
"*\\*bytes* holds the resized bytes object and ``0`` is returned; the address "
"in *\\*bytes* may differ from its input value.  If the reallocation fails, "
"the original bytes object at *\\*bytes* is deallocated, *\\*bytes* is set to "
"``NULL``, :exc:`MemoryError` is set, and ``-1`` is returned."
msgstr ""

#: ../../../c-api/bytes.rst:227
msgid ""
"The function is :term:`soft deprecated`, use the :c:type:`PyBytesWriter` API "
"instead."
msgstr ""

#: ../../../c-api/bytes.rst:234
msgid "PyBytesWriter"
msgstr ""

#: ../../../c-api/bytes.rst:236
msgid ""
"The :c:type:`PyBytesWriter` API can be used to create a Python :class:"
"`bytes` object."
msgstr ""

#: ../../../c-api/bytes.rst:243
msgid "A bytes writer instance."
msgstr ""

#: ../../../c-api/bytes.rst:245
msgid ""
"The API is **not thread safe**: a writer should only be used by a single "
"thread at the same time."
msgstr ""

#: ../../../c-api/bytes.rst:248
msgid ""
"The instance must be destroyed by :c:func:`PyBytesWriter_Finish` on success, "
"or :c:func:`PyBytesWriter_Discard` on error."
msgstr ""

#: ../../../c-api/bytes.rst:253
msgid "Create, Finish, Discard"
msgstr ""

#: ../../../c-api/bytes.rst:257
msgid "Create a :c:type:`PyBytesWriter` to write *size* bytes."
msgstr ""

#: ../../../c-api/bytes.rst:259
msgid ""
"If *size* is greater than zero, allocate *size* bytes, and set the writer "
"size to *size*. The caller is responsible to write *size* bytes using :c:"
"func:`PyBytesWriter_GetData`."
msgstr ""

#: ../../../c-api/bytes.rst:263
msgid "On error, set an exception and return NULL."
msgstr ""

#: ../../../c-api/bytes.rst:265 ../../../c-api/bytes.rst:358
msgid "*size* must be positive or zero."
msgstr ""

#: ../../../c-api/bytes.rst:269
msgid ""
"Finish a :c:type:`PyBytesWriter` created by :c:func:`PyBytesWriter_Create`."
msgstr ""

#: ../../../c-api/bytes.rst:272
msgid ""
"On success, return a Python :class:`bytes` object. On error, set an "
"exception and return ``NULL``."
msgstr ""

#: ../../../c-api/bytes.rst:275
msgid ""
"The writer instance is invalid after the call in any case. No API can be "
"called on the writer after :c:func:`PyBytesWriter_Finish`."
msgstr ""

#: ../../../c-api/bytes.rst:280
msgid ""
"Similar to :c:func:`PyBytesWriter_Finish`, but resize the writer to *size* "
"bytes before creating the :class:`bytes` object."
msgstr ""

#: ../../../c-api/bytes.rst:285
msgid ""
"Similar to :c:func:`PyBytesWriter_Finish`, but resize the writer using *buf* "
"pointer before creating the :class:`bytes` object."
msgstr ""

#: ../../../c-api/bytes.rst:288
msgid ""
"Set an exception and return ``NULL`` if *buf* pointer is outside the "
"internal buffer bounds."
msgstr ""

#: ../../../c-api/bytes.rst:291 ../../../c-api/bytes.rst:384
msgid "Function pseudo-code::"
msgstr ""

#: ../../../c-api/bytes.rst:298
msgid ""
"Discard a :c:type:`PyBytesWriter` created by :c:func:`PyBytesWriter_Create`."
msgstr ""

#: ../../../c-api/bytes.rst:300
msgid "Do nothing if *writer* is ``NULL``."
msgstr ""

#: ../../../c-api/bytes.rst:302
msgid ""
"The writer instance is invalid after the call. No API can be called on the "
"writer after :c:func:`PyBytesWriter_Discard`."
msgstr ""

#: ../../../c-api/bytes.rst:306
msgid "High-level API"
msgstr ""

#: ../../../c-api/bytes.rst:310
msgid ""
"Grow the *writer* internal buffer by *size* bytes, write *size* bytes of "
"*bytes* at the *writer* end, and add *size* to the *writer* size."
msgstr ""

#: ../../../c-api/bytes.rst:314
msgid ""
"If *size* is equal to ``-1``, call ``strlen(bytes)`` to get the string "
"length."
msgstr ""

#: ../../../c-api/bytes.rst:317 ../../../c-api/bytes.rst:326
#: ../../../c-api/bytes.rst:355 ../../../c-api/bytes.rst:366
msgid "On success, return ``0``. On error, set an exception and return ``-1``."
msgstr ""

#: ../../../c-api/bytes.rst:322
msgid ""
"Similar to :c:func:`PyBytes_FromFormat`, but write the output directly at "
"the writer end. Grow the writer internal buffer on demand. Then add the "
"written size to the writer size."
msgstr ""

#: ../../../c-api/bytes.rst:331
msgid "Getters"
msgstr ""

#: ../../../c-api/bytes.rst:335
msgid "Get the writer size."
msgstr ""

#: ../../../c-api/bytes.rst:339
msgid "Get the writer data: start of the internal buffer."
msgstr ""

#: ../../../c-api/bytes.rst:341
msgid ""
"The pointer is valid until :c:func:`PyBytesWriter_Finish` or :c:func:"
"`PyBytesWriter_Discard` is called on *writer*."
msgstr ""

#: ../../../c-api/bytes.rst:346
msgid "Low-level API"
msgstr ""

#: ../../../c-api/bytes.rst:350
msgid ""
"Resize the writer to *size* bytes. It can be used to enlarge or to shrink "
"the writer."
msgstr ""

#: ../../../c-api/bytes.rst:353 ../../../c-api/bytes.rst:364
msgid "Newly allocated bytes are left uninitialized."
msgstr ""

#: ../../../c-api/bytes.rst:362
msgid "Resize the writer by adding *grow* bytes to the current writer size."
msgstr ""

#: ../../../c-api/bytes.rst:369
msgid "*size* can be negative to shrink the writer."
msgstr ""

#: ../../../c-api/bytes.rst:373
msgid ""
"Similar to :c:func:`PyBytesWriter_Grow`, but update also the *buf* pointer."
msgstr ""

#: ../../../c-api/bytes.rst:376
msgid ""
"The *buf* pointer is moved if the internal buffer is moved in memory. The "
"*buf* relative position within the internal buffer is left unchanged."
msgstr ""

#: ../../../c-api/bytes.rst:380
msgid "On error, set an exception and return ``NULL``."
msgstr ""

#: ../../../c-api/bytes.rst:382
msgid "*buf* must not be ``NULL``."
msgstr ""

#: ../../../c-api/bytes.rst:11
msgid "object"
msgstr ""

#: ../../../c-api/bytes.rst:11
msgid "bytes"
msgstr ""
