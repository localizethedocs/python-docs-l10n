# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.15\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 08:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../whatsnew/3.15.rst:4
msgid "What's new in Python 3.15"
msgstr ""

#: ../../../whatsnew/3.15.rst:0
msgid "Editor"
msgstr ""

#: ../../../whatsnew/3.15.rst:6
msgid "TBD"
msgstr ""

#: ../../../whatsnew/3.15.rst:48
msgid ""
"This article explains the new features in Python 3.15, compared to 3.14."
msgstr ""

#: ../../../whatsnew/3.15.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

#: ../../../whatsnew/3.15.rst:54
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.15 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../../whatsnew/3.15.rst:60
msgid "Summary --- release highlights"
msgstr ""

#: ../../../whatsnew/3.15.rst:71 ../../../whatsnew/3.15.rst:540
msgid "New features"
msgstr ""

#: ../../../whatsnew/3.15.rst:76
msgid "High frequency statistical sampling profiler"
msgstr ""

#: ../../../whatsnew/3.15.rst:78
msgid ""
"A new statistical sampling profiler has been added to the :mod:`profile` "
"module as :mod:`profile.sample`. This profiler enables low-overhead "
"performance analysis of running Python processes without requiring code "
"modification or process restart."
msgstr ""

#: ../../../whatsnew/3.15.rst:82
msgid ""
"Unlike deterministic profilers (:mod:`cProfile` and :mod:`profile`) that "
"instrument every function call, the sampling profiler periodically captures "
"stack traces from running processes.  This approach provides virtually zero "
"overhead while achieving sampling rates of **up to 1,000,000 Hz**, making it "
"the fastest sampling profiler available for Python (at the time of its "
"contribution) and ideal for debugging performance issues in production "
"environments."
msgstr ""

#: ../../../whatsnew/3.15.rst:89
msgid "Key features include:"
msgstr ""

#: ../../../whatsnew/3.15.rst:91
msgid ""
"**Zero-overhead profiling**: Attach to any running Python process without "
"affecting its performance"
msgstr ""

#: ../../../whatsnew/3.15.rst:93
msgid ""
"**No code modification required**: Profile existing applications without "
"restart"
msgstr ""

#: ../../../whatsnew/3.15.rst:94
msgid ""
"**Real-time statistics**: Monitor sampling quality during data collection"
msgstr ""

#: ../../../whatsnew/3.15.rst:95
msgid ""
"**Multiple output formats**: Generate both detailed statistics and "
"flamegraph data"
msgstr ""

#: ../../../whatsnew/3.15.rst:96
msgid ""
"**Thread-aware profiling**: Option to profile all threads or just the main "
"thread"
msgstr ""

#: ../../../whatsnew/3.15.rst:98
msgid "Profile process 1234 for 10 seconds with default settings::"
msgstr ""

#: ../../../whatsnew/3.15.rst:102
msgid "Profile with custom interval and duration, save to file::"
msgstr ""

#: ../../../whatsnew/3.15.rst:106
msgid "Generate collapsed stacks for flamegraph::"
msgstr ""

#: ../../../whatsnew/3.15.rst:110
msgid "Profile all threads and sort by total time::"
msgstr ""

#: ../../../whatsnew/3.15.rst:114
msgid "The profiler generates statistical estimates of where time is spent::"
msgstr ""

#: ../../../whatsnew/3.15.rst:163
msgid ""
"The profiler automatically identifies performance bottlenecks through "
"statistical analysis, highlighting functions with high CPU usage and call "
"frequency patterns."
msgstr ""

#: ../../../whatsnew/3.15.rst:166
msgid ""
"This capability is particularly valuable for debugging performance issues in "
"production systems where traditional profiling approaches would be too "
"intrusive."
msgstr ""

#: ../../../whatsnew/3.15.rst:169
msgid "(Contributed by Pablo Galindo and László Kiss Kollár in :gh:`135953`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:173
msgid "Other language changes"
msgstr ""

#: ../../../whatsnew/3.15.rst:175
msgid ""
"Python now uses UTF-8_ as the default encoding, independent of the system's "
"environment. This means that I/O operations without an explicit encoding, e."
"g. ``open('flying-circus.txt')``, will use UTF-8. UTF-8 is a widely-"
"supported Unicode_ character encoding that has become a *de facto* standard "
"for representing text, including nearly every webpage on the internet, many "
"common file formats, programming languages, and more."
msgstr ""

#: ../../../whatsnew/3.15.rst:182
msgid ""
"This only applies when no ``encoding`` argument is given. For best "
"compatibility between versions of Python, ensure that an explicit "
"``encoding`` argument is always provided. The :ref:`opt-in encoding warning "
"<io-encoding-warning>` can be used to identify code that may be affected by "
"this change. The special ``encoding='locale'`` argument uses the current "
"locale encoding, and has been supported since Python 3.10."
msgstr ""

#: ../../../whatsnew/3.15.rst:189
msgid ""
"To retain the previous behaviour, Python's UTF-8 mode may be disabled with "
"the :envvar:`PYTHONUTF8=0 <PYTHONUTF8>` environment variable or the :option:"
"`-X utf8=0 <-X>` command line option."
msgstr ""

#: ../../../whatsnew/3.15.rst:193
msgid ":pep:`686` for further details."
msgstr ""

#: ../../../whatsnew/3.15.rst:198
msgid ""
"(Contributed by Adam Turner in :gh:`133711`; PEP 686 written by Inada Naoki.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:200
msgid ""
"Several error messages incorrectly using the term \"argument\" have been "
"corrected. (Contributed by Stan Ulbrych in :gh:`133382`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:203
msgid ""
"Unraisable exceptions are now highlighted with color by default. This can be "
"controlled by :ref:`environment variables <using-on-controlling-color>`. "
"(Contributed by Peter Bierma in :gh:`134170`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:209
msgid "New modules"
msgstr ""

#: ../../../whatsnew/3.15.rst:211
msgid "None yet."
msgstr ""

#: ../../../whatsnew/3.15.rst:215
msgid "Improved modules"
msgstr ""

#: ../../../whatsnew/3.15.rst:218
msgid "dbm"
msgstr ""

#: ../../../whatsnew/3.15.rst:220
msgid ""
"Added new :meth:`!reorganize` methods to :mod:`dbm.dumb` and :mod:`dbm."
"sqlite3` which allow to recover unused free space previously occupied by "
"deleted entries. (Contributed by Andrea Oliveri in :gh:`134004`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:224
msgid ""
"Add the ``'m'`` flag for :func:`dbm.gnu.open` which allows to disable the "
"use of :manpage:`mmap(2)`. This may harm performance, but improve crash "
"tolerance. (Contributed by Serhiy Storchaka in :gh:`66234`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:230
msgid "difflib"
msgstr ""

#: ../../../whatsnew/3.15.rst:234
msgid ""
"Introduced the optional *color* parameter to :func:`difflib.unified_diff`, "
"enabling color output similar to :program:`git diff`. This can be controlled "
"by :ref:`environment variables <using-on-controlling-color>`. (Contributed "
"by Douglas Thor in :gh:`133725`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:240
msgid ""
"Improved the styling of HTML diff pages generated by the :class:`difflib."
"HtmlDiff` class, and migrated the output to the HTML5 standard. (Contributed "
"by Jiahao Li in :gh:`134580`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:246 ../../../whatsnew/3.15.rst:401
msgid "hashlib"
msgstr ""

#: ../../../whatsnew/3.15.rst:248
msgid ""
"Ensure that hash functions guaranteed to be always *available* exist as "
"attributes of :mod:`hashlib` even if they will not work at runtime due to "
"missing backend implementations. For instance, ``hashlib.md5`` will no "
"longer raise :exc:`AttributeError` if OpenSSL is not available and Python "
"has been built without MD5 support. (Contributed by Bénédikt Tran in :gh:"
"`136929`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:257
msgid "http.client"
msgstr ""

#: ../../../whatsnew/3.15.rst:259
msgid ""
"A new *max_response_headers* keyword-only parameter has been added to :class:"
"`~http.client.HTTPConnection` and :class:`~http.client.HTTPSConnection` "
"constructors. This parameter overrides the default maximum number of allowed "
"response headers. (Contributed by Alexander Enrique Urieles Nieto in :gh:"
"`131724`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:267
msgid "math"
msgstr ""

#: ../../../whatsnew/3.15.rst:269
msgid ""
"Add :func:`math.isnormal` and :func:`math.issubnormal` functions. "
"(Contributed by Sergey B Kirpichev in :gh:`132908`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:272
msgid ""
"Add :func:`math.fmax`, :func:`math.fmin` and :func:`math.signbit` functions. "
"(Contributed by Bénédikt Tran in :gh:`135853`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:277
msgid "os.path"
msgstr ""

#: ../../../whatsnew/3.15.rst:279
msgid ""
"Add support of the all-but-last mode in :func:`~os.path.realpath`. "
"(Contributed by Serhiy Storchaka in :gh:`71189`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:282
msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, :"
"data:`os.path.ALLOW_MISSING`. If used, errors other than :exc:"
"`FileNotFoundError` will be re-raised; the resulting path can be missing but "
"it will be free of symlinks. (Contributed by Petr Viktorin for :cve:"
"`2025-4517`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:289
msgid "shelve"
msgstr ""

#: ../../../whatsnew/3.15.rst:291
msgid ""
"Added new :meth:`!reorganize` method to :mod:`shelve` used to recover unused "
"free space previously occupied by deleted entries. (Contributed by Andrea "
"Oliveri in :gh:`134004`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:297
msgid "sqlite3"
msgstr ""

#: ../../../whatsnew/3.15.rst:299
msgid ""
"The :ref:`command-line interface <sqlite3-cli>` has several new features:"
msgstr ""

#: ../../../whatsnew/3.15.rst:301
msgid ""
"SQL keyword completion on <tab>. (Contributed by Long Tan in :gh:`133393`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:304
msgid ""
"Prompts, error messages, and help text are now colored. This is enabled by "
"default, see :ref:`using-on-controlling-color` for details. (Contributed by "
"Stan Ulbrych and Łukasz Langa in :gh:`133461`)"
msgstr ""

#: ../../../whatsnew/3.15.rst:311
msgid "ssl"
msgstr ""

#: ../../../whatsnew/3.15.rst:313
msgid ""
"Indicate through :data:`ssl.HAS_PSK_TLS13` whether the :mod:`ssl` module "
"supports \"External PSKs\" in TLSv1.3, as described in RFC 9258. "
"(Contributed by Will Childs-Klein in :gh:`133624`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:317
msgid "Added new methods for managing groups used for SSL key agreement"
msgstr ""

#: ../../../whatsnew/3.15.rst:319
msgid ""
":meth:`ssl.SSLContext.set_groups` sets the groups allowed for doing key "
"agreement, extending the previous :meth:`ssl.SSLContext.set_ecdh_curve` "
"method. This new API provides the ability to list multiple groups and "
"supports fixed-field and post-quantum groups in addition to ECDH curves. "
"This method can also be used to control what key shares are sent in the TLS "
"handshake."
msgstr ""

#: ../../../whatsnew/3.15.rst:326
msgid ""
":meth:`ssl.SSLSocket.group` returns the group selected for doing key "
"agreement on the current connection after the TLS handshake completes. This "
"call requires OpenSSL 3.2 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:329
msgid ""
":meth:`ssl.SSLContext.get_groups` returns a list of all available key "
"agreement groups compatible with the minimum and maximum TLS versions "
"currently set in the context. This call requires OpenSSL 3.5 or later."
msgstr ""

#: ../../../whatsnew/3.15.rst:333
msgid "(Contributed by Ron Frederick in :gh:`136306`)"
msgstr ""

#: ../../../whatsnew/3.15.rst:337
msgid "tarfile"
msgstr ""

#: ../../../whatsnew/3.15.rst:339
msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in :gh:"
"`127987` and :cve:`2025-4138`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:342
msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes "
"when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:345
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"(re-)apply the extraction filter when substituting a link (hard or symbolic) "
"with a copy of another archive member, and when fixing up directory "
"attributes. The former raises a new exception, :exc:`~tarfile."
"LinkFallbackError`. (Contributed by Petr Viktorin for :cve:`2025-4330` and :"
"cve:`2024-12718`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:351
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and :"
"cve:`2025-4435`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:359
msgid "types"
msgstr ""

#: ../../../whatsnew/3.15.rst:361
msgid ""
"Expose the write-through :func:`locals` proxy type as :data:`types."
"FrameLocalsProxyType`. This represents the type of the :attr:`frame."
"f_locals` attribute, as described in :pep:`667`."
msgstr ""

#: ../../../whatsnew/3.15.rst:368
msgid "unittest"
msgstr ""

#: ../../../whatsnew/3.15.rst:370
msgid ""
":func:`unittest.TestCase.assertLogs` will now accept a formatter to control "
"how messages are formatted. (Contributed by Garry Cairns in :gh:`134567`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:376
msgid "zlib"
msgstr ""

#: ../../../whatsnew/3.15.rst:378
msgid ""
"Allow combining two Adler-32 checksums via :func:`~zlib.adler32_combine`. "
"(Contributed by Callum Attryde and Bénédikt Tran in :gh:`134635`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:381
msgid ""
"Allow combining two CRC-32 checksums via :func:`~zlib.crc32_combine`. "
"(Contributed by Bénédikt Tran in :gh:`134635`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:388
msgid "Optimizations"
msgstr ""

#: ../../../whatsnew/3.15.rst:391
msgid "module_name"
msgstr ""

#: ../../../whatsnew/3.15.rst:393
msgid "TODO"
msgstr ""

#: ../../../whatsnew/3.15.rst:398
msgid "Deprecated"
msgstr ""

#: ../../../whatsnew/3.15.rst:403
msgid ""
"In hash function constructors such as :func:`~hashlib.new` or the direct "
"hash-named constructors such as :func:`~hashlib.md5` and :func:`~hashlib."
"sha256`, their optional initial data parameter could also be passed a "
"keyword argument named ``data=`` or ``string=`` in various :mod:`hashlib` "
"implementations."
msgstr ""

#: ../../../whatsnew/3.15.rst:409
msgid ""
"Support for the ``string`` keyword argument name is now deprecated and is "
"slated for removal in Python 3.19. Prefer passing the initial data as a "
"positional argument for maximum backwards compatibility."
msgstr ""

#: ../../../whatsnew/3.15.rst:413
msgid "(Contributed by Bénédikt Tran in :gh:`134978`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:419
msgid "Removed"
msgstr ""

#: ../../../whatsnew/3.15.rst:422
msgid "ctypes"
msgstr ""

#: ../../../whatsnew/3.15.rst:424
msgid ""
"Removed the undocumented function :func:`!ctypes.SetPointerType`, which has "
"been deprecated since Python 3.13. (Contributed by Bénédikt Tran in :gh:"
"`133866`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:430
msgid "glob"
msgstr ""

#: ../../../whatsnew/3.15.rst:432
msgid ""
"Removed the undocumented :func:`!glob.glob0` and :func:`!glob.glob1` "
"functions, which have been deprecated since Python 3.13. Use :func:`glob."
"glob` and pass a directory to its *root_dir* argument instead. (Contributed "
"by Barney Gale in :gh:`137466`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:439
msgid "http.server"
msgstr ""

#: ../../../whatsnew/3.15.rst:441
msgid ""
"Removed the :class:`!CGIHTTPRequestHandler` class and the ``--cgi`` flag "
"from the :program:`python -m http.server` command-line interface. They were "
"deprecated in Python 3.13. (Contributed by Bénédikt Tran in :gh:`133810`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:448
msgid "pathlib"
msgstr ""

#: ../../../whatsnew/3.15.rst:450
msgid ""
"Removed deprecated :meth:`!pathlib.PurePath.is_reserved`. Use :func:`os.path."
"isreserved` to detect reserved paths on Windows. (Contributed by Nikita "
"Sobolev in :gh:`133875`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:456
msgid "platform"
msgstr ""

#: ../../../whatsnew/3.15.rst:458
msgid ""
"Removed the :func:`!platform.java_ver` function, which was deprecated since "
"Python 3.13. (Contributed by Alexey Makridenko in :gh:`133604`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:464
msgid "sre_*"
msgstr ""

#: ../../../whatsnew/3.15.rst:466
msgid ""
"Removed :mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` "
"modules. (Contributed by Stan Ulbrych in :gh:`135994`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:471
msgid "sysconfig"
msgstr ""

#: ../../../whatsnew/3.15.rst:473
msgid ""
"Removed the *check_home* parameter of :func:`sysconfig.is_python_build`. "
"(Contributed by Filipe Laíns in :gh:`92897`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:478
msgid "threading"
msgstr ""

#: ../../../whatsnew/3.15.rst:480
msgid ""
"Remove support for arbitrary positional or keyword arguments in the C "
"implementation of :class:`~threading.RLock` objects. This was deprecated in "
"Python 3.14. (Contributed by Bénédikt Tran in :gh:`134087`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:487
msgid "typing"
msgstr ""

#: ../../../whatsnew/3.15.rst:489
msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) is no longer supported. Use the class-based syntax or the "
"functional syntax instead. (Contributed by Bénédikt Tran in :gh:`133817`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:495
msgid ""
"Using ``TD = TypedDict(\"TD\")`` or ``TD = TypedDict(\"TD\", None)`` to "
"construct a :class:`~typing.TypedDict` type with zero field is no longer "
"supported. Use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", "
"{})`` instead. (Contributed by Bénédikt Tran in :gh:`133823`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:501
msgid ""
"Code like ``class ExtraTypeVars(P1[S], Protocol[T, T2]): ...`` now raises a :"
"exc:`TypeError`, because ``S`` is not listed in ``Protocol`` parameters. "
"(Contributed by Nikita Sobolev in :gh:`137191`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:505
msgid ""
"Code like ``class B2(A[T2], Protocol[T1, T2]): ...`` now correctly handles "
"type parameters order: it is ``(T1, T2)``, not ``(T2, T1)`` as it was "
"incorrectly infered in runtime before. (Contributed by Nikita Sobolev in :gh:"
"`137191`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:512
msgid "wave"
msgstr ""

#: ../../../whatsnew/3.15.rst:514
msgid ""
"Removed the ``getmark()``, ``setmark()`` and ``getmarkers()`` methods of "
"the :class:`~wave.Wave_read` and :class:`~wave.Wave_write` classes, which "
"were deprecated since Python 3.13. (Contributed by Bénédikt Tran in :gh:"
"`133873`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:521 ../../../whatsnew/3.15.rst:553
msgid "Porting to Python 3.15"
msgstr ""

#: ../../../whatsnew/3.15.rst:523
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

#: ../../../whatsnew/3.15.rst:528
msgid "Build changes"
msgstr ""

#: ../../../whatsnew/3.15.rst:530
msgid ""
"Removed implicit fallback to the bundled copy of the ``libmpdec`` library. "
"Now this should be explicitly enabled with :option:`--with-system-libmpdec` "
"set to ``no`` or with :option:`!--without-system-libmpdec`. (Contributed by "
"Sergey B Kirpichev in :gh:`115119`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:537
msgid "C API changes"
msgstr ""

#: ../../../whatsnew/3.15.rst:542
msgid ""
"Add :c:func:`PySys_GetAttr`, :c:func:`PySys_GetAttrString`, :c:func:"
"`PySys_GetOptionalAttr`, and :c:func:`PySys_GetOptionalAttrString` functions "
"as replacements for :c:func:`PySys_GetObject`. (Contributed by Serhiy "
"Storchaka in :gh:`108512`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:547
msgid ""
"Add :c:type:`PyUnstable_Unicode_GET_CACHED_HASH` to get the cached hash of a "
"string. See the documentation for caveats. (Contributed by Petr Viktorin in :"
"gh:`131510`)"
msgstr ""

#: ../../../whatsnew/3.15.rst:555
msgid ":class:`sqlite3.Connection` APIs has been cleaned up."
msgstr ""

#: ../../../whatsnew/3.15.rst:557
msgid ""
"All parameters of :func:`sqlite3.connect` except *database* are now keyword-"
"only."
msgstr ""

#: ../../../whatsnew/3.15.rst:558
msgid ""
"The first three parameters of methods :meth:`~sqlite3.Connection."
"create_function` and :meth:`~sqlite3.Connection.create_aggregate` are now "
"positional-only."
msgstr ""

#: ../../../whatsnew/3.15.rst:560
msgid ""
"The first parameter of methods :meth:`~sqlite3.Connection.set_authorizer`, :"
"meth:`~sqlite3.Connection.set_progress_handler` and :meth:`~sqlite3."
"Connection.set_trace_callback` is now positional-only."
msgstr ""

#: ../../../whatsnew/3.15.rst:564
msgid "(Contributed by Serhiy Storchaka in :gh:`133595`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:566
msgid "Private functions promoted to public C APIs:"
msgstr ""

#: ../../../whatsnew/3.15.rst:568
msgid ""
"The |pythoncapi_compat_project| can be used to get most of these new "
"functions on Python 3.14 and older."
msgstr ""

#: ../../../whatsnew/3.15.rst:573
msgid "Deprecated C APIs"
msgstr ""

#: ../../../whatsnew/3.15.rst:575
msgid ""
"For unsigned integer formats in :c:func:`PyArg_ParseTuple`, accepting Python "
"integers with value that is larger than the maximal value for the C type or "
"less than the minimal value for the corresponding signed integer type of the "
"same size is now deprecated. (Contributed by Serhiy Storchaka in :gh:"
"`132629`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:581
msgid ""
"Deprecate :c:member:`~PyComplexObject.cval` field of the the :c:type:"
"`PyComplexObject` type. Use :c:func:`PyComplex_AsCComplex` and :c:func:"
"`PyComplex_FromCComplex` to convert a Python complex number to/from the C :c:"
"type:`Py_complex` representation. (Contributed by Sergey B Kirpichev in :gh:"
"`128813`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:588
msgid ""
"Functions :c:func:`_Py_c_sum`, :c:func:`_Py_c_diff`, :c:func:`_Py_c_neg`, :c:"
"func:`_Py_c_prod`, :c:func:`_Py_c_quot`, :c:func:`_Py_c_pow` and :c:func:"
"`_Py_c_abs` are :term:`soft deprecated`. (Contributed by Sergey B Kirpichev "
"in :gh:`128813`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:596
msgid "Removed C APIs"
msgstr ""

#: ../../../whatsnew/3.15.rst:598
msgid "Remove deprecated ``PyUnicode`` functions:"
msgstr ""

#: ../../../whatsnew/3.15.rst:600
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:602
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""

#: ../../../whatsnew/3.15.rst:605
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:607
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""

#: ../../../whatsnew/3.15.rst:611
msgid "(Contributed by Stan Ulbrych in :gh:`133612`)"
msgstr ""

#: ../../../whatsnew/3.15.rst:613
msgid ""
":c:func:`!PyImport_ImportModuleNoBlock`: deprecated alias of :c:func:"
"`PyImport_ImportModule`. (Contributed by Bénédikt Tran in :gh:`133644`.)"
msgstr ""

#: ../../../whatsnew/3.15.rst:617
msgid ""
"The following functions are removed in favor of :c:func:`PyConfig_Get`. The |"
"pythoncapi_compat_project| can be used to get :c:func:`!PyConfig_Get` on "
"Python 3.13 and older."
msgstr ""

#: ../../../whatsnew/3.15.rst:621
msgid "Python initialization functions:"
msgstr ""

#: ../../../whatsnew/3.15.rst:623
msgid ""
":c:func:`!Py_GetExecPrefix`: use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../../whatsnew/3.15.rst:629
msgid ""
":c:func:`!Py_GetPath`: use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:632
msgid ""
":c:func:`!Py_GetPrefix`: use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""

#: ../../../whatsnew/3.15.rst:638
msgid ""
":c:func:`!Py_GetProgramFullPath`: use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:641
msgid ""
":c:func:`!Py_GetProgramName`: use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:644
msgid ""
":c:func:`!Py_GetPythonHome`: use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""

#: ../../../whatsnew/3.15.rst:648
msgid "(Contributed by Bénédikt Tran in :gh:`133644`.)"
msgstr ""
