# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/contextlib.rst:3
msgid ""
":mod:`contextlib` --- Utilities for :keyword:`with`\\ -statement contexts."
msgstr ""

#: ../../../library/contextlib.rst:9
msgid ""
"This module provides utilities for common tasks involving the :keyword:"
"`with` statement. For more information see also :ref:`typecontextmanager` "
"and :ref:`context-managers`."
msgstr ""

#: ../../../library/contextlib.rst:13
msgid "Functions provided:"
msgstr ""

#: ../../../library/contextlib.rst:18
msgid ""
"This function is a :term:`decorator` that can be used to define a factory "
"function for :keyword:`with` statement context managers, without needing to "
"create a class or separate :meth:`__enter__` and :meth:`__exit__` methods."
msgstr ""

#: ../../../library/contextlib.rst:22
msgid ""
"A simple example (this is not recommended as a real way of generating "
"HTML!)::"
msgstr ""

#: ../../../library/contextlib.rst:39
msgid ""
"The function being decorated must return a :term:`generator`-iterator when "
"called. This iterator must yield exactly one value, which will be bound to "
"the targets in the :keyword:`with` statement's :keyword:`as` clause, if any."
msgstr ""

#: ../../../library/contextlib.rst:43
msgid ""
"At the point where the generator yields, the block nested in the :keyword:"
"`with` statement is executed.  The generator is then resumed after the block "
"is exited. If an unhandled exception occurs in the block, it is reraised "
"inside the generator at the point where the yield occurred.  Thus, you can "
"use a :keyword:`try`...\\ :keyword:`except`...\\ :keyword:`finally` "
"statement to trap the error (if any), or ensure that some cleanup takes "
"place. If an exception is trapped merely in order to log it or to perform "
"some action (rather than to suppress it entirely), the generator must "
"reraise that exception. Otherwise the generator context manager will "
"indicate to the :keyword:`with` statement that the exception has been "
"handled, and execution will resume with the statement immediately following "
"the :keyword:`with` statement."
msgstr ""

#: ../../../library/contextlib.rst:58
msgid "Combine multiple context managers into a single nested context manager."
msgstr ""

#: ../../../library/contextlib.rst:60
msgid "Code like this::"
msgstr ""

#: ../../../library/contextlib.rst:67
msgid "is equivalent to this::"
msgstr ""

#: ../../../library/contextlib.rst:74
msgid ""
"Note that if the :meth:`__exit__` method of one of the nested context "
"managers indicates an exception should be suppressed, no exception "
"information will be passed to any remaining outer context managers. "
"Similarly, if the :meth:`__exit__` method of one of the nested managers "
"raises an exception, any previous exception state will be lost; the new "
"exception will be passed to the :meth:`__exit__` methods of any remaining "
"outer context managers. In general, :meth:`__exit__` methods should avoid "
"raising exceptions, and in particular they should not re-raise a passed-in "
"exception."
msgstr ""

#: ../../../library/contextlib.rst:86
msgid ""
"Return a context manager that closes *thing* upon completion of the block.  "
"This is basically equivalent to::"
msgstr ""

#: ../../../library/contextlib.rst:98
msgid "And lets you write code like this::"
msgstr ""

#: ../../../library/contextlib.rst:107
msgid ""
"without needing to explicitly close ``page``.  Even if an error occurs, "
"``page.close()`` will be called when the :keyword:`with` block is exited."
msgstr ""

#: ../../../library/contextlib.rst:114
msgid ":pep:`0343` - The \"with\" statement"
msgstr ""

#: ../../../library/contextlib.rst:114
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""
