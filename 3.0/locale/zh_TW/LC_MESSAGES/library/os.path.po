# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/os.path.rst:3
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ""

#: ../../../library/os.path.rst:11
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as either strings, or bytes. "
"Applications are encouraged to represent file names as (Unicode) character "
"strings. Unfortunately, some file names may not be representable as strings "
"on Unix, so applications that need to support arbitrary file names on Unix "
"should use bytes objects to represent path names. Vice versa, using bytes "
"objects cannot represent all file names on Windows (in the standard ``mbcs`` "
"encoding), hence Windows applications should use string objects to access "
"all files."
msgstr ""

#: ../../../library/os.path.rst:24
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""

#: ../../../library/os.path.rst:30
msgid ""
"On Windows, many of these functions do not properly support UNC pathnames. :"
"func:`splitunc` and :func:`ismount` do handle them correctly."
msgstr ""

#: ../../../library/os.path.rst:36
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to ``normpath(join(os.getcwd(), path))``."
msgstr ""

#: ../../../library/os.path.rst:42
msgid ""
"Return the base name of pathname *path*.  This is the second half of the "
"pair returned by ``split(path)``.  Note that the result of this function is "
"different from the Unix :program:`basename` program; where :program:"
"`basename` for ``'/foo/bar/'`` returns ``'bar'``, the :func:`basename` "
"function returns an empty string (``''``)."
msgstr ""

#: ../../../library/os.path.rst:51
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``). Note that this may return invalid paths because it works a "
"character at a time."
msgstr ""

#: ../../../library/os.path.rst:58
msgid ""
"Return the directory name of pathname *path*.  This is the first half of the "
"pair returned by ``split(path)``."
msgstr ""

#: ../../../library/os.path.rst:64
msgid ""
"Return ``True`` if *path* refers to an existing path.  Returns ``False`` for "
"broken symbolic links. On some platforms, this function may return ``False`` "
"if permission is not granted to execute :func:`os.stat` on the requested "
"file, even if the *path* physically exists."
msgstr ""

#: ../../../library/os.path.rst:72
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :"
"func:`os.lstat`."
msgstr ""

#: ../../../library/os.path.rst:79
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""

#: ../../../library/os.path.rst:84
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""

#: ../../../library/os.path.rst:89
msgid ""
"On Windows, :envvar:`HOME` and :envvar:`USERPROFILE` will be used if set, "
"otherwise a combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will "
"be used.  An initial ``~user`` is handled by stripping the last directory "
"component from the created user path derived above."
msgstr ""

#: ../../../library/os.path.rst:94
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""

#: ../../../library/os.path.rst:100
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""

#: ../../../library/os.path.rst:105
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""

#: ../../../library/os.path.rst:111
msgid ""
"Return the time of last access of *path*.  The return value is a number "
"giving the number of seconds since the epoch (see the  :mod:`time` module).  "
"Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""

#: ../../../library/os.path.rst:115 ../../../library/os.path.rst:125
msgid ""
"If :func:`os.stat_float_times` returns True, the result is a floating point "
"number."
msgstr ""

#: ../../../library/os.path.rst:121
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"number giving the number of seconds since the epoch (see the  :mod:`time` "
"module). Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""

#: ../../../library/os.path.rst:131
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last change, and, on others (like Windows), is the creation time for "
"*path*. The return value is a number giving the number of seconds since the "
"epoch (see the  :mod:`time` module).  Raise :exc:`os.error` if the file does "
"not exist or is inaccessible."
msgstr ""

#: ../../../library/os.path.rst:140
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`os.error` if the file "
"does not exist or is inaccessible."
msgstr ""

#: ../../../library/os.path.rst:146
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""

#: ../../../library/os.path.rst:153
msgid ""
"Return ``True`` if *path* is an existing regular file.  This follows "
"symbolic links, so both :func:`islink` and :func:`isfile` can be true for "
"the same path."
msgstr ""

#: ../../../library/os.path.rst:159
msgid ""
"Return ``True`` if *path* is an existing directory.  This follows symbolic "
"links, so both :func:`islink` and :func:`isdir` can be true for the same "
"path."
msgstr ""

#: ../../../library/os.path.rst:165
msgid ""
"Return ``True`` if *path* refers to a directory entry that is a symbolic "
"link. Always ``False`` if symbolic links are not supported."
msgstr ""

#: ../../../library/os.path.rst:171
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  The function "
"checks whether *path*'s parent, :file:`path/..`, is on a different device "
"than *path*, or whether :file:`path/..` and *path* point to the same i-node "
"on the same device --- this should detect mount points for all Unix and "
"POSIX variants."
msgstr ""

#: ../../../library/os.path.rst:180
msgid ""
"Join one or more path components intelligently.  If any component is an "
"absolute path, all previous components (on Windows, including the previous "
"drive letter, if there was one) are thrown away, and joining continues.  The "
"return value is the concatenation of *path1*, and optionally *path2*, etc., "
"with exactly one directory separator (``os.sep``) inserted between "
"components, unless *path2* is empty.  Note that on Windows, since there is a "
"current directory for each drive, ``os.path.join(\"c:\", \"foo\")`` "
"represents a path relative to the current directory on drive :file:`C:` (:"
"file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

#: ../../../library/os.path.rst:192
msgid ""
"Normalize the case of a pathname.  On Unix, this returns the path unchanged; "
"on case-insensitive filesystems, it converts the path to lowercase.  On "
"Windows, it also converts forward slashes to backward slashes."
msgstr ""

#: ../../../library/os.path.rst:199
msgid ""
"Normalize a pathname.  This collapses redundant separators and up-level "
"references so that ``A//B``, ``A/./B`` and ``A/foo/../B`` all become ``A/"
"B``. It does not normalize the case (use :func:`normcase` for that).  On "
"Windows, it converts forward slashes to backward slashes. It should be "
"understood that this may change the meaning of the path if it contains "
"symbolic links!"
msgstr ""

#: ../../../library/os.path.rst:208
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""

#: ../../../library/os.path.rst:214
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* point."
msgstr ""

#: ../../../library/os.path.rst:217
msgid "*start* defaults to :attr:`os.curdir`. Availability:  Windows, Unix."
msgstr ""

#: ../../../library/os.path.rst:222
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory (as indicated by device number and i-node number). Raise an "
"exception if a :func:`os.stat` call on either pathname fails. Availability: "
"Unix."
msgstr ""

#: ../../../library/os.path.rst:229
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file. Availability: Unix."
msgstr ""

#: ../../../library/os.path.rst:235
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`fstat`, :func:"
"`lstat`, or :func:`stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`. Availability: "
"Unix."
msgstr ""

#: ../../../library/os.path.rst:243
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"nearly all cases, ``join(head, tail)`` equals *path* (the only exception "
"being when there were multiple slashes separating *head* from *tail*)."
msgstr ""

#: ../../../library/os.path.rst:255
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a drive specification or the empty string.  On systems which do not "
"use drive specifications, *drive* will always be the empty string.  In all "
"cases, ``drive + tail`` will be the same as *path*."
msgstr ""

#: ../../../library/os.path.rst:263
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and *ext* is empty or begins with a period and contains at "
"most one period. Leading periods on the basename are  ignored; ``splitext('."
"cshrc')`` returns  ``('.cshrc', '')``."
msgstr ""

#: ../../../library/os.path.rst:271
msgid ""
"Split the pathname *path* into a pair ``(unc, rest)`` so that *unc* is the "
"UNC mount point (such as ``r'\\\\host\\mount'``), if present, and *rest* the "
"rest of the path (such as  ``r'\\path\\file.ext'``).  For paths containing "
"drive letters, *unc* will always be the empty string. Availability:  Windows."
msgstr ""

#: ../../../library/os.path.rst:279
msgid ""
"True if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system), and if :func:`os.listdir` returns "
"strings that contain characters that cannot be represented by ASCII."
msgstr ""

#: ../../../library/os.path.rst:9
msgid "path"
msgstr ""

#: ../../../library/os.path.rst:9
msgid "operations"
msgstr ""

#: ../../../library/os.path.rst:82
msgid "pwd"
msgstr ""
