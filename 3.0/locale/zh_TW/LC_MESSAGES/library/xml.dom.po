# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/xml.dom.rst:3
msgid ":mod:`xml.dom` --- The Document Object Model API"
msgstr ""

#: ../../../library/xml.dom.rst:11
msgid ""
"The Document Object Model, or \"DOM,\" is a cross-language API from the "
"World Wide Web Consortium (W3C) for accessing and modifying XML documents.  "
"A DOM implementation presents an XML document as a tree structure, or allows "
"client code to build such a structure from scratch.  It then gives access to "
"the structure through a set of objects which provided well-known interfaces."
msgstr ""

#: ../../../library/xml.dom.rst:17
msgid ""
"The DOM is extremely useful for random-access applications.  SAX only allows "
"you a view of one bit of the document at a time.  If you are looking at one "
"SAX element, you have no access to another.  If you are looking at a text "
"node, you have no access to a containing element. When you write a SAX "
"application, you need to keep track of your program's position in the "
"document somewhere in your own code.  SAX does not do it for you.  Also, if "
"you need to look ahead in the XML document, you are just out of luck."
msgstr ""

#: ../../../library/xml.dom.rst:25
msgid ""
"Some applications are simply impossible in an event driven model with no "
"access to a tree.  Of course you could build some sort of tree yourself in "
"SAX events, but the DOM allows you to avoid writing that code.  The DOM is a "
"standard tree representation for XML data."
msgstr ""

#: ../../../library/xml.dom.rst:30
msgid ""
"The Document Object Model is being defined by the W3C in stages, or "
"\"levels\" in their terminology.  The Python mapping of the API is "
"substantially based on the DOM Level 2 recommendation."
msgstr ""

#: ../../../library/xml.dom.rst:49
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  How this "
"is accomplished is not covered at all by DOM Level 1, and Level 2 provides "
"only limited improvements: There is a :class:`DOMImplementation` object "
"class which provides access to :class:`Document` creation methods, but no "
"way to access an XML reader/parser/Document builder in an implementation-"
"independent way. There is also no well-defined way to access these methods "
"without an existing :class:`Document` object.  In Python, each DOM "
"implementation will provide a function :func:`getDOMImplementation`. DOM "
"Level 3 adds a Load/Store specification, which defines an interface to the "
"reader, but this is not yet available in the Python standard library."
msgstr ""

#: ../../../library/xml.dom.rst:60
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification; this portion of the reference manual describes the "
"interpretation of the specification in Python."
msgstr ""

#: ../../../library/xml.dom.rst:65
msgid ""
"The specification provided by the W3C defines the DOM API for Java, "
"ECMAScript, and OMG IDL.  The Python mapping defined here is based in large "
"part on the IDL version of the specification, but strict compliance is not "
"required (though implementations are free to support the strict mapping from "
"IDL).  See section :ref:`dom-conformance` for a detailed discussion of "
"mapping requirements."
msgstr ""

#: ../../../library/xml.dom.rst:75
msgid ""
"`Document Object Model (DOM) Level 2 Specification <http://www.w3.org/TR/DOM-"
"Level-2-Core/>`_"
msgstr ""

#: ../../../library/xml.dom.rst:75
msgid "The W3C recommendation upon which the Python DOM API is based."
msgstr ""

#: ../../../library/xml.dom.rst:78
msgid ""
"`Document Object Model (DOM) Level 1 Specification <http://www.w3.org/TR/REC-"
"DOM-Level-1/>`_"
msgstr ""

#: ../../../library/xml.dom.rst:78
msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr ""

#: ../../../library/xml.dom.rst:80
msgid ""
"`Python Language Mapping Specification <http://www.omg.org/docs/"
"formal/02-11-05.pdf>`_"
msgstr ""

#: ../../../library/xml.dom.rst:81
msgid "This specifies the mapping from OMG IDL to Python."
msgstr ""

#: ../../../library/xml.dom.rst:85
msgid "Module Contents"
msgstr ""

#: ../../../library/xml.dom.rst:87
msgid "The :mod:`xml.dom` contains the following functions:"
msgstr ""

#: ../../../library/xml.dom.rst:92
msgid ""
"Register the *factory* function with the name *name*.  The factory function "
"should return an object which implements the :class:`DOMImplementation` "
"interface.  The factory function can return the same object every time, or a "
"new one for each call, as appropriate for the specific implementation (e.g. "
"if that implementation supports some customization)."
msgstr ""

#: ../../../library/xml.dom.rst:101
msgid ""
"Return a suitable DOM implementation. The *name* is either well-known, the "
"module name of a DOM implementation, or ``None``. If it is not ``None``, "
"imports the corresponding module and returns a :class:`DOMImplementation` "
"object if the import succeeds.  If no name is given, and if the environment "
"variable :envvar:`PYTHON_DOM` is set, this variable is used to find the "
"implementation."
msgstr ""

#: ../../../library/xml.dom.rst:107
msgid ""
"If name is not given, this examines the available implementations to find "
"one with the required feature set.  If no implementation can be found, raise "
"an :exc:`ImportError`.  The features list must be a sequence of ``(feature, "
"version)`` pairs which are passed to the :meth:`hasFeature` method on "
"available :class:`DOMImplementation` objects."
msgstr ""

#: ../../../library/xml.dom.rst:113
msgid "Some convenience constants are also provided:"
msgstr ""

#: ../../../library/xml.dom.rst:118
msgid ""
"The value used to indicate that no namespace is associated with a node in "
"the DOM.  This is typically found as the :attr:`namespaceURI` of a node, or "
"used as the *namespaceURI* parameter to a namespaces-specific method."
msgstr ""

#: ../../../library/xml.dom.rst:125
msgid ""
"The namespace URI associated with the reserved prefix ``xml``, as defined by "
"`Namespaces in XML <http://www.w3.org/TR/REC-xml-names/>`_ (section 4)."
msgstr ""

#: ../../../library/xml.dom.rst:131
msgid ""
"The namespace URI for namespace declarations, as defined by `Document Object "
"Model (DOM) Level 2 Core Specification <http://www.w3.org/TR/DOM-Level-2-"
"Core/core.html>`_ (section 1.1.8)."
msgstr ""

#: ../../../library/xml.dom.rst:138
msgid ""
"The URI of the XHTML namespace as defined by `XHTML 1.0: The Extensible "
"HyperText Markup Language <http://www.w3.org/TR/xhtml1/>`_ (section 3.1.1)."
msgstr ""

#: ../../../library/xml.dom.rst:142
msgid ""
"In addition, :mod:`xml.dom` contains a base :class:`Node` class and the DOM "
"exception classes.  The :class:`Node` class provided by this module does not "
"implement any of the methods or attributes defined by the DOM specification; "
"concrete DOM implementations must provide those.  The :class:`Node` class "
"provided as part of this module does provide the constants used for the :"
"attr:`nodeType` attribute on concrete :class:`Node` objects; they are "
"located within the class rather than at the module level to conform with the "
"DOM specifications."
msgstr ""

#: ../../../library/xml.dom.rst:157
msgid "Objects in the DOM"
msgstr ""

#: ../../../library/xml.dom.rst:159
msgid ""
"The definitive documentation for the DOM is the DOM specification from the "
"W3C."
msgstr ""

#: ../../../library/xml.dom.rst:161
msgid ""
"Note that DOM attributes may also be manipulated as nodes instead of as "
"simple strings.  It is fairly rare that you must do this, however, so this "
"usage is not yet documented."
msgstr ""

#: ../../../library/xml.dom.rst:166
msgid "Interface"
msgstr ""

#: ../../../library/xml.dom.rst:166
msgid "Section"
msgstr ""

#: ../../../library/xml.dom.rst:166
msgid "Purpose"
msgstr ""

#: ../../../library/xml.dom.rst:168
msgid ":class:`DOMImplementation`"
msgstr ""

#: ../../../library/xml.dom.rst:168
msgid ":ref:`dom-implementation-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:168
msgid "Interface to the underlying implementation."
msgstr ""

#: ../../../library/xml.dom.rst:171
msgid ":class:`Node`"
msgstr ""

#: ../../../library/xml.dom.rst:171
msgid ":ref:`dom-node-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:171
msgid "Base interface for most objects in a document."
msgstr ""

#: ../../../library/xml.dom.rst:174
msgid ":class:`NodeList`"
msgstr ""

#: ../../../library/xml.dom.rst:174
msgid ":ref:`dom-nodelist-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:174
msgid "Interface for a sequence of nodes."
msgstr ""

#: ../../../library/xml.dom.rst:177
msgid ":class:`DocumentType`"
msgstr ""

#: ../../../library/xml.dom.rst:177
msgid ":ref:`dom-documenttype-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:177
msgid "Information about the declarations needed to process a document."
msgstr ""

#: ../../../library/xml.dom.rst:181
msgid ":class:`Document`"
msgstr ""

#: ../../../library/xml.dom.rst:181
msgid ":ref:`dom-document-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:181
msgid "Object which represents an entire document."
msgstr ""

#: ../../../library/xml.dom.rst:184
msgid ":class:`Element`"
msgstr ""

#: ../../../library/xml.dom.rst:184
msgid ":ref:`dom-element-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:184
msgid "Element nodes in the document hierarchy."
msgstr ""

#: ../../../library/xml.dom.rst:187
msgid ":class:`Attr`"
msgstr ""

#: ../../../library/xml.dom.rst:187
msgid ":ref:`dom-attr-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:187
msgid "Attribute value nodes on element nodes."
msgstr ""

#: ../../../library/xml.dom.rst:190
msgid ":class:`Comment`"
msgstr ""

#: ../../../library/xml.dom.rst:190
msgid ":ref:`dom-comment-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:190
msgid "Representation of comments in the source document."
msgstr ""

#: ../../../library/xml.dom.rst:193
msgid ":class:`Text`"
msgstr ""

#: ../../../library/xml.dom.rst:193
msgid ":ref:`dom-text-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:193
msgid "Nodes containing textual content from the document."
msgstr ""

#: ../../../library/xml.dom.rst:196
msgid ":class:`ProcessingInstruction`"
msgstr ""

#: ../../../library/xml.dom.rst:196
msgid ":ref:`dom-pi-objects`"
msgstr ""

#: ../../../library/xml.dom.rst:196
msgid "Processing instruction representation."
msgstr ""

#: ../../../library/xml.dom.rst:200
msgid ""
"An additional section describes the exceptions defined for working with the "
"DOM in Python."
msgstr ""

#: ../../../library/xml.dom.rst:207
msgid "DOMImplementation Objects"
msgstr ""

#: ../../../library/xml.dom.rst:209
msgid ""
"The :class:`DOMImplementation` interface provides a way for applications to "
"determine the availability of particular features in the DOM they are using. "
"DOM Level 2 added the ability to create new :class:`Document` and :class:"
"`DocumentType` objects using the :class:`DOMImplementation` as well."
msgstr ""

#: ../../../library/xml.dom.rst:217
msgid ""
"Return true if the feature identified by the pair of strings *feature* and "
"*version* is implemented."
msgstr ""

#: ../../../library/xml.dom.rst:223
msgid ""
"Return a new :class:`Document` object (the root of the DOM), with a child :"
"class:`Element` object having the given *namespaceUri* and *qualifiedName*. "
"The *doctype* must be a :class:`DocumentType` object created by :meth:"
"`createDocumentType`, or ``None``. In the Python DOM API, the first two "
"arguments can also be ``None`` in order to indicate that no :class:`Element` "
"child is to be created."
msgstr ""

#: ../../../library/xml.dom.rst:233
msgid ""
"Return a new :class:`DocumentType` object that encapsulates the given "
"*qualifiedName*, *publicId*, and *systemId* strings, representing the "
"information contained in an XML document type declaration."
msgstr ""

#: ../../../library/xml.dom.rst:241
msgid "Node Objects"
msgstr ""

#: ../../../library/xml.dom.rst:243
msgid ""
"All of the components of an XML document are subclasses of :class:`Node`."
msgstr ""

#: ../../../library/xml.dom.rst:248
msgid ""
"An integer representing the node type.  Symbolic constants for the types are "
"on the :class:`Node` object: :const:`ELEMENT_NODE`, :const:"
"`ATTRIBUTE_NODE`, :const:`TEXT_NODE`, :const:`CDATA_SECTION_NODE`, :const:"
"`ENTITY_NODE`, :const:`PROCESSING_INSTRUCTION_NODE`, :const:`COMMENT_NODE`, :"
"const:`DOCUMENT_NODE`, :const:`DOCUMENT_TYPE_NODE`, :const:`NOTATION_NODE`. "
"This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:258
msgid ""
"The parent of the current node, or ``None`` for the document node. The value "
"is always a :class:`Node` object or ``None``.  For :class:`Element` nodes, "
"this will be the parent element, except for the root element, in which case "
"it will be the :class:`Document` object. For :class:`Attr` nodes, this is "
"always ``None``. This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:267
msgid ""
"A :class:`NamedNodeMap` of attribute objects.  Only elements have actual "
"values for this; others provide ``None`` for this attribute. This is a read-"
"only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:274
msgid ""
"The node that immediately precedes this one with the same parent.  For "
"instance the element with an end-tag that comes just before the *self* "
"element's start-tag.  Of course, XML documents are made up of more than just "
"elements so the previous sibling could be text, a comment, or something "
"else. If this node is the first child of the parent, this attribute will be "
"``None``. This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:284
msgid ""
"The node that immediately follows this one with the same parent.  See also :"
"attr:`previousSibling`.  If this is the last child of the parent, this "
"attribute will be ``None``. This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:291
msgid ""
"A list of nodes contained within this node. This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:296
msgid ""
"The first child of the node, if there are any, or ``None``. This is a read-"
"only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:302
msgid ""
"The last child of the node, if there are any, or ``None``. This is a read-"
"only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:308
msgid ""
"The part of the :attr:`tagName` following the colon if there is one, else "
"the entire :attr:`tagName`.  The value is a string."
msgstr ""

#: ../../../library/xml.dom.rst:314
msgid ""
"The part of the :attr:`tagName` preceding the colon if there is one, else "
"the empty string.  The value is a string, or ``None``"
msgstr ""

#: ../../../library/xml.dom.rst:320
msgid ""
"The namespace associated with the element name.  This will be a string or "
"``None``.  This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:326
msgid ""
"This has a different meaning for each node type; see the DOM specification "
"for details.  You can always get the information you would get here from "
"another property such as the :attr:`tagName` property for elements or the :"
"attr:`name` property for attributes. For all node types, the value of this "
"attribute will be either a string or ``None``.  This is a read-only "
"attribute."
msgstr ""

#: ../../../library/xml.dom.rst:335
msgid ""
"This has a different meaning for each node type; see the DOM specification "
"for details.  The situation is similar to that with :attr:`nodeName`.  The "
"value is a string or ``None``."
msgstr ""

#: ../../../library/xml.dom.rst:342
msgid "Returns true if the node has any attributes."
msgstr ""

#: ../../../library/xml.dom.rst:347
msgid "Returns true if the node has any child nodes."
msgstr ""

#: ../../../library/xml.dom.rst:352
msgid ""
"Returns true if *other* refers to the same node as this node. This is "
"especially useful for DOM implementations which use any sort of proxy "
"architecture (because more than one object can refer to the same node)."
msgstr ""

#: ../../../library/xml.dom.rst:358
msgid ""
"This is based on a proposed DOM Level 3 API which is still in the \"working "
"draft\" stage, but this particular interface appears uncontroversial.  "
"Changes from the W3C will not necessarily affect this method in the Python "
"DOM interface (though any new W3C API for this would also be supported)."
msgstr ""

#: ../../../library/xml.dom.rst:366
msgid ""
"Add a new child node to this node at the end of the list of children, "
"returning *newChild*. If the node was already in in the tree, it is removed "
"first."
msgstr ""

#: ../../../library/xml.dom.rst:373
msgid ""
"Insert a new child node before an existing child.  It must be the case that "
"*refChild* is a child of this node; if not, :exc:`ValueError` is raised. "
"*newChild* is returned. If *refChild* is ``None``, it inserts *newChild* at "
"the end of the children's list."
msgstr ""

#: ../../../library/xml.dom.rst:381
msgid ""
"Remove a child node.  *oldChild* must be a child of this node; if not, :exc:"
"`ValueError` is raised.  *oldChild* is returned on success.  If *oldChild* "
"will not be used further, its :meth:`unlink` method should be called."
msgstr ""

#: ../../../library/xml.dom.rst:388
msgid ""
"Replace an existing node with a new node. It must be the case that  "
"*oldChild* is a child of this node; if not, :exc:`ValueError` is raised."
msgstr ""

#: ../../../library/xml.dom.rst:394
msgid ""
"Join adjacent text nodes so that all stretches of text are stored as single :"
"class:`Text` instances.  This simplifies processing text from a DOM tree for "
"many applications."
msgstr ""

#: ../../../library/xml.dom.rst:401
msgid ""
"Clone this node.  Setting *deep* means to clone all child nodes as well.  "
"This returns the clone."
msgstr ""

#: ../../../library/xml.dom.rst:408
msgid "NodeList Objects"
msgstr ""

#: ../../../library/xml.dom.rst:410
msgid ""
"A :class:`NodeList` represents a sequence of nodes.  These objects are used "
"in two ways in the DOM Core recommendation:  the :class:`Element` objects "
"provides one as its list of child nodes, and the :meth:"
"`getElementsByTagName` and :meth:`getElementsByTagNameNS` methods of :class:"
"`Node` return objects with this interface to represent query results."
msgstr ""

#: ../../../library/xml.dom.rst:416
msgid ""
"The DOM Level 2 recommendation defines one method and one attribute for "
"these objects:"
msgstr ""

#: ../../../library/xml.dom.rst:422
msgid ""
"Return the *i*'th item from the sequence, if there is one, or ``None``.  The "
"index *i* is not allowed to be less then zero or greater than or equal to "
"the length of the sequence."
msgstr ""

#: ../../../library/xml.dom.rst:429
msgid "The number of nodes in the sequence."
msgstr ""

#: ../../../library/xml.dom.rst:431
msgid ""
"In addition, the Python DOM interface requires that some additional support "
"is provided to allow :class:`NodeList` objects to be used as Python "
"sequences.  All :class:`NodeList` implementations must include support for :"
"meth:`__len__` and :meth:`__getitem__`; this allows iteration over the :"
"class:`NodeList` in :keyword:`for` statements and proper support for the :"
"func:`len` built-in function."
msgstr ""

#: ../../../library/xml.dom.rst:438
msgid ""
"If a DOM implementation supports modification of the document, the :class:"
"`NodeList` implementation must also support the :meth:`__setitem__` and :"
"meth:`__delitem__` methods."
msgstr ""

#: ../../../library/xml.dom.rst:446
msgid "DocumentType Objects"
msgstr ""

#: ../../../library/xml.dom.rst:448
msgid ""
"Information about the notations and entities declared by a document "
"(including the external subset if the parser uses it and can provide the "
"information) is available from a :class:`DocumentType` object.  The :class:"
"`DocumentType` for a document is available from the :class:`Document` "
"object's :attr:`doctype` attribute; if there is no ``DOCTYPE`` declaration "
"for the document, the document's :attr:`doctype` attribute will be set to "
"``None`` instead of an instance of this interface."
msgstr ""

#: ../../../library/xml.dom.rst:456
msgid ""
":class:`DocumentType` is a specialization of :class:`Node`, and adds the "
"following attributes:"
msgstr ""

#: ../../../library/xml.dom.rst:462
msgid ""
"The public identifier for the external subset of the document type "
"definition. This will be a string or ``None``."
msgstr ""

#: ../../../library/xml.dom.rst:468
msgid ""
"The system identifier for the external subset of the document type "
"definition. This will be a URI as a string, or ``None``."
msgstr ""

#: ../../../library/xml.dom.rst:474
msgid ""
"A string giving the complete internal subset from the document. This does "
"not include the brackets which enclose the subset.  If the document has no "
"internal subset, this should be ``None``."
msgstr ""

#: ../../../library/xml.dom.rst:481
msgid ""
"The name of the root element as given in the ``DOCTYPE`` declaration, if "
"present."
msgstr ""

#: ../../../library/xml.dom.rst:487
msgid ""
"This is a :class:`NamedNodeMap` giving the definitions of external entities. "
"For entity names defined more than once, only the first definition is "
"provided (others are ignored as required by the XML recommendation).  This "
"may be ``None`` if the information is not provided by the parser, or if no "
"entities are defined."
msgstr ""

#: ../../../library/xml.dom.rst:496
msgid ""
"This is a :class:`NamedNodeMap` giving the definitions of notations. For "
"notation names defined more than once, only the first definition is provided "
"(others are ignored as required by the XML recommendation).  This may be "
"``None`` if the information is not provided by the parser, or if no "
"notations are defined."
msgstr ""

#: ../../../library/xml.dom.rst:506
msgid "Document Objects"
msgstr ""

#: ../../../library/xml.dom.rst:508
msgid ""
"A :class:`Document` represents an entire XML document, including its "
"constituent elements, attributes, processing instructions, comments etc.  "
"Remember that it inherits properties from :class:`Node`."
msgstr ""

#: ../../../library/xml.dom.rst:515
msgid "The one and only root element of the document."
msgstr ""

#: ../../../library/xml.dom.rst:520
msgid ""
"Create and return a new element node.  The element is not inserted into the "
"document when it is created.  You need to explicitly insert it with one of "
"the other methods such as :meth:`insertBefore` or :meth:`appendChild`."
msgstr ""

#: ../../../library/xml.dom.rst:527
msgid ""
"Create and return a new element with a namespace.  The *tagName* may have a "
"prefix.  The element is not inserted into the document when it is created.  "
"You need to explicitly insert it with one of the other methods such as :meth:"
"`insertBefore` or :meth:`appendChild`."
msgstr ""

#: ../../../library/xml.dom.rst:535
msgid ""
"Create and return a text node containing the data passed as a parameter.  As "
"with the other creation methods, this one does not insert the node into the "
"tree."
msgstr ""

#: ../../../library/xml.dom.rst:542
msgid ""
"Create and return a comment node containing the data passed as a parameter.  "
"As with the other creation methods, this one does not insert the node into "
"the tree."
msgstr ""

#: ../../../library/xml.dom.rst:549
msgid ""
"Create and return a processing instruction node containing the *target* and "
"*data* passed as parameters.  As with the other creation methods, this one "
"does not insert the node into the tree."
msgstr ""

#: ../../../library/xml.dom.rst:556
msgid ""
"Create and return an attribute node.  This method does not associate the "
"attribute node with any particular element.  You must use :meth:"
"`setAttributeNode` on the appropriate :class:`Element` object to use the "
"newly created attribute instance."
msgstr ""

#: ../../../library/xml.dom.rst:564
msgid ""
"Create and return an attribute node with a namespace.  The *tagName* may "
"have a prefix.  This method does not associate the attribute node with any "
"particular element.  You must use :meth:`setAttributeNode` on the "
"appropriate :class:`Element` object to use the newly created attribute "
"instance."
msgstr ""

#: ../../../library/xml.dom.rst:572
msgid ""
"Search for all descendants (direct children, children's children, etc.) with "
"a particular element type name."
msgstr ""

#: ../../../library/xml.dom.rst:578
msgid ""
"Search for all descendants (direct children, children's children, etc.) with "
"a particular namespace URI and localname.  The localname is the part of the "
"namespace after the prefix."
msgstr ""

#: ../../../library/xml.dom.rst:586
msgid "Element Objects"
msgstr ""

#: ../../../library/xml.dom.rst:588
msgid ""
":class:`Element` is a subclass of :class:`Node`, so inherits all the "
"attributes of that class."
msgstr ""

#: ../../../library/xml.dom.rst:594
msgid ""
"The element type name.  In a namespace-using document it may have colons in "
"it. The value is a string."
msgstr ""

#: ../../../library/xml.dom.rst:600 ../../../library/xml.dom.rst:605
msgid "Same as equivalent method in the :class:`Document` class."
msgstr ""

#: ../../../library/xml.dom.rst:610
msgid "Returns true if the element has an attribute named by *name*."
msgstr ""

#: ../../../library/xml.dom.rst:615
msgid ""
"Returns true if the element has an attribute named by *namespaceURI* and "
"*localName*."
msgstr ""

#: ../../../library/xml.dom.rst:621
msgid ""
"Return the value of the attribute named by *name* as a string. If no such "
"attribute exists, an empty string is returned, as if the attribute had no "
"value."
msgstr ""

#: ../../../library/xml.dom.rst:627
msgid "Return the :class:`Attr` node for the attribute named by *attrname*."
msgstr ""

#: ../../../library/xml.dom.rst:632
msgid ""
"Return the value of the attribute named by *namespaceURI* and *localName* as "
"a string. If no such attribute exists, an empty string is returned, as if "
"the attribute had no value."
msgstr ""

#: ../../../library/xml.dom.rst:639
msgid ""
"Return an attribute value as a node, given a *namespaceURI* and *localName*."
msgstr ""

#: ../../../library/xml.dom.rst:644
msgid ""
"Remove an attribute by name.  If there is no matching attribute, a :exc:"
"`NotFoundErr` is raised."
msgstr ""

#: ../../../library/xml.dom.rst:650
msgid ""
"Remove and return *oldAttr* from the attribute list, if present. If "
"*oldAttr* is not present, :exc:`NotFoundErr` is raised."
msgstr ""

#: ../../../library/xml.dom.rst:656
msgid ""
"Remove an attribute by name.  Note that it uses a localName, not a qname.  "
"No exception is raised if there is no matching attribute."
msgstr ""

#: ../../../library/xml.dom.rst:662
msgid "Set an attribute value from a string."
msgstr ""

#: ../../../library/xml.dom.rst:667
msgid ""
"Add a new attribute node to the element, replacing an existing attribute if "
"necessary if the :attr:`name` attribute matches.  If a replacement occurs, "
"the old attribute node will be returned.  If *newAttr* is already in use, :"
"exc:`InuseAttributeErr` will be raised."
msgstr ""

#: ../../../library/xml.dom.rst:675
msgid ""
"Add a new attribute node to the element, replacing an existing attribute if "
"necessary if the :attr:`namespaceURI` and :attr:`localName` attributes "
"match. If a replacement occurs, the old attribute node will be returned.  If "
"*newAttr* is already in use, :exc:`InuseAttributeErr` will be raised."
msgstr ""

#: ../../../library/xml.dom.rst:683
msgid ""
"Set an attribute value from a string, given a *namespaceURI* and a *qname*. "
"Note that a qname is the whole attribute name.  This is different than above."
msgstr ""

#: ../../../library/xml.dom.rst:690
msgid "Attr Objects"
msgstr ""

#: ../../../library/xml.dom.rst:692
msgid ""
":class:`Attr` inherits from :class:`Node`, so inherits all its attributes."
msgstr ""

#: ../../../library/xml.dom.rst:697
msgid ""
"The attribute name.  In a namespace-using document it may have colons in it."
msgstr ""

#: ../../../library/xml.dom.rst:702
msgid ""
"The part of the name following the colon if there is one, else the entire "
"name. This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:708
msgid ""
"The part of the name preceding the colon if there is one, else the empty "
"string."
msgstr ""

#: ../../../library/xml.dom.rst:714
msgid "NamedNodeMap Objects"
msgstr ""

#: ../../../library/xml.dom.rst:716
msgid ":class:`NamedNodeMap` does *not* inherit from :class:`Node`."
msgstr ""

#: ../../../library/xml.dom.rst:721
msgid "The length of the attribute list."
msgstr ""

#: ../../../library/xml.dom.rst:726
msgid ""
"Return an attribute with a particular index.  The order you get the "
"attributes in is arbitrary but will be consistent for the life of a DOM.  "
"Each item is an attribute node.  Get its value with the :attr:`value` "
"attribute."
msgstr ""

#: ../../../library/xml.dom.rst:730
msgid ""
"There are also experimental methods that give this class more mapping "
"behavior. You can use them or you can use the standardized :meth:"
"`getAttribute\\*` family of methods on the :class:`Element` objects."
msgstr ""

#: ../../../library/xml.dom.rst:738
msgid "Comment Objects"
msgstr ""

#: ../../../library/xml.dom.rst:740
msgid ""
":class:`Comment` represents a comment in the XML document.  It is a subclass "
"of :class:`Node`, but cannot have child nodes."
msgstr ""

#: ../../../library/xml.dom.rst:746
msgid ""
"The content of the comment as a string.  The attribute contains all "
"characters between the leading ``<!-``\\ ``-`` and trailing ``-``\\ ``->``, "
"but does not include them."
msgstr ""

#: ../../../library/xml.dom.rst:754
msgid "Text and CDATASection Objects"
msgstr ""

#: ../../../library/xml.dom.rst:756
msgid ""
"The :class:`Text` interface represents text in the XML document.  If the "
"parser and DOM implementation support the DOM's XML extension, portions of "
"the text enclosed in CDATA marked sections are stored in :class:"
"`CDATASection` objects. These two interfaces are identical, but provide "
"different values for the :attr:`nodeType` attribute."
msgstr ""

#: ../../../library/xml.dom.rst:762
msgid ""
"These interfaces extend the :class:`Node` interface.  They cannot have child "
"nodes."
msgstr ""

#: ../../../library/xml.dom.rst:768
msgid "The content of the text node as a string."
msgstr ""

#: ../../../library/xml.dom.rst:772
msgid ""
"The use of a :class:`CDATASection` node does not indicate that the node "
"represents a complete CDATA marked section, only that the content of the "
"node was part of a CDATA section.  A single CDATA section may be represented "
"by more than one node in the document tree.  There is no way to determine "
"whether two adjacent :class:`CDATASection` nodes represent different CDATA "
"marked sections."
msgstr ""

#: ../../../library/xml.dom.rst:782
msgid "ProcessingInstruction Objects"
msgstr ""

#: ../../../library/xml.dom.rst:784
msgid ""
"Represents a processing instruction in the XML document; this inherits from "
"the :class:`Node` interface and cannot have child nodes."
msgstr ""

#: ../../../library/xml.dom.rst:790
msgid ""
"The content of the processing instruction up to the first whitespace "
"character. This is a read-only attribute."
msgstr ""

#: ../../../library/xml.dom.rst:796
msgid ""
"The content of the processing instruction following the first whitespace "
"character."
msgstr ""

#: ../../../library/xml.dom.rst:803
msgid "Exceptions"
msgstr ""

#: ../../../library/xml.dom.rst:805
msgid ""
"The DOM Level 2 recommendation defines a single exception, :exc:"
"`DOMException`, and a number of constants that allow applications to "
"determine what sort of error occurred. :exc:`DOMException` instances carry "
"a :attr:`code` attribute that provides the appropriate value for the "
"specific exception."
msgstr ""

#: ../../../library/xml.dom.rst:810
msgid ""
"The Python DOM interface provides the constants, but also expands the set of "
"exceptions so that a specific exception exists for each of the exception "
"codes defined by the DOM.  The implementations must raise the appropriate "
"specific exception, each of which carries the appropriate value for the :"
"attr:`code` attribute."
msgstr ""

#: ../../../library/xml.dom.rst:819
msgid ""
"Base exception class used for all specific DOM exceptions.  This exception "
"class cannot be directly instantiated."
msgstr ""

#: ../../../library/xml.dom.rst:825
msgid ""
"Raised when a specified range of text does not fit into a string. This is "
"not known to be used in the Python DOM implementations, but may be received "
"from DOM implementations not written in Python."
msgstr ""

#: ../../../library/xml.dom.rst:832
msgid ""
"Raised when an attempt is made to insert a node where the node type is not "
"allowed."
msgstr ""

#: ../../../library/xml.dom.rst:838
msgid ""
"Raised when an index or size parameter to a method is negative or exceeds "
"the allowed values."
msgstr ""

#: ../../../library/xml.dom.rst:844
msgid ""
"Raised when an attempt is made to insert an :class:`Attr` node that is "
"already present elsewhere in the document."
msgstr ""

#: ../../../library/xml.dom.rst:850
msgid ""
"Raised if a parameter or an operation is not supported on the underlying "
"object."
msgstr ""

#: ../../../library/xml.dom.rst:855
msgid ""
"This exception is raised when a string parameter contains a character that "
"is not permitted in the context it's being used in by the XML 1.0 "
"recommendation. For example, attempting to create an :class:`Element` node "
"with a space in the element type name will cause this error to be raised."
msgstr ""

#: ../../../library/xml.dom.rst:863
msgid "Raised when an attempt is made to modify the type of a node."
msgstr ""

#: ../../../library/xml.dom.rst:868
msgid ""
"Raised when an attempt is made to use an object that is not defined or is no "
"longer usable."
msgstr ""

#: ../../../library/xml.dom.rst:874
msgid ""
"If an attempt is made to change any object in a way that is not permitted "
"with regard to the `Namespaces in XML <http://www.w3.org/TR/REC-xml-names/"
">`_ recommendation, this exception is raised."
msgstr ""

#: ../../../library/xml.dom.rst:881
msgid ""
"Exception when a node does not exist in the referenced context.  For "
"example, :meth:`NamedNodeMap.removeNamedItem` will raise this if the node "
"passed in does not exist in the map."
msgstr ""

#: ../../../library/xml.dom.rst:888
msgid ""
"Raised when the implementation does not support the requested type of object "
"or operation."
msgstr ""

#: ../../../library/xml.dom.rst:894
msgid ""
"This is raised if data is specified for a node which does not support data."
msgstr ""

#: ../../../library/xml.dom.rst:901
msgid ""
"Raised on attempts to modify an object where modifications are not allowed "
"(such as for read-only nodes)."
msgstr ""

#: ../../../library/xml.dom.rst:907
msgid "Raised when an invalid or illegal string is specified."
msgstr ""

#: ../../../library/xml.dom.rst:914
msgid ""
"Raised when a node is inserted in a different document than it currently "
"belongs to, and the implementation does not support migrating the node from "
"one document to the other."
msgstr ""

#: ../../../library/xml.dom.rst:918
msgid ""
"The exception codes defined in the DOM recommendation map to the exceptions "
"described above according to this table:"
msgstr ""

#: ../../../library/xml.dom.rst:922
msgid "Constant"
msgstr ""

#: ../../../library/xml.dom.rst:922
msgid "Exception"
msgstr ""

#: ../../../library/xml.dom.rst:924
msgid ":const:`DOMSTRING_SIZE_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:924
msgid ":exc:`DomstringSizeErr`"
msgstr ""

#: ../../../library/xml.dom.rst:926
msgid ":const:`HIERARCHY_REQUEST_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:926
msgid ":exc:`HierarchyRequestErr`"
msgstr ""

#: ../../../library/xml.dom.rst:928
msgid ":const:`INDEX_SIZE_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:928
msgid ":exc:`IndexSizeErr`"
msgstr ""

#: ../../../library/xml.dom.rst:930
msgid ":const:`INUSE_ATTRIBUTE_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:930
msgid ":exc:`InuseAttributeErr`"
msgstr ""

#: ../../../library/xml.dom.rst:932
msgid ":const:`INVALID_ACCESS_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:932
msgid ":exc:`InvalidAccessErr`"
msgstr ""

#: ../../../library/xml.dom.rst:934
msgid ":const:`INVALID_CHARACTER_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:934
msgid ":exc:`InvalidCharacterErr`"
msgstr ""

#: ../../../library/xml.dom.rst:936
msgid ":const:`INVALID_MODIFICATION_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:936
msgid ":exc:`InvalidModificationErr`"
msgstr ""

#: ../../../library/xml.dom.rst:938
msgid ":const:`INVALID_STATE_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:938
msgid ":exc:`InvalidStateErr`"
msgstr ""

#: ../../../library/xml.dom.rst:940
msgid ":const:`NAMESPACE_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:940
msgid ":exc:`NamespaceErr`"
msgstr ""

#: ../../../library/xml.dom.rst:942
msgid ":const:`NOT_FOUND_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:942
msgid ":exc:`NotFoundErr`"
msgstr ""

#: ../../../library/xml.dom.rst:944
msgid ":const:`NOT_SUPPORTED_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:944
msgid ":exc:`NotSupportedErr`"
msgstr ""

#: ../../../library/xml.dom.rst:946
msgid ":const:`NO_DATA_ALLOWED_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:946
msgid ":exc:`NoDataAllowedErr`"
msgstr ""

#: ../../../library/xml.dom.rst:948
msgid ":const:`NO_MODIFICATION_ALLOWED_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:948
msgid ":exc:`NoModificationAllowedErr`"
msgstr ""

#: ../../../library/xml.dom.rst:950
msgid ":const:`SYNTAX_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:950
msgid ":exc:`SyntaxErr`"
msgstr ""

#: ../../../library/xml.dom.rst:952
msgid ":const:`WRONG_DOCUMENT_ERR`"
msgstr ""

#: ../../../library/xml.dom.rst:952
msgid ":exc:`WrongDocumentErr`"
msgstr ""

#: ../../../library/xml.dom.rst:959
msgid "Conformance"
msgstr ""

#: ../../../library/xml.dom.rst:961
msgid ""
"This section describes the conformance requirements and relationships "
"between the Python DOM API, the W3C DOM recommendations, and the OMG IDL "
"mapping for Python."
msgstr ""

#: ../../../library/xml.dom.rst:969
msgid "Type Mapping"
msgstr ""

#: ../../../library/xml.dom.rst:971
msgid ""
"The primitive IDL types used in the DOM specification are mapped to Python "
"types according to the following table."
msgstr ""

#: ../../../library/xml.dom.rst:975
msgid "IDL Type"
msgstr ""

#: ../../../library/xml.dom.rst:975
msgid "Python Type"
msgstr ""

#: ../../../library/xml.dom.rst:977
msgid "``boolean``"
msgstr ""

#: ../../../library/xml.dom.rst:977
msgid "``IntegerType`` (with a value of ``0`` or ``1``)"
msgstr ""

#: ../../../library/xml.dom.rst:980
msgid "``int``"
msgstr ""

#: ../../../library/xml.dom.rst:980 ../../../library/xml.dom.rst:982
#: ../../../library/xml.dom.rst:984
msgid "``IntegerType``"
msgstr ""

#: ../../../library/xml.dom.rst:982
msgid "``long int``"
msgstr ""

#: ../../../library/xml.dom.rst:984
msgid "``unsigned int``"
msgstr ""

#: ../../../library/xml.dom.rst:987
msgid ""
"Additionally, the :class:`DOMString` defined in the recommendation is mapped "
"to a bytes or string object.  Applications should be able to handle Unicode "
"whenever a string is returned from the DOM."
msgstr ""

#: ../../../library/xml.dom.rst:991
msgid ""
"The IDL ``null`` value is mapped to ``None``, which may be accepted or "
"provided by the implementation whenever ``null`` is allowed by the API."
msgstr ""

#: ../../../library/xml.dom.rst:998
msgid "Accessor Methods"
msgstr ""

#: ../../../library/xml.dom.rst:1000
msgid ""
"The mapping from OMG IDL to Python defines accessor functions for IDL "
"``attribute`` declarations in much the way the Java mapping does. Mapping "
"the IDL declarations ::"
msgstr ""

#: ../../../library/xml.dom.rst:1004
msgid ""
"readonly attribute string someValue;\n"
"         attribute string anotherValue;"
msgstr ""

#: ../../../library/xml.dom.rst:1007
msgid ""
"yields three accessor functions:  a \"get\" method for :attr:`someValue` (:"
"meth:`_get_someValue`), and \"get\" and \"set\" methods for :attr:"
"`anotherValue` (:meth:`_get_anotherValue` and :meth:`_set_anotherValue`).  "
"The mapping, in particular, does not require that the IDL attributes are "
"accessible as normal Python attributes:  ``object.someValue`` is *not* "
"required to work, and may raise an :exc:`AttributeError`."
msgstr ""

#: ../../../library/xml.dom.rst:1014
msgid ""
"The Python DOM API, however, *does* require that normal attribute access "
"work. This means that the typical surrogates generated by Python IDL "
"compilers are not likely to work, and wrapper objects may be needed on the "
"client if the DOM objects are accessed via CORBA. While this does require "
"some additional consideration for CORBA DOM clients, the implementers with "
"experience using DOM over CORBA from Python do not consider this a problem.  "
"Attributes that are declared ``readonly`` may not restrict write access in "
"all DOM implementations."
msgstr ""

#: ../../../library/xml.dom.rst:1023
msgid ""
"In the Python DOM API, accessor functions are not required.  If provided, "
"they should take the form defined by the Python IDL mapping, but these "
"methods are considered unnecessary since the attributes are accessible "
"directly from Python. \"Set\" accessors should never be provided for "
"``readonly`` attributes."
msgstr ""

#: ../../../library/xml.dom.rst:1028
msgid ""
"The IDL definitions do not fully embody the requirements of the W3C DOM API, "
"such as the notion of certain objects, such as the return value of :meth:"
"`getElementsByTagName`, being \"live\".  The Python DOM API does not require "
"implementations to enforce such requirements."
msgstr ""
