# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/array.rst:3
msgid ":mod:`array` --- Efficient arrays of numeric values"
msgstr ""

#: ../../../library/array.rst:11
msgid ""
"This module defines an object type which can compactly represent an array of "
"basic values: characters, integers, floating point numbers.  Arrays are "
"sequence types and behave very much like lists, except that the type of "
"objects stored in them is constrained.  The type is specified at object "
"creation time by using a :dfn:`type code`, which is a single character.  The "
"following type codes are defined:"
msgstr ""

#: ../../../library/array.rst:19
msgid "Type code"
msgstr ""

#: ../../../library/array.rst:19
msgid "C Type"
msgstr ""

#: ../../../library/array.rst:19
msgid "Python Type"
msgstr ""

#: ../../../library/array.rst:19
msgid "Minimum size in bytes"
msgstr ""

#: ../../../library/array.rst:21
msgid "``'b'``"
msgstr ""

#: ../../../library/array.rst:21
msgid "signed char"
msgstr ""

#: ../../../library/array.rst:21 ../../../library/array.rst:23
#: ../../../library/array.rst:27 ../../../library/array.rst:29
#: ../../../library/array.rst:31 ../../../library/array.rst:33
#: ../../../library/array.rst:35 ../../../library/array.rst:37
msgid "int"
msgstr ""

#: ../../../library/array.rst:21 ../../../library/array.rst:23
msgid "1"
msgstr ""

#: ../../../library/array.rst:23
msgid "``'B'``"
msgstr ""

#: ../../../library/array.rst:23
msgid "unsigned char"
msgstr ""

#: ../../../library/array.rst:25
msgid "``'u'``"
msgstr ""

#: ../../../library/array.rst:25
msgid "Py_UNICODE"
msgstr ""

#: ../../../library/array.rst:25
msgid "Unicode character"
msgstr ""

#: ../../../library/array.rst:25 ../../../library/array.rst:27
#: ../../../library/array.rst:29 ../../../library/array.rst:31
#: ../../../library/array.rst:33
msgid "2"
msgstr ""

#: ../../../library/array.rst:27
msgid "``'h'``"
msgstr ""

#: ../../../library/array.rst:27
msgid "signed short"
msgstr ""

#: ../../../library/array.rst:29
msgid "``'H'``"
msgstr ""

#: ../../../library/array.rst:29
msgid "unsigned short"
msgstr ""

#: ../../../library/array.rst:31
msgid "``'i'``"
msgstr ""

#: ../../../library/array.rst:31
msgid "signed int"
msgstr ""

#: ../../../library/array.rst:33
msgid "``'I'``"
msgstr ""

#: ../../../library/array.rst:33
msgid "unsigned int"
msgstr ""

#: ../../../library/array.rst:35
msgid "``'l'``"
msgstr ""

#: ../../../library/array.rst:35
msgid "signed long"
msgstr ""

#: ../../../library/array.rst:35 ../../../library/array.rst:37
#: ../../../library/array.rst:39
msgid "4"
msgstr ""

#: ../../../library/array.rst:37
msgid "``'L'``"
msgstr ""

#: ../../../library/array.rst:37
msgid "unsigned long"
msgstr ""

#: ../../../library/array.rst:39
msgid "``'f'``"
msgstr ""

#: ../../../library/array.rst:39 ../../../library/array.rst:41
msgid "float"
msgstr ""

#: ../../../library/array.rst:41
msgid "``'d'``"
msgstr ""

#: ../../../library/array.rst:41
msgid "double"
msgstr ""

#: ../../../library/array.rst:41
msgid "8"
msgstr ""

#: ../../../library/array.rst:44
msgid ""
"The actual representation of values is determined by the machine "
"architecture (strictly speaking, by the C implementation).  The actual size "
"can be accessed through the :attr:`itemsize` attribute."
msgstr ""

#: ../../../library/array.rst:48
msgid "The module defines the following type:"
msgstr ""

#: ../../../library/array.rst:53
msgid ""
"Return a new array whose items are restricted by *typecode*, and initialized "
"from the optional *initializer* value, which must be a list, object "
"supporting the buffer interface, or iterable over elements of the "
"appropriate type."
msgstr ""

#: ../../../library/array.rst:58
msgid ""
"If given a list or string, the initializer is passed to the new array's :"
"meth:`fromlist`, :meth:`fromstring`, or :meth:`fromunicode` method (see "
"below) to add initial items to the array.  Otherwise, the iterable "
"initializer is passed to the :meth:`extend` method."
msgstr ""

#: ../../../library/array.rst:66
msgid "Obsolete alias for :func:`array`."
msgstr ""

#: ../../../library/array.rst:70
msgid "A string with all available type codes."
msgstr ""

#: ../../../library/array.rst:72
msgid ""
"Array objects support the ordinary sequence operations of indexing, slicing, "
"concatenation, and multiplication.  When using slice assignment, the "
"assigned value must be an array object with the same type code; in all other "
"cases, :exc:`TypeError` is raised. Array objects also implement the buffer "
"interface, and may be used wherever buffer objects are supported."
msgstr ""

#: ../../../library/array.rst:78
msgid "The following data items and methods are also supported:"
msgstr ""

#: ../../../library/array.rst:83
msgid "The typecode character used to create the array."
msgstr ""

#: ../../../library/array.rst:88
msgid "The length in bytes of one array item in the internal representation."
msgstr ""

#: ../../../library/array.rst:93
msgid "Append a new item with value *x* to the end of the array."
msgstr ""

#: ../../../library/array.rst:98
msgid ""
"Return a tuple ``(address, length)`` giving the current memory address and "
"the length in elements of the buffer used to hold array's contents.  The "
"size of the memory buffer in bytes can be computed as ``array.buffer_info()"
"[1] * array.itemsize``.  This is occasionally useful when working with low-"
"level (and inherently unsafe) I/O interfaces that require memory addresses, "
"such as certain :cfunc:`ioctl` operations.  The returned numbers are valid "
"as long as the array exists and no length-changing operations are applied to "
"it."
msgstr ""

#: ../../../library/array.rst:108
msgid ""
"When using array objects from code written in C or C++ (the only way to "
"effectively make use of this information), it makes more sense to use the "
"buffer interface supported by array objects.  This method is maintained for "
"backward compatibility and should be avoided in new code.  The buffer "
"interface is documented in :ref:`bufferobjects`."
msgstr ""

#: ../../../library/array.rst:117
msgid ""
"\"Byteswap\" all items of the array.  This is only supported for values "
"which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:"
"`RuntimeError` is raised.  It is useful when reading data from a file "
"written on a machine with a different byte order."
msgstr ""

#: ../../../library/array.rst:125
msgid "Return the number of occurrences of *x* in the array."
msgstr ""

#: ../../../library/array.rst:130
msgid ""
"Append items from *iterable* to the end of the array.  If *iterable* is "
"another array, it must have *exactly* the same type code; if not, :exc:"
"`TypeError` will be raised.  If *iterable* is not an array, it must be "
"iterable and its elements must be the right type to be appended to the array."
msgstr ""

#: ../../../library/array.rst:138
msgid ""
"Read *n* items (as machine values) from the file object *f* and append them "
"to the end of the array.  If less than *n* items are available, :exc:"
"`EOFError` is raised, but the items that were available are still inserted "
"into the array. *f* must be a real built-in file object; something else with "
"a :meth:`read` method won't do."
msgstr ""

#: ../../../library/array.rst:147
msgid ""
"Append items from the list.  This is equivalent to ``for x in list: a."
"append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""

#: ../../../library/array.rst:153
msgid ""
"Appends items from the string, interpreting the string as an array of "
"machine values (as if it had been read from a file using the :meth:"
"`fromfile` method)."
msgstr ""

#: ../../../library/array.rst:159
msgid ""
"Extends this array with data from the given unicode string.  The array must "
"be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised.  Use "
"``array.fromstring(unicodestring.encode(enc))`` to append Unicode data to an "
"array of some other type."
msgstr ""

#: ../../../library/array.rst:167
msgid ""
"Return the smallest *i* such that *i* is the index of the first occurrence "
"of *x* in the array."
msgstr ""

#: ../../../library/array.rst:173
msgid ""
"Insert a new item with value *x* in the array before position *i*. Negative "
"values are treated as being relative to the end of the array."
msgstr ""

#: ../../../library/array.rst:179
msgid ""
"Removes the item with the index *i* from the array and returns it. The "
"optional argument defaults to ``-1``, so that by default the last item is "
"removed and returned."
msgstr ""

#: ../../../library/array.rst:186
msgid "Remove the first occurrence of *x* from the array."
msgstr ""

#: ../../../library/array.rst:191
msgid "Reverse the order of the items in the array."
msgstr ""

#: ../../../library/array.rst:196
msgid "Write all items (as machine values) to the file object *f*."
msgstr ""

#: ../../../library/array.rst:201
msgid "Convert the array to an ordinary list with the same items."
msgstr ""

#: ../../../library/array.rst:206
msgid ""
"Convert the array to an array of machine values and return the string "
"representation (the same sequence of bytes that would be written to a file "
"by the :meth:`tofile` method.)"
msgstr ""

#: ../../../library/array.rst:213
msgid ""
"Convert the array to a unicode string.  The array must be a type ``'u'`` "
"array; otherwise a :exc:`ValueError` is raised. Use ``array.tostring()."
"decode(enc)`` to obtain a unicode string from an array of some other type."
msgstr ""

#: ../../../library/array.rst:218
msgid ""
"When an array object is printed or converted to a string, it is represented "
"as ``array(typecode, initializer)``.  The *initializer* is omitted if the "
"array is empty, otherwise it is a string if the *typecode* is ``'u'``, "
"otherwise it is a list of numbers.  The string is guaranteed to be able to "
"be converted back to an array with the same type and value using :func:"
"`eval`, so long as the :func:`array` function has been imported using ``from "
"array import array``. Examples::"
msgstr ""

#: ../../../library/array.rst:226
msgid ""
"array('l')\n"
"array('u', 'hello \\u2641')\n"
"array('l', [1, 2, 3, 4, 5])\n"
"array('d', [1.0, 2.0, 3.14])"
msgstr ""

#: ../../../library/array.rst:235
msgid "Module :mod:`struct`"
msgstr ""

#: ../../../library/array.rst:235
msgid "Packing and unpacking of heterogeneous binary data."
msgstr ""

#: ../../../library/array.rst:239
msgid "Module :mod:`xdrlib`"
msgstr ""

#: ../../../library/array.rst:238
msgid ""
"Packing and unpacking of External Data Representation (XDR) data as used in "
"some remote procedure call systems."
msgstr ""

#: ../../../library/array.rst:244
msgid ""
"`The Numerical Python Manual <http://numpy.sourceforge.net/numdoc/HTML/"
"numdoc.htm>`_"
msgstr ""

#: ../../../library/array.rst:242
msgid ""
"The Numeric Python extension (NumPy) defines another array type; see http://"
"numpy.sourceforge.net/ for further information about Numerical Python. (A "
"PDF version of the NumPy manual is available at http://numpy.sourceforge.net/"
"numdoc/numdoc.pdf)."
msgstr ""

#: ../../../library/array.rst:9
msgid "arrays"
msgstr ""
