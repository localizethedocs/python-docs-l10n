# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/string.rst:3
msgid ":mod:`string` --- Common string operations"
msgstr ""

#: ../../../library/string.rst:11
msgid ""
"The :mod:`string` module contains a number of useful constants and classes, "
"as well as some deprecated legacy functions that are also available as "
"methods on strings. In addition, Python's built-in string classes support "
"the sequence type methods described in the :ref:`typesseq` section, and also "
"the string-specific methods described in the :ref:`string-methods` section. "
"To output formatted strings, see the :ref:`string-formatting` section. Also, "
"see the :mod:`re` module for string functions based on regular expressions."
msgstr ""

#: ../../../library/string.rst:21
msgid "String constants"
msgstr ""

#: ../../../library/string.rst:23
msgid "The constants defined in this module are:"
msgstr ""

#: ../../../library/string.rst:28
msgid ""
"The concatenation of the :const:`ascii_lowercase` and :const:"
"`ascii_uppercase` constants described below.  This value is not locale-"
"dependent."
msgstr ""

#: ../../../library/string.rst:34
msgid ""
"The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not "
"locale-dependent and will not change."
msgstr ""

#: ../../../library/string.rst:40
msgid ""
"The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not "
"locale-dependent and will not change."
msgstr ""

#: ../../../library/string.rst:46
msgid "The string ``'0123456789'``."
msgstr ""

#: ../../../library/string.rst:51
msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr ""

#: ../../../library/string.rst:56
msgid "The string ``'01234567'``."
msgstr ""

#: ../../../library/string.rst:61
msgid ""
"String of ASCII characters which are considered punctuation characters in "
"the ``C`` locale."
msgstr ""

#: ../../../library/string.rst:67
msgid ""
"String of ASCII characters which are considered printable.  This is a "
"combination of :const:`digits`, :const:`ascii_letters`, :const:"
"`punctuation`, and :const:`whitespace`."
msgstr ""

#: ../../../library/string.rst:74
msgid ""
"A string containing all ASCII characters that are considered whitespace. "
"This includes the characters space, tab, linefeed, return, formfeed, and "
"vertical tab."
msgstr ""

#: ../../../library/string.rst:82
msgid "String Formatting"
msgstr ""

#: ../../../library/string.rst:84
msgid ""
"The built-in string class provides the ability to do complex variable "
"substitutions and value formatting via the :func:`format` method described "
"in :pep:`3101`.  The :class:`Formatter` class in the :mod:`string` module "
"allows you to create and customize your own string formatting behaviors "
"using the same implementation as the built-in :meth:`format` method."
msgstr ""

#: ../../../library/string.rst:92
msgid "The :class:`Formatter` class has the following public methods:"
msgstr ""

#: ../../../library/string.rst:96
msgid ""
":meth:`format` is the primary API method.  It takes a format template "
"string, and an arbitrary set of positional and keyword argument. :meth:"
"`format` is just a wrapper that calls :meth:`vformat`."
msgstr ""

#: ../../../library/string.rst:102
msgid ""
"This function does the actual work of formatting.  It is exposed as a "
"separate function for cases where you want to pass in a predefined "
"dictionary of arguments, rather than unpacking and repacking the dictionary "
"as individual arguments using the ``*args`` and ``**kwds`` syntax.  :meth:"
"`vformat` does the work of breaking up the format template string into "
"character data and replacement fields.  It calls the various methods "
"described below."
msgstr ""

#: ../../../library/string.rst:110
msgid ""
"In addition, the :class:`Formatter` defines a number of methods that are "
"intended to be replaced by subclasses:"
msgstr ""

#: ../../../library/string.rst:115
msgid ""
"Loop over the format_string and return an iterable of tuples "
"(*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used "
"by :meth:`vformat` to break the string in to either literal text, or "
"replacement fields."
msgstr ""

#: ../../../library/string.rst:120
msgid ""
"The values in the tuple conceptually represent a span of literal text "
"followed by a single replacement field.  If there is no literal text (which "
"can happen if two replacement fields occur consecutively), then "
"*literal_text* will be a zero-length string.  If there is no replacement "
"field, then the values of *field_name*, *format_spec* and *conversion* will "
"be ``None``."
msgstr ""

#: ../../../library/string.rst:129
msgid ""
"Given *field_name* as returned by :meth:`parse` (see above), convert it to "
"an object to be formatted.  Returns a tuple (obj, used_key).  The default "
"version takes strings of the form defined in :pep:`3101`, such as "
"\"0[name]\" or \"label.title\".  *args* and *kwargs* are as passed in to :"
"meth:`vformat`.  The return value *used_key* has the same meaning as the "
"*key* parameter to :meth:`get_value`."
msgstr ""

#: ../../../library/string.rst:138
msgid ""
"Retrieve a given field value.  The *key* argument will be either an integer "
"or a string.  If it is an integer, it represents the index of the positional "
"argument in *args*; if it is a string, then it represents a named argument "
"in *kwargs*."
msgstr ""

#: ../../../library/string.rst:143
msgid ""
"The *args* parameter is set to the list of positional arguments to :meth:"
"`vformat`, and the *kwargs* parameter is set to the dictionary of keyword "
"arguments."
msgstr ""

#: ../../../library/string.rst:147
msgid ""
"For compound field names, these functions are only called for the first "
"component of the field name; Subsequent components are handled through "
"normal attribute and indexing operations."
msgstr ""

#: ../../../library/string.rst:151
msgid ""
"So for example, the field expression '0.name' would cause :meth:`get_value` "
"to be called with a *key* argument of 0.  The ``name`` attribute will be "
"looked up after :meth:`get_value` returns by calling the built-in :func:"
"`getattr` function."
msgstr ""

#: ../../../library/string.rst:156
msgid ""
"If the index or keyword refers to an item that does not exist, then an :exc:"
"`IndexError` or :exc:`KeyError` should be raised."
msgstr ""

#: ../../../library/string.rst:161
msgid ""
"Implement checking for unused arguments if desired.  The arguments to this "
"function is the set of all argument keys that were actually referred to in "
"the format string (integers for positional arguments, and strings for named "
"arguments), and a reference to the *args* and *kwargs* that was passed to "
"vformat.  The set of unused args can be calculated from these parameters.  :"
"meth:`check_unused_args` is assumed to throw an exception if the check fails."
msgstr ""

#: ../../../library/string.rst:171
msgid ""
":meth:`format_field` simply calls the global :func:`format` built-in.  The "
"method is provided so that subclasses can override it."
msgstr ""

#: ../../../library/string.rst:176
msgid ""
"Converts the value (returned by :meth:`get_field`) given a conversion type "
"(as in the tuple returned by the :meth:`parse` method.)  The default version "
"understands 'r' (repr) and 's' (str) conversion types."
msgstr ""

#: ../../../library/string.rst:184
msgid "Format String Syntax"
msgstr ""

#: ../../../library/string.rst:186
msgid ""
"The :meth:`str.format` method and the :class:`Formatter` class share the "
"same syntax for format strings (although in the case of :class:`Formatter`, "
"subclasses can define their own format string syntax.)"
msgstr ""

#: ../../../library/string.rst:190
msgid ""
"Format strings contain \"replacement fields\" surrounded by curly braces ``{}"
"``. Anything that is not contained in braces is considered literal text, "
"which is copied unchanged to the output.  If you need to include a brace "
"character in the literal text, it can be escaped by doubling: ``{{`` and ``}}"
"``."
msgstr ""

#: ../../../library/string.rst:195
msgid "The grammar for a replacement field is as follows:"
msgstr ""

#: ../../../library/string.rst:205
msgid ""
"In less formal terms, the replacement field starts with a *field_name*, "
"which can either be a number (for a positional argument), or an identifier "
"(for keyword arguments).  Following this is an optional *conversion* field, "
"which is preceded by an exclamation point ``'!'``, and a *format_spec*, "
"which is preceded by a colon ``':'``."
msgstr ""

#: ../../../library/string.rst:211
msgid ""
"The *field_name* itself begins with either a number or a keyword.  If it's a "
"number, it refers to a positional argument, and if it's a keyword it refers "
"to a named keyword argument.  This can be followed by any number of index or "
"attribute expressions. An expression of the form ``'.name'`` selects the "
"named attribute using :func:`getattr`, while an expression of the form "
"``'[index]'`` does an index lookup using :func:`__getitem__`."
msgstr ""

#: ../../../library/string.rst:218
msgid "Some simple format string examples::"
msgstr ""

#: ../../../library/string.rst:225
msgid ""
"The *conversion* field causes a type coercion before formatting.  Normally, "
"the job of formatting a value is done by the :meth:`__format__` method of "
"the value itself.  However, in some cases it is desirable to force a type to "
"be formatted as a string, overriding its own definition of formatting.  By "
"converting the value to a string before calling :meth:`__format__`, the "
"normal formatting logic is bypassed."
msgstr ""

#: ../../../library/string.rst:232
msgid ""
"Three conversion flags are currently supported: ``'!s'`` which calls :func:"
"`str` on the value, ``'!r'`` which calls :func:`repr` and ``'!a'`` which "
"calls :func:`ascii`."
msgstr ""

#: ../../../library/string.rst:236
msgid "Some examples::"
msgstr ""

#: ../../../library/string.rst:241
msgid ""
"The *format_spec* field contains a specification of how the value should be "
"presented, including such details as field width, alignment, padding, "
"decimal precision and so on.  Each value type can define it's own "
"\"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""

#: ../../../library/string.rst:246
msgid ""
"Most built-in types support a common formatting mini-language, which is "
"described in the next section."
msgstr ""

#: ../../../library/string.rst:249
msgid ""
"A *format_spec* field can also include nested replacement fields within it. "
"These nested replacement fields can contain only a field name; conversion "
"flags and format specifications are not allowed.  The replacement fields "
"within the format_spec are substituted before the *format_spec* string is "
"interpreted. This allows the formatting of a value to be dynamically "
"specified."
msgstr ""

#: ../../../library/string.rst:255
msgid ""
"For example, suppose you wanted to have a replacement field whose field "
"width is determined by another variable::"
msgstr ""

#: ../../../library/string.rst:260
msgid ""
"This would first evaluate the inner replacement field, making the format "
"string effectively::"
msgstr ""

#: ../../../library/string.rst:265
msgid "Then the outer replacement field would be evaluated, producing::"
msgstr ""

#: ../../../library/string.rst:269
msgid "Which is substituted into the string, yielding::"
msgstr ""

#: ../../../library/string.rst:273
msgid ""
"(The extra space is because we specified a field width of 10, and because "
"left alignment is the default for strings.)"
msgstr ""

#: ../../../library/string.rst:280
msgid "Format Specification Mini-Language"
msgstr ""

#: ../../../library/string.rst:282
msgid ""
"\"Format specifications\" are used within replacement fields contained "
"within a format string to define how individual values are presented (see :"
"ref:`formatstrings`.)  They can also be passed directly to the builtin :func:"
"`format` function.  Each formattable type may define how the format "
"specification is to be interpreted."
msgstr ""

#: ../../../library/string.rst:288
msgid ""
"Most built-in types implement the following options for format "
"specifications, although some of the formatting options are only supported "
"by the numeric types."
msgstr ""

#: ../../../library/string.rst:291
msgid ""
"A general convention is that an empty format string (``\"\"``) produces the "
"same result as if you had called :func:`str` on the value."
msgstr ""

#: ../../../library/string.rst:294
msgid "The general form of a *standard format specifier* is:"
msgstr ""

#: ../../../library/string.rst:305
msgid ""
"The *fill* character can be any character other than '}' (which signifies "
"the end of the field).  The presence of a fill character is signaled by the "
"*next* character, which must be one of the alignment options. If the second "
"character of *format_spec* is not a valid alignment option, then it is "
"assumed that both the fill character and the alignment option are absent."
msgstr ""

#: ../../../library/string.rst:311
msgid "The meaning of the various alignment options is as follows:"
msgstr ""

#: ../../../library/string.rst:314 ../../../library/string.rst:339
msgid "Option"
msgstr ""

#: ../../../library/string.rst:314 ../../../library/string.rst:339
#: ../../../library/string.rst:374 ../../../library/string.rst:401
msgid "Meaning"
msgstr ""

#: ../../../library/string.rst:316
msgid "``'<'``"
msgstr ""

#: ../../../library/string.rst:316
msgid ""
"Forces the field to be left-aligned within the available space (This is the "
"default.)"
msgstr ""

#: ../../../library/string.rst:319
msgid "``'>'``"
msgstr ""

#: ../../../library/string.rst:319
msgid "Forces the field to be right-aligned within the available space."
msgstr ""

#: ../../../library/string.rst:322
msgid "``'='``"
msgstr ""

#: ../../../library/string.rst:322
msgid ""
"Forces the padding to be placed after the sign (if any) but before the "
"digits.  This is used for printing fields in the form '+000000120'. This "
"alignment option is only valid for numeric types."
msgstr ""

#: ../../../library/string.rst:327
msgid "``'^'``"
msgstr ""

#: ../../../library/string.rst:327
msgid "Forces the field to be centered within the available space."
msgstr ""

#: ../../../library/string.rst:331
msgid ""
"Note that unless a minimum field width is defined, the field width will "
"always be the same size as the data to fill it, so that the alignment option "
"has no meaning in this case."
msgstr ""

#: ../../../library/string.rst:335
msgid ""
"The *sign* option is only valid for number types, and can be one of the "
"following:"
msgstr ""

#: ../../../library/string.rst:341
msgid "``'+'``"
msgstr ""

#: ../../../library/string.rst:341
msgid ""
"indicates that a sign should be used for both positive as well as negative "
"numbers."
msgstr ""

#: ../../../library/string.rst:344
msgid "``'-'``"
msgstr ""

#: ../../../library/string.rst:344
msgid ""
"indicates that a sign should be used only for negative numbers (this is the "
"default behavior)."
msgstr ""

#: ../../../library/string.rst:347
msgid "space"
msgstr ""

#: ../../../library/string.rst:347
msgid ""
"indicates that a leading space should be used on positive numbers, and a "
"minus sign on negative numbers."
msgstr ""

#: ../../../library/string.rst:351
msgid ""
"The ``'#'`` option is only valid for integers, and only for binary, octal, "
"or hexadecimal output.  If present, it specifies that the output will be "
"prefixed by ``'0b'``, ``'0o'``, or ``'0x'``, respectively."
msgstr ""

#: ../../../library/string.rst:355
msgid ""
"*width* is a decimal integer defining the minimum field width.  If not "
"specified, then the field width will be determined by the content."
msgstr ""

#: ../../../library/string.rst:358
msgid ""
"If the *width* field is preceded by a zero (``'0'``) character, this enables "
"zero-padding.  This is equivalent to an *alignment* type of ``'='`` and a "
"*fill* character of ``'0'``."
msgstr ""

#: ../../../library/string.rst:362
msgid ""
"The *precision* is a decimal number indicating how many digits should be "
"displayed after the decimal point for a floating point value formatted with "
"``'f'`` and ``'F'``, or before and after the decimal point for a floating "
"point value formatted with ``'g'`` or ``'G'``.  For non-number types the "
"field indicates the maximum field size - in other words, how many characters "
"will be used from the field content. The *precision* is ignored for integer "
"values."
msgstr ""

#: ../../../library/string.rst:369
msgid "Finally, the *type* determines how the data should be presented."
msgstr ""

#: ../../../library/string.rst:371
msgid "The available integer presentation types are:"
msgstr ""

#: ../../../library/string.rst:374 ../../../library/string.rst:401
msgid "Type"
msgstr ""

#: ../../../library/string.rst:376
msgid "``'b'``"
msgstr ""

#: ../../../library/string.rst:376
msgid "Binary format. Outputs the number in base 2."
msgstr ""

#: ../../../library/string.rst:378
msgid "``'c'``"
msgstr ""

#: ../../../library/string.rst:378
msgid ""
"Character. Converts the integer to the corresponding unicode character "
"before printing."
msgstr ""

#: ../../../library/string.rst:381
msgid "``'d'``"
msgstr ""

#: ../../../library/string.rst:381
msgid "Decimal Integer. Outputs the number in base 10."
msgstr ""

#: ../../../library/string.rst:383
msgid "``'o'``"
msgstr ""

#: ../../../library/string.rst:383
msgid "Octal format. Outputs the number in base 8."
msgstr ""

#: ../../../library/string.rst:385
msgid "``'x'``"
msgstr ""

#: ../../../library/string.rst:385
msgid ""
"Hex format. Outputs the number in base 16, using lower- case letters for the "
"digits above 9."
msgstr ""

#: ../../../library/string.rst:388
msgid "``'X'``"
msgstr ""

#: ../../../library/string.rst:388
msgid ""
"Hex format. Outputs the number in base 16, using upper- case letters for the "
"digits above 9."
msgstr ""

#: ../../../library/string.rst:391 ../../../library/string.rst:424
msgid "``'n'``"
msgstr ""

#: ../../../library/string.rst:391
msgid ""
"Number. This is the same as ``'d'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr ""

#: ../../../library/string.rst:395 ../../../library/string.rst:431
msgid "None"
msgstr ""

#: ../../../library/string.rst:395
msgid "The same as ``'d'``."
msgstr ""

#: ../../../library/string.rst:398
msgid ""
"The available presentation types for floating point and decimal values are:"
msgstr ""

#: ../../../library/string.rst:403
msgid "``'e'``"
msgstr ""

#: ../../../library/string.rst:403
msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent."
msgstr ""

#: ../../../library/string.rst:406
msgid "``'E'``"
msgstr ""

#: ../../../library/string.rst:406
msgid ""
"Exponent notation. Same as ``'e'`` except it uses an upper case 'E' as the "
"separator character."
msgstr ""

#: ../../../library/string.rst:409
msgid "``'f'``"
msgstr ""

#: ../../../library/string.rst:409
msgid "Fixed point. Displays the number as a fixed-point number."
msgstr ""

#: ../../../library/string.rst:412
msgid "``'F'``"
msgstr ""

#: ../../../library/string.rst:412
msgid "Fixed point. Same as ``'f'``."
msgstr ""

#: ../../../library/string.rst:414
msgid "``'g'``"
msgstr ""

#: ../../../library/string.rst:414
msgid ""
"General format. This prints the number as a fixed-point number, unless the "
"number is too large, in which case it switches to ``'e'`` exponent notation. "
"Infinity and NaN values are formatted as ``inf``, ``-inf`` and ``nan``, "
"respectively."
msgstr ""

#: ../../../library/string.rst:420
msgid "``'G'``"
msgstr ""

#: ../../../library/string.rst:420
msgid ""
"General format. Same as ``'g'`` except switches to ``'E'`` if the number "
"gets to large. The representations of infinity and NaN are uppercased, too."
msgstr ""

#: ../../../library/string.rst:424
msgid ""
"Number. This is the same as ``'g'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr ""

#: ../../../library/string.rst:428
msgid "``'%'``"
msgstr ""

#: ../../../library/string.rst:428
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) "
"format, followed by a percent sign."
msgstr ""

#: ../../../library/string.rst:431
msgid "The same as ``'g'``."
msgstr ""

#: ../../../library/string.rst:438
msgid "Template strings"
msgstr ""

#: ../../../library/string.rst:440
msgid ""
"Templates provide simpler string substitutions as described in :pep:`292`. "
"Instead of the normal ``%``\\ -based substitutions, Templates support "
"``$``\\ -based substitutions, using the following rules:"
msgstr ""

#: ../../../library/string.rst:444
msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr ""

#: ../../../library/string.rst:446
msgid ""
"``$identifier`` names a substitution placeholder matching a mapping key of "
"``\"identifier\"``.  By default, ``\"identifier\"`` must spell a Python "
"identifier.  The first non-identifier character after the ``$`` character "
"terminates this placeholder specification."
msgstr ""

#: ../../../library/string.rst:451
msgid ""
"``${identifier}`` is equivalent to ``$identifier``.  It is required when "
"valid identifier characters follow the placeholder but are not part of the "
"placeholder, such as ``\"${noun}ification\"``."
msgstr ""

#: ../../../library/string.rst:455
msgid ""
"Any other appearance of ``$`` in the string will result in a :exc:"
"`ValueError` being raised."
msgstr ""

#: ../../../library/string.rst:458
msgid ""
"The :mod:`string` module provides a :class:`Template` class that implements "
"these rules.  The methods of :class:`Template` are:"
msgstr ""

#: ../../../library/string.rst:464
msgid "The constructor takes a single argument which is the template string."
msgstr ""

#: ../../../library/string.rst:469
msgid ""
"Performs the template substitution, returning a new string.  *mapping* is "
"any dictionary-like object with keys that match the placeholders in the "
"template.  Alternatively, you can provide keyword arguments, where the "
"keywords are the placeholders.  When both *mapping* and *kws* are given and "
"there are duplicates, the placeholders from *kws* take precedence."
msgstr ""

#: ../../../library/string.rst:478
msgid ""
"Like :meth:`substitute`, except that if placeholders are missing from "
"*mapping* and *kws*, instead of raising a :exc:`KeyError` exception, the "
"original placeholder will appear in the resulting string intact.  Also, "
"unlike with :meth:`substitute`, any other appearances of the ``$`` will "
"simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""

#: ../../../library/string.rst:484
msgid ""
"While other exceptions may still occur, this method is called \"safe\" "
"because substitutions always tries to return a usable string instead of "
"raising an exception.  In another sense, :meth:`safe_substitute` may be "
"anything other than safe, since it will silently ignore malformed templates "
"containing dangling delimiters, unmatched braces, or placeholders that are "
"not valid Python identifiers."
msgstr ""

#: ../../../library/string.rst:491
msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ""

#: ../../../library/string.rst:496
msgid ""
"This is the object passed to the constructor's *template* argument.  In "
"general, you shouldn't change it, but read-only access is not enforced."
msgstr ""

#: ../../../library/string.rst:499
msgid "Here is an example of how to use a Template:"
msgstr ""

#: ../../../library/string.rst:517
msgid ""
"Advanced usage: you can derive subclasses of :class:`Template` to customize "
"the placeholder syntax, delimiter character, or the entire regular "
"expression used to parse template strings.  To do this, you can override "
"these class attributes:"
msgstr ""

#: ../../../library/string.rst:521
msgid ""
"*delimiter* -- This is the literal string describing a placeholder "
"introducing delimiter.  The default value ``$``.  Note that this should "
"*not* be a regular expression, as the implementation will call :meth:`re."
"escape` on this string as needed."
msgstr ""

#: ../../../library/string.rst:526
msgid ""
"*idpattern* -- This is the regular expression describing the pattern for non-"
"braced placeholders (the braces will be added automatically as "
"appropriate).  The default value is the regular expression ``[_a-z][_a-"
"z0-9]*``."
msgstr ""

#: ../../../library/string.rst:531
msgid ""
"Alternatively, you can provide the entire regular expression pattern by "
"overriding the class attribute *pattern*.  If you do this, the value must be "
"a regular expression object with four named capturing groups.  The capturing "
"groups correspond to the rules given above, along with the invalid "
"placeholder rule:"
msgstr ""

#: ../../../library/string.rst:537
msgid ""
"*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the "
"default pattern."
msgstr ""

#: ../../../library/string.rst:540
msgid ""
"*named* -- This group matches the unbraced placeholder name; it should not "
"include the delimiter in capturing group."
msgstr ""

#: ../../../library/string.rst:543
msgid ""
"*braced* -- This group matches the brace enclosed placeholder name; it "
"should not include either the delimiter or braces in the capturing group."
msgstr ""

#: ../../../library/string.rst:546
msgid ""
"*invalid* -- This group matches any other delimiter pattern (usually a "
"single delimiter), and it should appear last in the regular expression."
msgstr ""

#: ../../../library/string.rst:551
msgid "String functions"
msgstr ""

#: ../../../library/string.rst:553
msgid ""
"The following functions are available to operate on string objects. They are "
"not available as string methods."
msgstr ""

#: ../../../library/string.rst:559
msgid ""
"Split the argument into words using :func:`split`, capitalize each word "
"using :func:`capitalize`, and join the capitalized words using :func:"
"`join`.  Note that this replaces runs of whitespace characters by a single "
"space, and removes leading and trailing whitespace."
msgstr ""

#: ../../../library/string.rst:567
msgid ""
"Return a translation table suitable for passing to :meth:`bytes.translate`, "
"that will map each character in *from* into the character at the same "
"position in *to*; *from* and *to* must have the same length."
msgstr ""

#: ../../../library/string.rst:9
msgid "re"
msgstr ""
