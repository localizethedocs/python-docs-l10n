# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

#: ../../../c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system is "
"the structure that defines a new type: the :ctype:`PyTypeObject` structure.  "
"Type objects can be handled using any of the :cfunc:`PyObject_\\*` or :cfunc:"
"`PyType_\\*` functions, but do not offer much that's interesting to most "
"Python applications. These objects are fundamental to how objects behave, so "
"they are very important to the interpreter itself and to any extension "
"module that implements new types."
msgstr ""

#: ../../../c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The "
"reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part of "
"the type's functionality.  The fields of the type object are examined in "
"detail in this section.  The fields will be described in the order in which "
"they occur in the structure."
msgstr ""

#: ../../../c-api/typeobj.rst:23
msgid ""
"Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, intargfunc, "
"intintargfunc, intobjargproc, intintobjargproc, objobjargproc, destructor, "
"freefunc, printfunc, getattrfunc, getattrofunc, setattrfunc, setattrofunc, "
"reprfunc, hashfunc"
msgstr ""

#: ../../../c-api/typeobj.rst:28
msgid ""
"The structure definition for :ctype:`PyTypeObject` can be found in :file:"
"`Include/object.h`.  For convenience of reference, this repeats the "
"definition found there:"
msgstr ""

#: ../../../c-api/typeobj.rst:35
msgid ""
"The type object structure extends the :ctype:`PyVarObject` structure. The :"
"attr:`ob_size` field is used for dynamic types (created by  :func:"
"`type_new`, usually called from a class statement). Note that :cdata:"
"`PyType_Type` (the metatype) initializes :attr:`tp_itemsize`, which means "
"that its instances (i.e. type objects) *must* have the :attr:`ob_size` field."
msgstr ""

#: ../../../c-api/typeobj.rst:979
msgid ""
"The remaining fields are only defined if the feature test macro :const:"
"`COUNT_ALLOCS` is defined, and are for internal use only. They are "
"documented here for completeness.  None of these fields are inherited by "
"subtypes."
msgstr ""

#: ../../../c-api/typeobj.rst:1004
msgid ""
"Also, note that, in a garbage collected Python, tp_dealloc may be called "
"from any Python thread, not just the thread which created the object (if the "
"object becomes part of a refcount cycle, that cycle might be collected by a "
"garbage collection on any thread).  This is not a problem for Python API "
"calls, since the thread on which tp_dealloc is called will own the Global "
"Interpreter Lock (GIL). However, if the object being destroyed in turn "
"destroys objects from some other C or C++ library, care should be taken to "
"ensure that destroying those objects on the thread which called tp_dealloc "
"will not violate any assumptions of the library."
msgstr ""

#: ../../../c-api/typeobj.rst:1018
msgid "Number Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1090
msgid "Mapping Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1122
msgid "Sequence Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1190
msgid "Buffer Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1196
msgid ""
"The buffer interface exports a model where an object can expose its internal "
"data."
msgstr ""

#: ../../../c-api/typeobj.rst:1199
msgid ""
"If an object does not export the buffer interface, then its :attr:"
"`tp_as_buffer` member in the :ctype:`PyTypeObject` structure should be "
"*NULL*.  Otherwise, the :attr:`tp_as_buffer` will point to a :ctype:"
"`PyBufferProcs` structure."
msgstr ""
