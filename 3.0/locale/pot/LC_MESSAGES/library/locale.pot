# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/locale.rst:3
msgid ":mod:`locale` --- Internationalization services"
msgstr ""

#: ../../../library/locale.rst:11
msgid ""
"The :mod:`locale` module opens access to the POSIX locale database and "
"functionality. The POSIX locale mechanism allows programmers to deal with "
"certain cultural issues in an application, without requiring the programmer "
"to know all the specifics of each country where the software is executed."
msgstr ""

#: ../../../library/locale.rst:18
msgid ""
"The :mod:`locale` module is implemented on top of the :mod:`_locale` module, "
"which in turn uses an ANSI C locale implementation if available."
msgstr ""

#: ../../../library/locale.rst:21
msgid "The :mod:`locale` module defines the following exception and functions:"
msgstr ""

#: ../../../library/locale.rst:26
msgid "Exception raised when :func:`setlocale` fails."
msgstr ""

#: ../../../library/locale.rst:31
msgid ""
"If *locale* is specified, it may be a string, a tuple of the form "
"``(language code, encoding)``, or ``None``. If it is a tuple, it is "
"converted to a string using the locale aliasing engine.  If *locale* is "
"given and not ``None``, :func:`setlocale` modifies the locale setting for "
"the *category*.  The available categories are listed in the data description "
"below.  The value is the name of a locale.  An empty string specifies the "
"user's default settings. If the modification of the locale fails, the "
"exception :exc:`Error` is raised.  If successful, the new locale setting is "
"returned."
msgstr ""

#: ../../../library/locale.rst:40
msgid ""
"If *locale* is omitted or ``None``, the current setting for *category* is "
"returned."
msgstr ""

#: ../../../library/locale.rst:43
msgid ""
":func:`setlocale` is not thread safe on most systems. Applications typically "
"start with a call of ::"
msgstr ""

#: ../../../library/locale.rst:46
msgid ""
"import locale\n"
"locale.setlocale(locale.LC_ALL, '')"
msgstr ""

#: ../../../library/locale.rst:49
msgid ""
"This sets the locale for all categories to the user's default setting "
"(typically specified in the :envvar:`LANG` environment variable).  If the "
"locale is not changed thereafter, using multithreading should not cause "
"problems."
msgstr ""

#: ../../../library/locale.rst:56
msgid ""
"Returns the database of the local conventions as a dictionary. This "
"dictionary has the following strings as keys:"
msgstr ""

#: ../../../library/locale.rst:60
msgid "Category"
msgstr ""

#: ../../../library/locale.rst:60
msgid "Key"
msgstr ""

#: ../../../library/locale.rst:60
msgid "Meaning"
msgstr ""

#: ../../../library/locale.rst:62
msgid ":const:`LC_NUMERIC`"
msgstr ""

#: ../../../library/locale.rst:62
msgid "``'decimal_point'``"
msgstr ""

#: ../../../library/locale.rst:62
msgid "Decimal point character."
msgstr ""

#: ../../../library/locale.rst:64
msgid "``'grouping'``"
msgstr ""

#: ../../../library/locale.rst:64
msgid ""
"Sequence of numbers specifying which relative positions the "
"``'thousands_sep'`` is expected.  If the sequence is terminated with :const:"
"`CHAR_MAX`, no further grouping is performed. If the sequence terminates "
"with a ``0``,  the last group size is repeatedly used."
msgstr ""

#: ../../../library/locale.rst:75
msgid "``'thousands_sep'``"
msgstr ""

#: ../../../library/locale.rst:75
msgid "Character used between groups."
msgstr ""

#: ../../../library/locale.rst:77
msgid ":const:`LC_MONETARY`"
msgstr ""

#: ../../../library/locale.rst:77
msgid "``'int_curr_symbol'``"
msgstr ""

#: ../../../library/locale.rst:77
msgid "International currency symbol."
msgstr ""

#: ../../../library/locale.rst:79
msgid "``'currency_symbol'``"
msgstr ""

#: ../../../library/locale.rst:79
msgid "Local currency symbol."
msgstr ""

#: ../../../library/locale.rst:81
msgid "``'p_cs_precedes/n_cs_precedes'``"
msgstr ""

#: ../../../library/locale.rst:81
msgid ""
"Whether the currency symbol precedes the value (for positive resp. negative "
"values)."
msgstr ""

#: ../../../library/locale.rst:86
msgid "``'p_sep_by_space/n_sep_by_space'``"
msgstr ""

#: ../../../library/locale.rst:86
msgid ""
"Whether the currency symbol is separated from the value  by a space (for "
"positive resp. negative values)."
msgstr ""

#: ../../../library/locale.rst:91
msgid "``'mon_decimal_point'``"
msgstr ""

#: ../../../library/locale.rst:91
msgid "Decimal point used for monetary values."
msgstr ""

#: ../../../library/locale.rst:94
msgid "``'frac_digits'``"
msgstr ""

#: ../../../library/locale.rst:94
msgid ""
"Number of fractional digits used in local formatting of monetary values."
msgstr ""

#: ../../../library/locale.rst:98
msgid "``'int_frac_digits'``"
msgstr ""

#: ../../../library/locale.rst:98
msgid ""
"Number of fractional digits used in international formatting of monetary "
"values."
msgstr ""

#: ../../../library/locale.rst:102
msgid "``'mon_thousands_sep'``"
msgstr ""

#: ../../../library/locale.rst:102
msgid "Group separator used for monetary values."
msgstr ""

#: ../../../library/locale.rst:105
msgid "``'mon_grouping'``"
msgstr ""

#: ../../../library/locale.rst:105
msgid "Equivalent to ``'grouping'``, used for monetary values."
msgstr ""

#: ../../../library/locale.rst:108
msgid "``'positive_sign'``"
msgstr ""

#: ../../../library/locale.rst:108
msgid "Symbol used to annotate a positive monetary value."
msgstr ""

#: ../../../library/locale.rst:111
msgid "``'negative_sign'``"
msgstr ""

#: ../../../library/locale.rst:111
msgid "Symbol used to annotate a negative monetary value."
msgstr ""

#: ../../../library/locale.rst:114
msgid "``'p_sign_posn/n_sign_posn'``"
msgstr ""

#: ../../../library/locale.rst:114
msgid ""
"The position of the sign (for positive resp. negative values), see below."
msgstr ""

#: ../../../library/locale.rst:119
msgid ""
"All numeric values can be set to :const:`CHAR_MAX` to indicate that there is "
"no value specified in this locale."
msgstr ""

#: ../../../library/locale.rst:122
msgid ""
"The possible values for ``'p_sign_posn'`` and ``'n_sign_posn'`` are given "
"below."
msgstr ""

#: ../../../library/locale.rst:125
msgid "Value"
msgstr ""

#: ../../../library/locale.rst:125
msgid "Explanation"
msgstr ""

#: ../../../library/locale.rst:127
msgid "``0``"
msgstr ""

#: ../../../library/locale.rst:127
msgid "Currency and value are surrounded by parentheses."
msgstr ""

#: ../../../library/locale.rst:130
msgid "``1``"
msgstr ""

#: ../../../library/locale.rst:130
msgid "The sign should precede the value and currency symbol."
msgstr ""

#: ../../../library/locale.rst:133
msgid "``2``"
msgstr ""

#: ../../../library/locale.rst:133
msgid "The sign should follow the value and currency symbol."
msgstr ""

#: ../../../library/locale.rst:136
msgid "``3``"
msgstr ""

#: ../../../library/locale.rst:136
msgid "The sign should immediately precede the value."
msgstr ""

#: ../../../library/locale.rst:139
msgid "``4``"
msgstr ""

#: ../../../library/locale.rst:139
msgid "The sign should immediately follow the value."
msgstr ""

#: ../../../library/locale.rst:142
msgid "``CHAR_MAX``"
msgstr ""

#: ../../../library/locale.rst:142
msgid "Nothing is specified in this locale."
msgstr ""

#: ../../../library/locale.rst:148
msgid ""
"Return some locale-specific information as a string. This function is not "
"available on all systems, and the set of possible options might also vary "
"across platforms. The possible argument values are numbers, for which "
"symbolic constants are available in the locale module."
msgstr ""

#: ../../../library/locale.rst:156
msgid ""
"Tries to determine the default locale settings and returns them as a tuple "
"of the form ``(language code, encoding)``."
msgstr ""

#: ../../../library/locale.rst:159
msgid ""
"According to POSIX, a program which has not called ``setlocale(LC_ALL, '')`` "
"runs using the portable ``'C'`` locale.  Calling ``setlocale(LC_ALL, '')`` "
"lets it use the default locale as defined by the :envvar:`LANG` variable.  "
"Since we do not want to interfere with the current locale setting we thus "
"emulate the behavior in the way described above."
msgstr ""

#: ../../../library/locale.rst:165
msgid ""
"To maintain compatibility with other platforms, not only the :envvar:`LANG` "
"variable is tested, but a list of variables given as envvars parameter.  The "
"first found to be defined will be used.  *envvars* defaults to the search "
"path used in GNU gettext; it must always contain the variable name "
"``LANG``.  The GNU gettext search path contains ``'LANGUAGE'``, "
"``'LC_ALL'``, ``'LC_CTYPE'``, and ``'LANG'``, in that order."
msgstr ""

#: ../../../library/locale.rst:172 ../../../library/locale.rst:183
msgid ""
"Except for the code ``'C'``, the language code corresponds to :rfc:`1766`. "
"*language code* and *encoding* may be ``None`` if their values cannot be "
"determined."
msgstr ""

#: ../../../library/locale.rst:179
msgid ""
"Returns the current setting for the given locale category as sequence "
"containing *language code*, *encoding*. *category* may be one of the :const:"
"`LC_\\*` values except :const:`LC_ALL`.  It defaults to :const:`LC_CTYPE`."
msgstr ""

#: ../../../library/locale.rst:190
msgid ""
"Return the encoding used for text data, according to user preferences.  User "
"preferences are expressed differently on different systems, and might not be "
"available programmatically on some systems, so this function only returns a "
"guess."
msgstr ""

#: ../../../library/locale.rst:195
msgid ""
"On some systems, it is necessary to invoke :func:`setlocale` to obtain the "
"user preferences, so this function is not thread-safe. If invoking setlocale "
"is not necessary or desired, *do_setlocale* should be set to ``False``."
msgstr ""

#: ../../../library/locale.rst:202
msgid ""
"Returns a normalized locale code for the given locale name.  The returned "
"locale code is formatted for use with :func:`setlocale`.  If normalization "
"fails, the original name is returned unchanged."
msgstr ""

#: ../../../library/locale.rst:206
msgid ""
"If the given encoding is not known, the function defaults to the default "
"encoding for the locale code just like :func:`setlocale`."
msgstr ""

#: ../../../library/locale.rst:212
msgid "Sets the locale for *category* to the default setting."
msgstr ""

#: ../../../library/locale.rst:214
msgid ""
"The default setting is determined by calling :func:`getdefaultlocale`. "
"*category* defaults to :const:`LC_ALL`."
msgstr ""

#: ../../../library/locale.rst:220
msgid ""
"Compares two strings according to the current :const:`LC_COLLATE` setting. "
"As any other compare function, returns a negative, or a positive value, or "
"``0``, depending on whether *string1* collates before or after *string2* or "
"is equal to it."
msgstr ""

#: ../../../library/locale.rst:228
msgid ""
"Transforms a string to one that can be used in locale-aware comparisons.  "
"For example, ``strxfrm(s1) < strxfrm(s2)`` is equivalent to ``strcoll(s1, "
"s2) < 0``.  This function can be used when the same string is compared "
"repeatedly, e.g. when collating a sequence of strings."
msgstr ""

#: ../../../library/locale.rst:237
msgid ""
"Formats a number *val* according to the current :const:`LC_NUMERIC` setting. "
"The format follows the conventions of the ``%`` operator.  For floating "
"point values, the decimal point is modified if appropriate.  If *grouping* "
"is true, also takes the grouping into account."
msgstr ""

#: ../../../library/locale.rst:242
msgid ""
"If *monetary* is true, the conversion uses monetary thousands separator and "
"grouping strings."
msgstr ""

#: ../../../library/locale.rst:245
msgid ""
"Please note that this function will only work for exactly one %char "
"specifier. For whole format strings, use :func:`format_string`."
msgstr ""

#: ../../../library/locale.rst:251
msgid ""
"Processes formatting specifiers as in ``format % val``, but takes the "
"current locale settings into account."
msgstr ""

#: ../../../library/locale.rst:257
msgid ""
"Formats a number *val* according to the current :const:`LC_MONETARY` "
"settings."
msgstr ""

#: ../../../library/locale.rst:259
msgid ""
"The returned string includes the currency symbol if *symbol* is true, which "
"is the default. If *grouping* is true (which is not the default), grouping "
"is done with the value. If *international* is true (which is not the "
"default), the international currency symbol is used."
msgstr ""

#: ../../../library/locale.rst:264
msgid ""
"Note that this function will not work with the 'C' locale, so you have to "
"set a locale via :func:`setlocale` first."
msgstr ""

#: ../../../library/locale.rst:270
msgid ""
"Formats a floating point number using the same format as the built-in "
"function ``str(float)``, but takes the decimal point into account."
msgstr ""

#: ../../../library/locale.rst:276
msgid ""
"Converts a string to a floating point number, following the :const:"
"`LC_NUMERIC` settings."
msgstr ""

#: ../../../library/locale.rst:282
msgid ""
"Converts a string to an integer, following the :const:`LC_NUMERIC` "
"conventions."
msgstr ""

#: ../../../library/locale.rst:289
msgid ""
"Locale category for the character type functions.  Depending on the settings "
"of this category, the functions of module :mod:`string` dealing with case "
"change their behaviour."
msgstr ""

#: ../../../library/locale.rst:296
msgid ""
"Locale category for sorting strings.  The functions :func:`strcoll` and :"
"func:`strxfrm` of the :mod:`locale` module are affected."
msgstr ""

#: ../../../library/locale.rst:302
msgid ""
"Locale category for the formatting of time.  The function :func:`time."
"strftime` follows these conventions."
msgstr ""

#: ../../../library/locale.rst:308
msgid ""
"Locale category for formatting of monetary values.  The available options "
"are available from the :func:`localeconv` function."
msgstr ""

#: ../../../library/locale.rst:314
msgid ""
"Locale category for message display. Python currently does not support "
"application specific locale-aware messages.  Messages displayed by the "
"operating system, like those returned by :func:`os.strerror` might be "
"affected by this category."
msgstr ""

#: ../../../library/locale.rst:322
msgid ""
"Locale category for formatting numbers.  The functions :func:`format`, :func:"
"`atoi`, :func:`atof` and :func:`str` of the :mod:`locale` module are "
"affected by that category.  All other numeric formatting operations are not "
"affected."
msgstr ""

#: ../../../library/locale.rst:330
msgid ""
"Combination of all locale settings.  If this flag is used when the locale is "
"changed, setting the locale for all categories is attempted. If that fails "
"for any category, no category is changed at all.  When the locale is "
"retrieved using this flag, a string indicating the setting for all "
"categories is returned. This string can be later used to restore the "
"settings."
msgstr ""

#: ../../../library/locale.rst:339
msgid ""
"This is a symbolic constant used for different values returned by :func:"
"`localeconv`."
msgstr ""

#: ../../../library/locale.rst:342
msgid ""
"The :func:`nl_langinfo` function accepts one of the following keys. Most "
"descriptions are taken from the corresponding description in the GNU C "
"library."
msgstr ""

#: ../../../library/locale.rst:348
msgid ""
"Return a string with the name of the character encoding used in the selected "
"locale."
msgstr ""

#: ../../../library/locale.rst:354
msgid ""
"Return a string that can be used as a format string for strftime(3) to "
"represent time and date in a locale-specific way."
msgstr ""

#: ../../../library/locale.rst:360
msgid ""
"Return a string that can be used as a format string for strftime(3) to "
"represent a date in a locale-specific way."
msgstr ""

#: ../../../library/locale.rst:366
msgid ""
"Return a string that can be used as a format string for strftime(3) to "
"represent a time in a locale-specific way."
msgstr ""

#: ../../../library/locale.rst:372
msgid ""
"The return value can be used as a format string for 'strftime' to represent "
"time in the am/pm format."
msgstr ""

#: ../../../library/locale.rst:378
msgid "Return name of the n-th day of the week."
msgstr ""

#: ../../../library/locale.rst:382
msgid ""
"This follows the US convention of :const:`DAY_1` being Sunday, not the "
"international convention (ISO 8601) that Monday is the first day of the week."
msgstr ""

#: ../../../library/locale.rst:388
msgid "Return abbreviated name of the n-th day of the week."
msgstr ""

#: ../../../library/locale.rst:393
msgid "Return name of the n-th month."
msgstr ""

#: ../../../library/locale.rst:398
msgid "Return abbreviated name of the n-th month."
msgstr ""

#: ../../../library/locale.rst:403
msgid "Return radix character (decimal dot, decimal comma, etc.)"
msgstr ""

#: ../../../library/locale.rst:408
msgid "Return separator character for thousands (groups of three digits)."
msgstr ""

#: ../../../library/locale.rst:413
msgid ""
"Return a regular expression that can be used with the regex function to "
"recognize a positive response to a yes/no question."
msgstr ""

#: ../../../library/locale.rst:418
msgid ""
"The expression is in the syntax suitable for the :cfunc:`regex` function "
"from the C library, which might differ from the syntax used in :mod:`re`."
msgstr ""

#: ../../../library/locale.rst:424
msgid ""
"Return a regular expression that can be used with the regex(3) function to "
"recognize a negative response to a yes/no question."
msgstr ""

#: ../../../library/locale.rst:430
msgid ""
"Return the currency symbol, preceded by \"-\" if the symbol should appear "
"before the value, \"+\" if the symbol should appear after the value, or \"."
"\" if the symbol should replace the radix character."
msgstr ""

#: ../../../library/locale.rst:437
msgid "The return value represents the era used in the current locale."
msgstr ""

#: ../../../library/locale.rst:439
msgid ""
"Most locales do not define this value.  An example of a locale which does "
"define this value is the Japanese one.  In Japan, the traditional "
"representation of dates includes the name of the era corresponding to the "
"then-emperor's reign."
msgstr ""

#: ../../../library/locale.rst:443
msgid ""
"Normally it should not be necessary to use this value directly. Specifying "
"the ``E`` modifier in their format strings causes the :func:`strftime` "
"function to use this information.  The format of the returned string is not "
"specified, and therefore you should not assume knowledge of it on different "
"systems."
msgstr ""

#: ../../../library/locale.rst:451
msgid "The return value gives the year in the relevant era of the locale."
msgstr ""

#: ../../../library/locale.rst:456
msgid ""
"This return value can be used as a format string for :func:`strftime` to "
"represent dates and times in a locale-specific era-based way."
msgstr ""

#: ../../../library/locale.rst:462
msgid ""
"This return value can be used as a format string for :func:`strftime` to "
"represent time in a locale-specific era-based way."
msgstr ""

#: ../../../library/locale.rst:468
msgid ""
"The return value is a representation of up to 100 values used to represent "
"the values 0 to 99."
msgstr ""

#: ../../../library/locale.rst:471
msgid "Example::"
msgstr ""

#: ../../../library/locale.rst:473
msgid ""
">>> import locale\n"
">>> loc = locale.getlocale() # get current locale\n"
">>> locale.setlocale(locale.LC_ALL, 'de_DE') # use German locale; name might "
"vary with platform\n"
">>> locale.strcoll('f\\xe4n', 'foo') # compare a string containing an "
"umlaut\n"
">>> locale.setlocale(locale.LC_ALL, '') # use user's preferred locale\n"
">>> locale.setlocale(locale.LC_ALL, 'C') # use default (C) locale\n"
">>> locale.setlocale(locale.LC_ALL, loc) # restore saved locale"
msgstr ""

#: ../../../library/locale.rst:483
msgid "Background, details, hints, tips and caveats"
msgstr ""

#: ../../../library/locale.rst:485
msgid ""
"The C standard defines the locale as a program-wide property that may be "
"relatively expensive to change.  On top of that, some implementation are "
"broken in such a way that frequent locale changes may cause core dumps.  "
"This makes the locale somewhat painful to use correctly."
msgstr ""

#: ../../../library/locale.rst:490
msgid ""
"Initially, when a program is started, the locale is the ``C`` locale, no "
"matter what the user's preferred locale is.  The program must explicitly say "
"that it wants the user's preferred locale settings by calling "
"``setlocale(LC_ALL, '')``."
msgstr ""

#: ../../../library/locale.rst:494
msgid ""
"It is generally a bad idea to call :func:`setlocale` in some library "
"routine, since as a side effect it affects the entire program.  Saving and "
"restoring it is almost as bad: it is expensive and affects other threads "
"that happen to run before the settings have been restored."
msgstr ""

#: ../../../library/locale.rst:499
msgid ""
"If, when coding a module for general use, you need a locale independent "
"version of an operation that is affected by the locale (such as certain "
"formats used with :func:`time.strftime`), you will have to find a way to do "
"it without using the standard library routine.  Even better is convincing "
"yourself that using locale settings is okay.  Only as a last resort should "
"you document that your module is not compatible with non-\\ ``C`` locale "
"settings."
msgstr ""

#: ../../../library/locale.rst:506
msgid ""
"The only way to perform numeric operations according to the locale is to use "
"the special functions defined by this module: :func:`atof`, :func:`atoi`, :"
"func:`format`, :func:`str`."
msgstr ""

#: ../../../library/locale.rst:510
msgid ""
"There is no way to perform case conversions and character classifications "
"according to the locale.  For (Unicode) text strings these are done "
"according to the character value only, while for byte strings, the "
"conversions and classifications are done according to the ASCII value of the "
"byte, and bytes whose high bit is set (i.e., non-ASCII bytes) are never "
"converted or considered part of a character class such as letter or "
"whitespace."
msgstr ""

#: ../../../library/locale.rst:521
msgid "For extension writers and programs that embed Python"
msgstr ""

#: ../../../library/locale.rst:523
msgid ""
"Extension modules should never call :func:`setlocale`, except to find out "
"what the current locale is.  But since the return value can only be used "
"portably to restore it, that is not very useful (except perhaps to find out "
"whether or not the locale is ``C``)."
msgstr ""

#: ../../../library/locale.rst:528
msgid ""
"When Python code uses the :mod:`locale` module to change the locale, this "
"also affects the embedding application.  If the embedding application "
"doesn't want this to happen, it should remove the :mod:`_locale` extension "
"module (which does all the work) from the table of built-in modules in the :"
"file:`config.c` file, and make sure that the :mod:`_locale` module is not "
"accessible as a shared library."
msgstr ""

#: ../../../library/locale.rst:539
msgid "Access to message catalogs"
msgstr ""

#: ../../../library/locale.rst:541
msgid ""
"The locale module exposes the C library's gettext interface on systems that "
"provide this interface.  It consists of the functions :func:`gettext`, :func:"
"`dgettext`, :func:`dcgettext`, :func:`textdomain`, :func:`bindtextdomain`, "
"and :func:`bind_textdomain_codeset`.  These are similar to the same "
"functions in the :mod:`gettext` module, but use the C library's binary "
"format for message catalogs, and the C library's search algorithms for "
"locating message catalogs."
msgstr ""

#: ../../../library/locale.rst:548
msgid ""
"Python applications should normally find no need to invoke these functions, "
"and should use :mod:`gettext` instead.  A known exception to this rule are "
"applications that link use additional C libraries which internally invoke :"
"cfunc:`gettext` or :func:`dcgettext`.  For these applications, it may be "
"necessary to bind the text domain, so that the libraries can properly locate "
"their message catalogs."
msgstr ""

#: ../../../library/locale.rst:16
msgid "_locale"
msgstr ""

#: ../../../library/locale.rst:287
msgid "string"
msgstr ""
