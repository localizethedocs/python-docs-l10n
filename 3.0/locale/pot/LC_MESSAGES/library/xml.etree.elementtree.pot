# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/xml.etree.elementtree.rst:3
msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:10
msgid ""
"The Element type is a flexible container object, designed to store "
"hierarchical data structures in memory. The type can be described as a cross "
"between a list and a dictionary."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:14
msgid "Each element has a number of properties associated with it:"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:16
msgid ""
"a tag which is a string identifying what kind of data this element "
"represents (the element type, in other words)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:19
msgid "a number of attributes, stored in a Python dictionary."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:21
msgid "a text string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:23
msgid "an optional tail string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:25
msgid "a number of child elements, stored in a Python sequence"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:27
msgid ""
"To create an element instance, use the Element or SubElement factory "
"functions."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:29
msgid ""
"The :class:`ElementTree` class can be used to wrap an element structure, and "
"convert it from and to XML."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:32
msgid ""
"A C implementation of this API is available as :mod:`xml.etree.cElementTree`."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:34
msgid ""
"See http://effbot.org/zone/element-index.htm for tutorials and links to "
"other docs. Fredrik Lundh's page is also the location of the development "
"version of the xml.etree.ElementTree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:41
msgid "Functions"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:46
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment. The comment string can be either "
"an ASCII-only :class:`bytes` object or a :class:`str` object. *text* is a "
"string containing the comment string. Returns an element instance "
"representing a comment."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:55
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:58
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:61
msgid "*elem* is an element tree or an individual element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:66
msgid ""
"Element factory.  This function returns an object implementing the standard "
"Element interface.  The exact class or type of that object is implementation "
"dependent, but it will always be compatible with the _ElementInterface class "
"in this module."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:71
msgid ""
"The element name, attribute names, and attribute values can be either an "
"ASCII-only :class:`bytes` object or a :class:`str` object. *tag* is the "
"element name. *attrib* is an optional dictionary, containing element "
"attributes. *extra* contains additional attributes, given as keyword "
"arguments. Returns an element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:80
msgid ""
"Parses an XML section from a string constant.  Same as XML. *text* is a "
"string containing XML data. Returns an Element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:86
msgid ""
"Checks if an object appears to be a valid element object. *element* is an "
"element instance. Returns a true value if this is an element object."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:92
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's "
"going on to the user. *source* is a filename or file object containing XML "
"data. *events* is a list of events to report back.  If omitted, only \"end\" "
"events are reported. Returns an :term:`iterator` providing ``(event, elem)`` "
"pairs."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:99
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined, "
"but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:105
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:110
msgid ""
"Parses an XML section into an element tree. *source* is a filename or file "
"object containing XML data. *parser* is an optional parser instance.  If not "
"given, the standard XMLTreeBuilder parser is used. Returns an ElementTree "
"instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:118
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction. *target* is a string "
"containing the PI target. *text* is a string containing the PI contents, if "
"given. Returns an element instance, representing a processing instruction."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:126
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:129
msgid ""
"The element name, attribute names, and attribute values can be an ASCII-"
"only :class:`bytes` object or a :class:`str` object. *parent* is the parent "
"element. *tag* is the subelement name. *attrib* is an optional dictionary, "
"containing element attributes. *extra* contains additional attributes, given "
"as keyword arguments. Returns an element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:138
msgid ""
"Generates a string representation of an XML element, including all "
"subelements. *element* is an Element instance. *encoding* is the output "
"encoding (default is US-ASCII). Returns an encoded string containing the XML "
"data."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:145
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code. *text* is a string containing XML "
"data. Returns an Element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:152
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements. *text* is a string containing XML "
"data. Returns a tuple containing an Element instance and a dictionary."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:160
msgid "The Element Interface"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:162
msgid ""
"Element objects returned by Element or SubElement have the  following "
"methods and attributes."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:168
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:174
msgid ""
"The *text* attribute can be used to hold additional data associated with the "
"element. As the name implies this attribute is usually a string but may be "
"any application-specific object. If the element is created from an XML file "
"the attribute will contain any text found between the element tags."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:182
msgid ""
"The *tail* attribute can be used to hold additional data associated with the "
"element. This attribute is usually a string but may be any application-"
"specific object. If the element is created from an XML file the attribute "
"will contain any text found after the element's end tag and before the next "
"tag."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:190
msgid ""
"A dictionary containing the element's attributes. Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create "
"the dictionary only if someone asks for it. To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:196
msgid "The following dictionary-like methods work on the element attributes."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:201
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to None."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:207
msgid "Gets the element attribute named *key*."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:209
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:214
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs. The "
"attributes are returned in an arbitrary order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:220
msgid ""
"Returns the elements attribute names as a list. The names are returned in an "
"arbitrary order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:226
msgid "Set the attribute *key* on the element to *value*."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:228
msgid "The following methods work on the element's children (subelements)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:233
msgid ""
"Adds the element *subelement* to the end of this elements internal list of "
"subelements."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:239
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or "
"path. Returns an element instance or ``None``."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:245
msgid ""
"Finds all subelements matching *match*.  *match* may be a tag name or path. "
"Returns an iterable yielding all matching elements in document order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:251
msgid ""
"Finds text for the first subelement matching *condition*.  *condition* may "
"be a tag name or path. Returns the text content of the first matching "
"element, or *default* if no element was found.  Note that if the matching "
"element has no text content an empty string is returned."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:259
msgid "Returns all subelements.  The elements are returned in document order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:264
msgid ""
"Creates a tree iterator with the current element as the root.   The iterator "
"iterates over this element and all elements below it  that match the given "
"tag. If tag is ``None`` or ``'*'`` then all elements are iterated over. "
"Returns an iterable that provides element objects in document (depth first) "
"order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:272
msgid "Inserts a subelement at the given position in this element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:277
msgid ""
"Creates a new element object of the same type as this element. Do not call "
"this method, use the SubElement factory function instead."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:283
msgid ""
"Removes *subelement* from the element.   Unlike the findXYZ methods this "
"method compares elements based on  the instance identity, not on tag value "
"or contents."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:286
msgid ""
"Element objects also support the following sequence type methods for working "
"with subelements: :meth:`__delitem__`, :meth:`__getitem__`, :meth:"
"`__setitem__`, :meth:`__len__`."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:290
msgid ""
"Caution: Because Element objects do not define a :meth:`__bool__` method, "
"elements with no subelements will test as ``False``. ::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:293
msgid ""
"element = root.find('foo')\n"
"\n"
"if not element: # careful!\n"
"    print(\"element not found, or element has no subelements\")\n"
"\n"
"if element is None:\n"
"    print(\"element not found\")"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:305
msgid "ElementTree Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:310
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:313
msgid ""
"*element* is the root element. The tree is initialized with the contents of "
"the XML *file* if given."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:319
msgid ""
"Replaces the root element for this tree.  This discards the current contents "
"of the tree, and replaces it with the given element.  Use with care. "
"*element* is an element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:326
msgid ""
"Finds the first toplevel element with given tag. Same as getroot()."
"find(path).  *path* is the element to look for. Returns the first matching "
"element, or ``None`` if no element was found."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:333
msgid ""
"Finds all toplevel elements with the given tag. Same as getroot()."
"findall(path).  *path* is the element to look for. Returns a list or :term:"
"`iterator` containing all matching elements, in document order."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:341
msgid ""
"Finds the element text for the first toplevel element with given tag. Same "
"as getroot().findtext(path). *path* is the toplevel element to look for. "
"*default* is the value to return if the element was not found. Returns the "
"text content of the first matching element, or the default value no element "
"was found.  Note that if the element has is found, but has no text content, "
"this method returns an empty string."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:351
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order. *tag* is the tag to "
"look for (default is to return all elements)"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:358
msgid "Returns the root element for this tree."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:363
msgid ""
"Loads an external XML section into this element tree. *source* is a file "
"name or file object. *parser* is an optional parser instance.  If not given, "
"the standard XMLTreeBuilder parser is used. Returns the section root element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:371
msgid ""
"Writes the element tree to a file, as XML. *file* is a file name, or a file "
"object opened for writing. *encoding* [1]_ is the output encoding (default "
"is US-ASCII)."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:375
msgid "This is the XML file that is going to be manipulated::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:377
msgid ""
"<html>\n"
"    <head>\n"
"        <title>Example page</title>\n"
"    </head>\n"
"    <body>\n"
"        <p>Moved to <a href=\"http://example.org/\">example.org</a>\n"
"        or <a href=\"http://example.com/\">example.com</a>.</p>\n"
"    </body>\n"
"</html>"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:387
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:389
msgid ""
">>> from xml.etree.ElementTree import ElementTree\n"
">>> tree = ElementTree()\n"
">>> tree.parse(\"index.xhtml\")\n"
"<Element html at b7d3f1ec>\n"
">>> p = tree.find(\"body/p\")     # Finds first occurrence of tag p in body\n"
">>> p\n"
"<Element p at 8416e0c>\n"
">>> links = p.getiterator(\"a\")  # Returns list of all links\n"
">>> links\n"
"[<Element a at b7d4f9ec>, <Element a at b7d4fb0c>]\n"
">>> for i in links:             # Iterates through all found links\n"
"...     i.attrib[\"target\"] = \"blank\"\n"
">>> tree.write(\"output.xhtml\")"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:406
msgid "QName Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:411
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output. *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName. If *tag* is given, the first argument is "
"interpreted as an URI, and this argument is interpreted as a local name. :"
"class:`QName` instances are opaque."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:422
msgid "TreeBuilder Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:427
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, and end method calls to a well-formed element structure. You "
"can use this class to build an element structure using a custom XML parser, "
"or a parser for some other XML-like format. The *element_factory* is called "
"to create new Element instances when given."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:436
msgid ""
"Flushes the parser buffers, and returns the toplevel document element. "
"Returns an Element instance."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:442
msgid ""
"Adds text to the current element. *data* is a string.  This should be either "
"an ASCII-only :class:`bytes` object or a :class:`str` object."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:448
msgid ""
"Closes the current element. *tag* is the element name. Returns the closed "
"element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:454
msgid ""
"Opens a new element. *tag* is the element name. *attrs* is a dictionary "
"containing element attributes. Returns the opened element."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:461
msgid "XMLTreeBuilder Objects"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:466
msgid ""
"Element structure builder for XML source data, based on the expat parser. "
"*html* are predefined HTML entities.  This flag is not supported by the "
"current implementation. *target* is the target object.  If omitted, the "
"builder uses an instance of the standard TreeBuilder class."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:474
msgid "Finishes feeding data to the parser. Returns an element structure."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:479
msgid ""
"Handles a doctype declaration. *name* is the doctype name. *pubid* is the "
"public identifier. *system* is the system identifier."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:485
msgid "Feeds data to the parser. *data* is encoded data."
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:487
msgid ""
":meth:`XMLTreeBuilder.feed` calls *target*\\'s :meth:`start` method for each "
"opening tag, its :meth:`end` method for each closing tag, and data is "
"processed by method :meth:`data`. :meth:`XMLTreeBuilder.close` calls "
"*target*\\'s method :meth:`close`. :class:`XMLTreeBuilder` can be used not "
"only for building a tree structure. This is an example of counting the "
"maximum depth of an XML file::"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:494
msgid ""
">>> from xml.etree.ElementTree import XMLTreeBuilder\n"
">>> class MaxDepth:                     # The target object of the parser\n"
"...     maxDepth = 0\n"
"...     depth = 0\n"
"...     def start(self, tag, attrib):   # Called for each opening tag.\n"
"...         self.depth += 1\n"
"...         if self.depth > self.maxDepth:\n"
"...             self.maxDepth = self.depth\n"
"...     def end(self, tag):             # Called for each closing tag.\n"
"...         self.depth -= 1\n"
"...     def data(self, data):\n"
"...         pass            # We do not need to do anything with data.\n"
"...     def close(self):    # Called when all data has been parsed.\n"
"...         return self.maxDepth\n"
"...\n"
">>> target = MaxDepth()\n"
">>> parser = XMLTreeBuilder(target=target)\n"
">>> exampleXml = \"\"\"\n"
"... <a>\n"
"...   <b>\n"
"...   </b>\n"
"...   <b>\n"
"...     <c>\n"
"...       <d>\n"
"...       </d>\n"
"...     </c>\n"
"...   </b>\n"
"... </a>\"\"\"\n"
">>> parser.feed(exampleXml)\n"
">>> parser.close()\n"
"4"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:528
msgid "Footnotes"
msgstr ""

#: ../../../library/xml.etree.elementtree.rst:529
msgid ""
"The encoding string included in XML output should conform to the appropriate "
"standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not. See http://"
"www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and http://www.iana."
"org/assignments/character-sets ."
msgstr ""
