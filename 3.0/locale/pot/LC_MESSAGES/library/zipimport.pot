# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/zipimport.rst:3
msgid ":mod:`zipimport` --- Import modules from Zip archives"
msgstr ""

#: ../../../library/zipimport.rst:10
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.py[co]`) and packages from ZIP-format archives. It is usually not "
"needed to use the :mod:`zipimport` module explicitly; it is automatically "
"used by the builtin :keyword:`import` mechanism for ``sys.path`` items that "
"are paths to ZIP archives."
msgstr ""

#: ../../../library/zipimport.rst:16
msgid ""
"Typically, ``sys.path`` is a list of directory names as strings.  This "
"module also allows an item of ``sys.path`` to be a string naming a ZIP file "
"archive. The ZIP archive can contain a subdirectory structure to support "
"package imports, and a path within the archive can be specified to only "
"import from a subdirectory.  For example, the path :file:`/tmp/example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""

#: ../../../library/zipimport.rst:23
msgid ""
"Any files may be present in the ZIP archive, but only files :file:`.py` and :"
"file:`.py[co]` are available for import.  ZIP import of dynamic modules (:"
"file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by "
"adding the corresponding :file:`.pyc` or :file:`.pyo` file, meaning that if "
"a ZIP archive doesn't contain :file:`.pyc` files, importing may be rather "
"slow."
msgstr ""

#: ../../../library/zipimport.rst:34
msgid ""
"`PKZIP Application Note <http://www.pkware.com/documents/casestudies/APPNOTE."
"TXT>`_"
msgstr ""

#: ../../../library/zipimport.rst:33
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr ""

#: ../../../library/zipimport.rst:39
msgid ":pep:`0273` - Import Modules from Zip Archives"
msgstr ""

#: ../../../library/zipimport.rst:37
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in PEP 273, but uses an implementation written "
"by Just van Rossum that uses the import hooks described in PEP 302."
msgstr ""

#: ../../../library/zipimport.rst:41
msgid ":pep:`0302` - New Import Hooks"
msgstr ""

#: ../../../library/zipimport.rst:42
msgid "The PEP to add the import hooks that help this module work."
msgstr ""

#: ../../../library/zipimport.rst:45
msgid "This module defines an exception:"
msgstr ""

#: ../../../library/zipimport.rst:49
msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""

#: ../../../library/zipimport.rst:56
msgid "zipimporter Objects"
msgstr ""

#: ../../../library/zipimport.rst:58
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ""

#: ../../../library/zipimport.rst:62
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""

#: ../../../library/zipimport.rst:67
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""

#: ../../../library/zipimport.rst:72
msgid ""
"Search for a module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the zipimporter instance itself "
"if the module was found, or :const:`None` if it wasn't. The optional *path* "
"argument is ignored---it's there for compatibility with the importer "
"protocol."
msgstr ""

#: ../../../library/zipimport.rst:81
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found."
msgstr ""

#: ../../../library/zipimport.rst:87
msgid ""
"Return the data associated with *pathname*. Raise :exc:`IOError` if the file "
"wasn't found."
msgstr ""

#: ../../../library/zipimport.rst:93
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""

#: ../../../library/zipimport.rst:101
msgid ""
"Return True if the module specified by *fullname* is a package. Raise :exc:"
"`ZipImportError` if the module couldn't be found."
msgstr ""

#: ../../../library/zipimport.rst:107
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the imported module, or raises :"
"exc:`ZipImportError` if it wasn't found."
msgstr ""

#: ../../../library/zipimport.rst:114
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr ""

#: ../../../library/zipimport.rst:120
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""

#: ../../../library/zipimport.rst:124
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""

#: ../../../library/zipimport.rst:132
msgid "Examples"
msgstr ""

#: ../../../library/zipimport.rst:134
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used. ::"
msgstr ""
