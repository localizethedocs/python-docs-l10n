# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/fcntl.rst:3
msgid ":mod:`fcntl` --- The :func:`fcntl` and :func:`ioctl` system calls"
msgstr ""

#: ../../../library/fcntl.rst:15
msgid ""
"This module performs file control and I/O control on file descriptors. It is "
"an interface to the :cfunc:`fcntl` and :cfunc:`ioctl` Unix routines."
msgstr ""

#: ../../../library/fcntl.rst:18
msgid ""
"All functions in this module take a file descriptor *fd* as their first "
"argument.  This can be an integer file descriptor, such as returned by ``sys."
"stdin.fileno()``, or a file object, such as ``sys.stdin`` itself, which "
"provides a :meth:`fileno` which returns a genuine file descriptor."
msgstr ""

#: ../../../library/fcntl.rst:23
msgid "The module defines the following functions:"
msgstr ""

#: ../../../library/fcntl.rst:28
msgid ""
"Perform the requested operation on file descriptor *fd* (file objects "
"providing a :meth:`fileno` method are accepted as well). The operation is "
"defined by *op* and is operating system dependent.  These codes are also "
"found in the :mod:`fcntl` module. The argument *arg* is optional, and "
"defaults to the integer value ``0``.  When present, it can either be an "
"integer value, or a string. With the argument missing or an integer value, "
"the return value of this function is the integer return value of the C :"
"cfunc:`fcntl` call.  When the argument is a string it represents a binary "
"structure, e.g. created by :func:`struct.pack`. The binary data is copied to "
"a buffer whose address is passed to the C :cfunc:`fcntl` call.  The return "
"value after a successful call is the contents of the buffer, converted to a "
"string object.  The length of the returned string will be the same as the "
"length of the *arg* argument.  This is limited to 1024 bytes.  If the "
"information returned in the buffer by the operating system is larger than "
"1024 bytes, this is most likely to result in a segmentation violation or a "
"more subtle data corruption."
msgstr ""

#: ../../../library/fcntl.rst:44
msgid "If the :cfunc:`fcntl` fails, an :exc:`IOError` is raised."
msgstr ""

#: ../../../library/fcntl.rst:49
msgid ""
"This function is identical to the :func:`fcntl` function, except that the "
"argument handling is even more complicated."
msgstr ""

#: ../../../library/fcntl.rst:52
msgid "The op parameter is limited to values that can fit in 32-bits."
msgstr ""

#: ../../../library/fcntl.rst:54
msgid ""
"The parameter *arg* can be one of an integer, absent (treated identically to "
"the integer ``0``), an object supporting the read-only buffer interface "
"(most likely a plain Python string) or an object supporting the read-write "
"buffer interface."
msgstr ""

#: ../../../library/fcntl.rst:58
msgid ""
"In all but the last case, behaviour is as for the :func:`fcntl` function."
msgstr ""

#: ../../../library/fcntl.rst:60
msgid ""
"If a mutable buffer is passed, then the behaviour is determined by the value "
"of the *mutate_flag* parameter."
msgstr ""

#: ../../../library/fcntl.rst:63
msgid ""
"If it is false, the buffer's mutability is ignored and behaviour is as for a "
"read-only buffer, except that the 1024 byte limit mentioned above is avoided "
"-- so long as the buffer you pass is as least as long as what the operating "
"system wants to put there, things should work."
msgstr ""

#: ../../../library/fcntl.rst:68
msgid ""
"If *mutate_flag* is true (the default), then the buffer is (in effect) "
"passed to the underlying :func:`ioctl` system call, the latter's return code "
"is passed back to the calling Python, and the buffer's new contents reflect "
"the action of the :func:`ioctl`.  This is a slight simplification, because "
"if the supplied buffer is less than 1024 bytes long it is first copied into "
"a static buffer 1024 bytes long which is then passed to :func:`ioctl` and "
"copied back into the supplied buffer."
msgstr ""

#: ../../../library/fcntl.rst:76
msgid "An example::"
msgstr ""

#: ../../../library/fcntl.rst:92
msgid ""
"Perform the lock operation *op* on file descriptor *fd* (file objects "
"providing a :meth:`fileno` method are accepted as well). See the Unix "
"manual :manpage:`flock(3)` for details.  (On some systems, this function is "
"emulated using :cfunc:`fcntl`.)"
msgstr ""

#: ../../../library/fcntl.rst:100
msgid ""
"This is essentially a wrapper around the :func:`fcntl` locking calls.  *fd* "
"is the file descriptor of the file to lock or unlock, and *operation* is one "
"of the following values:"
msgstr ""

#: ../../../library/fcntl.rst:104
msgid ":const:`LOCK_UN` -- unlock"
msgstr ""

#: ../../../library/fcntl.rst:105
msgid ":const:`LOCK_SH` -- acquire a shared lock"
msgstr ""

#: ../../../library/fcntl.rst:106
msgid ":const:`LOCK_EX` -- acquire an exclusive lock"
msgstr ""

#: ../../../library/fcntl.rst:108
msgid ""
"When *operation* is :const:`LOCK_SH` or :const:`LOCK_EX`, it can also be "
"bitwise ORed with :const:`LOCK_NB` to avoid blocking on lock acquisition. "
"If :const:`LOCK_NB` is used and the lock cannot be acquired, an :exc:"
"`IOError` will be raised and the exception will have an *errno* attribute "
"set to :const:`EACCES` or :const:`EAGAIN` (depending on the operating "
"system; for portability, check for both values).  On at least some systems, :"
"const:`LOCK_EX` can only be used if the file descriptor refers to a file "
"opened for writing."
msgstr ""

#: ../../../library/fcntl.rst:117
msgid ""
"*length* is the number of bytes to lock, *start* is the byte offset at which "
"the lock starts, relative to *whence*, and *whence* is as with :func:"
"`fileobj.seek`, specifically:"
msgstr ""

#: ../../../library/fcntl.rst:121
msgid ":const:`0` -- relative to the start of the file (:const:`SEEK_SET`)"
msgstr ""

#: ../../../library/fcntl.rst:122
msgid ""
":const:`1` -- relative to the current buffer position (:const:`SEEK_CUR`)"
msgstr ""

#: ../../../library/fcntl.rst:123
msgid ":const:`2` -- relative to the end of the file (:const:`SEEK_END`)"
msgstr ""

#: ../../../library/fcntl.rst:125
msgid ""
"The default for *start* is 0, which means to start at the beginning of the "
"file. The default for *length* is 0 which means to lock to the end of the "
"file.  The default for *whence* is also 0."
msgstr ""

#: ../../../library/fcntl.rst:129
msgid "Examples (all on a SVR4 compliant system)::"
msgstr ""

#: ../../../library/fcntl.rst:139
msgid ""
"Note that in the first example the return value variable *rv* will hold an "
"integer value; in the second example it will hold a string value.  The "
"structure lay-out for the *lockdata* variable is system dependent --- "
"therefore using the :func:`flock` call may be better."
msgstr ""

#: ../../../library/fcntl.rst:150
msgid "Module :mod:`os`"
msgstr ""

#: ../../../library/fcntl.rst:148
msgid ""
"If the locking flags :const:`O_SHLOCK` and :const:`O_EXLOCK` are present in "
"the :mod:`os` module, the :func:`os.open` function provides a more platform-"
"independent alternative to the :func:`lockf` and :func:`flock` functions."
msgstr ""

#: ../../../library/fcntl.rst:11
msgid "UNIX@Unix"
msgstr ""

#: ../../../library/fcntl.rst:11
msgid "file control"
msgstr ""

#: ../../../library/fcntl.rst:11
msgid "I/O control"
msgstr ""
