# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/shelve.rst:3
msgid ":mod:`shelve` --- Python object persistence"
msgstr ""

#: ../../../library/shelve.rst:11
msgid ""
"A \"shelf\" is a persistent, dictionary-like object.  The difference with "
"\"dbm\" databases is that the values (not the keys!) in a shelf can be "
"essentially arbitrary Python objects --- anything that the :mod:`pickle` "
"module can handle. This includes most class instances, recursive data types, "
"and objects containing lots of shared  sub-objects.  The keys are ordinary "
"strings."
msgstr ""

#: ../../../library/shelve.rst:20
msgid ""
"Open a persistent dictionary.  The filename specified is the base filename "
"for the underlying database.  As a side-effect, an extension may be added to "
"the filename and more than one file may be created.  By default, the "
"underlying database file is opened for reading and writing.  The optional "
"*flag* parameter has the same interpretation as the *flag* parameter of :"
"func:`dbm.open`."
msgstr ""

#: ../../../library/shelve.rst:26
msgid ""
"By default, version 3 pickles are used to serialize values.  The version of "
"the pickle protocol can be specified with the *protocol* parameter."
msgstr ""

#: ../../../library/shelve.rst:29
msgid ""
"By default, mutations to persistent-dictionary mutable entries are not "
"automatically written back.  If the optional *writeback* parameter is set to "
"*True*, all entries accessed are cached in memory, and written back at close "
"time; this can make it handier to mutate mutable entries in the persistent "
"dictionary, but, if many entries are accessed, it can consume vast amounts "
"of memory for the cache, and it can make the close operation very slow since "
"all accessed entries are written back (there is no way to determine which "
"accessed entries are mutable, nor which ones were actually mutated)."
msgstr ""

#: ../../../library/shelve.rst:38
msgid ""
"Shelve objects support all methods supported by dictionaries.  This eases "
"the transition from dictionary based scripts to those requiring persistent "
"storage."
msgstr ""

#: ../../../library/shelve.rst:41
msgid "One additional method is supported:"
msgstr ""

#: ../../../library/shelve.rst:46
msgid ""
"Write back all entries in the cache if the shelf was opened with *writeback* "
"set to *True*. Also empty the cache and synchronize the persistent "
"dictionary on disk, if feasible.  This is called automatically when the "
"shelf is closed with :meth:`close`."
msgstr ""

#: ../../../library/shelve.rst:53
msgid "Restrictions"
msgstr ""

#: ../../../library/shelve.rst:59
msgid ""
"The choice of which database package will be used (such as :mod:`dbm.ndbm` "
"or :mod:`dbm.gnu`) depends on which interface is available.  Therefore it is "
"not safe to open the database directly using :mod:`dbm`.  The database is "
"also (unfortunately) subject to the limitations of :mod:`dbm`, if it is used "
"--- this means that (the pickled representation of) the objects stored in "
"the database should be fairly small, and in rare cases key collisions may "
"cause the database to refuse updates."
msgstr ""

#: ../../../library/shelve.rst:67
msgid ""
"Depending on the implementation, closing a persistent dictionary may or may "
"not be necessary to flush changes to disk.  The :meth:`__del__` method of "
"the :class:`Shelf` class calls the :meth:`close` method, so the programmer "
"generally need not do this explicitly."
msgstr ""

#: ../../../library/shelve.rst:72
msgid ""
"The :mod:`shelve` module does not support *concurrent* read/write access to "
"shelved objects.  (Multiple simultaneous read accesses are safe.)  When a "
"program has a shelf open for writing, no other program should have it open "
"for reading or writing.  Unix file locking can be used to solve this, but "
"this differs across Unix versions and requires knowledge about the database "
"implementation used."
msgstr ""

#: ../../../library/shelve.rst:82
msgid ""
"A subclass of :class:`collections.MutableMapping` which stores pickled "
"values in the *dict* object."
msgstr ""

#: ../../../library/shelve.rst:85
msgid ""
"By default, version 0 pickles are used to serialize values.  The version of "
"the pickle protocol can be specified with the *protocol* parameter. See the :"
"mod:`pickle` documentation for a discussion of the pickle protocols."
msgstr ""

#: ../../../library/shelve.rst:89
msgid ""
"If the *writeback* parameter is ``True``, the object will hold a cache of "
"all entries accessed and write them back to the *dict* at sync and close "
"times. This allows natural operations on mutable entries, but can consume "
"much more memory and make sync and close take a long time."
msgstr ""

#: ../../../library/shelve.rst:97
msgid ""
"A subclass of :class:`Shelf` which exposes :meth:`first`, :meth:`next`, :"
"meth:`previous`, :meth:`last` and :meth:`set_location` which are available "
"in the :mod:`bsddb` module but not in other database modules.  The *dict* "
"object passed to the constructor must support those methods.  This is "
"generally accomplished by calling one of :func:`bsddb.hashopen`, :func:"
"`bsddb.btopen` or :func:`bsddb.rnopen`.  The optional *protocol* and "
"*writeback* parameters have the same interpretation as for the :class:"
"`Shelf` class."
msgstr ""

#: ../../../library/shelve.rst:108
msgid ""
"A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-"
"like object.  The underlying file will be opened using :func:`dbm.open`.  By "
"default, the file will be created and opened for both read and write.  The "
"optional *flag* parameter has the same interpretation as for the :func:"
"`open` function.  The optional *protocol* and *writeback* parameters have "
"the same interpretation as for the :class:`Shelf` class."
msgstr ""

#: ../../../library/shelve.rst:117
msgid "Example"
msgstr ""

#: ../../../library/shelve.rst:119
msgid ""
"To summarize the interface (``key`` is a string, ``data`` is an arbitrary "
"object)::"
msgstr ""

#: ../../../library/shelve.rst:155
msgid "Module :mod:`dbm`"
msgstr ""

#: ../../../library/shelve.rst:155
msgid "Generic interface to ``dbm``-style databases."
msgstr ""

#: ../../../library/shelve.rst:158
msgid "Module :mod:`pickle`"
msgstr ""

#: ../../../library/shelve.rst:158
msgid "Object serialization used by :mod:`shelve`."
msgstr ""

#: ../../../library/shelve.rst:160
msgid "Module :mod:`cPickle`"
msgstr ""

#: ../../../library/shelve.rst:161
msgid "High-performance version of :mod:`pickle`."
msgstr ""

#: ../../../library/shelve.rst:9
msgid "pickle"
msgstr ""

#: ../../../library/shelve.rst:55
msgid "dbm.ndbm"
msgstr ""

#: ../../../library/shelve.rst:55
msgid "dbm.gnu"
msgstr ""
