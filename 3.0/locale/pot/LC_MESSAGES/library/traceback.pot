# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: ../../../library/traceback.rst:8
msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""

#: ../../../library/traceback.rst:16
msgid ""
"The module uses traceback objects --- this is the object type that is stored "
"in the ``sys.last_traceback`` variable and returned as the third item from :"
"func:`sys.exc_info`."
msgstr ""

#: ../../../library/traceback.rst:20
msgid "The module defines the following functions:"
msgstr ""

#: ../../../library/traceback.rst:25
msgid ""
"Print up to *limit* stack trace entries from *traceback*.  If *limit* is "
"omitted or ``None``, all entries are printed. If *file* is omitted or "
"``None``, the output goes to ``sys.stderr``; otherwise it should be an open "
"file or file-like object to receive the output."
msgstr ""

#: ../../../library/traceback.rst:33
msgid ""
"Print exception information and up to *limit* stack trace entries from "
"*traceback* to *file*. This differs from :func:`print_tb` in the following "
"ways:"
msgstr ""

#: ../../../library/traceback.rst:37
msgid ""
"if *traceback* is not ``None``, it prints a header ``Traceback (most recent "
"call last):``"
msgstr ""

#: ../../../library/traceback.rst:39
msgid "it prints the exception *type* and *value* after the stack trace"
msgstr ""

#: ../../../library/traceback.rst:40
msgid ""
"if *type* is :exc:`SyntaxError` and *value* has the appropriate format, it "
"prints the line where the syntax error occurred with a caret indicating the "
"approximate position of the error."
msgstr ""

#: ../../../library/traceback.rst:44
msgid ""
"If *chain* is true (the default), then chained exceptions (the :attr:"
"`__cause__` or :attr:`__context__` attributes of the exception) will be "
"printed as well, like the interpreter itself does when printing an unhandled "
"exception."
msgstr ""

#: ../../../library/traceback.rst:52
msgid "This is a shorthand for ``print_exception(*sys.exc_info())``."
msgstr ""

#: ../../../library/traceback.rst:57
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, sys."
"last_traceback, limit, file)``."
msgstr ""

#: ../../../library/traceback.rst:63
msgid ""
"This function prints a stack trace from its invocation point.  The optional "
"*f* argument can be used to specify an alternate stack frame to start.  The "
"optional *limit* and *file* arguments have the same meaning as for :func:"
"`print_exception`."
msgstr ""

#: ../../../library/traceback.rst:71
msgid ""
"Return a list of up to *limit* \"pre-processed\" stack trace entries "
"extracted from the traceback object *traceback*.  It is useful for alternate "
"formatting of stack traces.  If *limit* is omitted or ``None``, all entries "
"are extracted.  A \"pre-processed\" stack trace entry is a quadruple "
"(*filename*, *line number*, *function name*, *text*) representing the "
"information that is usually printed for a stack trace.  The *text* is a "
"string with leading and trailing whitespace stripped; if the source is not "
"available it is ``None``."
msgstr ""

#: ../../../library/traceback.rst:82
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit* "
"arguments have the same meaning as for :func:`print_stack`."
msgstr ""

#: ../../../library/traceback.rst:89
msgid ""
"Given a list of tuples as returned by :func:`extract_tb` or :func:"
"`extract_stack`, return a list of strings ready for printing.  Each string "
"in the resulting list corresponds to the item with the same index in the "
"argument list.  Each string ends in a newline; the strings may contain "
"internal newlines as well, for those items whose source text line is not "
"``None``."
msgstr ""

#: ../../../library/traceback.rst:98
msgid ""
"Format the exception part of a traceback.  The arguments are the exception "
"type and value such as given by ``sys.last_type`` and ``sys.last_value``.  "
"The return value is a list of strings, each ending in a newline.  Normally, "
"the list contains a single string; however, for :exc:`SyntaxError` "
"exceptions, it contains several lines that (when printed) display detailed "
"information about where the syntax error occurred.  The message indicating "
"which exception occurred is the always last string in the list."
msgstr ""

#: ../../../library/traceback.rst:109
msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""

#: ../../../library/traceback.rst:118
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""

#: ../../../library/traceback.rst:124
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

#: ../../../library/traceback.rst:129
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

#: ../../../library/traceback.rst:135
msgid "Traceback Examples"
msgstr ""

#: ../../../library/traceback.rst:137
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""

#: ../../../library/traceback.rst:142
msgid ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"
msgstr ""

#: ../../../library/traceback.rst:159
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback::"
msgstr ""

#: ../../../library/traceback.rst:162
msgid ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_death()\n"
"\n"
"def bright_side_of_death():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except:\n"
"    exceptionType, exceptionValue, exceptionTraceback = sys.exc_info()\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exceptionTraceback, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exceptionType, exceptionValue, "
"exceptionTraceback,\n"
"                              limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc()\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exceptionType, exceptionValue,\n"
"                                          exceptionTraceback)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exceptionTraceback)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exceptionTraceback)))\n"
"    print(\"*** tb_lineno:\", traceback.tb_lineno(exceptionTraceback))\n"
"print(\"*** print_last:\")\n"
"traceback.print_last()"
msgstr ""

#: ../../../library/traceback.rst:197
msgid "The output for the example would look similar to this::"
msgstr ""

#: ../../../library/traceback.rst:199
msgid ""
"*** print_tb:\n"
"  File \"<doctest>\", line 9, in <module>\n"
"    lumberjack()\n"
"*** print_exception:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest>\", line 9, in <module>\n"
"    lumberjack()\n"
"  File \"<doctest>\", line 3, in lumberjack\n"
"    bright_side_of_death()\n"
"IndexError: tuple index out of range\n"
"*** print_exc:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest>\", line 9, in <module>\n"
"    lumberjack()\n"
"  File \"<doctest>\", line 3, in lumberjack\n"
"    bright_side_of_death()\n"
"IndexError: tuple index out of range\n"
"*** format_exc, first and last line:\n"
"Traceback (most recent call last):\n"
"IndexError: tuple index out of range\n"
"*** format_exception:\n"
"['Traceback (most recent call last):\\n',\n"
" '  File \"<doctest>\", line 9, in <module>\\n    lumberjack()\\n',\n"
" '  File \"<doctest>\", line 3, in lumberjack\\n    "
"bright_side_of_death()\\n',\n"
" '  File \"<doctest>\", line 6, in bright_side_of_death\\n    return tuple()"
"[0]\\n',\n"
" 'IndexError: tuple index out of range\\n']\n"
"*** extract_tb:\n"
"[('<doctest>', 9, '<module>', 'lumberjack()'),\n"
" ('<doctest>', 3, 'lumberjack', 'bright_side_of_death()'),\n"
" ('<doctest>', 6, 'bright_side_of_death', 'return tuple()[0]')]\n"
"*** format_tb:\n"
"['  File \"<doctest>\", line 9, in <module>\\n    lumberjack()\\n',\n"
" '  File \"<doctest>\", line 3, in lumberjack\\n    "
"bright_side_of_death()\\n',\n"
" '  File \"<doctest>\", line 6, in bright_side_of_death\\n    return tuple()"
"[0]\\n']\n"
"*** tb_lineno: 2\n"
"*** print_last:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest>\", line 9, in <module>\n"
"    lumberjack()\n"
"  File \"<doctest>\", line 3, in lumberjack\n"
"    bright_side_of_death()\n"
"IndexError: tuple index out of range"
msgstr ""

#: ../../../library/traceback.rst:243
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""

#: ../../../library/traceback.rst:245
msgid ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    "
"lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback."
"format_stack()))\\n']"
msgstr ""

#: ../../../library/traceback.rst:269
msgid "This last example demonstrates the final few formatting functions::"
msgstr ""

#: ../../../library/traceback.rst:271
msgid ""
">>> import traceback\n"
">>> format_list([('spam.py', 3, '<module>', 'spam.eggs()'),\n"
"...              ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',\n"
" '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n']\n"
">>> theError = IndexError('tuple indx out of range')\n"
">>> traceback.format_exception_only(type(theError), theError)\n"
"['IndexError: tuple index out of range\\n']"
msgstr ""

#: ../../../library/traceback.rst:14
msgid "traceback"
msgstr ""
