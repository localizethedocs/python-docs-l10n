# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/subprocess.rst:3
msgid ":mod:`subprocess` --- Subprocess management"
msgstr ""

#: ../../../library/subprocess.rst:11
msgid ""
"The :mod:`subprocess` module allows you to spawn new processes, connect to "
"their input/output/error pipes, and obtain their return codes.  This module "
"intends to replace several other, older modules and functions, such as::"
msgstr ""

#: ../../../library/subprocess.rst:15
msgid ""
"os.system\n"
"os.spawn*"
msgstr ""

#: ../../../library/subprocess.rst:18
msgid ""
"Information about how the :mod:`subprocess` module can be used to replace "
"these modules and functions can be found in the following sections."
msgstr ""

#: ../../../library/subprocess.rst:23
msgid ":pep:`324` -- PEP proposing the subprocess module"
msgstr ""

#: ../../../library/subprocess.rst:27
msgid "Using the subprocess Module"
msgstr ""

#: ../../../library/subprocess.rst:29
msgid "This module defines one class called :class:`Popen`:"
msgstr ""

#: ../../../library/subprocess.rst:34
msgid "Arguments are:"
msgstr ""

#: ../../../library/subprocess.rst:36
msgid ""
"*args* should be a string, or a sequence of program arguments.  The program "
"to execute is normally the first item in the args sequence or the string if "
"a string is given, but can be explicitly set by using the *executable* "
"argument."
msgstr ""

#: ../../../library/subprocess.rst:41
msgid ""
"On Unix, with *shell=False* (default): In this case, the Popen class uses :"
"meth:`os.execvp` to execute the child program. *args* should normally be a "
"sequence.  A string will be treated as a sequence with the string as the "
"only item (the program to execute)."
msgstr ""

#: ../../../library/subprocess.rst:46
msgid ""
"On Unix, with *shell=True*: If args is a string, it specifies the command "
"string to execute through the shell.  If *args* is a sequence, the first "
"item specifies the command string, and any additional items will be treated "
"as additional shell arguments."
msgstr ""

#: ../../../library/subprocess.rst:51
msgid ""
"On Windows: the :class:`Popen` class uses CreateProcess() to execute the "
"child program, which operates on strings.  If *args* is a sequence, it will "
"be converted to a string using the :meth:`list2cmdline` method.  Please note "
"that not all MS Windows applications interpret the command line the same "
"way: :meth:`list2cmdline` is designed for applications using the same rules "
"as the MS C runtime."
msgstr ""

#: ../../../library/subprocess.rst:58
msgid ""
"*bufsize*, if given, has the same meaning as the corresponding argument to "
"the built-in open() function: :const:`0` means unbuffered, :const:`1` means "
"line buffered, any other positive value means use a buffer of "
"(approximately) that size.  A negative *bufsize* means to use the system "
"default, which usually means fully buffered.  The default value for "
"*bufsize* is :const:`0` (unbuffered)."
msgstr ""

#: ../../../library/subprocess.rst:64
msgid ""
"The *executable* argument specifies the program to execute. It is very "
"seldom needed: Usually, the program to execute is defined by the *args* "
"argument. If ``shell=True``, the *executable* argument specifies which shell "
"to use. On Unix, the default shell is :file:`/bin/sh`.  On Windows, the "
"default shell is specified by the :envvar:`COMSPEC` environment variable."
msgstr ""

#: ../../../library/subprocess.rst:70
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed programs' standard "
"input, standard output and standard error file handles, respectively.  Valid "
"values are :data:`PIPE`, an existing file descriptor (a positive integer), "
"an existing file object, and ``None``.  :data:`PIPE` indicates that a new "
"pipe to the child should be created.  With ``None``, no redirection will "
"occur; the child's file handles will be inherited from the parent.  "
"Additionally, *stderr* can be :data:`STDOUT`, which indicates that the "
"stderr data from the applications should be captured into the same file "
"handle as for stdout."
msgstr ""

#: ../../../library/subprocess.rst:79
msgid ""
"If *preexec_fn* is set to a callable object, this object will be called in "
"the child process just before the child is executed. (Unix only)"
msgstr ""

#: ../../../library/subprocess.rst:82
msgid ""
"If *close_fds* is true, all file descriptors except :const:`0`, :const:`1` "
"and :const:`2` will be closed before the child process is executed. (Unix "
"only). Or, on Windows, if *close_fds* is true then no handles will be "
"inherited by the child process.  Note that on Windows, you cannot set "
"*close_fds* to true and also redirect the standard handles by setting "
"*stdin*, *stdout* or *stderr*."
msgstr ""

#: ../../../library/subprocess.rst:88
msgid ""
"If *shell* is :const:`True`, the specified command will be executed through "
"the shell."
msgstr ""

#: ../../../library/subprocess.rst:91
msgid ""
"If *cwd* is not ``None``, the child's current directory will be changed to "
"*cwd* before it is executed.  Note that this directory is not considered "
"when searching the executable, so you can't specify the program's path "
"relative to *cwd*."
msgstr ""

#: ../../../library/subprocess.rst:96
msgid ""
"If *env* is not ``None``, it must be a mapping that defines the environment "
"variables for the new process; these are used instead of inheriting the "
"current process' environment, which is the default behavior."
msgstr ""

#: ../../../library/subprocess.rst:100
msgid ""
"If *universal_newlines* is :const:`True`, the file objects stdout and stderr "
"are opened as text files, but lines may be terminated by any of ``'\\n'``, "
"the Unix end-of-line convention, ``'\\r'``, the old Macintosh convention or "
"``'\\r\\n'``, the Windows convention. All of these external representations "
"are seen as ``'\\n'`` by the Python program."
msgstr ""

#: ../../../library/subprocess.rst:108
msgid ""
"This feature is only available if Python is built with universal newline "
"support (the default).  Also, the newlines attribute of the file objects :"
"attr:`stdout`, :attr:`stdin` and :attr:`stderr` are not updated by the :meth:"
"`communicate` method."
msgstr ""

#: ../../../library/subprocess.rst:112
msgid ""
"The *startupinfo* and *creationflags*, if given, will be passed to the "
"underlying CreateProcess() function.  They can specify things such as "
"appearance of the main window and priority for the new process.  (Windows "
"only)"
msgstr ""

#: ../../../library/subprocess.rst:119
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :class:`Popen` and indicates that a pipe to the standard stream should be "
"opened."
msgstr ""

#: ../../../library/subprocess.rst:126
msgid ""
"Special value that can be used as the *stderr* argument to :class:`Popen` "
"and indicates that standard error should go into the same handle as standard "
"output."
msgstr ""

#: ../../../library/subprocess.rst:132
msgid "Convenience Functions"
msgstr ""

#: ../../../library/subprocess.rst:134
msgid "This module also defines four shortcut functions:"
msgstr ""

#: ../../../library/subprocess.rst:139
msgid ""
"Run command with arguments.  Wait for command to complete, then return the :"
"attr:`returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:142 ../../../library/subprocess.rst:154
msgid "The arguments are the same as for the Popen constructor.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:144
msgid "retcode = call([\"ls\", \"-l\"])"
msgstr ""

#: ../../../library/subprocess.rst:149
msgid ""
"Run command with arguments.  Wait for command to complete. If the exit code "
"was zero then return, otherwise raise :exc:`CalledProcessError`. The :exc:"
"`CalledProcessError` object will have the return code in the :attr:"
"`returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:156
msgid "check_call([\"ls\", \"-l\"])"
msgstr ""

#: ../../../library/subprocess.rst:162
msgid ""
"Execute the string *cmd* in a shell with :func:`os.popen` and return a 2-"
"tuple ``(status, output)``.  *cmd* is actually run as ``{ cmd ; } 2>&1``, so "
"that the returned output will contain output or error messages.  A trailing "
"newline is stripped from the output.  The exit status for the command can be "
"interpreted according to the rules for the C function :cfunc:`wait`.  "
"Example::"
msgstr ""

#: ../../../library/subprocess.rst:168
msgid ""
">>> import subprocess\n"
">>> subprocess.getstatusoutput('ls /bin/ls')\n"
"(0, '/bin/ls')\n"
">>> subprocess.getstatusoutput('cat /bin/junk')\n"
"(256, 'cat: /bin/junk: No such file or directory')\n"
">>> subprocess.getstatusoutput('/bin/junk')\n"
"(256, 'sh: /bin/junk: not found')"
msgstr ""

#: ../../../library/subprocess.rst:176 ../../../library/subprocess.rst:189
msgid "Availability: UNIX."
msgstr ""

#: ../../../library/subprocess.rst:182
msgid ""
"Like :func:`getstatusoutput`, except the exit status is ignored and the "
"return value is a string containing the command's output.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:185
msgid ""
">>> import subprocess\n"
">>> subprocess.getoutput('ls /bin/ls')\n"
"'/bin/ls'"
msgstr ""

#: ../../../library/subprocess.rst:193
msgid "Exceptions"
msgstr ""

#: ../../../library/subprocess.rst:195
msgid ""
"Exceptions raised in the child process, before the new program has started "
"to execute, will be re-raised in the parent.  Additionally, the exception "
"object will have one extra attribute called :attr:`child_traceback`, which "
"is a string containing traceback information from the childs point of view."
msgstr ""

#: ../../../library/subprocess.rst:200
msgid ""
"The most common exception raised is :exc:`OSError`.  This occurs, for "
"example, when trying to execute a non-existent file.  Applications should "
"prepare for :exc:`OSError` exceptions."
msgstr ""

#: ../../../library/subprocess.rst:204
msgid ""
"A :exc:`ValueError` will be raised if :class:`Popen` is called with invalid "
"arguments."
msgstr ""

#: ../../../library/subprocess.rst:207
msgid ""
"check_call() will raise :exc:`CalledProcessError`, if the called process "
"returns a non-zero return code."
msgstr ""

#: ../../../library/subprocess.rst:212
msgid "Security"
msgstr ""

#: ../../../library/subprocess.rst:214
msgid ""
"Unlike some other popen functions, this implementation will never call /bin/"
"sh implicitly.  This means that all characters, including shell "
"metacharacters, can safely be passed to child processes."
msgstr ""

#: ../../../library/subprocess.rst:220
msgid "Popen Objects"
msgstr ""

#: ../../../library/subprocess.rst:222
msgid "Instances of the :class:`Popen` class have the following methods:"
msgstr ""

#: ../../../library/subprocess.rst:227
msgid ""
"Check if child process has terminated.  Set and return :attr:`returncode` "
"attribute."
msgstr ""

#: ../../../library/subprocess.rst:233
msgid ""
"Wait for child process to terminate.  Set and return :attr:`returncode` "
"attribute."
msgstr ""

#: ../../../library/subprocess.rst:238
msgid ""
"This will deadlock if the child process generates enough output to a stdout "
"or stderr pipe such that it blocks waiting for the OS pipe buffer to accept "
"more data.  Use :meth:`communicate` to avoid that."
msgstr ""

#: ../../../library/subprocess.rst:245
msgid ""
"Interact with process: Send data to stdin.  Read data from stdout and "
"stderr, until end-of-file is reached.  Wait for process to terminate. The "
"optional *input* argument should be a byte string to be sent to the child "
"process, or ``None``, if no data should be sent to the child."
msgstr ""

#: ../../../library/subprocess.rst:250
msgid ":meth:`communicate` returns a tuple ``(stdoutdata, stderrdata)``."
msgstr ""

#: ../../../library/subprocess.rst:252
msgid ""
"Note that if you want to send data to the process's stdin, you need to "
"create the Popen object with ``stdin=PIPE``.  Similarly, to get anything "
"other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` "
"and/or ``stderr=PIPE`` too."
msgstr ""

#: ../../../library/subprocess.rst:259
msgid ""
"The data read is buffered in memory, so do not use this method if the data "
"size is large or unlimited."
msgstr ""

#: ../../../library/subprocess.rst:265
msgid "Sends the signal *signal* to the child."
msgstr ""

#: ../../../library/subprocess.rst:269
msgid ""
"On Windows only SIGTERM is supported so far. It's an alias for :meth:"
"`terminate`."
msgstr ""

#: ../../../library/subprocess.rst:275
msgid ""
"Stop the child. On Posix OSs the method sends SIGTERM to the child. On "
"Windows the Win32 API function :cfunc:`TerminateProcess` is called to stop "
"the child."
msgstr ""

#: ../../../library/subprocess.rst:282
msgid ""
"Kills the child. On Posix OSs the function sends SIGKILL to the child. On "
"Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""

#: ../../../library/subprocess.rst:286
msgid "The following attributes are also available:"
msgstr ""

#: ../../../library/subprocess.rst:290
msgid ""
"Use :meth:`communicate` rather than :meth:`.stdin.write`, :meth:`.stdout."
"read` or :meth:`.stderr.read` to avoid deadlocks due to any of the other OS "
"pipe buffers filling up and blocking the child process."
msgstr ""

#: ../../../library/subprocess.rst:298
msgid ""
"If the *stdin* argument was :data:`PIPE`, this attribute is a file object "
"that provides input to the child process.  Otherwise, it is ``None``."
msgstr ""

#: ../../../library/subprocess.rst:304
msgid ""
"If the *stdout* argument was :data:`PIPE`, this attribute is a file object "
"that provides output from the child process.  Otherwise, it is ``None``."
msgstr ""

#: ../../../library/subprocess.rst:310
msgid ""
"If the *stderr* argument was :data:`PIPE`, this attribute is a file object "
"that provides error output from the child process.  Otherwise, it is "
"``None``."
msgstr ""

#: ../../../library/subprocess.rst:317
msgid "The process ID of the child process."
msgstr ""

#: ../../../library/subprocess.rst:322
msgid ""
"The child return code, set by :meth:`poll` and :meth:`wait` (and indirectly "
"by :meth:`communicate`).  A ``None`` value indicates that the process hasn't "
"terminated yet."
msgstr ""

#: ../../../library/subprocess.rst:326
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (Unix only)."
msgstr ""

#: ../../../library/subprocess.rst:333
msgid "Replacing Older Functions with the subprocess Module"
msgstr ""

#: ../../../library/subprocess.rst:335
msgid ""
"In this section, \"a ==> b\" means that b can be used as a replacement for a."
msgstr ""

#: ../../../library/subprocess.rst:339
msgid ""
"All functions in this section fail (more or less) silently if the executed "
"program cannot be found; this module raises an :exc:`OSError` exception."
msgstr ""

#: ../../../library/subprocess.rst:342
msgid ""
"In the following examples, we assume that the subprocess module is imported "
"with \"from subprocess import \\*\"."
msgstr ""

#: ../../../library/subprocess.rst:347
msgid "Replacing /bin/sh shell backquote"
msgstr ""

#: ../../../library/subprocess.rst:351
msgid ""
"output=`mycmd myarg`\n"
"==>\n"
"output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]"
msgstr ""

#: ../../../library/subprocess.rst:357
msgid "Replacing shell pipeline"
msgstr ""

#: ../../../library/subprocess.rst:361
msgid ""
"output=`dmesg | grep hda`\n"
"==>\n"
"p1 = Popen([\"dmesg\"], stdout=PIPE)\n"
"p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\n"
"output = p2.communicate()[0]"
msgstr ""

#: ../../../library/subprocess.rst:369
msgid "Replacing os.system()"
msgstr ""

#: ../../../library/subprocess.rst:373
msgid ""
"sts = os.system(\"mycmd\" + \" myarg\")\n"
"==>\n"
"p = Popen(\"mycmd\" + \" myarg\", shell=True)\n"
"sts = os.waitpid(p.pid, 0)"
msgstr ""

#: ../../../library/subprocess.rst:378
msgid "Notes:"
msgstr ""

#: ../../../library/subprocess.rst:380
msgid "Calling the program through the shell is usually not required."
msgstr ""

#: ../../../library/subprocess.rst:382
msgid ""
"It's easier to look at the :attr:`returncode` attribute than the exit status."
msgstr ""

#: ../../../library/subprocess.rst:384
msgid "A more realistic example would look like this::"
msgstr ""

#: ../../../library/subprocess.rst:386
msgid ""
"try:\n"
"    retcode = call(\"mycmd\" + \" myarg\", shell=True)\n"
"    if retcode < 0:\n"
"        print(\"Child was terminated by signal\", -retcode, file=sys."
"stderr)\n"
"    else:\n"
"        print(\"Child returned\", retcode, file=sys.stderr)\n"
"except OSError as e:\n"
"    print(\"Execution failed:\", e, file=sys.stderr)"
msgstr ""

#: ../../../library/subprocess.rst:397
msgid "Replacing the os.spawn family"
msgstr ""

#: ../../../library/subprocess.rst:399
msgid "P_NOWAIT example::"
msgstr ""

#: ../../../library/subprocess.rst:401
msgid ""
"pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n"
"==>\n"
"pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid"
msgstr ""

#: ../../../library/subprocess.rst:405
msgid "P_WAIT example::"
msgstr ""

#: ../../../library/subprocess.rst:407
msgid ""
"retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n"
"==>\n"
"retcode = call([\"/bin/mycmd\", \"myarg\"])"
msgstr ""

#: ../../../library/subprocess.rst:411
msgid "Vector example::"
msgstr ""

#: ../../../library/subprocess.rst:413
msgid ""
"os.spawnvp(os.P_NOWAIT, path, args)\n"
"==>\n"
"Popen([path] + args[1:])"
msgstr ""

#: ../../../library/subprocess.rst:417
msgid "Environment example::"
msgstr ""

#: ../../../library/subprocess.rst:419
msgid ""
"os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\n"
"==>\n"
"Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})"
msgstr ""

#: ../../../library/subprocess.rst:425
msgid "Replacing os.popen"
msgstr ""

#: ../../../library/subprocess.rst:429
msgid ""
"pipe = os.popen(cmd, 'r', bufsize)\n"
"==>\n"
"pipe = Popen(cmd, shell=True, bufsize=bufsize, stdout=PIPE).stdout"
msgstr ""

#: ../../../library/subprocess.rst:435
msgid ""
"pipe = os.popen(cmd, 'w', bufsize)\n"
"==>\n"
"pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin"
msgstr ""
