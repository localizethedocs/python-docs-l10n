# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/operator.rst:2
msgid ":mod:`operator` --- Standard operators as functions"
msgstr ""

#: ../../../library/operator.rst:15
msgid ""
"The :mod:`operator` module exports a set of functions implemented in C "
"corresponding to the intrinsic operators of Python.  For example, ``operator."
"add(x, y)`` is equivalent to the expression ``x+y``.  The function names are "
"those used for special class methods; variants without leading and trailing "
"``__`` are also provided for convenience."
msgstr ""

#: ../../../library/operator.rst:21
msgid ""
"The functions fall into categories that perform object comparisons, logical "
"operations, mathematical operations, sequence operations, and abstract type "
"tests."
msgstr ""

#: ../../../library/operator.rst:25
msgid ""
"The object comparison functions are useful for all objects, and are named "
"after the rich comparison operators they support:"
msgstr ""

#: ../../../library/operator.rst:42
msgid ""
"Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)`` "
"is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, "
"``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a !"
"= b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is "
"equivalent to ``a >= b``.  Note that these functions can return any value, "
"which may or may not be interpretable as a Boolean value.  See :ref:"
"`comparisons` for more information about rich comparisons."
msgstr ""

#: ../../../library/operator.rst:51
msgid ""
"The logical operations are also generally applicable to all objects, and "
"support truth tests, identity tests, and boolean operations:"
msgstr ""

#: ../../../library/operator.rst:58
msgid ""
"Return the outcome of :keyword:`not` *obj*.  (Note that there is no :meth:"
"`__not__` method for object instances; only the interpreter core defines "
"this operation.  The result is affected by the :meth:`__bool__` and :meth:"
"`__len__` methods.)"
msgstr ""

#: ../../../library/operator.rst:66
msgid ""
"Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This "
"is equivalent to using the :class:`bool` constructor."
msgstr ""

#: ../../../library/operator.rst:72
msgid "Return ``a is b``.  Tests object identity."
msgstr ""

#: ../../../library/operator.rst:77
msgid "Return ``a is not b``.  Tests object identity."
msgstr ""

#: ../../../library/operator.rst:80
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr ""

#: ../../../library/operator.rst:86
msgid "Return the absolute value of *obj*."
msgstr ""

#: ../../../library/operator.rst:92
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr ""

#: ../../../library/operator.rst:98
msgid "Return the bitwise and of *a* and *b*."
msgstr ""

#: ../../../library/operator.rst:104
msgid "Return ``a // b``."
msgstr ""

#: ../../../library/operator.rst:112
msgid ""
"Return the bitwise inverse of the number *obj*.  This is equivalent to "
"``~obj``."
msgstr ""

#: ../../../library/operator.rst:118
msgid "Return *a* shifted left by *b*."
msgstr ""

#: ../../../library/operator.rst:124
msgid "Return ``a % b``."
msgstr ""

#: ../../../library/operator.rst:130
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr ""

#: ../../../library/operator.rst:136
msgid "Return *obj* negated."
msgstr ""

#: ../../../library/operator.rst:142
msgid "Return the bitwise or of *a* and *b*."
msgstr ""

#: ../../../library/operator.rst:148
msgid "Return *obj* positive."
msgstr ""

#: ../../../library/operator.rst:154
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr ""

#: ../../../library/operator.rst:160
msgid "Return *a* shifted right by *b*."
msgstr ""

#: ../../../library/operator.rst:166
msgid "Return ``a - b``."
msgstr ""

#: ../../../library/operator.rst:172
msgid ""
"Return ``a / b`` where 2/3 is .66 rather than 0.  This is also known as "
"\"true\" division."
msgstr ""

#: ../../../library/operator.rst:179
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr ""

#: ../../../library/operator.rst:185
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr ""

#: ../../../library/operator.rst:188
msgid "Operations which work with sequences include:"
msgstr ""

#: ../../../library/operator.rst:193
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr ""

#: ../../../library/operator.rst:199
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""

#: ../../../library/operator.rst:204
msgid "Return the number of occurrences of *b* in *a*."
msgstr ""

#: ../../../library/operator.rst:210
msgid "Remove the value of *a* at index *b*."
msgstr ""

#: ../../../library/operator.rst:216
msgid "Return the value of *a* at index *b*."
msgstr ""

#: ../../../library/operator.rst:221
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr ""

#: ../../../library/operator.rst:227
msgid "Set the value of *a* at index *b* to *c*."
msgstr ""

#: ../../../library/operator.rst:230
msgid ""
"Many operations have an \"in-place\" version.  The following functions "
"provide a more primitive access to in-place operators than the usual syntax "
"does; for example, the :term:`statement` ``x += y`` is equivalent to ``x = "
"operator.iadd(x, y)``.  Another way to put it is to say that ``z = operator."
"iadd(x, y)`` is equivalent to the compound statement ``z = x; z += y``."
msgstr ""

#: ../../../library/operator.rst:240
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr ""

#: ../../../library/operator.rst:246
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr ""

#: ../../../library/operator.rst:252
msgid ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""

#: ../../../library/operator.rst:258
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr ""

#: ../../../library/operator.rst:264
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr ""

#: ../../../library/operator.rst:270
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr ""

#: ../../../library/operator.rst:276
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr ""

#: ../../../library/operator.rst:282
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr ""

#: ../../../library/operator.rst:288
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr ""

#: ../../../library/operator.rst:294
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr ""

#: ../../../library/operator.rst:300
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr ""

#: ../../../library/operator.rst:306
msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b``."
msgstr ""

#: ../../../library/operator.rst:312
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr ""

#: ../../../library/operator.rst:314
msgid ""
"Example: Build a dictionary that maps the ordinals from ``0`` to ``255`` to "
"their character equivalents."
msgstr ""

#: ../../../library/operator.rst:324
msgid ""
"The :mod:`operator` module also defines tools for generalized attribute and "
"item lookups.  These are useful for making fast field extractors as "
"arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or "
"other functions that expect a function argument."
msgstr ""

#: ../../../library/operator.rst:332
msgid ""
"Return a callable object that fetches *attr* from its operand. If more than "
"one attribute is requested, returns a tuple of attributes. After, ``f = "
"attrgetter('name')``, the call ``f(b)`` returns ``b.name``.  After, ``f = "
"attrgetter('name', 'date')``, the call ``f(b)`` returns ``(b.name, b.date)``."
msgstr ""

#: ../../../library/operator.rst:338
msgid ""
"The attribute names can also contain dots; after ``f = attrgetter('date."
"month')``, the call ``f(b)`` returns ``b.date.month``."
msgstr ""

#: ../../../library/operator.rst:343
msgid ""
"Return a callable object that fetches *item* from its operand using the "
"operand's :meth:`__getitem__` method.  If multiple items are specified, "
"returns a tuple of lookup values.  Equivalent to::"
msgstr ""

#: ../../../library/operator.rst:357
msgid ""
"The items can be any type accepted by the operand's :meth:`__getitem__` "
"method.  Dictionaries accept any hashable value.  Lists, tuples, and strings "
"accept an index or a slice:"
msgstr ""

#: ../../../library/operator.rst:369
msgid ""
"Example of using :func:`itemgetter` to retrieve specific fields from a tuple "
"record:"
msgstr ""

#: ../../../library/operator.rst:382
msgid ""
"Return a callable object that calls the method *name* on its operand.  If "
"additional arguments and/or keyword arguments are given, they will be given "
"to the method as well.  After ``f = methodcaller('name')``, the call "
"``f(b)`` returns ``b.name()``.  After ``f = methodcaller('name', 'foo', "
"bar=1)``, the call ``f(b)`` returns ``b.name('foo', bar=1)``."
msgstr ""

#: ../../../library/operator.rst:392
msgid "Mapping Operators to Functions"
msgstr ""

#: ../../../library/operator.rst:394
msgid ""
"This table shows how abstract operations correspond to operator symbols in "
"the Python syntax and the functions in the :mod:`operator` module."
msgstr ""

#: ../../../library/operator.rst:398
msgid "Operation"
msgstr ""

#: ../../../library/operator.rst:398
msgid "Syntax"
msgstr ""

#: ../../../library/operator.rst:398
msgid "Function"
msgstr ""

#: ../../../library/operator.rst:400
msgid "Addition"
msgstr ""

#: ../../../library/operator.rst:400
msgid "``a + b``"
msgstr ""

#: ../../../library/operator.rst:400
msgid "``add(a, b)``"
msgstr ""

#: ../../../library/operator.rst:402
msgid "Concatenation"
msgstr ""

#: ../../../library/operator.rst:402
msgid "``seq1 + seq2``"
msgstr ""

#: ../../../library/operator.rst:402
msgid "``concat(seq1, seq2)``"
msgstr ""

#: ../../../library/operator.rst:404
msgid "Containment Test"
msgstr ""

#: ../../../library/operator.rst:404
msgid "``obj in seq``"
msgstr ""

#: ../../../library/operator.rst:404
msgid "``contains(seq, obj)``"
msgstr ""

#: ../../../library/operator.rst:406 ../../../library/operator.rst:408
msgid "Division"
msgstr ""

#: ../../../library/operator.rst:406
msgid "``a / b``"
msgstr ""

#: ../../../library/operator.rst:406
msgid "``truediv(a, b)``"
msgstr ""

#: ../../../library/operator.rst:408
msgid "``a // b``"
msgstr ""

#: ../../../library/operator.rst:408
msgid "``floordiv(a, b)``"
msgstr ""

#: ../../../library/operator.rst:410
msgid "Bitwise And"
msgstr ""

#: ../../../library/operator.rst:410
msgid "``a & b``"
msgstr ""

#: ../../../library/operator.rst:410
msgid "``and_(a, b)``"
msgstr ""

#: ../../../library/operator.rst:412
msgid "Bitwise Exclusive Or"
msgstr ""

#: ../../../library/operator.rst:412
msgid "``a ^ b``"
msgstr ""

#: ../../../library/operator.rst:412
msgid "``xor(a, b)``"
msgstr ""

#: ../../../library/operator.rst:414
msgid "Bitwise Inversion"
msgstr ""

#: ../../../library/operator.rst:414
msgid "``~ a``"
msgstr ""

#: ../../../library/operator.rst:414
msgid "``invert(a)``"
msgstr ""

#: ../../../library/operator.rst:416
msgid "Bitwise Or"
msgstr ""

#: ../../../library/operator.rst:416
msgid "``a | b``"
msgstr ""

#: ../../../library/operator.rst:416
msgid "``or_(a, b)``"
msgstr ""

#: ../../../library/operator.rst:418
msgid "Exponentiation"
msgstr ""

#: ../../../library/operator.rst:418
msgid "``a ** b``"
msgstr ""

#: ../../../library/operator.rst:418
msgid "``pow(a, b)``"
msgstr ""

#: ../../../library/operator.rst:420 ../../../library/operator.rst:422
msgid "Identity"
msgstr ""

#: ../../../library/operator.rst:420
msgid "``a is b``"
msgstr ""

#: ../../../library/operator.rst:420
msgid "``is_(a, b)``"
msgstr ""

#: ../../../library/operator.rst:422
msgid "``a is not b``"
msgstr ""

#: ../../../library/operator.rst:422
msgid "``is_not(a, b)``"
msgstr ""

#: ../../../library/operator.rst:424
msgid "Indexed Assignment"
msgstr ""

#: ../../../library/operator.rst:424
msgid "``obj[k] = v``"
msgstr ""

#: ../../../library/operator.rst:424
msgid "``setitem(obj, k, v)``"
msgstr ""

#: ../../../library/operator.rst:426
msgid "Indexed Deletion"
msgstr ""

#: ../../../library/operator.rst:426
msgid "``del obj[k]``"
msgstr ""

#: ../../../library/operator.rst:426
msgid "``delitem(obj, k)``"
msgstr ""

#: ../../../library/operator.rst:428
msgid "Indexing"
msgstr ""

#: ../../../library/operator.rst:428
msgid "``obj[k]``"
msgstr ""

#: ../../../library/operator.rst:428
msgid "``getitem(obj, k)``"
msgstr ""

#: ../../../library/operator.rst:430
msgid "Left Shift"
msgstr ""

#: ../../../library/operator.rst:430
msgid "``a << b``"
msgstr ""

#: ../../../library/operator.rst:430
msgid "``lshift(a, b)``"
msgstr ""

#: ../../../library/operator.rst:432
msgid "Modulo"
msgstr ""

#: ../../../library/operator.rst:432
msgid "``a % b``"
msgstr ""

#: ../../../library/operator.rst:432
msgid "``mod(a, b)``"
msgstr ""

#: ../../../library/operator.rst:434
msgid "Multiplication"
msgstr ""

#: ../../../library/operator.rst:434
msgid "``a * b``"
msgstr ""

#: ../../../library/operator.rst:434
msgid "``mul(a, b)``"
msgstr ""

#: ../../../library/operator.rst:436
msgid "Negation (Arithmetic)"
msgstr ""

#: ../../../library/operator.rst:436
msgid "``- a``"
msgstr ""

#: ../../../library/operator.rst:436
msgid "``neg(a)``"
msgstr ""

#: ../../../library/operator.rst:438
msgid "Negation (Logical)"
msgstr ""

#: ../../../library/operator.rst:438
msgid "``not a``"
msgstr ""

#: ../../../library/operator.rst:438
msgid "``not_(a)``"
msgstr ""

#: ../../../library/operator.rst:440
msgid "Right Shift"
msgstr ""

#: ../../../library/operator.rst:440
msgid "``a >> b``"
msgstr ""

#: ../../../library/operator.rst:440
msgid "``rshift(a, b)``"
msgstr ""

#: ../../../library/operator.rst:442
msgid "String Formatting"
msgstr ""

#: ../../../library/operator.rst:442
msgid "``s % obj``"
msgstr ""

#: ../../../library/operator.rst:442
msgid "``mod(s, obj)``"
msgstr ""

#: ../../../library/operator.rst:444
msgid "Subtraction"
msgstr ""

#: ../../../library/operator.rst:444
msgid "``a - b``"
msgstr ""

#: ../../../library/operator.rst:444
msgid "``sub(a, b)``"
msgstr ""

#: ../../../library/operator.rst:446
msgid "Truth Test"
msgstr ""

#: ../../../library/operator.rst:446
msgid "``obj``"
msgstr ""

#: ../../../library/operator.rst:446
msgid "``truth(obj)``"
msgstr ""

#: ../../../library/operator.rst:448 ../../../library/operator.rst:450
#: ../../../library/operator.rst:456 ../../../library/operator.rst:458
msgid "Ordering"
msgstr ""

#: ../../../library/operator.rst:448
msgid "``a < b``"
msgstr ""

#: ../../../library/operator.rst:448
msgid "``lt(a, b)``"
msgstr ""

#: ../../../library/operator.rst:450
msgid "``a <= b``"
msgstr ""

#: ../../../library/operator.rst:450
msgid "``le(a, b)``"
msgstr ""

#: ../../../library/operator.rst:452
msgid "Equality"
msgstr ""

#: ../../../library/operator.rst:452
msgid "``a == b``"
msgstr ""

#: ../../../library/operator.rst:452
msgid "``eq(a, b)``"
msgstr ""

#: ../../../library/operator.rst:454
msgid "Difference"
msgstr ""

#: ../../../library/operator.rst:454
msgid "``a != b``"
msgstr ""

#: ../../../library/operator.rst:454
msgid "``ne(a, b)``"
msgstr ""

#: ../../../library/operator.rst:456
msgid "``a >= b``"
msgstr ""

#: ../../../library/operator.rst:456
msgid "``ge(a, b)``"
msgstr ""

#: ../../../library/operator.rst:458
msgid "``a > b``"
msgstr ""

#: ../../../library/operator.rst:458
msgid "``gt(a, b)``"
msgstr ""
