# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/mimetypes.rst:3
msgid ":mod:`mimetypes` --- Map filenames to MIME types"
msgstr ""

#: ../../../library/mimetypes.rst:12
msgid ""
"The :mod:`mimetypes` module converts between a filename or URL and the MIME "
"type associated with the filename extension.  Conversions are provided from "
"filename to MIME type and from MIME type to filename extension; encodings "
"are not supported for the latter conversion."
msgstr ""

#: ../../../library/mimetypes.rst:17
msgid ""
"The module provides one class and a number of convenience functions. The "
"functions are the normal interface to this module, but some applications may "
"be interested in the class as well."
msgstr ""

#: ../../../library/mimetypes.rst:21
msgid ""
"The functions described below provide the primary interface for this "
"module.  If the module has not been initialized, they will call :func:`init` "
"if they rely on the information :func:`init` sets up."
msgstr ""

#: ../../../library/mimetypes.rst:30
msgid ""
"Guess the type of a file based on its filename or URL, given by *filename*.  "
"The return value is a tuple ``(type, encoding)`` where *type* is ``None`` if "
"the type can't be guessed (missing or unknown suffix) or a string of the "
"form ``'type/subtype'``, usable for a MIME :mailheader:`content-type` header."
msgstr ""

#: ../../../library/mimetypes.rst:35
msgid ""
"*encoding* is ``None`` for no encoding or the name of the program used to "
"encode (e.g. :program:`compress` or :program:`gzip`). The encoding is "
"suitable for use as a :mailheader:`Content-Encoding` header, *not* as a :"
"mailheader:`Content-Transfer-Encoding` header. The mappings are table "
"driven. Encoding suffixes are case sensitive; type suffixes are first tried "
"case sensitively, then case insensitively."
msgstr ""

#: ../../../library/mimetypes.rst:42
msgid ""
"Optional *strict* is a flag specifying whether the list of known MIME types "
"is limited to only the official types `registered with IANA <http://www.iana."
"org/assignments/media-types/>`_ are recognized. When *strict* is true (the "
"default), only the IANA types are supported; when *strict* is false, some "
"additional non-standard but commonly used MIME types are also recognized."
msgstr ""

#: ../../../library/mimetypes.rst:52
msgid ""
"Guess the extensions for a file based on its MIME type, given by *type*. The "
"return value is a list of strings giving all possible filename extensions, "
"including the leading dot (``'.'``).  The extensions are not guaranteed to "
"have been associated with any particular data stream, but would be mapped to "
"the MIME type *type* by :func:`guess_type`."
msgstr ""

#: ../../../library/mimetypes.rst:58 ../../../library/mimetypes.rst:70
msgid ""
"Optional *strict* has the same meaning as with the :func:`guess_type` "
"function."
msgstr ""

#: ../../../library/mimetypes.rst:63
msgid ""
"Guess the extension for a file based on its MIME type, given by *type*. The "
"return value is a string giving a filename extension, including the leading "
"dot (``'.'``).  The extension is not guaranteed to have been associated with "
"any particular data stream, but would be mapped to the  MIME type *type* by :"
"func:`guess_type`.  If no extension can be guessed for *type*, ``None`` is "
"returned."
msgstr ""

#: ../../../library/mimetypes.rst:72
msgid ""
"Some additional functions and data items are available for controlling the "
"behavior of the module."
msgstr ""

#: ../../../library/mimetypes.rst:78
msgid ""
"Initialize the internal data structures.  If given, *files* must be a "
"sequence of file names which should be used to augment the default type "
"map.  If omitted, the file names to use are taken from :const:`knownfiles`.  "
"Each file named in *files* or :const:`knownfiles` takes precedence over "
"those named before it. Calling :func:`init` repeatedly is allowed."
msgstr ""

#: ../../../library/mimetypes.rst:87
msgid ""
"Load the type map given in the file *filename*, if it exists.  The  type map "
"is returned as a dictionary mapping filename extensions, including the "
"leading dot (``'.'``), to strings of the form ``'type/subtype'``.  If the "
"file *filename* does not exist or cannot be read, ``None`` is returned."
msgstr ""

#: ../../../library/mimetypes.rst:95
msgid ""
"Add a mapping from the mimetype *type* to the extension *ext*. When the "
"extension is already known, the new type will replace the old one. When the "
"type is already known the extension will be added to the list of known "
"extensions."
msgstr ""

#: ../../../library/mimetypes.rst:99
msgid ""
"When *strict* is True (the default), the mapping will added to the official "
"MIME types, otherwise to the non-standard ones."
msgstr ""

#: ../../../library/mimetypes.rst:105
msgid ""
"Flag indicating whether or not the global data structures have been "
"initialized. This is set to true by :func:`init`."
msgstr ""

#: ../../../library/mimetypes.rst:113
msgid ""
"List of type map file names commonly installed.  These files are typically "
"named :file:`mime.types` and are installed in different locations by "
"different packages."
msgstr ""

#: ../../../library/mimetypes.rst:120
msgid ""
"Dictionary mapping suffixes to suffixes.  This is used to allow recognition "
"of encoded files for which the encoding and the type are indicated by the "
"same extension.  For example, the :file:`.tgz` extension is mapped to :file:"
"`.tar.gz` to allow the encoding and type to be recognized separately."
msgstr ""

#: ../../../library/mimetypes.rst:128
msgid "Dictionary mapping filename extensions to encoding types."
msgstr ""

#: ../../../library/mimetypes.rst:133
msgid "Dictionary mapping filename extensions to MIME types."
msgstr ""

#: ../../../library/mimetypes.rst:138
msgid ""
"Dictionary mapping filename extensions to non-standard, but commonly found "
"MIME types."
msgstr ""

#: ../../../library/mimetypes.rst:141
msgid ""
"The :class:`MimeTypes` class may be useful for applications which may want "
"more than one MIME-type database:"
msgstr ""

#: ../../../library/mimetypes.rst:147
msgid ""
"This class represents a MIME-types database.  By default, it provides access "
"to the same database as the rest of this module. The initial database is a "
"copy of that provided by the module, and may be extended by loading "
"additional :file:`mime.types`\\ -style files into the database using the :"
"meth:`read` or :meth:`readfp` methods.  The mapping dictionaries may also be "
"cleared before loading additional data if the default data is not desired."
msgstr ""

#: ../../../library/mimetypes.rst:154
msgid ""
"The optional *filenames* parameter can be used to cause additional files to "
"be loaded \"on top\" of the default database."
msgstr ""

#: ../../../library/mimetypes.rst:158
msgid "An example usage of the module::"
msgstr ""

#: ../../../library/mimetypes.rst:160
msgid ""
">>> import mimetypes\n"
">>> mimetypes.init()\n"
">>> mimetypes.knownfiles\n"
"['/etc/mime.types', '/etc/httpd/mime.types', ... ]\n"
">>> mimetypes.suffix_map['.tgz']\n"
"'.tar.gz'\n"
">>> mimetypes.encodings_map['.gz']\n"
"'gzip'\n"
">>> mimetypes.types_map['.tgz']\n"
"'application/x-tar-gz'"
msgstr ""

#: ../../../library/mimetypes.rst:175
msgid "MimeTypes Objects"
msgstr ""

#: ../../../library/mimetypes.rst:177
msgid ""
":class:`MimeTypes` instances provide an interface which is very like that of "
"the :mod:`mimetypes` module."
msgstr ""

#: ../../../library/mimetypes.rst:183
msgid ""
"Dictionary mapping suffixes to suffixes.  This is used to allow recognition "
"of encoded files for which the encoding and the type are indicated by the "
"same extension.  For example, the :file:`.tgz` extension is mapped to :file:"
"`.tar.gz` to allow the encoding and type to be recognized separately.  This "
"is initially a copy of the global ``suffix_map`` defined in the module."
msgstr ""

#: ../../../library/mimetypes.rst:192
msgid ""
"Dictionary mapping filename extensions to encoding types.  This is initially "
"a copy of the global ``encodings_map`` defined in the module."
msgstr ""

#: ../../../library/mimetypes.rst:198
msgid ""
"Dictionary mapping filename extensions to MIME types.  This is initially a "
"copy of the global ``types_map`` defined in the module."
msgstr ""

#: ../../../library/mimetypes.rst:204
msgid ""
"Dictionary mapping filename extensions to non-standard, but commonly found "
"MIME types.  This is initially a copy of the global ``common_types`` defined "
"in the module."
msgstr ""

#: ../../../library/mimetypes.rst:211
msgid ""
"Similar to the :func:`guess_extension` function, using the tables stored as "
"part of the object."
msgstr ""

#: ../../../library/mimetypes.rst:217
msgid ""
"Similar to the :func:`guess_type` function, using the tables stored as part "
"of the object."
msgstr ""

#: ../../../library/mimetypes.rst:223
msgid ""
"Load MIME information from a file named *path*.  This uses :meth:`readfp` to "
"parse the file."
msgstr ""

#: ../../../library/mimetypes.rst:229
msgid ""
"Load MIME type information from an open file.  The file must have the format "
"of the standard :file:`mime.types` files."
msgstr ""

#: ../../../library/mimetypes.rst:10 ../../../library/mimetypes.rst:28
msgid "MIME"
msgstr ""

#: ../../../library/mimetypes.rst:10
msgid "content type"
msgstr ""

#: ../../../library/mimetypes.rst:28
msgid "headers"
msgstr ""

#: ../../../library/mimetypes.rst:111
msgid "file"
msgstr ""

#: ../../../library/mimetypes.rst:111
msgid "mime.types"
msgstr ""
