# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howto/cporting.rst:7
msgid "Porting Extension Modules to 3.0"
msgstr ""

#: ../../../howto/cporting.rst:0
msgid "author"
msgstr ""

#: ../../../howto/cporting.rst:9
msgid "Benjamin Peterson"
msgstr ""

#: ../../../howto/cporting.rst:None
msgid "Abstract"
msgstr ""

#: ../../../howto/cporting.rst:14
msgid ""
"Although changing the C-API was not one of Python 3.0's objectives, the many "
"Python level changes made leaving 2.x's API intact impossible.  In fact, "
"some changes such as :func:`int` and :func:`long` unification are more "
"obvious on the C level.  This document endeavors to document "
"incompatibilities and how they can be worked around."
msgstr ""

#: ../../../howto/cporting.rst:22
msgid "Conditional compilation"
msgstr ""

#: ../../../howto/cporting.rst:24
msgid ""
"The easiest way to compile only some code for 3.0 is to check if :cmacro:"
"`PY_MAJOR_VERSION` is greater than or equal to 3. ::"
msgstr ""

#: ../../../howto/cporting.rst:31
msgid ""
"API functions that are not present can be aliased to their equivalents "
"within conditional blocks."
msgstr ""

#: ../../../howto/cporting.rst:36
msgid "Changes to Object APIs"
msgstr ""

#: ../../../howto/cporting.rst:38
msgid ""
"Python 3.0 merged together some types with similar functions while cleanly "
"separating others."
msgstr ""

#: ../../../howto/cporting.rst:43
msgid "str/unicode Unification"
msgstr ""

#: ../../../howto/cporting.rst:46
msgid ""
"Python 3.0's :func:`str` (``PyString_*`` functions in C) type is equivalent "
"to 2.x's :func:`unicode` (``PyUnicode_*``).  The old 8-bit string type has "
"become :func:`bytes`.  Python 2.6 and later provide a compatibility header, :"
"file:`bytesobject.h`, mapping ``PyBytes`` names to ``PyString`` ones.  For "
"best compatibility with 3.0, :ctype:`PyUnicode` should be used for textual "
"data and :ctype:`PyBytes` for binary data.  It's also important to remember "
"that :ctype:`PyBytes` and :ctype:`PyUnicode` in 3.0 are not interchangeable "
"like :ctype:`PyString` and :ctype:`PyString` are in 2.x.  The following "
"example shows best practices with regards to :ctype:`PyUnicode`, :ctype:"
"`PyString`, and :ctype:`PyBytes`. ::"
msgstr ""

#: ../../../howto/cporting.rst:95
msgid "long/int Unification"
msgstr ""

#: ../../../howto/cporting.rst:97
msgid ""
"In Python 3.0, there is only one integer type.  It is called :func:`int` on "
"the Python level, but actually corresponds to 2.x's :func:`long` type.  In "
"the C-API, ``PyInt_*`` functions are replaced by their ``PyLong_*`` "
"neighbors.  The best course of action here is using the ``PyInt_*`` "
"functions aliased to ``PyLong_*`` found in :file:`intobject.h`.  The the "
"abstract ``PyNumber_*`` APIs can also be used in some cases. ::"
msgstr ""

#: ../../../howto/cporting.rst:121
msgid "Module initialization and state"
msgstr ""

#: ../../../howto/cporting.rst:123
msgid ""
"Python 3.0 has a revamped extension module initialization system.  (See PEP :"
"pep:`3121`.)  Instead of storing module state in globals, they should be "
"stored in an interpreter specific structure.  Creating modules that act "
"correctly in both 2.x and 3.0 is tricky.  The following simple example "
"demonstrates how. ::"
msgstr ""

#: ../../../howto/cporting.rst:213
msgid "Other options"
msgstr ""

#: ../../../howto/cporting.rst:215
msgid ""
"If you are writing a new extension module, you might consider `Cython "
"<http://www.cython.org>`_.  It translates a Python-like language to C.  The "
"extension modules it creates are compatible with Python 3.x and 2.x."
msgstr ""
