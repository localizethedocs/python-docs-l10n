# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr ""

#: ../../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python knows the "
"usual control flow statements known from other languages, with some twists."
msgstr ""

#: ../../../tutorial/controlflow.rst:14
msgid ":keyword:`if` Statements"
msgstr ""

#: ../../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""

#: ../../../tutorial/controlflow.rst:19
msgid ""
">>> x = int(input(\"Please enter an integer: \"))\n"
"Please enter an integer: 42\n"
">>> if x < 0:\n"
"...      x = 0\n"
"...      print('Negative changed to zero')\n"
"... elif x == 0:\n"
"...      print('Zero')\n"
"... elif x == 1:\n"
"...      print('Single')\n"
"... else:\n"
"...      print('More')\n"
"...\n"
"More"
msgstr ""

#: ../../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`elif`' is short for 'else if', and "
"is useful to avoid excessive indentation.  An  :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`elif` ... sequence is a substitute for the ``switch`` "
"or ``case`` statements found in other languages."
msgstr ""

#: ../../../tutorial/controlflow.rst:43
msgid ":keyword:`for` Statements"
msgstr ""

#: ../../../tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`for` statement iterates over the items of any sequence (a list or a "
"string), in the order that they appear in the sequence.  For example (no pun "
"intended):"
msgstr ""

#: ../../../tutorial/controlflow.rst:60
msgid ""
">>> # Measure some strings:\n"
"... a = ['cat', 'window', 'defenestrate']\n"
">>> for x in a:\n"
"...     print(x, len(x))\n"
"...\n"
"cat 3\n"
"window 6\n"
"defenestrate 12"
msgstr ""

#: ../../../tutorial/controlflow.rst:69
msgid ""
"It is not safe to modify the sequence being iterated over in the loop (this "
"can only happen for mutable sequence types, such as lists).  If you need to "
"modify the list you are iterating over (for example, to duplicate selected "
"items) you must iterate over a copy.  The slice notation makes this "
"particularly convenient::"
msgstr ""

#: ../../../tutorial/controlflow.rst:75
msgid ""
">>> for x in a[:]: # make a slice copy of the entire list\n"
"...    if len(x) > 6: a.insert(0, x)\n"
"...\n"
">>> a\n"
"['defenestrate', 'cat', 'window', 'defenestrate']"
msgstr ""

#: ../../../tutorial/controlflow.rst:85
msgid "The :func:`range` Function"
msgstr ""

#: ../../../tutorial/controlflow.rst:87
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""

#: ../../../tutorial/controlflow.rst:91
msgid ""
">>> for i in range(5):\n"
"...     print(i)\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4"
msgstr ""

#: ../../../tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated list; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""

#: ../../../tutorial/controlflow.rst:107
msgid ""
"range(5, 10)\n"
"   5 through 9\n"
"\n"
"range(0, 10, 3)\n"
"   0, 3, 6, 9\n"
"\n"
"range(-10, -100, -30)\n"
"  -10, -40, -70"
msgstr ""

#: ../../../tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""

#: ../../../tutorial/controlflow.rst:119
msgid ""
">>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n"
">>> for i in range(len(a)):\n"
"...     print(i, a[i])\n"
"...\n"
"0 Mary\n"
"1 had\n"
"2 a\n"
"3 little\n"
"4 lamb"
msgstr ""

#: ../../../tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""

#: ../../../tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr ""

#: ../../../tutorial/controlflow.rst:134
msgid ""
">>> print(range(10))\n"
"range(0, 10)"
msgstr ""

#: ../../../tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""

#: ../../../tutorial/controlflow.rst:142
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the :"
"keyword:`for` statement is such an *iterator*. The function :func:`list` is "
"another; it creates lists from iterables::"
msgstr ""

#: ../../../tutorial/controlflow.rst:149
msgid ""
">>> list(range(5))\n"
"[0, 1, 2, 3, 4]"
msgstr ""

#: ../../../tutorial/controlflow.rst:152
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"argument."
msgstr ""

#: ../../../tutorial/controlflow.rst:158
msgid ""
":keyword:`break` and :keyword:`continue` Statements, and :keyword:`else` "
"Clauses on Loops"
msgstr ""

#: ../../../tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the smallest "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""

#: ../../../tutorial/controlflow.rst:163
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop."
msgstr ""

#: ../../../tutorial/controlflow.rst:166
msgid ""
"Loop statements may have an ``else`` clause; it is executed when the loop "
"terminates through exhaustion of the list (with :keyword:`for`) or when the "
"condition becomes false (with :keyword:`while`), but not when the loop is "
"terminated by a :keyword:`break` statement.  This is exemplified by the "
"following loop, which searches for prime numbers::"
msgstr ""

#: ../../../tutorial/controlflow.rst:172
msgid ""
">>> for n in range(2, 10):\n"
"...     for x in range(2, n):\n"
"...         if n % x == 0:\n"
"...             print(n, 'equals', x, '*', n//x)\n"
"...             break\n"
"...     else:\n"
"...         # loop fell through without finding a factor\n"
"...         print(n, 'is a prime number')\n"
"...\n"
"2 is a prime number\n"
"3 is a prime number\n"
"4 equals 2 * 2\n"
"5 is a prime number\n"
"6 equals 2 * 3\n"
"7 is a prime number\n"
"8 equals 2 * 4\n"
"9 equals 3 * 3"
msgstr ""

#: ../../../tutorial/controlflow.rst:194
msgid ":keyword:`pass` Statements"
msgstr ""

#: ../../../tutorial/controlflow.rst:196
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""

#: ../../../tutorial/controlflow.rst:199
msgid ""
">>> while True:\n"
"...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n"
"..."
msgstr ""

#: ../../../tutorial/controlflow.rst:203
msgid "This is commonly used for creating minimal classes::"
msgstr ""

#: ../../../tutorial/controlflow.rst:205
msgid ""
">>> class MyEmptyClass:\n"
"...     pass\n"
"..."
msgstr ""

#: ../../../tutorial/controlflow.rst:209
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`pass` is silently "
"ignored::"
msgstr ""

#: ../../../tutorial/controlflow.rst:213
msgid ""
">>> def initlog(*args):\n"
"...     pass   # Remember to implement this!\n"
"..."
msgstr ""

#: ../../../tutorial/controlflow.rst:220
msgid "Defining Functions"
msgstr ""

#: ../../../tutorial/controlflow.rst:222
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""

#: ../../../tutorial/controlflow.rst:225
msgid ""
">>> def fib(n):    # write Fibonacci series up to n\n"
"...     \"\"\"Print a Fibonacci series up to n.\"\"\"\n"
"...     a, b = 0, 1\n"
"...     while b < n:\n"
"...         print(b, end=' ')\n"
"...         a, b = b, a+b\n"
"...     print()\n"
"...\n"
">>> # Now call the function we just defined:\n"
"... fib(2000)\n"
"1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597"
msgstr ""

#: ../../../tutorial/controlflow.rst:242
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""

#: ../../../tutorial/controlflow.rst:247
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""

#: ../../../tutorial/controlflow.rst:254
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables cannot be directly "
"assigned a value within a function (unless named in a :keyword:`global` "
"statement), although they may be referenced."
msgstr ""

#: ../../../tutorial/controlflow.rst:263
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""

#: ../../../tutorial/controlflow.rst:269
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""

#: ../../../tutorial/controlflow.rst:275
msgid ""
">>> fib\n"
"<function fib at 10042ed0>\n"
">>> f = fib\n"
">>> f(100)\n"
"1 1 2 3 5 8 13 21 34 55 89"
msgstr ""

#: ../../../tutorial/controlflow.rst:281
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""

#: ../../../tutorial/controlflow.rst:288
msgid ""
">>> fib(0)\n"
">>> print(fib(0))\n"
"None"
msgstr ""

#: ../../../tutorial/controlflow.rst:292
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""

#: ../../../tutorial/controlflow.rst:295
msgid ""
">>> def fib2(n): # return Fibonacci series up to n\n"
"...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n"
"...     result = []\n"
"...     a, b = 0, 1\n"
"...     while b < n:\n"
"...         result.append(b)    # see below\n"
"...         a, b = b, a+b\n"
"...     return result\n"
"...\n"
">>> f100 = fib2(100)    # call it\n"
">>> f100                # write the result\n"
"[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
msgstr ""

#: ../../../tutorial/controlflow.rst:308
msgid "This example, as usual, demonstrates some new Python features:"
msgstr ""

#: ../../../tutorial/controlflow.rst:310
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""

#: ../../../tutorial/controlflow.rst:314
msgid ""
"The statement ``result.append(b)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, as "
"discussed later in this tutorial.) The method :meth:`append` shown in the "
"example is defined for list objects; it adds a new element at the end of the "
"list.  In this example it is equivalent to ``result = result + [b]``, but "
"more efficient."
msgstr ""

#: ../../../tutorial/controlflow.rst:329
msgid "More on Defining Functions"
msgstr ""

#: ../../../tutorial/controlflow.rst:331
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""

#: ../../../tutorial/controlflow.rst:338
msgid "Default Argument Values"
msgstr ""

#: ../../../tutorial/controlflow.rst:340
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""

#: ../../../tutorial/controlflow.rst:344
msgid ""
"def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):\n"
"    while True:\n"
"        ok = input(prompt)\n"
"        if ok in ('y', 'ye', 'yes'): return True\n"
"        if ok in ('n', 'no', 'nop', 'nope'): return False\n"
"        retries = retries - 1\n"
"        if retries < 0:\n"
"            raise IOError('refusenik user')\n"
"        print(complaint)"
msgstr ""

#: ../../../tutorial/controlflow.rst:354
msgid ""
"This function can be called either like this: ``ask_ok('Do you really want "
"to quit?')`` or like this: ``ask_ok('OK to overwrite the file?', 2)``."
msgstr ""

#: ../../../tutorial/controlflow.rst:357
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""

#: ../../../tutorial/controlflow.rst:360
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""

#: ../../../tutorial/controlflow.rst:363
msgid ""
"i = 5\n"
"\n"
"def f(arg=i):\n"
"    print(arg)\n"
"\n"
"i = 6\n"
"f()"
msgstr ""

#: ../../../tutorial/controlflow.rst:371
msgid "will print ``5``."
msgstr ""

#: ../../../tutorial/controlflow.rst:373
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""

#: ../../../tutorial/controlflow.rst:378
msgid ""
"def f(a, L=[]):\n"
"    L.append(a)\n"
"    return L\n"
"\n"
"print(f(1))\n"
"print(f(2))\n"
"print(f(3))"
msgstr ""

#: ../../../tutorial/controlflow.rst:386
msgid "This will print ::"
msgstr ""

#: ../../../tutorial/controlflow.rst:388
msgid ""
"[1]\n"
"[1, 2]\n"
"[1, 2, 3]"
msgstr ""

#: ../../../tutorial/controlflow.rst:392
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""

#: ../../../tutorial/controlflow.rst:395
msgid ""
"def f(a, L=None):\n"
"    if L is None:\n"
"        L = []\n"
"    L.append(a)\n"
"    return L"
msgstr ""

#: ../../../tutorial/controlflow.rst:405
msgid "Keyword Arguments"
msgstr ""

#: ../../../tutorial/controlflow.rst:407
msgid ""
"Functions can also be called using keyword arguments of the form ``keyword = "
"value``.  For instance, the following function::"
msgstr ""

#: ../../../tutorial/controlflow.rst:410
msgid ""
"def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n"
"    print(\"-- This parrot wouldn't\", action, end=' ')\n"
"    print(\"if you put\", voltage, \"volts through it.\")\n"
"    print(\"-- Lovely plumage, the\", type)\n"
"    print(\"-- It's\", state, \"!\")"
msgstr ""

#: ../../../tutorial/controlflow.rst:416
msgid "could be called in any of the following ways::"
msgstr ""

#: ../../../tutorial/controlflow.rst:418
msgid ""
"parrot(1000)\n"
"parrot(action = 'VOOOOOM', voltage = 1000000)\n"
"parrot('a thousand', state = 'pushing up the daisies')\n"
"parrot('a million', 'bereft of life', 'jump')"
msgstr ""

#: ../../../tutorial/controlflow.rst:423
msgid "but the following calls would all be invalid::"
msgstr ""

#: ../../../tutorial/controlflow.rst:425
msgid ""
"parrot()                     # required argument missing\n"
"parrot(voltage=5.0, 'dead')  # non-keyword argument following keyword\n"
"parrot(110, voltage=220)     # duplicate value for argument\n"
"parrot(actor='John Cleese')  # unknown keyword"
msgstr ""

#: ../../../tutorial/controlflow.rst:430
msgid ""
"In general, an argument list must have any positional arguments followed by "
"any keyword arguments, where the keywords must be chosen from the formal "
"parameter names.  It's not important whether a formal parameter has a "
"default value or not.  No argument may receive a value more than once --- "
"formal parameter names corresponding to positional arguments cannot be used "
"as keywords in the same calls. Here's an example that fails due to this "
"restriction::"
msgstr ""

#: ../../../tutorial/controlflow.rst:437
msgid ""
">>> def function(a):\n"
"...     pass\n"
"...\n"
">>> function(0, a=0)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"TypeError: function() got multiple values for keyword argument 'a'"
msgstr ""

#: ../../../tutorial/controlflow.rst:445
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a tuple containing the positional arguments "
"beyond the formal parameter list.  (``*name`` must occur before ``**name``.) "
"For example, if we define a function like this::"
msgstr ""

#: ../../../tutorial/controlflow.rst:453
msgid ""
"def cheeseshop(kind, *arguments, **keywords):\n"
"    print(\"-- Do you have any\", kind, \"?\")\n"
"    print(\"-- I'm sorry, we're all out of\", kind)\n"
"    for arg in arguments: print(arg)\n"
"    print(\"-\" * 40)\n"
"    keys = sorted(keywords.keys())\n"
"    for kw in keys: print(kw, \":\", keywords[kw])"
msgstr ""

#: ../../../tutorial/controlflow.rst:461
msgid "It could be called like this::"
msgstr ""

#: ../../../tutorial/controlflow.rst:463
msgid ""
"cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n"
"           \"It's really very, VERY runny, sir.\",\n"
"           shopkeeper=\"Michael Palin\",\n"
"           client=\"John Cleese\",\n"
"           sketch=\"Cheese Shop Sketch\")"
msgstr ""

#: ../../../tutorial/controlflow.rst:469
msgid "and of course it would print::"
msgstr ""

#: ../../../tutorial/controlflow.rst:471
msgid ""
"-- Do you have any Limburger ?\n"
"-- I'm sorry, we're all out of Limburger\n"
"It's very runny, sir.\n"
"It's really very, VERY runny, sir.\n"
"----------------------------------------\n"
"client : John Cleese\n"
"shopkeeper : Michael Palin\n"
"sketch : Cheese Shop Sketch"
msgstr ""

#: ../../../tutorial/controlflow.rst:480
msgid ""
"Note that the list of keyword argument names is created by sorting the "
"result of the keywords dictionary's ``keys()`` method before printing its "
"contents; if this is not done, the order in which the arguments are printed "
"is undefined."
msgstr ""

#: ../../../tutorial/controlflow.rst:487
msgid "Arbitrary Argument Lists"
msgstr ""

#: ../../../tutorial/controlflow.rst:492
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""

#: ../../../tutorial/controlflow.rst:497
msgid ""
"def write_multiple_items(file, separator, *args):\n"
"    file.write(separator.join(args))"
msgstr ""

#: ../../../tutorial/controlflow.rst:501
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""

#: ../../../tutorial/controlflow.rst:507
msgid ""
">>> def concat(*args, sep=\"/\"):\n"
"...    return sep.join(args)\n"
"...\n"
">>> concat(\"earth\", \"mars\", \"venus\")\n"
"'earth/mars/venus'\n"
">>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n"
"'earth.mars.venus'"
msgstr ""

#: ../../../tutorial/controlflow.rst:518
msgid "Unpacking Argument Lists"
msgstr ""

#: ../../../tutorial/controlflow.rst:520
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""

#: ../../../tutorial/controlflow.rst:527
msgid ""
">>> list(range(3, 6))            # normal call with separate arguments\n"
"[3, 4, 5]\n"
">>> args = [3, 6]\n"
">>> list(range(*args))            # call with arguments unpacked from a "
"list\n"
"[3, 4, 5]"
msgstr ""

#: ../../../tutorial/controlflow.rst:536
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""

#: ../../../tutorial/controlflow.rst:539
msgid ""
">>> def parrot(voltage, state='a stiff', action='voom'):\n"
"...     print(\"-- This parrot wouldn't\", action, end=' ')\n"
"...     print(\"if you put\", voltage, \"volts through it.\", end=' ')\n"
"...     print(\"E's\", state, \"!\")\n"
"...\n"
">>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", "
"\"action\": \"VOOM\"}\n"
">>> parrot(**d)\n"
"-- This parrot wouldn't VOOM if you put four million volts through it. E's "
"bleedin' demised !"
msgstr ""

#: ../../../tutorial/controlflow.rst:552
msgid "Lambda Forms"
msgstr ""

#: ../../../tutorial/controlflow.rst:554
msgid ""
"By popular demand, a few features commonly found in functional programming "
"languages like Lisp have been added to Python.  With the :keyword:`lambda` "
"keyword, small anonymous functions can be created. Here's a function that "
"returns the sum of its two arguments: ``lambda a, b: a+b``.  Lambda forms "
"can be used wherever function objects are required.  They are syntactically "
"restricted to a single expression.  Semantically, they are just syntactic "
"sugar for a normal function definition.  Like nested function definitions, "
"lambda forms can reference variables from the containing scope::"
msgstr ""

#: ../../../tutorial/controlflow.rst:563
msgid ""
">>> def make_incrementor(n):\n"
"...     return lambda x: x + n\n"
"...\n"
">>> f = make_incrementor(42)\n"
">>> f(0)\n"
"42\n"
">>> f(1)\n"
"43"
msgstr ""

#: ../../../tutorial/controlflow.rst:576
msgid "Documentation Strings"
msgstr ""

#: ../../../tutorial/controlflow.rst:583
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""

#: ../../../tutorial/controlflow.rst:586
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""

#: ../../../tutorial/controlflow.rst:592
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""

#: ../../../tutorial/controlflow.rst:597
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""

#: ../../../tutorial/controlflow.rst:609
msgid "Here is an example of a multi-line docstring::"
msgstr ""

#: ../../../tutorial/controlflow.rst:611
msgid ""
">>> def my_function():\n"
"...     \"\"\"Do nothing, but document it.\n"
"...\n"
"...     No, really, it doesn't do anything.\n"
"...     \"\"\"\n"
"...     pass\n"
"...\n"
">>> print(my_function.__doc__)\n"
"Do nothing, but document it.\n"
"\n"
"    No, really, it doesn't do anything."
msgstr ""

#: ../../../tutorial/controlflow.rst:627
msgid "Intermezzo: Coding Style"
msgstr ""

#: ../../../tutorial/controlflow.rst:632
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""

#: ../../../tutorial/controlflow.rst:638
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""

#: ../../../tutorial/controlflow.rst:643
msgid "Use 4-space indentation, and no tabs."
msgstr ""

#: ../../../tutorial/controlflow.rst:645
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""

#: ../../../tutorial/controlflow.rst:649
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr ""

#: ../../../tutorial/controlflow.rst:651
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""

#: ../../../tutorial/controlflow.rst:654
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""

#: ../../../tutorial/controlflow.rst:657
msgid "When possible, put comments on a line of their own."
msgstr ""

#: ../../../tutorial/controlflow.rst:659
msgid "Use docstrings."
msgstr ""

#: ../../../tutorial/controlflow.rst:661
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""

#: ../../../tutorial/controlflow.rst:664
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``CamelCase`` for classes and ``lower_case_with_underscores`` for functions "
"and methods.  Always use ``self`` as the name for the first method argument "
"(see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""

#: ../../../tutorial/controlflow.rst:669
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Plain ASCII works best in any case."
msgstr ""

#: ../../../tutorial/controlflow.rst:674
msgid "Footnotes"
msgstr ""

#: ../../../tutorial/controlflow.rst:675
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""

#: ../../../tutorial/controlflow.rst:45
msgid "for"
msgstr ""

#: ../../../tutorial/controlflow.rst:237 ../../../tutorial/controlflow.rst:578
msgid "documentation strings"
msgstr ""

#: ../../../tutorial/controlflow.rst:237 ../../../tutorial/controlflow.rst:578
msgid "docstrings"
msgstr ""

#: ../../../tutorial/controlflow.rst:237 ../../../tutorial/controlflow.rst:578
msgid "strings, documentation"
msgstr ""

#: ../../../tutorial/controlflow.rst:489
msgid "*"
msgstr ""

#: ../../../tutorial/controlflow.rst:533
msgid "**"
msgstr ""

#: ../../../tutorial/controlflow.rst:630
msgid "coding"
msgstr ""

#: ../../../tutorial/controlflow.rst:630
msgid "style"
msgstr ""
