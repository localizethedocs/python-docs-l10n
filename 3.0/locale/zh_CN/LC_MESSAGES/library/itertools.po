# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/itertools.rst:3
msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ""

#: ../../../library/itertools.rst:16
msgid ""
"This module implements a number of :term:`iterator` building blocks inspired "
"by constructs from the Haskell and SML programming languages.  Each has been "
"recast in a form suitable for Python."
msgstr ""

#: ../../../library/itertools.rst:20
msgid ""
"The module standardizes a core set of fast, memory efficient tools that are "
"useful by themselves or in combination.  Standardization helps avoid the "
"readability and reliability problems which arise when many different "
"individuals create their own slightly varying implementations, each with "
"their own quirks and naming conventions."
msgstr ""

#: ../../../library/itertools.rst:26
msgid ""
"The tools are designed to combine readily with one another.  This makes it "
"easy to construct more specialized tools succinctly and efficiently in pure "
"Python."
msgstr ""

#: ../../../library/itertools.rst:29
msgid ""
"For instance, SML provides a tabulation tool: ``tabulate(f)`` which produces "
"a sequence ``f(0), f(1), ...``.  But, this effect can be achieved in Python "
"by combining :func:`map` and :func:`count` to form ``map(f, count())``."
msgstr ""

#: ../../../library/itertools.rst:33
msgid ""
"Likewise, the functional tools are designed to work well with the high-speed "
"functions provided by the :mod:`operator` module."
msgstr ""

#: ../../../library/itertools.rst:36
msgid ""
"Whether cast in pure python form or compiled code, tools that use iterators "
"are more memory efficient (and often faster) than their list based "
"counterparts. Adopting the principles of just-in-time manufacturing, they "
"create data when and where needed instead of consuming memory with the "
"computer equivalent of \"inventory\"."
msgstr ""

#: ../../../library/itertools.rst:44
msgid ""
"The Standard ML Basis Library, `The Standard ML Basis Library <http://www."
"standardml.org/Basis/>`_."
msgstr ""

#: ../../../library/itertools.rst:47
msgid ""
"Haskell, A Purely Functional Language, `Definition of Haskell and the "
"Standard Libraries <http://www.haskell.org/definition/>`_."
msgstr ""

#: ../../../library/itertools.rst:54
msgid "Itertool functions"
msgstr ""

#: ../../../library/itertools.rst:56
msgid ""
"The following module functions all construct and return iterators. Some "
"provide streams of infinite length, so they should only be accessed by "
"functions or loops that truncate the stream."
msgstr ""

#: ../../../library/itertools.rst:63
msgid ""
"Make an iterator that returns elements from the first iterable until it is "
"exhausted, then proceeds to the next iterable, until all of the iterables "
"are exhausted.  Used for treating consecutive sequences as a single "
"sequence. Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:77
msgid ""
"Alternate constructor for :func:`chain`.  Gets chained inputs from a single "
"iterable argument that is evaluated lazily.  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:90
msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr ""

#: ../../../library/itertools.rst:92
msgid ""
"Combinations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the combination tuples will be produced in sorted "
"order."
msgstr ""

#: ../../../library/itertools.rst:96
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"combination."
msgstr ""

#: ../../../library/itertools.rst:100 ../../../library/itertools.rst:299
msgid "Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:122
msgid ""
"The code for :func:`combinations` can be also expressed as a subsequence of :"
"func:`permutations` after filtering entries where the elements are not in "
"sorted order (according to their position in the input pool)::"
msgstr ""

#: ../../../library/itertools.rst:133
msgid ""
"The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n`` or "
"zero when ``r > n``."
msgstr ""

#: ../../../library/itertools.rst:138
msgid ""
"Make an iterator that returns consecutive integers starting with *n*. If not "
"specified *n* defaults to zero.   Often used as an argument to :func:`map` "
"to generate consecutive data points. Also, used with :func:`zip` to add "
"sequence numbers.  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:152
msgid ""
"Make an iterator returning elements from the iterable and saving a copy of "
"each. When the iterable is exhausted, return elements from the saved copy.  "
"Repeats indefinitely.  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:166
msgid ""
"Note, this member of the toolkit may require significant auxiliary storage "
"(depending on the length of the iterable)."
msgstr ""

#: ../../../library/itertools.rst:172
msgid ""
"Make an iterator that drops elements from the iterable as long as the "
"predicate is true; afterwards, returns every element.  Note, the iterator "
"does not produce *any* output until the predicate first becomes false, so it "
"may have a lengthy start-up time.  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:189
msgid ""
"Make an iterator that filters elements from iterable returning only those "
"for which the predicate is ``False``. If *predicate* is ``None``, return the "
"items that are false. Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:204
msgid ""
"Make an iterator that returns consecutive keys and groups from the "
"*iterable*. The *key* is a function computing a key value for each element.  "
"If not specified or is ``None``, *key* defaults to an identity function and "
"returns the element unchanged.  Generally, the iterable needs to already be "
"sorted on the same key function."
msgstr ""

#: ../../../library/itertools.rst:210
msgid ""
"The operation of :func:`groupby` is similar to the ``uniq`` filter in Unix.  "
"It generates a break or new group every time the value of the key function "
"changes (which is why it is usually necessary to have sorted the data using "
"the same key function).  That behavior differs from SQL's GROUP BY which "
"aggregates common elements regardless of their input order."
msgstr ""

#: ../../../library/itertools.rst:216
msgid ""
"The returned group is itself an iterator that shares the underlying iterable "
"with :func:`groupby`.  Because the source is shared, when the :func:"
"`groupby` object is advanced, the previous group is no longer visible.  So, "
"if that data is needed later, it should be stored as a list::"
msgstr ""

#: ../../../library/itertools.rst:228
msgid ":func:`groupby` is equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:256
msgid ""
"Make an iterator that returns selected elements from the iterable. If "
"*start* is non-zero, then elements from the iterable are skipped until start "
"is reached. Afterward, elements are returned consecutively unless *step* is "
"set higher than one which results in items being skipped.  If *stop* is "
"``None``, then iteration continues until the iterator is exhausted, if at "
"all; otherwise, it stops at the specified position.  Unlike regular "
"slicing, :func:`islice` does not support negative values for *start*, "
"*stop*, or *step*.  Can be used to extract related fields from data where "
"the internal structure has been flattened (for example, a multi-line report "
"may list a name field on every third line).  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:279
msgid ""
"If *start* is ``None``, then iteration starts at zero. If *step* is "
"``None``, then the step defaults to one."
msgstr ""

#: ../../../library/itertools.rst:285
msgid ""
"Return successive *r* length permutations of elements in the *iterable*."
msgstr ""

#: ../../../library/itertools.rst:287
msgid ""
"If *r* is not specified or is ``None``, then *r* defaults to the length of "
"the *iterable* and all possible full-length permutations are generated."
msgstr ""

#: ../../../library/itertools.rst:291
msgid ""
"Permutations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the permutation tuples will be produced in sorted "
"order."
msgstr ""

#: ../../../library/itertools.rst:295
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"permutation."
msgstr ""

#: ../../../library/itertools.rst:326
msgid ""
"The code for :func:`permutations` can be also expressed as a subsequence of :"
"func:`product`, filtered to exclude entries with repeated elements (those "
"from the same position in the input pool)::"
msgstr ""

#: ../../../library/itertools.rst:338
msgid ""
"The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or zero "
"when ``r > n``."
msgstr ""

#: ../../../library/itertools.rst:343
msgid "Cartesian product of input iterables."
msgstr ""

#: ../../../library/itertools.rst:345
msgid ""
"Equivalent to nested for-loops in a generator expression. For example, "
"``product(A, B)`` returns the same as ``((x,y) for x in A for y in B)``."
msgstr ""

#: ../../../library/itertools.rst:348
msgid ""
"The nested loops cycle like an odometer with the rightmost element advancing "
"on every iteration.  This pattern creates a lexicographic ordering so that "
"if the input's iterables are sorted, the product tuples are emitted in "
"sorted order."
msgstr ""

#: ../../../library/itertools.rst:353
msgid ""
"To compute the product of an iterable with itself, specify the number of "
"repetitions with the optional *repeat* keyword argument.  For example, "
"``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""

#: ../../../library/itertools.rst:357
msgid ""
"This function is equivalent to the following code, except that the actual "
"implementation does not build up intermediate results in memory::"
msgstr ""

#: ../../../library/itertools.rst:373
msgid ""
"Make an iterator that returns *object* over and over again. Runs "
"indefinitely unless the *times* argument is specified. Used as argument to :"
"func:`map` for invariant parameters to the called function.  Also used with :"
"func:`zip` to create an invariant part of a tuple record.  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:390
msgid ""
"Make an iterator that computes the function using arguments obtained from "
"the iterable.  Used instead of :func:`map` when argument parameters are "
"already grouped in tuples from a single iterable (the data has been \"pre-"
"zipped\").  The difference between :func:`map` and :func:`starmap` parallels "
"the distinction between ``function(a,b)`` and ``function(*c)``. Equivalent "
"to::"
msgstr ""

#: ../../../library/itertools.rst:404
msgid ""
"Make an iterator that returns elements from the iterable as long as the "
"predicate is true.  Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:418
msgid ""
"Return *n* independent iterators from a single iterable. The case where "
"``n==2`` is equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:432
msgid ""
"Note, once :func:`tee` has made a split, the original *iterable* should not "
"be used anywhere else; otherwise, the *iterable* could get advanced without "
"the tee objects being informed."
msgstr ""

#: ../../../library/itertools.rst:436
msgid ""
"Note, this member of the toolkit may require significant auxiliary storage "
"(depending on how much temporary data needs to be stored). In general, if "
"one iterator is going to use most or all of the data before the other "
"iterator, it is faster to use :func:`list` instead of :func:`tee`."
msgstr ""

#: ../../../library/itertools.rst:444
msgid ""
"Make an iterator that aggregates elements from each of the iterables. If the "
"iterables are of uneven length, missing values are filled-in with "
"*fillvalue*. Iteration continues until the longest iterable is exhausted.  "
"Equivalent to::"
msgstr ""

#: ../../../library/itertools.rst:460
msgid ""
"If one of the iterables is potentially infinite, then the :func:"
"`zip_longest` function should be wrapped with something that limits the "
"number of calls (for example :func:`islice` or :func:`takewhile`).  If not "
"specified, *fillvalue* defaults to ``None``."
msgstr ""

#: ../../../library/itertools.rst:469
msgid "Examples"
msgstr ""

#: ../../../library/itertools.rst:471
msgid ""
"The following examples show common uses for each tool and demonstrate ways "
"they can be combined."
msgstr ""

#: ../../../library/itertools.rst:506
msgid "Recipes"
msgstr ""

#: ../../../library/itertools.rst:508
msgid ""
"This section shows recipes for creating an extended toolset using the "
"existing itertools as building blocks."
msgstr ""

#: ../../../library/itertools.rst:511
msgid ""
"The extended tools offer the same high performance as the underlying "
"toolset. The superior memory performance is kept by processing elements one "
"at a time rather than bringing the whole iterable into memory all at once. "
"Code volume is kept small by linking the tools together in a functional "
"style which helps eliminate temporary variables.  High speed is retained by "
"preferring \"vectorized\" building blocks over the use of for-loops and :"
"term:`generator`\\s which incur interpreter overhead."
msgstr ""
