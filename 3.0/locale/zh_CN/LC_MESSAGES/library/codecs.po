# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/codecs.rst:3
msgid ":mod:`codecs` --- Codec registry and base classes"
msgstr ""

#: ../../../library/codecs.rst:20
msgid ""
"This module defines base classes for standard Python codecs (encoders and "
"decoders) and provides access to the internal Python codec registry which "
"manages the codec and error handling lookup process."
msgstr ""

#: ../../../library/codecs.rst:24
msgid "It defines the following functions:"
msgstr ""

#: ../../../library/codecs.rst:29
msgid ""
"Register a codec search function. Search functions are expected to take one "
"argument, the encoding name in all lower case letters, and return a :class:"
"`CodecInfo` object having the following attributes:"
msgstr ""

#: ../../../library/codecs.rst:33
msgid "``name`` The name of the encoding;"
msgstr ""

#: ../../../library/codecs.rst:35
msgid "``encode`` The stateless encoding function;"
msgstr ""

#: ../../../library/codecs.rst:37
msgid "``decode`` The stateless decoding function;"
msgstr ""

#: ../../../library/codecs.rst:39
msgid ""
"``incrementalencoder`` An incremental encoder class or factory function;"
msgstr ""

#: ../../../library/codecs.rst:41
msgid ""
"``incrementaldecoder`` An incremental decoder class or factory function;"
msgstr ""

#: ../../../library/codecs.rst:43
msgid "``streamwriter`` A stream writer class or factory function;"
msgstr ""

#: ../../../library/codecs.rst:45
msgid "``streamreader`` A stream reader class or factory function."
msgstr ""

#: ../../../library/codecs.rst:47
msgid "The various functions or classes take the following arguments:"
msgstr ""

#: ../../../library/codecs.rst:49
msgid ""
"*encode* and *decode*: These must be functions or methods which have the "
"same interface as the :meth:`encode`/:meth:`decode` methods of Codec "
"instances (see Codec Interface). The functions/methods are expected to work "
"in a stateless mode."
msgstr ""

#: ../../../library/codecs.rst:54
msgid ""
"*incrementalencoder* and *incrementaldecoder*: These have to be factory "
"functions providing the following interface:"
msgstr ""

#: ../../../library/codecs.rst:57
msgid "``factory(errors='strict')``"
msgstr ""

#: ../../../library/codecs.rst:59
msgid ""
"The factory functions must return objects providing the interfaces defined "
"by the base classes :class:`IncrementalEncoder` and :class:"
"`IncrementalDecoder`, respectively. Incremental codecs can maintain state."
msgstr ""

#: ../../../library/codecs.rst:63
msgid ""
"*streamreader* and *streamwriter*: These have to be factory functions "
"providing the following interface:"
msgstr ""

#: ../../../library/codecs.rst:66
msgid "``factory(stream, errors='strict')``"
msgstr ""

#: ../../../library/codecs.rst:68
msgid ""
"The factory functions must return objects providing the interfaces defined "
"by the base classes :class:`StreamWriter` and :class:`StreamReader`, "
"respectively. Stream codecs can maintain state."
msgstr ""

#: ../../../library/codecs.rst:72
msgid ""
"Possible values for errors are ``'strict'`` (raise an exception in case of "
"an encoding error), ``'replace'`` (replace malformed data with a suitable "
"replacement marker, such as ``'?'``), ``'ignore'`` (ignore malformed data "
"and continue without further notice), ``'xmlcharrefreplace'`` (replace with "
"the appropriate XML character reference (for encoding only)) and "
"``'backslashreplace'`` (replace with backslashed escape sequences (for "
"encoding only)) as well as any other error handling name defined via :func:"
"`register_error`."
msgstr ""

#: ../../../library/codecs.rst:81
msgid ""
"In case a search function cannot find a given encoding, it should return "
"``None``."
msgstr ""

#: ../../../library/codecs.rst:87
msgid ""
"Looks up the codec info in the Python codec registry and returns a :class:"
"`CodecInfo` object as defined above."
msgstr ""

#: ../../../library/codecs.rst:90
msgid ""
"Encodings are first looked up in the registry's cache. If not found, the "
"list of registered search functions is scanned. If no :class:`CodecInfo` "
"object is found, a :exc:`LookupError` is raised. Otherwise, the :class:"
"`CodecInfo` object is stored in the cache and returned to the caller."
msgstr ""

#: ../../../library/codecs.rst:95
msgid ""
"To simplify access to the various codecs, the module provides these "
"additional functions which use :func:`lookup` for the codec lookup:"
msgstr ""

#: ../../../library/codecs.rst:101
msgid ""
"Look up the codec for the given encoding and return its encoder function."
msgstr ""

#: ../../../library/codecs.rst:103 ../../../library/codecs.rst:110
#: ../../../library/codecs.rst:136 ../../../library/codecs.rst:144
msgid "Raises a :exc:`LookupError` in case the encoding cannot be found."
msgstr ""

#: ../../../library/codecs.rst:108
msgid ""
"Look up the codec for the given encoding and return its decoder function."
msgstr ""

#: ../../../library/codecs.rst:115
msgid ""
"Look up the codec for the given encoding and return its incremental encoder "
"class or factory function."
msgstr ""

#: ../../../library/codecs.rst:118
msgid ""
"Raises a :exc:`LookupError` in case the encoding cannot be found or the "
"codec doesn't support an incremental encoder."
msgstr ""

#: ../../../library/codecs.rst:124
msgid ""
"Look up the codec for the given encoding and return its incremental decoder "
"class or factory function."
msgstr ""

#: ../../../library/codecs.rst:127
msgid ""
"Raises a :exc:`LookupError` in case the encoding cannot be found or the "
"codec doesn't support an incremental decoder."
msgstr ""

#: ../../../library/codecs.rst:133
msgid ""
"Look up the codec for the given encoding and return its StreamReader class "
"or factory function."
msgstr ""

#: ../../../library/codecs.rst:141
msgid ""
"Look up the codec for the given encoding and return its StreamWriter class "
"or factory function."
msgstr ""

#: ../../../library/codecs.rst:149
msgid ""
"Register the error handling function *error_handler* under the name *name*. "
"*error_handler* will be called during encoding and decoding in case of an "
"error, when *name* is specified as the errors parameter."
msgstr ""

#: ../../../library/codecs.rst:153
msgid ""
"For encoding *error_handler* will be called with a :exc:`UnicodeEncodeError` "
"instance, which contains information about the location of the error. The "
"error handler must either raise this or a different exception or return a "
"tuple with a replacement for the unencodable part of the input and a "
"position where encoding should continue. The encoder will encode the "
"replacement and continue encoding the original input at the specified "
"position. Negative position values will be treated as being relative to the "
"end of the input string. If the resulting position is out of bound an :exc:"
"`IndexError` will be raised."
msgstr ""

#: ../../../library/codecs.rst:162
msgid ""
"Decoding and translating works similar, except :exc:`UnicodeDecodeError` or :"
"exc:`UnicodeTranslateError` will be passed to the handler and that the "
"replacement from the error handler will be put into the output directly."
msgstr ""

#: ../../../library/codecs.rst:169
msgid "Return the error handler previously registered under the name *name*."
msgstr ""

#: ../../../library/codecs.rst:171
msgid "Raises a :exc:`LookupError` in case the handler cannot be found."
msgstr ""

#: ../../../library/codecs.rst:176
msgid "Implements the ``strict`` error handling."
msgstr ""

#: ../../../library/codecs.rst:181
msgid "Implements the ``replace`` error handling."
msgstr ""

#: ../../../library/codecs.rst:186
msgid "Implements the ``ignore`` error handling."
msgstr ""

#: ../../../library/codecs.rst:191
msgid "Implements the ``xmlcharrefreplace`` error handling."
msgstr ""

#: ../../../library/codecs.rst:196
msgid "Implements the ``backslashreplace`` error handling."
msgstr ""

#: ../../../library/codecs.rst:198
msgid ""
"To simplify working with encoded files or stream, the module also defines "
"these utility functions:"
msgstr ""

#: ../../../library/codecs.rst:204
msgid ""
"Open an encoded file using the given *mode* and return a wrapped version "
"providing transparent encoding/decoding.  The default file mode is ``'r'`` "
"meaning to open the file in read mode."
msgstr ""

#: ../../../library/codecs.rst:210
msgid ""
"The wrapped version's methods will accept and return strings only.  Bytes "
"arguments will be rejected."
msgstr ""

#: ../../../library/codecs.rst:215
msgid ""
"Files are always opened in binary mode, even if no binary mode was "
"specified.  This is done to avoid data loss due to encodings using 8-bit "
"values.  This means that no automatic conversion of ``b'\\n'`` is done on "
"reading and writing."
msgstr ""

#: ../../../library/codecs.rst:220
msgid "*encoding* specifies the encoding which is to be used for the file."
msgstr ""

#: ../../../library/codecs.rst:222
msgid ""
"*errors* may be given to define the error handling. It defaults to "
"``'strict'`` which causes a :exc:`ValueError` to be raised in case an "
"encoding error occurs."
msgstr ""

#: ../../../library/codecs.rst:225
msgid ""
"*buffering* has the same meaning as for the built-in :func:`open` function.  "
"It defaults to line buffered."
msgstr ""

#: ../../../library/codecs.rst:231
msgid ""
"Return a wrapped version of file which provides transparent encoding "
"translation."
msgstr ""

#: ../../../library/codecs.rst:234
msgid ""
"Bytes written to the wrapped file are interpreted according to the given "
"*input* encoding and then written to the original file as bytes using the "
"*output* encoding."
msgstr ""

#: ../../../library/codecs.rst:238
msgid "If *output* is not given, it defaults to *input*."
msgstr ""

#: ../../../library/codecs.rst:240
msgid ""
"*errors* may be given to define the error handling. It defaults to "
"``'strict'``, which causes :exc:`ValueError` to be raised in case an "
"encoding error occurs."
msgstr ""

#: ../../../library/codecs.rst:246
msgid ""
"Uses an incremental encoder to iteratively encode the input provided by "
"*iterable*. This function is a :term:`generator`.  *errors* (as well as any "
"other keyword argument) is passed through to the incremental encoder."
msgstr ""

#: ../../../library/codecs.rst:253
msgid ""
"Uses an incremental decoder to iteratively decode the input provided by "
"*iterable*. This function is a :term:`generator`.  *errors* (as well as any "
"other keyword argument) is passed through to the incremental decoder."
msgstr ""

#: ../../../library/codecs.rst:257
msgid ""
"The module also provides the following constants which are useful for "
"reading and writing to platform dependent files:"
msgstr ""

#: ../../../library/codecs.rst:272
msgid ""
"These constants define various encodings of the Unicode byte order mark "
"(BOM) used in UTF-16 and UTF-32 data streams to indicate the byte order used "
"in the stream or file and in UTF-8 as a Unicode signature. :const:"
"`BOM_UTF16` is either :const:`BOM_UTF16_BE` or :const:`BOM_UTF16_LE` "
"depending on the platform's native byte order, :const:`BOM` is an alias for :"
"const:`BOM_UTF16`, :const:`BOM_LE` for :const:`BOM_UTF16_LE` and :const:"
"`BOM_BE` for :const:`BOM_UTF16_BE`. The others represent the BOM in UTF-8 "
"and UTF-32 encodings."
msgstr ""

#: ../../../library/codecs.rst:285
msgid "Codec Base Classes"
msgstr ""

#: ../../../library/codecs.rst:287
msgid ""
"The :mod:`codecs` module defines a set of base classes which define the "
"interface and can also be used to easily write your own codecs for use in "
"Python."
msgstr ""

#: ../../../library/codecs.rst:291
msgid ""
"Each codec has to define four interfaces to make it usable as codec in "
"Python: stateless encoder, stateless decoder, stream reader and stream "
"writer. The stream reader and writers typically reuse the stateless encoder/"
"decoder to implement the file protocols."
msgstr ""

#: ../../../library/codecs.rst:296
msgid ""
"The :class:`Codec` class defines the interface for stateless encoders/"
"decoders."
msgstr ""

#: ../../../library/codecs.rst:298
msgid ""
"To simplify and standardize error handling, the :meth:`encode` and :meth:"
"`decode` methods may implement different error handling schemes by providing "
"the *errors* string argument.  The following string values are defined and "
"implemented by all standard Python codecs:"
msgstr ""

#: ../../../library/codecs.rst:304
msgid "Value"
msgstr ""

#: ../../../library/codecs.rst:304
msgid "Meaning"
msgstr ""

#: ../../../library/codecs.rst:306
msgid "``'strict'``"
msgstr ""

#: ../../../library/codecs.rst:306
msgid "Raise :exc:`UnicodeError` (or a subclass); this is the default."
msgstr ""

#: ../../../library/codecs.rst:309
msgid "``'ignore'``"
msgstr ""

#: ../../../library/codecs.rst:309
msgid "Ignore the character and continue with the next."
msgstr ""

#: ../../../library/codecs.rst:312
msgid "``'replace'``"
msgstr ""

#: ../../../library/codecs.rst:312
msgid ""
"Replace with a suitable replacement character; Python will use the official "
"U+FFFD REPLACEMENT CHARACTER for the built-in Unicode codecs on decoding and "
"'?' on encoding."
msgstr ""

#: ../../../library/codecs.rst:318
msgid "``'xmlcharrefreplace'``"
msgstr ""

#: ../../../library/codecs.rst:318
msgid ""
"Replace with the appropriate XML character reference (only for encoding)."
msgstr ""

#: ../../../library/codecs.rst:321
msgid "``'backslashreplace'``"
msgstr ""

#: ../../../library/codecs.rst:321
msgid "Replace with backslashed escape sequences (only for encoding)."
msgstr ""

#: ../../../library/codecs.rst:325
msgid "The set of allowed values can be extended via :meth:`register_error`."
msgstr ""

#: ../../../library/codecs.rst:331
msgid "Codec Objects"
msgstr ""

#: ../../../library/codecs.rst:333
msgid ""
"The :class:`Codec` class defines these methods which also define the "
"function interfaces of the stateless encoder and decoder:"
msgstr ""

#: ../../../library/codecs.rst:339
msgid ""
"Encodes the object *input* and returns a tuple (output object, length "
"consumed). Encoding converts a string object to a bytes object using a "
"particular character set encoding (e.g., ``cp1252`` or ``iso-8859-1``)."
msgstr ""

#: ../../../library/codecs.rst:343 ../../../library/codecs.rst:363
msgid ""
"*errors* defines the error handling to apply. It defaults to ``'strict'`` "
"handling."
msgstr ""

#: ../../../library/codecs.rst:346 ../../../library/codecs.rst:366
msgid ""
"The method may not store state in the :class:`Codec` instance. Use :class:"
"`StreamCodec` for codecs which have to keep state in order to make encoding/"
"decoding efficient."
msgstr ""

#: ../../../library/codecs.rst:350
msgid ""
"The encoder must be able to handle zero length input and return an empty "
"object of the output object type in this situation."
msgstr ""

#: ../../../library/codecs.rst:356
msgid ""
"Decodes the object *input* and returns a tuple (output object, length "
"consumed).  Decoding converts a bytes object encoded using a particular "
"character set encoding to a string object."
msgstr ""

#: ../../../library/codecs.rst:360
msgid ""
"*input* must be a bytes object or one which provides the read-only character "
"buffer interface -- for example, buffer objects and memory mapped files."
msgstr ""

#: ../../../library/codecs.rst:370
msgid ""
"The decoder must be able to handle zero length input and return an empty "
"object of the output object type in this situation."
msgstr ""

#: ../../../library/codecs.rst:373
msgid ""
"The :class:`IncrementalEncoder` and :class:`IncrementalDecoder` classes "
"provide the basic interface for incremental encoding and decoding. Encoding/"
"decoding the input isn't done with one call to the stateless encoder/decoder "
"function, but with multiple calls to the :meth:`encode`/:meth:`decode` "
"method of the incremental encoder/decoder. The incremental encoder/decoder "
"keeps track of the encoding/decoding process during method calls."
msgstr ""

#: ../../../library/codecs.rst:380
msgid ""
"The joined output of calls to the :meth:`encode`/:meth:`decode` method is "
"the same as if all the single inputs were joined into one, and this input "
"was encoded/decoded with the stateless encoder/decoder."
msgstr ""

#: ../../../library/codecs.rst:388
msgid "IncrementalEncoder Objects"
msgstr ""

#: ../../../library/codecs.rst:390
msgid ""
"The :class:`IncrementalEncoder` class is used for encoding an input in "
"multiple steps. It defines the following methods which every incremental "
"encoder must define in order to be compatible with the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:397
msgid "Constructor for an :class:`IncrementalEncoder` instance."
msgstr ""

#: ../../../library/codecs.rst:399
msgid ""
"All incremental encoders must provide this constructor interface. They are "
"free to add additional keyword arguments, but only the ones defined here are "
"used by the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:403
msgid ""
"The :class:`IncrementalEncoder` may implement different error handling "
"schemes by providing the *errors* keyword argument. These parameters are "
"predefined:"
msgstr ""

#: ../../../library/codecs.rst:406 ../../../library/codecs.rst:473
#: ../../../library/codecs.rst:553 ../../../library/codecs.rst:618
msgid ""
"``'strict'`` Raise :exc:`ValueError` (or a subclass); this is the default."
msgstr ""

#: ../../../library/codecs.rst:408 ../../../library/codecs.rst:475
#: ../../../library/codecs.rst:555 ../../../library/codecs.rst:620
msgid "``'ignore'`` Ignore the character and continue with the next."
msgstr ""

#: ../../../library/codecs.rst:410 ../../../library/codecs.rst:557
msgid "``'replace'`` Replace with a suitable replacement character"
msgstr ""

#: ../../../library/codecs.rst:412 ../../../library/codecs.rst:559
msgid ""
"``'xmlcharrefreplace'`` Replace with the appropriate XML character reference"
msgstr ""

#: ../../../library/codecs.rst:414 ../../../library/codecs.rst:561
msgid "``'backslashreplace'`` Replace with backslashed escape sequences."
msgstr ""

#: ../../../library/codecs.rst:416
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:"
"`IncrementalEncoder` object."
msgstr ""

#: ../../../library/codecs.rst:421 ../../../library/codecs.rst:484
#: ../../../library/codecs.rst:567 ../../../library/codecs.rst:628
msgid ""
"The set of allowed values for the *errors* argument can be extended with :"
"func:`register_error`."
msgstr ""

#: ../../../library/codecs.rst:427
msgid ""
"Encodes *object* (taking the current state of the encoder into account) and "
"returns the resulting encoded object. If this is the last call to :meth:"
"`encode` *final* must be true (the default is false)."
msgstr ""

#: ../../../library/codecs.rst:434
msgid "Reset the encoder to the initial state."
msgstr ""

#: ../../../library/codecs.rst:439
msgid ""
"Return the current state of the encoder which must be an integer. The "
"implementation should make sure that ``0`` is the most common state. (States "
"that are more complicated than integers can be converted into an integer by "
"marshaling/pickling the state and encoding the bytes of the resulting string "
"into an integer)."
msgstr ""

#: ../../../library/codecs.rst:448
msgid ""
"Set the state of the encoder to *state*. *state* must be an encoder state "
"returned by :meth:`getstate`."
msgstr ""

#: ../../../library/codecs.rst:455
msgid "IncrementalDecoder Objects"
msgstr ""

#: ../../../library/codecs.rst:457
msgid ""
"The :class:`IncrementalDecoder` class is used for decoding an input in "
"multiple steps. It defines the following methods which every incremental "
"decoder must define in order to be compatible with the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:464
msgid "Constructor for an :class:`IncrementalDecoder` instance."
msgstr ""

#: ../../../library/codecs.rst:466
msgid ""
"All incremental decoders must provide this constructor interface. They are "
"free to add additional keyword arguments, but only the ones defined here are "
"used by the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:470
msgid ""
"The :class:`IncrementalDecoder` may implement different error handling "
"schemes by providing the *errors* keyword argument. These parameters are "
"predefined:"
msgstr ""

#: ../../../library/codecs.rst:477 ../../../library/codecs.rst:622
msgid "``'replace'`` Replace with a suitable replacement character."
msgstr ""

#: ../../../library/codecs.rst:479
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:"
"`IncrementalDecoder` object."
msgstr ""

#: ../../../library/codecs.rst:490
msgid ""
"Decodes *object* (taking the current state of the decoder into account) and "
"returns the resulting decoded object. If this is the last call to :meth:"
"`decode` *final* must be true (the default is false). If *final* is true the "
"decoder must decode the input completely and must flush all buffers. If this "
"isn't possible (e.g. because of incomplete byte sequences at the end of the "
"input) it must initiate error handling just like in the stateless case "
"(which might raise an exception)."
msgstr ""

#: ../../../library/codecs.rst:501
msgid "Reset the decoder to the initial state."
msgstr ""

#: ../../../library/codecs.rst:506
msgid ""
"Return the current state of the decoder. This must be a tuple with two "
"items, the first must be the buffer containing the still undecoded input. "
"The second must be an integer and can be additional state info. (The "
"implementation should make sure that ``0`` is the most common additional "
"state info.) If this additional state info is ``0`` it must be possible to "
"set the decoder to the state which has no input buffered and ``0`` as the "
"additional state info, so that feeding the previously buffered input to the "
"decoder returns it to the previous state without producing any output. "
"(Additional state info that is more complicated than integers can be "
"converted into an integer by marshaling/pickling the info and encoding the "
"bytes of the resulting string into an integer.)"
msgstr ""

#: ../../../library/codecs.rst:521
msgid ""
"Set the state of the encoder to *state*. *state* must be a decoder state "
"returned by :meth:`getstate`."
msgstr ""

#: ../../../library/codecs.rst:525
msgid ""
"The :class:`StreamWriter` and :class:`StreamReader` classes provide generic "
"working interfaces which can be used to implement new encoding submodules "
"very easily. See :mod:`encodings.utf_8` for an example of how this is done."
msgstr ""

#: ../../../library/codecs.rst:533
msgid "StreamWriter Objects"
msgstr ""

#: ../../../library/codecs.rst:535
msgid ""
"The :class:`StreamWriter` class is a subclass of :class:`Codec` and defines "
"the following methods which every stream writer must define in order to be "
"compatible with the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:542
msgid "Constructor for a :class:`StreamWriter` instance."
msgstr ""

#: ../../../library/codecs.rst:544
msgid ""
"All stream writers must provide this constructor interface. They are free to "
"add additional keyword arguments, but only the ones defined here are used by "
"the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:548
msgid "*stream* must be a file-like object open for writing binary data."
msgstr ""

#: ../../../library/codecs.rst:550
msgid ""
"The :class:`StreamWriter` may implement different error handling schemes by "
"providing the *errors* keyword argument. These parameters are predefined:"
msgstr ""

#: ../../../library/codecs.rst:563
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:`StreamWriter` "
"object."
msgstr ""

#: ../../../library/codecs.rst:573
msgid "Writes the object's contents encoded to the stream."
msgstr ""

#: ../../../library/codecs.rst:578
msgid ""
"Writes the concatenated list of strings to the stream (possibly by reusing "
"the :meth:`write` method)."
msgstr ""

#: ../../../library/codecs.rst:584
msgid "Flushes and resets the codec buffers used for keeping state."
msgstr ""

#: ../../../library/codecs.rst:586
msgid ""
"Calling this method should ensure that the data on the output is put into a "
"clean state that allows appending of new fresh data without having to rescan "
"the whole stream to recover state."
msgstr ""

#: ../../../library/codecs.rst:591
msgid ""
"In addition to the above methods, the :class:`StreamWriter` must also "
"inherit all other methods and attributes from the underlying stream."
msgstr ""

#: ../../../library/codecs.rst:598
msgid "StreamReader Objects"
msgstr ""

#: ../../../library/codecs.rst:600
msgid ""
"The :class:`StreamReader` class is a subclass of :class:`Codec` and defines "
"the following methods which every stream reader must define in order to be "
"compatible with the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:607
msgid "Constructor for a :class:`StreamReader` instance."
msgstr ""

#: ../../../library/codecs.rst:609
msgid ""
"All stream readers must provide this constructor interface. They are free to "
"add additional keyword arguments, but only the ones defined here are used by "
"the Python codec registry."
msgstr ""

#: ../../../library/codecs.rst:613
msgid "*stream* must be a file-like object open for reading (binary) data."
msgstr ""

#: ../../../library/codecs.rst:615
msgid ""
"The :class:`StreamReader` may implement different error handling schemes by "
"providing the *errors* keyword argument. These parameters are defined:"
msgstr ""

#: ../../../library/codecs.rst:624
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:`StreamReader` "
"object."
msgstr ""

#: ../../../library/codecs.rst:634
msgid "Decodes data from the stream and returns the resulting object."
msgstr ""

#: ../../../library/codecs.rst:636
msgid ""
"*chars* indicates the number of characters to read from the stream. :func:"
"`read` will never return more than *chars* characters, but it might return "
"less, if there are not enough characters available."
msgstr ""

#: ../../../library/codecs.rst:640
msgid ""
"*size* indicates the approximate maximum number of bytes to read from the "
"stream for decoding purposes. The decoder can modify this setting as "
"appropriate. The default value -1 indicates to read and decode as much as "
"possible.  *size* is intended to prevent having to decode huge files in one "
"step."
msgstr ""

#: ../../../library/codecs.rst:646
msgid ""
"*firstline* indicates that it would be sufficient to only return the first "
"line, if there are decoding errors on later lines."
msgstr ""

#: ../../../library/codecs.rst:649
msgid ""
"The method should use a greedy read strategy meaning that it should read as "
"much data as is allowed within the definition of the encoding and the given "
"size, e.g.  if optional encoding endings or state markers are available on "
"the stream, these should be read too."
msgstr ""

#: ../../../library/codecs.rst:657
msgid "Read one line from the input stream and return the decoded data."
msgstr ""

#: ../../../library/codecs.rst:659
msgid ""
"*size*, if given, is passed as size argument to the stream's :meth:"
"`readline` method."
msgstr ""

#: ../../../library/codecs.rst:662
msgid ""
"If *keepends* is false line-endings will be stripped from the lines returned."
msgstr ""

#: ../../../library/codecs.rst:668
msgid ""
"Read all lines available on the input stream and return them as a list of "
"lines."
msgstr ""

#: ../../../library/codecs.rst:671
msgid ""
"Line-endings are implemented using the codec's decoder method and are "
"included in the list entries if *keepends* is true."
msgstr ""

#: ../../../library/codecs.rst:674
msgid ""
"*sizehint*, if given, is passed as the *size* argument to the stream's :meth:"
"`read` method."
msgstr ""

#: ../../../library/codecs.rst:680
msgid "Resets the codec buffers used for keeping state."
msgstr ""

#: ../../../library/codecs.rst:682
msgid ""
"Note that no stream repositioning should take place.  This method is "
"primarily intended to be able to recover from decoding errors."
msgstr ""

#: ../../../library/codecs.rst:686
msgid ""
"In addition to the above methods, the :class:`StreamReader` must also "
"inherit all other methods and attributes from the underlying stream."
msgstr ""

#: ../../../library/codecs.rst:689
msgid ""
"The next two base classes are included for convenience. They are not needed "
"by the codec registry, but may provide useful in practice."
msgstr ""

#: ../../../library/codecs.rst:696
msgid "StreamReaderWriter Objects"
msgstr ""

#: ../../../library/codecs.rst:698
msgid ""
"The :class:`StreamReaderWriter` allows wrapping streams which work in both "
"read and write modes."
msgstr ""

#: ../../../library/codecs.rst:701 ../../../library/codecs.rst:725
msgid ""
"The design is such that one can use the factory functions returned by the :"
"func:`lookup` function to construct the instance."
msgstr ""

#: ../../../library/codecs.rst:707
msgid ""
"Creates a :class:`StreamReaderWriter` instance. *stream* must be a file-like "
"object. *Reader* and *Writer* must be factory functions or classes providing "
"the :class:`StreamReader` and :class:`StreamWriter` interface resp. Error "
"handling is done in the same way as defined for the stream readers and "
"writers."
msgstr ""

#: ../../../library/codecs.rst:712
msgid ""
":class:`StreamReaderWriter` instances define the combined interfaces of :"
"class:`StreamReader` and :class:`StreamWriter` classes. They inherit all "
"other methods and attributes from the underlying stream."
msgstr ""

#: ../../../library/codecs.rst:720
msgid "StreamRecoder Objects"
msgstr ""

#: ../../../library/codecs.rst:722
msgid ""
"The :class:`StreamRecoder` provide a frontend - backend view of encoding "
"data which is sometimes useful when dealing with different encoding "
"environments."
msgstr ""

#: ../../../library/codecs.rst:731
msgid ""
"Creates a :class:`StreamRecoder` instance which implements a two-way "
"conversion: *encode* and *decode* work on the frontend (the input to :meth:"
"`read` and output of :meth:`write`) while *Reader* and *Writer* work on the "
"backend (reading and writing to the stream)."
msgstr ""

#: ../../../library/codecs.rst:736
msgid ""
"You can use these objects to do transparent direct recodings from e.g. "
"Latin-1 to UTF-8 and back."
msgstr ""

#: ../../../library/codecs.rst:739
msgid "*stream* must be a file-like object."
msgstr ""

#: ../../../library/codecs.rst:741
msgid ""
"*encode*, *decode* must adhere to the :class:`Codec` interface. *Reader*, "
"*Writer* must be factory functions or classes providing objects of the :"
"class:`StreamReader` and :class:`StreamWriter` interface respectively."
msgstr ""

#: ../../../library/codecs.rst:745
msgid ""
"*encode* and *decode* are needed for the frontend translation, *Reader* and "
"*Writer* for the backend translation."
msgstr ""

#: ../../../library/codecs.rst:748
msgid ""
"Error handling is done in the same way as defined for the stream readers and "
"writers."
msgstr ""

#: ../../../library/codecs.rst:752
msgid ""
":class:`StreamRecoder` instances define the combined interfaces of :class:"
"`StreamReader` and :class:`StreamWriter` classes. They inherit all other "
"methods and attributes from the underlying stream."
msgstr ""

#: ../../../library/codecs.rst:760
msgid "Encodings and Unicode"
msgstr ""

#: ../../../library/codecs.rst:762
msgid ""
"Strings are stored internally as sequences of codepoints (to be precise as :"
"ctype:`Py_UNICODE` arrays). Depending on the way Python is compiled (either "
"via :option:`--without-wide-unicode` or :option:`--with-wide-unicode`, with "
"the former being the default) :ctype:`Py_UNICODE` is either a 16-bit or 32-"
"bit data type. Once a string object is used outside of CPU and memory, CPU "
"endianness and how these arrays are stored as bytes become an issue.  "
"Transforming a string object into a sequence of bytes is called encoding and "
"recreating the string object from the sequence of bytes is known as "
"decoding.  There are many different methods for how this transformation can "
"be done (these methods are also called encodings). The simplest method is to "
"map the codepoints 0-255 to the bytes ``0x0``-``0xff``. This means that a "
"string object that contains codepoints above ``U+00FF`` can't be encoded "
"with this method (which is called ``'latin-1'`` or ``'iso-8859-1'``). :func:"
"`str.encode` will raise a :exc:`UnicodeEncodeError` that looks like this: "
"``UnicodeEncodeError: 'latin-1' codec can't encode character '\\u1234' in "
"position 3: ordinal not in range(256)``."
msgstr ""

#: ../../../library/codecs.rst:779
msgid ""
"There's another group of encodings (the so called charmap encodings) that "
"choose a different subset of all Unicode code points and how these "
"codepoints are mapped to the bytes ``0x0``-``0xff``. To see how this is done "
"simply open e.g. :file:`encodings/cp1252.py` (which is an encoding that is "
"used primarily on Windows). There's a string constant with 256 characters "
"that shows you which character is mapped to which byte value."
msgstr ""

#: ../../../library/codecs.rst:786
msgid ""
"All of these encodings can only encode 256 of the 65536 (or 1114111) "
"codepoints defined in Unicode. A simple and straightforward way that can "
"store each Unicode code point, is to store each codepoint as two consecutive "
"bytes. There are two possibilities: Store the bytes in big endian or in "
"little endian order. These two encodings are called UTF-16-BE and UTF-16-LE "
"respectively. Their disadvantage is that if e.g. you use UTF-16-BE on a "
"little endian machine you will always have to swap bytes on encoding and "
"decoding. UTF-16 avoids this problem: Bytes will always be in natural "
"endianness. When these bytes are read by a CPU with a different endianness, "
"then bytes have to be swapped though. To be able to detect the endianness of "
"a UTF-16 byte sequence, there's the so called BOM (the \"Byte Order Mark\"). "
"This is the Unicode character ``U+FEFF``. This character will be prepended "
"to every UTF-16 byte sequence. The byte swapped version of this character "
"(``0xFFFE``) is an illegal character that may not appear in a Unicode text. "
"So when the first character in an UTF-16 byte sequence appears to be a "
"``U+FFFE`` the bytes have to be swapped on decoding. Unfortunately upto "
"Unicode 4.0 the character ``U+FEFF`` had a second purpose as a ``ZERO WIDTH "
"NO-BREAK SPACE``: A character that has no width and doesn't allow a word to "
"be split. It can e.g. be used to give hints to a ligature algorithm. With "
"Unicode 4.0 using ``U+FEFF`` as a ``ZERO WIDTH NO-BREAK SPACE`` has been "
"deprecated (with ``U+2060`` (``WORD JOINER``) assuming this role). "
"Nevertheless Unicode software still must be able to handle ``U+FEFF`` in "
"both roles: As a BOM it's a device to determine the storage layout of the "
"encoded bytes, and vanishes once the byte sequence has been decoded into a "
"string; as a ``ZERO WIDTH NO-BREAK SPACE`` it's a normal character that will "
"be decoded like any other."
msgstr ""

#: ../../../library/codecs.rst:811
msgid ""
"There's another encoding that is able to encoding the full range of Unicode "
"characters: UTF-8. UTF-8 is an 8-bit encoding, which means there are no "
"issues with byte order in UTF-8. Each byte in a UTF-8 byte sequence consists "
"of two parts: Marker bits (the most significant bits) and payload bits. The "
"marker bits are a sequence of zero to six 1 bits followed by a 0 bit. "
"Unicode characters are encoded like this (with x being payload bits, which "
"when concatenated give the Unicode character):"
msgstr ""

#: ../../../library/codecs.rst:820
msgid "Range"
msgstr ""

#: ../../../library/codecs.rst:820
msgid "Encoding"
msgstr ""

#: ../../../library/codecs.rst:822
msgid "``U-00000000`` ... ``U-0000007F``"
msgstr ""

#: ../../../library/codecs.rst:822
msgid "0xxxxxxx"
msgstr ""

#: ../../../library/codecs.rst:824
msgid "``U-00000080`` ... ``U-000007FF``"
msgstr ""

#: ../../../library/codecs.rst:824
msgid "110xxxxx 10xxxxxx"
msgstr ""

#: ../../../library/codecs.rst:826
msgid "``U-00000800`` ... ``U-0000FFFF``"
msgstr ""

#: ../../../library/codecs.rst:826
msgid "1110xxxx 10xxxxxx 10xxxxxx"
msgstr ""

#: ../../../library/codecs.rst:828
msgid "``U-00010000`` ... ``U-001FFFFF``"
msgstr ""

#: ../../../library/codecs.rst:828
msgid "11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr ""

#: ../../../library/codecs.rst:830
msgid "``U-00200000`` ... ``U-03FFFFFF``"
msgstr ""

#: ../../../library/codecs.rst:830
msgid "111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr ""

#: ../../../library/codecs.rst:832
msgid "``U-04000000`` ... ``U-7FFFFFFF``"
msgstr ""

#: ../../../library/codecs.rst:832
msgid "1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr ""

#: ../../../library/codecs.rst:836
msgid ""
"The least significant bit of the Unicode character is the rightmost x bit."
msgstr ""

#: ../../../library/codecs.rst:838
msgid ""
"As UTF-8 is an 8-bit encoding no BOM is required and any ``U+FEFF`` "
"character in the decoded string (even if it's the first character) is "
"treated as a ``ZERO WIDTH NO-BREAK SPACE``."
msgstr ""

#: ../../../library/codecs.rst:842
msgid ""
"Without external information it's impossible to reliably determine which "
"encoding was used for encoding a string. Each charmap encoding can decode "
"any random byte sequence. However that's not possible with UTF-8, as UTF-8 "
"byte sequences have a structure that doesn't allow arbitrary byte sequences. "
"To increase the reliability with which a UTF-8 encoding can be detected, "
"Microsoft invented a variant of UTF-8 (that Python 2.5 calls ``\"utf-8-"
"sig\"``) for its Notepad program: Before any of the Unicode characters is "
"written to the file, a UTF-8 encoded BOM (which looks like this as a byte "
"sequence: ``0xef``, ``0xbb``, ``0xbf``) is written. As it's rather "
"improbable that any charmap encoded file starts with these byte values "
"(which would e.g. map to"
msgstr ""

#: ../../../library/codecs.rst:0
msgid "LATIN SMALL LETTER I WITH DIAERESIS"
msgstr ""

#: ../../../library/codecs.rst:0
msgid "RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK"
msgstr ""

#: ../../../library/codecs.rst:0
msgid "INVERTED QUESTION MARK"
msgstr ""

#: ../../../library/codecs.rst:858
msgid ""
"in iso-8859-1), this increases the probability that a utf-8-sig encoding can "
"be correctly guessed from the byte sequence. So here the BOM is not used to "
"be able to determine the byte order used for generating the byte sequence, "
"but as a signature that helps in guessing the encoding. On encoding the "
"utf-8-sig codec will write ``0xef``, ``0xbb``, ``0xbf`` as the first three "
"bytes to the file. On decoding utf-8-sig will skip those three bytes if they "
"appear as the first three bytes in the file."
msgstr ""

#: ../../../library/codecs.rst:870
msgid "Standard Encodings"
msgstr ""

#: ../../../library/codecs.rst:872
msgid ""
"Python comes with a number of codecs built-in, either implemented as C "
"functions or with dictionaries as mapping tables. The following table lists "
"the codecs by name, together with a few common aliases, and the languages "
"for which the encoding is likely used. Neither the list of aliases nor the "
"list of languages is meant to be exhaustive. Notice that spelling "
"alternatives that only differ in case or use a hyphen instead of an "
"underscore are also valid aliases."
msgstr ""

#: ../../../library/codecs.rst:879
msgid ""
"Many of the character sets support the same languages. They vary in "
"individual characters (e.g. whether the EURO SIGN is supported or not), and "
"in the assignment of characters to code positions. For the European "
"languages in particular, the following variants typically exist:"
msgstr ""

#: ../../../library/codecs.rst:884
msgid "an ISO 8859 codeset"
msgstr ""

#: ../../../library/codecs.rst:886
msgid ""
"a Microsoft Windows code page, which is typically derived from a 8859 "
"codeset, but replaces control characters with additional graphic characters"
msgstr ""

#: ../../../library/codecs.rst:889
msgid "an IBM EBCDIC code page"
msgstr ""

#: ../../../library/codecs.rst:891
msgid "an IBM PC code page, which is ASCII compatible"
msgstr ""

#: ../../../library/codecs.rst:894 ../../../library/codecs.rst:1097
msgid "Codec"
msgstr ""

#: ../../../library/codecs.rst:894 ../../../library/codecs.rst:1097
msgid "Aliases"
msgstr ""

#: ../../../library/codecs.rst:894
msgid "Languages"
msgstr ""

#: ../../../library/codecs.rst:896
msgid "ascii"
msgstr ""

#: ../../../library/codecs.rst:896
msgid "646, us-ascii"
msgstr ""

#: ../../../library/codecs.rst:896 ../../../library/codecs.rst:902
#: ../../../library/codecs.rst:906
msgid "English"
msgstr ""

#: ../../../library/codecs.rst:898
msgid "big5"
msgstr ""

#: ../../../library/codecs.rst:898
msgid "big5-tw, csbig5"
msgstr ""

#: ../../../library/codecs.rst:898 ../../../library/codecs.rst:900
#: ../../../library/codecs.rst:950
msgid "Traditional Chinese"
msgstr ""

#: ../../../library/codecs.rst:900
msgid "big5hkscs"
msgstr ""

#: ../../../library/codecs.rst:900
msgid "big5-hkscs, hkscs"
msgstr ""

#: ../../../library/codecs.rst:902
msgid "cp037"
msgstr ""

#: ../../../library/codecs.rst:902
msgid "IBM037, IBM039"
msgstr ""

#: ../../../library/codecs.rst:904
msgid "cp424"
msgstr ""

#: ../../../library/codecs.rst:904
msgid "EBCDIC-CP-HE, IBM424"
msgstr ""

#: ../../../library/codecs.rst:904 ../../../library/codecs.rst:922
#: ../../../library/codecs.rst:930 ../../../library/codecs.rst:969
#: ../../../library/codecs.rst:1032
msgid "Hebrew"
msgstr ""

#: ../../../library/codecs.rst:906
msgid "cp437"
msgstr ""

#: ../../../library/codecs.rst:906
msgid "437, IBM437"
msgstr ""

#: ../../../library/codecs.rst:908
msgid "cp500"
msgstr ""

#: ../../../library/codecs.rst:908
msgid "EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500"
msgstr ""

#: ../../../library/codecs.rst:908 ../../../library/codecs.rst:915
#: ../../../library/codecs.rst:956 ../../../library/codecs.rst:963
#: ../../../library/codecs.rst:1042 ../../../library/codecs.rst:1059
msgid "Western Europe"
msgstr ""

#: ../../../library/codecs.rst:911
msgid "cp737"
msgstr ""

#: ../../../library/codecs.rst:911 ../../../library/codecs.rst:940
#: ../../../library/codecs.rst:944 ../../../library/codecs.rst:965
#: ../../../library/codecs.rst:1030 ../../../library/codecs.rst:1053
msgid "Greek"
msgstr ""

#: ../../../library/codecs.rst:913
msgid "cp775"
msgstr ""

#: ../../../library/codecs.rst:913
msgid "IBM775"
msgstr ""

#: ../../../library/codecs.rst:913 ../../../library/codecs.rst:973
#: ../../../library/codecs.rst:1023 ../../../library/codecs.rst:1038
msgid "Baltic languages"
msgstr ""

#: ../../../library/codecs.rst:915
msgid "cp850"
msgstr ""

#: ../../../library/codecs.rst:915
msgid "850, IBM850"
msgstr ""

#: ../../../library/codecs.rst:917
msgid "cp852"
msgstr ""

#: ../../../library/codecs.rst:917
msgid "852, IBM852"
msgstr ""

#: ../../../library/codecs.rst:917 ../../../library/codecs.rst:958
#: ../../../library/codecs.rst:1019 ../../../library/codecs.rst:1057
msgid "Central and Eastern Europe"
msgstr ""

#: ../../../library/codecs.rst:919
msgid "cp855"
msgstr ""

#: ../../../library/codecs.rst:919
msgid "855, IBM855"
msgstr ""

#: ../../../library/codecs.rst:919 ../../../library/codecs.rst:960
#: ../../../library/codecs.rst:1025 ../../../library/codecs.rst:1050
msgid "Bulgarian, Byelorussian, Macedonian, Russian, Serbian"
msgstr ""

#: ../../../library/codecs.rst:922
msgid "cp856"
msgstr ""

#: ../../../library/codecs.rst:924
msgid "cp857"
msgstr ""

#: ../../../library/codecs.rst:924
msgid "857, IBM857"
msgstr ""

#: ../../../library/codecs.rst:924 ../../../library/codecs.rst:954
#: ../../../library/codecs.rst:967 ../../../library/codecs.rst:1034
#: ../../../library/codecs.rst:1061
msgid "Turkish"
msgstr ""

#: ../../../library/codecs.rst:926
msgid "cp860"
msgstr ""

#: ../../../library/codecs.rst:926
msgid "860, IBM860"
msgstr ""

#: ../../../library/codecs.rst:926
msgid "Portuguese"
msgstr ""

#: ../../../library/codecs.rst:928
msgid "cp861"
msgstr ""

#: ../../../library/codecs.rst:928
msgid "861, CP-IS, IBM861"
msgstr ""

#: ../../../library/codecs.rst:928 ../../../library/codecs.rst:1055
msgid "Icelandic"
msgstr ""

#: ../../../library/codecs.rst:930
msgid "cp862"
msgstr ""

#: ../../../library/codecs.rst:930
msgid "862, IBM862"
msgstr ""

#: ../../../library/codecs.rst:932
msgid "cp863"
msgstr ""

#: ../../../library/codecs.rst:932
msgid "863, IBM863"
msgstr ""

#: ../../../library/codecs.rst:932
msgid "Canadian"
msgstr ""

#: ../../../library/codecs.rst:934
msgid "cp864"
msgstr ""

#: ../../../library/codecs.rst:934
msgid "IBM864"
msgstr ""

#: ../../../library/codecs.rst:934 ../../../library/codecs.rst:971
#: ../../../library/codecs.rst:1028
msgid "Arabic"
msgstr ""

#: ../../../library/codecs.rst:936
msgid "cp865"
msgstr ""

#: ../../../library/codecs.rst:936
msgid "865, IBM865"
msgstr ""

#: ../../../library/codecs.rst:936
msgid "Danish, Norwegian"
msgstr ""

#: ../../../library/codecs.rst:938
msgid "cp866"
msgstr ""

#: ../../../library/codecs.rst:938
msgid "866, IBM866"
msgstr ""

#: ../../../library/codecs.rst:938 ../../../library/codecs.rst:1046
msgid "Russian"
msgstr ""

#: ../../../library/codecs.rst:940
msgid "cp869"
msgstr ""

#: ../../../library/codecs.rst:940
msgid "869, CP-GR, IBM869"
msgstr ""

#: ../../../library/codecs.rst:942
msgid "cp874"
msgstr ""

#: ../../../library/codecs.rst:942
msgid "Thai"
msgstr ""

#: ../../../library/codecs.rst:944
msgid "cp875"
msgstr ""

#: ../../../library/codecs.rst:946
msgid "cp932"
msgstr ""

#: ../../../library/codecs.rst:946
msgid "932, ms932, mskanji, ms-kanji"
msgstr ""

#: ../../../library/codecs.rst:946 ../../../library/codecs.rst:977
#: ../../../library/codecs.rst:979 ../../../library/codecs.rst:981
#: ../../../library/codecs.rst:998 ../../../library/codecs.rst:1001
#: ../../../library/codecs.rst:1006 ../../../library/codecs.rst:1009
#: ../../../library/codecs.rst:1011 ../../../library/codecs.rst:1066
#: ../../../library/codecs.rst:1069 ../../../library/codecs.rst:1072
msgid "Japanese"
msgstr ""

#: ../../../library/codecs.rst:948
msgid "cp949"
msgstr ""

#: ../../../library/codecs.rst:948
msgid "949, ms949, uhc"
msgstr ""

#: ../../../library/codecs.rst:948 ../../../library/codecs.rst:983
#: ../../../library/codecs.rst:1013 ../../../library/codecs.rst:1044
msgid "Korean"
msgstr ""

#: ../../../library/codecs.rst:950
msgid "cp950"
msgstr ""

#: ../../../library/codecs.rst:950
msgid "950, ms950"
msgstr ""

#: ../../../library/codecs.rst:952
msgid "cp1006"
msgstr ""

#: ../../../library/codecs.rst:952
msgid "Urdu"
msgstr ""

#: ../../../library/codecs.rst:954
msgid "cp1026"
msgstr ""

#: ../../../library/codecs.rst:954
msgid "ibm1026"
msgstr ""

#: ../../../library/codecs.rst:956
msgid "cp1140"
msgstr ""

#: ../../../library/codecs.rst:956
msgid "ibm1140"
msgstr ""

#: ../../../library/codecs.rst:958
msgid "cp1250"
msgstr ""

#: ../../../library/codecs.rst:958
msgid "windows-1250"
msgstr ""

#: ../../../library/codecs.rst:960
msgid "cp1251"
msgstr ""

#: ../../../library/codecs.rst:960
msgid "windows-1251"
msgstr ""

#: ../../../library/codecs.rst:963
msgid "cp1252"
msgstr ""

#: ../../../library/codecs.rst:963
msgid "windows-1252"
msgstr ""

#: ../../../library/codecs.rst:965
msgid "cp1253"
msgstr ""

#: ../../../library/codecs.rst:965
msgid "windows-1253"
msgstr ""

#: ../../../library/codecs.rst:967
msgid "cp1254"
msgstr ""

#: ../../../library/codecs.rst:967
msgid "windows-1254"
msgstr ""

#: ../../../library/codecs.rst:969
msgid "cp1255"
msgstr ""

#: ../../../library/codecs.rst:969
msgid "windows-1255"
msgstr ""

#: ../../../library/codecs.rst:971
msgid "cp1256"
msgstr ""

#: ../../../library/codecs.rst:971
msgid "windows1256"
msgstr ""

#: ../../../library/codecs.rst:973
msgid "cp1257"
msgstr ""

#: ../../../library/codecs.rst:973
msgid "windows-1257"
msgstr ""

#: ../../../library/codecs.rst:975
msgid "cp1258"
msgstr ""

#: ../../../library/codecs.rst:975
msgid "windows-1258"
msgstr ""

#: ../../../library/codecs.rst:975
msgid "Vietnamese"
msgstr ""

#: ../../../library/codecs.rst:977
msgid "euc_jp"
msgstr ""

#: ../../../library/codecs.rst:977
msgid "eucjp, ujis, u-jis"
msgstr ""

#: ../../../library/codecs.rst:979
msgid "euc_jis_2004"
msgstr ""

#: ../../../library/codecs.rst:979
msgid "jisx0213, eucjis2004"
msgstr ""

#: ../../../library/codecs.rst:981
msgid "euc_jisx0213"
msgstr ""

#: ../../../library/codecs.rst:981
msgid "eucjisx0213"
msgstr ""

#: ../../../library/codecs.rst:983
msgid "euc_kr"
msgstr ""

#: ../../../library/codecs.rst:983
msgid "euckr, korean, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001"
msgstr ""

#: ../../../library/codecs.rst:987
msgid "gb2312"
msgstr ""

#: ../../../library/codecs.rst:987
msgid ""
"chinese, csiso58gb231280, euc- cn, euccn, eucgb2312-cn, gb2312-1980, "
"gb2312-80, iso- ir-58"
msgstr ""

#: ../../../library/codecs.rst:987 ../../../library/codecs.rst:996
msgid "Simplified Chinese"
msgstr ""

#: ../../../library/codecs.rst:992
msgid "gbk"
msgstr ""

#: ../../../library/codecs.rst:992
msgid "936, cp936, ms936"
msgstr ""

#: ../../../library/codecs.rst:992 ../../../library/codecs.rst:994
msgid "Unified Chinese"
msgstr ""

#: ../../../library/codecs.rst:994
msgid "gb18030"
msgstr ""

#: ../../../library/codecs.rst:994
msgid "gb18030-2000"
msgstr ""

#: ../../../library/codecs.rst:996
msgid "hz"
msgstr ""

#: ../../../library/codecs.rst:996
msgid "hzgb, hz-gb, hz-gb-2312"
msgstr ""

#: ../../../library/codecs.rst:998
msgid "iso2022_jp"
msgstr ""

#: ../../../library/codecs.rst:998
msgid "csiso2022jp, iso2022jp, iso-2022-jp"
msgstr ""

#: ../../../library/codecs.rst:1001
msgid "iso2022_jp_1"
msgstr ""

#: ../../../library/codecs.rst:1001
msgid "iso2022jp-1, iso-2022-jp-1"
msgstr ""

#: ../../../library/codecs.rst:1003
msgid "iso2022_jp_2"
msgstr ""

#: ../../../library/codecs.rst:1003
msgid "iso2022jp-2, iso-2022-jp-2"
msgstr ""

#: ../../../library/codecs.rst:1003
msgid "Japanese, Korean, Simplified Chinese, Western Europe, Greek"
msgstr ""

#: ../../../library/codecs.rst:1006
msgid "iso2022_jp_2004"
msgstr ""

#: ../../../library/codecs.rst:1006
msgid "iso2022jp-2004, iso-2022-jp-2004"
msgstr ""

#: ../../../library/codecs.rst:1009
msgid "iso2022_jp_3"
msgstr ""

#: ../../../library/codecs.rst:1009
msgid "iso2022jp-3, iso-2022-jp-3"
msgstr ""

#: ../../../library/codecs.rst:1011
msgid "iso2022_jp_ext"
msgstr ""

#: ../../../library/codecs.rst:1011
msgid "iso2022jp-ext, iso-2022-jp-ext"
msgstr ""

#: ../../../library/codecs.rst:1013
msgid "iso2022_kr"
msgstr ""

#: ../../../library/codecs.rst:1013
msgid "csiso2022kr, iso2022kr, iso-2022-kr"
msgstr ""

#: ../../../library/codecs.rst:1016
msgid "latin_1"
msgstr ""

#: ../../../library/codecs.rst:1016
msgid "iso-8859-1, iso8859-1, 8859, cp819, latin, latin1, L1"
msgstr ""

#: ../../../library/codecs.rst:1016
msgid "West Europe"
msgstr ""

#: ../../../library/codecs.rst:1019
msgid "iso8859_2"
msgstr ""

#: ../../../library/codecs.rst:1019
msgid "iso-8859-2, latin2, L2"
msgstr ""

#: ../../../library/codecs.rst:1021
msgid "iso8859_3"
msgstr ""

#: ../../../library/codecs.rst:1021
msgid "iso-8859-3, latin3, L3"
msgstr ""

#: ../../../library/codecs.rst:1021
msgid "Esperanto, Maltese"
msgstr ""

#: ../../../library/codecs.rst:1023
msgid "iso8859_4"
msgstr ""

#: ../../../library/codecs.rst:1023
msgid "iso-8859-4, latin4, L4"
msgstr ""

#: ../../../library/codecs.rst:1025
msgid "iso8859_5"
msgstr ""

#: ../../../library/codecs.rst:1025
msgid "iso-8859-5, cyrillic"
msgstr ""

#: ../../../library/codecs.rst:1028
msgid "iso8859_6"
msgstr ""

#: ../../../library/codecs.rst:1028
msgid "iso-8859-6, arabic"
msgstr ""

#: ../../../library/codecs.rst:1030
msgid "iso8859_7"
msgstr ""

#: ../../../library/codecs.rst:1030
msgid "iso-8859-7, greek, greek8"
msgstr ""

#: ../../../library/codecs.rst:1032
msgid "iso8859_8"
msgstr ""

#: ../../../library/codecs.rst:1032
msgid "iso-8859-8, hebrew"
msgstr ""

#: ../../../library/codecs.rst:1034
msgid "iso8859_9"
msgstr ""

#: ../../../library/codecs.rst:1034
msgid "iso-8859-9, latin5, L5"
msgstr ""

#: ../../../library/codecs.rst:1036
msgid "iso8859_10"
msgstr ""

#: ../../../library/codecs.rst:1036
msgid "iso-8859-10, latin6, L6"
msgstr ""

#: ../../../library/codecs.rst:1036
msgid "Nordic languages"
msgstr ""

#: ../../../library/codecs.rst:1038
msgid "iso8859_13"
msgstr ""

#: ../../../library/codecs.rst:1038
msgid "iso-8859-13"
msgstr ""

#: ../../../library/codecs.rst:1040
msgid "iso8859_14"
msgstr ""

#: ../../../library/codecs.rst:1040
msgid "iso-8859-14, latin8, L8"
msgstr ""

#: ../../../library/codecs.rst:1040
msgid "Celtic languages"
msgstr ""

#: ../../../library/codecs.rst:1042
msgid "iso8859_15"
msgstr ""

#: ../../../library/codecs.rst:1042
msgid "iso-8859-15"
msgstr ""

#: ../../../library/codecs.rst:1044
msgid "johab"
msgstr ""

#: ../../../library/codecs.rst:1044
msgid "cp1361, ms1361"
msgstr ""

#: ../../../library/codecs.rst:1046
msgid "koi8_r"
msgstr ""

#: ../../../library/codecs.rst:1048
msgid "koi8_u"
msgstr ""

#: ../../../library/codecs.rst:1048
msgid "Ukrainian"
msgstr ""

#: ../../../library/codecs.rst:1050
msgid "mac_cyrillic"
msgstr ""

#: ../../../library/codecs.rst:1050
msgid "maccyrillic"
msgstr ""

#: ../../../library/codecs.rst:1053
msgid "mac_greek"
msgstr ""

#: ../../../library/codecs.rst:1053
msgid "macgreek"
msgstr ""

#: ../../../library/codecs.rst:1055
msgid "mac_iceland"
msgstr ""

#: ../../../library/codecs.rst:1055
msgid "maciceland"
msgstr ""

#: ../../../library/codecs.rst:1057
msgid "mac_latin2"
msgstr ""

#: ../../../library/codecs.rst:1057
msgid "maclatin2, maccentraleurope"
msgstr ""

#: ../../../library/codecs.rst:1059
msgid "mac_roman"
msgstr ""

#: ../../../library/codecs.rst:1059
msgid "macroman"
msgstr ""

#: ../../../library/codecs.rst:1061
msgid "mac_turkish"
msgstr ""

#: ../../../library/codecs.rst:1061
msgid "macturkish"
msgstr ""

#: ../../../library/codecs.rst:1063
msgid "ptcp154"
msgstr ""

#: ../../../library/codecs.rst:1063
msgid "csptcp154, pt154, cp154, cyrillic-asian"
msgstr ""

#: ../../../library/codecs.rst:1063
msgid "Kazakh"
msgstr ""

#: ../../../library/codecs.rst:1066
msgid "shift_jis"
msgstr ""

#: ../../../library/codecs.rst:1066
msgid "csshiftjis, shiftjis, sjis, s_jis"
msgstr ""

#: ../../../library/codecs.rst:1069
msgid "shift_jis_2004"
msgstr ""

#: ../../../library/codecs.rst:1069
msgid "shiftjis2004, sjis_2004, sjis2004"
msgstr ""

#: ../../../library/codecs.rst:1072
msgid "shift_jisx0213"
msgstr ""

#: ../../../library/codecs.rst:1072
msgid "shiftjisx0213, sjisx0213, s_jisx0213"
msgstr ""

#: ../../../library/codecs.rst:1075
msgid "utf_32"
msgstr ""

#: ../../../library/codecs.rst:1075
msgid "U32, utf32"
msgstr ""

#: ../../../library/codecs.rst:1075 ../../../library/codecs.rst:1077
#: ../../../library/codecs.rst:1079 ../../../library/codecs.rst:1081
#: ../../../library/codecs.rst:1087 ../../../library/codecs.rst:1089
#: ../../../library/codecs.rst:1091
msgid "all languages"
msgstr ""

#: ../../../library/codecs.rst:1077
msgid "utf_32_be"
msgstr ""

#: ../../../library/codecs.rst:1077
msgid "UTF-32BE"
msgstr ""

#: ../../../library/codecs.rst:1079
msgid "utf_32_le"
msgstr ""

#: ../../../library/codecs.rst:1079
msgid "UTF-32LE"
msgstr ""

#: ../../../library/codecs.rst:1081
msgid "utf_16"
msgstr ""

#: ../../../library/codecs.rst:1081
msgid "U16, utf16"
msgstr ""

#: ../../../library/codecs.rst:1083
msgid "utf_16_be"
msgstr ""

#: ../../../library/codecs.rst:1083
msgid "UTF-16BE"
msgstr ""

#: ../../../library/codecs.rst:1083 ../../../library/codecs.rst:1085
msgid "all languages (BMP only)"
msgstr ""

#: ../../../library/codecs.rst:1085
msgid "utf_16_le"
msgstr ""

#: ../../../library/codecs.rst:1085
msgid "UTF-16LE"
msgstr ""

#: ../../../library/codecs.rst:1087
msgid "utf_7"
msgstr ""

#: ../../../library/codecs.rst:1087
msgid "U7, unicode-1-1-utf-7"
msgstr ""

#: ../../../library/codecs.rst:1089
msgid "utf_8"
msgstr ""

#: ../../../library/codecs.rst:1089
msgid "U8, UTF, utf8"
msgstr ""

#: ../../../library/codecs.rst:1091
msgid "utf_8_sig"
msgstr ""

#: ../../../library/codecs.rst:1097
msgid "Purpose"
msgstr ""

#: ../../../library/codecs.rst:1099
msgid "idna"
msgstr ""

#: ../../../library/codecs.rst:1099
msgid "Implements :rfc:`3490`, see also :mod:`encodings.idna`"
msgstr ""

#: ../../../library/codecs.rst:1103
msgid "mbcs"
msgstr ""

#: ../../../library/codecs.rst:1103
msgid "dbcs"
msgstr ""

#: ../../../library/codecs.rst:1103
msgid "Windows only: Encode operand according to the ANSI codepage (CP_ACP)"
msgstr ""

#: ../../../library/codecs.rst:1107
msgid "palmos"
msgstr ""

#: ../../../library/codecs.rst:1107
msgid "Encoding of PalmOS 3.5"
msgstr ""

#: ../../../library/codecs.rst:1109
msgid "punycode"
msgstr ""

#: ../../../library/codecs.rst:1109
msgid "Implements :rfc:`3492`"
msgstr ""

#: ../../../library/codecs.rst:1111
msgid "raw_unicode_escape"
msgstr ""

#: ../../../library/codecs.rst:1111
msgid ""
"Produce a string that is suitable as raw Unicode literal in Python source "
"code"
msgstr ""

#: ../../../library/codecs.rst:1116
msgid "undefined"
msgstr ""

#: ../../../library/codecs.rst:1116
msgid ""
"Raise an exception for all conversions. Can be used as the system encoding "
"if no automatic coercion between byte and Unicode strings is desired."
msgstr ""

#: ../../../library/codecs.rst:1124
msgid "unicode_escape"
msgstr ""

#: ../../../library/codecs.rst:1124
msgid ""
"Produce a string that is suitable as Unicode literal in Python source code"
msgstr ""

#: ../../../library/codecs.rst:1129
msgid "unicode_internal"
msgstr ""

#: ../../../library/codecs.rst:1129
msgid "Return the internal representation of the operand"
msgstr ""

#: ../../../library/codecs.rst:1136
msgid ""
":mod:`encodings.idna` --- Internationalized Domain Names in Applications"
msgstr ""

#: ../../../library/codecs.rst:1142
msgid ""
"This module implements :rfc:`3490` (Internationalized Domain Names in "
"Applications) and :rfc:`3492` (Nameprep: A Stringprep Profile for "
"Internationalized Domain Names (IDN)). It builds upon the ``punycode`` "
"encoding and :mod:`stringprep`."
msgstr ""

#: ../../../library/codecs.rst:1147
msgid ""
"These RFCs together define a protocol to support non-ASCII characters in "
"domain names. A domain name containing non-ASCII characters (such as ``www."
"Alliancefrançaise.nu``) is converted into an ASCII-compatible encoding (ACE, "
"such as ``www.xn--alliancefranaise-npb.nu``). The ACE form of the domain "
"name is then used in all places where arbitrary characters are not allowed "
"by the protocol, such as DNS queries, HTTP :mailheader:`Host` fields, and so "
"on. This conversion is carried out in the application; if possible invisible "
"to the user: The application should transparently convert Unicode domain "
"labels to IDNA on the wire, and convert back ACE labels to Unicode before "
"presenting them to the user."
msgstr ""

#: ../../../library/codecs.rst:1158
msgid ""
"Python supports this conversion in several ways: The ``idna`` codec allows "
"to convert between Unicode and the ACE. Furthermore, the :mod:`socket` "
"module transparently converts Unicode host names to ACE, so that "
"applications need not be concerned about converting host names themselves "
"when they pass them to the socket module. On top of that, modules that have "
"host names as function parameters, such as :mod:`http.client` and :mod:"
"`ftplib`, accept Unicode host names (:mod:`http.client` then also "
"transparently sends an IDNA hostname in the :mailheader:`Host` field if it "
"sends that field at all)."
msgstr ""

#: ../../../library/codecs.rst:1167
msgid ""
"When receiving host names from the wire (such as in reverse name lookup), no "
"automatic conversion to Unicode is performed: Applications wishing to "
"present such host names to the user should decode them to Unicode."
msgstr ""

#: ../../../library/codecs.rst:1171
msgid ""
"The module :mod:`encodings.idna` also implements the nameprep procedure, "
"which performs certain normalizations on host names, to achieve case-"
"insensitivity of international domain names, and to unify similar "
"characters. The nameprep functions can be used directly if desired."
msgstr ""

#: ../../../library/codecs.rst:1179
msgid ""
"Return the nameprepped version of *label*. The implementation currently "
"assumes query strings, so ``AllowUnassigned`` is true."
msgstr ""

#: ../../../library/codecs.rst:1185
msgid ""
"Convert a label to ASCII, as specified in :rfc:`3490`. ``UseSTD3ASCIIRules`` "
"is assumed to be false."
msgstr ""

#: ../../../library/codecs.rst:1191
msgid "Convert a label to Unicode, as specified in :rfc:`3490`."
msgstr ""

#: ../../../library/codecs.rst:1195
msgid ":mod:`encodings.utf_8_sig` --- UTF-8 codec with BOM signature"
msgstr ""

#: ../../../library/codecs.rst:1201
msgid ""
"This module implements a variant of the UTF-8 codec: On encoding a UTF-8 "
"encoded BOM will be prepended to the UTF-8 encoded bytes. For the stateful "
"encoder this is only done once (on the first write to the byte stream).  For "
"decoding an optional UTF-8 encoded BOM at the start of the data will be "
"skipped."
msgstr ""

#: ../../../library/codecs.rst:12
msgid "Unicode"
msgstr ""

#: ../../../library/codecs.rst:12
msgid "Codecs"
msgstr ""

#: ../../../library/codecs.rst:12
msgid "encode"
msgstr ""

#: ../../../library/codecs.rst:12
msgid "decode"
msgstr ""

#: ../../../library/codecs.rst:12
msgid "streams"
msgstr ""

#: ../../../library/codecs.rst:12
msgid "stackable"
msgstr ""
