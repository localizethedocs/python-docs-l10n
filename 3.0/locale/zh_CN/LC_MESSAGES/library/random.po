# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/random.rst:3
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ""

#: ../../../library/random.rst:9
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""

#: ../../../library/random.rst:12
msgid ""
"For integers, uniform selection from a range. For sequences, uniform "
"selection of a random element, a function to generate a random permutation "
"of a list in-place, and a function for random sampling without replacement."
msgstr ""

#: ../../../library/random.rst:16
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""

#: ../../../library/random.rst:20
msgid ""
"Almost all module functions depend on the basic function :func:`random`, "
"which generates a random float uniformly in the semi-open range [0.0, 1.0).  "
"Python uses the Mersenne Twister as the core generator.  It produces 53-bit "
"precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""

#: ../../../library/random.rst:29
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state."
msgstr ""

#: ../../../library/random.rst:33
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: in that case, override the :meth:"
"`random`, :meth:`seed`, :meth:`getstate`, and :meth:`setstate`. Optionally, "
"a new generator can supply a :meth:`getrandbits` method --- this allows :"
"meth:`randrange` to produce selections over an arbitrarily large range."
msgstr ""

#: ../../../library/random.rst:40
msgid "Bookkeeping functions:"
msgstr ""

#: ../../../library/random.rst:45
msgid ""
"Initialize the basic random number generator. Optional argument *x* can be "
"any :term:`hashable` object. If *x* is omitted or ``None``, current system "
"time is used; current system time is also used to initialize the generator "
"when the module is first imported.  If randomness sources are provided by "
"the operating system, they are used instead of the system time (see the :"
"func:`os.urandom` function for details on availability)."
msgstr ""

#: ../../../library/random.rst:52
msgid ""
"If *x* is not ``None`` or an int, ``hash(x)`` is used instead. If *x* is an "
"int, *x* is used directly."
msgstr ""

#: ../../../library/random.rst:58
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""

#: ../../../library/random.rst:64
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`setstate` was called."
msgstr ""

#: ../../../library/random.rst:71
msgid ""
"Change the internal state to one different from and likely far away from the "
"current state.  *n* is a non-negative integer which is used to scramble the "
"current state vector.  This is most useful in multi-threaded programs, in "
"conjunction with multiple instances of the :class:`Random` class: :meth:"
"`setstate` or :meth:`seed` can be used to force all instances into the same "
"internal state, and then :meth:`jumpahead` can be used to force the "
"instances' states far apart."
msgstr ""

#: ../../../library/random.rst:82
msgid ""
"Returns a python integer with *k* random bits. This method is supplied with "
"the MersenneTwister generator and some other generators may also provide it "
"as an optional part of the API. When available, :meth:`getrandbits` enables :"
"meth:`randrange` to handle arbitrarily large ranges."
msgstr ""

#: ../../../library/random.rst:88
msgid "Functions for integers:"
msgstr ""

#: ../../../library/random.rst:92
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr ""

#: ../../../library/random.rst:99
msgid "Return a random integer *N* such that ``a <= N <= b``."
msgstr ""

#: ../../../library/random.rst:102
msgid "Functions for sequences:"
msgstr ""

#: ../../../library/random.rst:106
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""

#: ../../../library/random.rst:112
msgid ""
"Shuffle the sequence *x* in place. The optional argument *random* is a 0-"
"argument function returning a random float in [0.0, 1.0); by default, this "
"is the function :func:`random`."
msgstr ""

#: ../../../library/random.rst:116
msgid ""
"Note that for even rather small ``len(x)``, the total number of permutations "
"of *x* is larger than the period of most random number generators; this "
"implies that most permutations of a long sequence can never be generated."
msgstr ""

#: ../../../library/random.rst:123
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence or set. Used for random sampling without replacement."
msgstr ""

#: ../../../library/random.rst:126
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""

#: ../../../library/random.rst:132
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""

#: ../../../library/random.rst:135
msgid ""
"To choose a sample from a range of integers, use an :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), 60)``."
msgstr ""

#: ../../../library/random.rst:139
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""

#: ../../../library/random.rst:147
msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr ""

#: ../../../library/random.rst:152
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""

#: ../../../library/random.rst:158
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""

#: ../../../library/random.rst:166
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""

#: ../../../library/random.rst:172
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  (The "
"parameter would be called \"lambda\", but that is a reserved word in "
"Python.) Returned values range from 0 to positive infinity."
msgstr ""

#: ../../../library/random.rst:179
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  Conditions on the "
"parameters are ``alpha > 0`` and ``beta > 0``."
msgstr ""

#: ../../../library/random.rst:185
msgid ""
"Gaussian distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation.  This is slightly faster than the :func:`normalvariate` function "
"defined below."
msgstr ""

#: ../../../library/random.rst:192
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""

#: ../../../library/random.rst:200
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""

#: ../../../library/random.rst:205
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""

#: ../../../library/random.rst:213
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr ""

#: ../../../library/random.rst:218
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""

#: ../../../library/random.rst:222
msgid "Alternative Generators:"
msgstr ""

#: ../../../library/random.rst:226
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state and sequences are not reproducible. "
"Accordingly, the :meth:`seed` and :meth:`jumpahead` methods have no effect "
"and are ignored. The :meth:`getstate` and :meth:`setstate` methods raise :"
"exc:`NotImplementedError` if called."
msgstr ""

#: ../../../library/random.rst:234
msgid "Examples of basic usage::"
msgstr ""

#: ../../../library/random.rst:259
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998."
msgstr ""
