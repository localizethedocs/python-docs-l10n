# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/__future__.rst:2
msgid ":mod:`__future__` --- Future statement definitions"
msgstr ""

#: ../../../library/__future__.rst:8
msgid ":mod:`__future__` is a real module, and serves three purposes:"
msgstr ""

#: ../../../library/__future__.rst:10
msgid ""
"To avoid confusing existing tools that analyze import statements and expect "
"to find the modules they're importing."
msgstr ""

#: ../../../library/__future__.rst:13
msgid ""
"To ensure that future_statements run under releases prior to 2.1 at least "
"yield runtime exceptions (the import of :mod:`__future__` will fail, because "
"there was no module of that name prior to 2.1)."
msgstr ""

#: ../../../library/__future__.rst:17
msgid ""
"To document when incompatible changes were introduced, and when they will be "
"--- or were --- made mandatory.  This is a form of executable documentation, "
"and can be inspected programmatically via importing :mod:`__future__` and "
"examining its contents."
msgstr ""

#: ../../../library/__future__.rst:22
msgid "Each statement in :file:`__future__.py` is of the form::"
msgstr ""

#: ../../../library/__future__.rst:24
msgid ""
"FeatureName = _Feature(OptionalRelease, MandatoryRelease,\n"
"                       CompilerFlag)"
msgstr ""

#: ../../../library/__future__.rst:28
msgid ""
"where, normally, *OptionalRelease* is less than *MandatoryRelease*, and both "
"are 5-tuples of the same form as ``sys.version_info``::"
msgstr ""

#: ../../../library/__future__.rst:31
msgid ""
"(PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int\n"
" PY_MINOR_VERSION, # the 1; an int\n"
" PY_MICRO_VERSION, # the 0; an int\n"
" PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; "
"string\n"
" PY_RELEASE_SERIAL # the 3; an int\n"
")"
msgstr ""

#: ../../../library/__future__.rst:38
msgid ""
"*OptionalRelease* records the first release in which the feature was "
"accepted."
msgstr ""

#: ../../../library/__future__.rst:40
msgid ""
"In the case of a *MandatoryRelease* that has not yet occurred, "
"*MandatoryRelease* predicts the release in which the feature will become "
"part of the language."
msgstr ""

#: ../../../library/__future__.rst:44
msgid ""
"Else *MandatoryRelease* records when the feature became part of the "
"language; in releases at or after that, modules no longer need a future "
"statement to use the feature in question, but may continue to use such "
"imports."
msgstr ""

#: ../../../library/__future__.rst:48
msgid ""
"*MandatoryRelease* may also be ``None``, meaning that a planned feature got "
"dropped."
msgstr ""

#: ../../../library/__future__.rst:51
msgid ""
"Instances of class :class:`_Feature` have two corresponding methods, :meth:"
"`getOptionalRelease` and :meth:`getMandatoryRelease`."
msgstr ""

#: ../../../library/__future__.rst:54
msgid ""
"*CompilerFlag* is the (bitfield) flag that should be passed in the fourth "
"argument to the builtin function :func:`compile` to enable the feature in "
"dynamically compiled code.  This flag is stored in the :attr:`compiler_flag` "
"attribute on :class:`_Feature` instances."
msgstr ""

#: ../../../library/__future__.rst:59
msgid "No feature description will ever be deleted from :mod:`__future__`."
msgstr ""
