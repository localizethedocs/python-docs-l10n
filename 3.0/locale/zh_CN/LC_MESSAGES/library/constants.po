# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/constants.rst:2
msgid "Built-in Constants"
msgstr ""

#: ../../../library/constants.rst:4
msgid "A small number of constants live in the built-in namespace.  They are:"
msgstr ""

#: ../../../library/constants.rst:9
msgid ""
":data:`None`, :data:`False`, :data:`True` and :data:`__debug__` cannot be "
"reassigned (assignments to them raise :exc:`SyntaxError`), so they can be "
"considered \"true\" constants."
msgstr ""

#: ../../../library/constants.rst:17
msgid ""
"The false value of the :class:`bool` type. Assignments to ``False`` are "
"illegal and raise a :exc:`SyntaxError`."
msgstr ""

#: ../../../library/constants.rst:23
msgid ""
"The true value of the :class:`bool` type. Assignments to ``True`` are "
"illegal and raise a :exc:`SyntaxError`."
msgstr ""

#: ../../../library/constants.rst:29
msgid ""
"The sole value of :attr:`types.NoneType`.  ``None`` is frequently used to "
"represent the absence of a value, as when default arguments are not passed "
"to a function. Assignments to ``None`` are illegal and raise a :exc:"
"`SyntaxError`."
msgstr ""

#: ../../../library/constants.rst:36
msgid ""
"Special value which can be returned by the \"rich comparison\" special "
"methods (:meth:`__eq__`, :meth:`__lt__`, and friends), to indicate that the "
"comparison is not implemented with respect to the other type."
msgstr ""

#: ../../../library/constants.rst:43
msgid ""
"The same as ``...``. Special value used mostly in conjunction with extended "
"slicing syntax for user-defined container data types, as in ::"
msgstr ""

#: ../../../library/constants.rst:46
msgid ".. XXX Someone who understands extended slicing should fill in here."
msgstr ""

#: ../../../library/constants.rst:51
msgid ""
"This constant is true if Python was not started with an :option:`-O` option. "
"Assignments to :const:`__debug__` are illegal and raise a :exc:"
"`SyntaxError`. See also the :keyword:`assert` statement."
msgstr ""

#: ../../../library/constants.rst:57
msgid "Constants added by the :mod:`site` module"
msgstr ""

#: ../../../library/constants.rst:59
msgid ""
"The :mod:`site` module (which is imported automatically during startup, "
"except if the :option:`-S` command-line option is given) adds several "
"constants to the built-in namespace.  They are useful for the interactive "
"interpreter shell and should not be used in programs."
msgstr ""

#: ../../../library/constants.rst:67
msgid ""
"Objects that when printed, print a message like \"Use quit() or Ctrl-D (i.e. "
"EOF) to exit\", and when called, raise :exc:`SystemExit` with the specified "
"exit code, and when ."
msgstr ""

#: ../../../library/constants.rst:75
msgid ""
"Objects that when printed, print a message like \"Type license() to see the "
"full license text\", and when called, display the corresponding text in a "
"pager-like fashion (one screen at a time)."
msgstr ""
