# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/plistlib.rst:2
msgid ":mod:`plistlib` --- Generate and parse Mac OS X ``.plist`` files"
msgstr ""

#: ../../../library/plistlib.rst:14
msgid ""
"This module provides an interface for reading and writing the \"property "
"list\" XML files used mainly by Mac OS X."
msgstr ""

#: ../../../library/plistlib.rst:17
msgid ""
"The property list (``.plist``) file format is a simple XML pickle supporting "
"basic object types, like dictionaries, lists, numbers and strings.  Usually "
"the top level object is a dictionary."
msgstr ""

#: ../../../library/plistlib.rst:21
msgid ""
"Values can be strings, integers, floats, booleans, tuples, lists, "
"dictionaries (but only with string keys), :class:`Data` or :class:`datetime."
"datetime` objects.  String values (including dictionary keys) may be unicode "
"strings -- they will be written out as UTF-8."
msgstr ""

#: ../../../library/plistlib.rst:26
msgid ""
"The ``<data>`` plist type is supported through the :class:`Data` class.  "
"This is a thin wrapper around a Python string.  Use :class:`Data` if your "
"strings contain control characters."
msgstr ""

#: ../../../library/plistlib.rst:32
msgid ""
"`PList manual page <http://developer.apple.com/documentation/Darwin/"
"Reference/ManPages/man5/plist.5.html>`"
msgstr ""

#: ../../../library/plistlib.rst:33
msgid "Apple's documentation of the file format."
msgstr ""

#: ../../../library/plistlib.rst:36
msgid "This module defines the following functions:"
msgstr ""

#: ../../../library/plistlib.rst:40
msgid ""
"Read a plist file. *pathOrFile* may either be a file name or a (readable) "
"file object.  Return the unpacked root object (which usually is a "
"dictionary)."
msgstr ""

#: ../../../library/plistlib.rst:44
msgid ""
"The XML data is parsed using the Expat parser from :mod:`xml.parsers.expat` "
"-- see its documentation for possible exceptions on ill-formed XML. Unknown "
"elements will simply be ignored by the plist parser."
msgstr ""

#: ../../../library/plistlib.rst:51
msgid ""
"Write *rootObject* to a plist file. *pathOrFile* may either be a file name "
"or a (writable) file object."
msgstr ""

#: ../../../library/plistlib.rst:54
msgid ""
"A :exc:`TypeError` will be raised if the object is of an unsupported type or "
"a container that contains objects of unsupported types."
msgstr ""

#: ../../../library/plistlib.rst:60
msgid "Read a plist from a string.  Return the root object."
msgstr ""

#: ../../../library/plistlib.rst:65
msgid "Return *rootObject* as a plist-formatted string."
msgstr ""

#: ../../../library/plistlib.rst:68
msgid "The following class is available:"
msgstr ""

#: ../../../library/plistlib.rst:72
msgid ""
"Return a \"data\" wrapper object around the string *data*.  This is used in "
"functions converting from/to plists to represent the ``<data>`` type "
"available in plists."
msgstr ""

#: ../../../library/plistlib.rst:76
msgid ""
"It has one attribute, :attr:`data`, that can be used to retrieve the Python "
"string stored in it."
msgstr ""

#: ../../../library/plistlib.rst:81
msgid "Examples"
msgstr ""

#: ../../../library/plistlib.rst:83
msgid "Generating a plist::"
msgstr ""

#: ../../../library/plistlib.rst:85
msgid ""
"pl = dict(\n"
"    aString=\"Doodah\",\n"
"    aList=[\"A\", \"B\", 12, 32.1, [1, 2, 3]],\n"
"    aFloat = 0.1,\n"
"    anInt = 728,\n"
"    aDict=dict(\n"
"        anotherString=\"<hello & hi there!>\",\n"
"        aUnicodeValue=u'M\\xe4ssig, Ma\\xdf',\n"
"        aTrueValue=True,\n"
"        aFalseValue=False,\n"
"    ),\n"
"    someData = Data(\"<binary gunk>\"),\n"
"    someMoreData = Data(\"<lots of binary gunk>\" * 10),\n"
"    aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),\n"
")\n"
"# unicode keys are possible, but a little awkward to use:\n"
"pl[u'\\xc5benraa'] = \"That was a unicode key.\"\n"
"writePlist(pl, fileName)"
msgstr ""

#: ../../../library/plistlib.rst:104
msgid "Parsing a plist::"
msgstr ""

#: ../../../library/plistlib.rst:106
msgid ""
"pl = readPlist(pathOrFile)\n"
"print(pl[\"aKey\"])"
msgstr ""

#: ../../../library/plistlib.rst:10
msgid "plist"
msgstr ""

#: ../../../library/plistlib.rst:10
msgid "file"
msgstr ""

#: ../../../library/plistlib.rst:10
msgid "property list"
msgstr ""
