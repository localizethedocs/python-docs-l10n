# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/statistics.rst:2
msgid ":mod:`statistics` --- Mathematical statistics functions"
msgstr ""

#: ../../../library/statistics.rst:12
msgid "**Source code:** :source:`Lib/statistics.py`"
msgstr ""

#: ../../../library/statistics.rst:21
msgid ""
"This module provides functions for calculating mathematical statistics of "
"numeric (:class:`~numbers.Real`-valued) data."
msgstr ""

#: ../../../library/statistics.rst:24
msgid ""
"The module is not intended to be a competitor to third-party libraries such "
"as `NumPy <https://numpy.org>`_, `SciPy <https://www.scipy.org/>`_, or "
"proprietary full-featured statistics packages aimed at professional "
"statisticians such as Minitab, SAS and Matlab. It is aimed at the level of "
"graphing and scientific calculators."
msgstr ""

#: ../../../library/statistics.rst:30
msgid ""
"Unless explicitly noted, these functions support :class:`int`, :class:"
"`float`, :class:`~decimal.Decimal` and :class:`~fractions.Fraction`. "
"Behaviour with other types (whether in the numeric tower or not) is "
"currently unsupported.  Collections with a mix of types are also undefined "
"and implementation-dependent.  If your input data consists of mixed types, "
"you may be able to use :func:`map` to ensure a consistent result, for "
"example: ``map(float, input_data)``."
msgstr ""

#: ../../../library/statistics.rst:39
msgid "Averages and measures of central location"
msgstr ""

#: ../../../library/statistics.rst:41
msgid ""
"These functions calculate an average or typical value from a population or "
"sample."
msgstr ""

#: ../../../library/statistics.rst:45
msgid ":func:`mean`"
msgstr ""

#: ../../../library/statistics.rst:45
msgid "Arithmetic mean (\"average\") of data."
msgstr ""

#: ../../../library/statistics.rst:46
msgid ":func:`fmean`"
msgstr ""

#: ../../../library/statistics.rst:46
msgid "Fast, floating point arithmetic mean."
msgstr ""

#: ../../../library/statistics.rst:47
msgid ":func:`geometric_mean`"
msgstr ""

#: ../../../library/statistics.rst:47
msgid "Geometric mean of data."
msgstr ""

#: ../../../library/statistics.rst:48
msgid ":func:`harmonic_mean`"
msgstr ""

#: ../../../library/statistics.rst:48
msgid "Harmonic mean of data."
msgstr ""

#: ../../../library/statistics.rst:49
msgid ":func:`median`"
msgstr ""

#: ../../../library/statistics.rst:49
msgid "Median (middle value) of data."
msgstr ""

#: ../../../library/statistics.rst:50
msgid ":func:`median_low`"
msgstr ""

#: ../../../library/statistics.rst:50
msgid "Low median of data."
msgstr ""

#: ../../../library/statistics.rst:51
msgid ":func:`median_high`"
msgstr ""

#: ../../../library/statistics.rst:51
msgid "High median of data."
msgstr ""

#: ../../../library/statistics.rst:52
msgid ":func:`median_grouped`"
msgstr ""

#: ../../../library/statistics.rst:52
msgid "Median, or 50th percentile, of grouped data."
msgstr ""

#: ../../../library/statistics.rst:53
msgid ":func:`mode`"
msgstr ""

#: ../../../library/statistics.rst:53
msgid "Single mode (most common value) of discrete or nominal data."
msgstr ""

#: ../../../library/statistics.rst:54
msgid ":func:`multimode`"
msgstr ""

#: ../../../library/statistics.rst:54
msgid "List of modes (most common values) of discrete or nomimal data."
msgstr ""

#: ../../../library/statistics.rst:55
msgid ":func:`quantiles`"
msgstr ""

#: ../../../library/statistics.rst:55
msgid "Divide data into intervals with equal probability."
msgstr ""

#: ../../../library/statistics.rst:59
msgid "Measures of spread"
msgstr ""

#: ../../../library/statistics.rst:61
msgid ""
"These functions calculate a measure of how much the population or sample "
"tends to deviate from the typical or average values."
msgstr ""

#: ../../../library/statistics.rst:65
msgid ":func:`pstdev`"
msgstr ""

#: ../../../library/statistics.rst:65
msgid "Population standard deviation of data."
msgstr ""

#: ../../../library/statistics.rst:66
msgid ":func:`pvariance`"
msgstr ""

#: ../../../library/statistics.rst:66
msgid "Population variance of data."
msgstr ""

#: ../../../library/statistics.rst:67
msgid ":func:`stdev`"
msgstr ""

#: ../../../library/statistics.rst:67
msgid "Sample standard deviation of data."
msgstr ""

#: ../../../library/statistics.rst:68
msgid ":func:`variance`"
msgstr ""

#: ../../../library/statistics.rst:68
msgid "Sample variance of data."
msgstr ""

#: ../../../library/statistics.rst:73
msgid "Function details"
msgstr ""

#: ../../../library/statistics.rst:75
msgid ""
"Note: The functions do not require the data given to them to be sorted. "
"However, for reading convenience, most of the examples show sorted sequences."
msgstr ""

#: ../../../library/statistics.rst:80
msgid ""
"Return the sample arithmetic mean of *data* which can be a sequence or "
"iterable."
msgstr ""

#: ../../../library/statistics.rst:82
msgid ""
"The arithmetic mean is the sum of the data divided by the number of data "
"points.  It is commonly called \"the average\", although it is only one of "
"many different mathematical averages.  It is a measure of the central "
"location of the data."
msgstr ""

#: ../../../library/statistics.rst:87
msgid "If *data* is empty, :exc:`StatisticsError` will be raised."
msgstr ""

#: ../../../library/statistics.rst:89
msgid "Some examples of use:"
msgstr ""

#: ../../../library/statistics.rst:91
msgid ""
">>> mean([1, 2, 3, 4, 4])\n"
"2.8\n"
">>> mean([-1.0, 2.5, 3.25, 5.75])\n"
"2.625\n"
"\n"
">>> from fractions import Fraction as F\n"
">>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\n"
"Fraction(13, 21)\n"
"\n"
">>> from decimal import Decimal as D\n"
">>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\n"
"Decimal('0.5625')"
msgstr ""

#: ../../../library/statistics.rst:108
msgid ""
"The mean is strongly affected by `outliers <https://en.wikipedia.org/wiki/"
"Outlier>`_ and is not necessarily a typical example of the data points. For "
"a more robust, although less efficient, measure of `central tendency "
"<https://en.wikipedia.org/wiki/Central_tendency>`_, see :func:`median`."
msgstr ""

#: ../../../library/statistics.rst:114
msgid ""
"The sample mean gives an unbiased estimate of the true population mean, so "
"that when taken on average over all the possible samples, ``mean(sample)`` "
"converges on the true mean of the entire population.  If *data* represents "
"the entire population rather than a sample, then ``mean(data)`` is "
"equivalent to calculating the true population mean Î¼."
msgstr ""

#: ../../../library/statistics.rst:123
msgid "Convert *data* to floats and compute the arithmetic mean."
msgstr ""

#: ../../../library/statistics.rst:125
msgid ""
"This runs faster than the :func:`mean` function and it always returns a :"
"class:`float`.  The *data* may be a sequence or iterable.  If the input "
"dataset is empty, raises a :exc:`StatisticsError`."
msgstr ""

#: ../../../library/statistics.rst:129
msgid ""
">>> fmean([3.5, 4.0, 5.25])\n"
"4.25"
msgstr ""

#: ../../../library/statistics.rst:139
msgid "Convert *data* to floats and compute the geometric mean."
msgstr ""

#: ../../../library/statistics.rst:141
msgid ""
"The geometric mean indicates the central tendency or typical value of the "
"*data* using the product of the values (as opposed to the arithmetic mean "
"which uses their sum)."
msgstr ""

#: ../../../library/statistics.rst:145
msgid ""
"Raises a :exc:`StatisticsError` if the input dataset is empty, if it "
"contains a zero, or if it contains a negative value. The *data* may be a "
"sequence or iterable."
msgstr ""

#: ../../../library/statistics.rst:149
msgid ""
"No special efforts are made to achieve exact results. (However, this may "
"change in the future.)"
msgstr ""

#: ../../../library/statistics.rst:152
msgid ""
">>> round(geometric_mean([54, 24, 36]), 1)\n"
"36.0"
msgstr ""

#: ../../../library/statistics.rst:162
msgid ""
"Return the harmonic mean of *data*, a sequence or iterable of real-valued "
"numbers."
msgstr ""

#: ../../../library/statistics.rst:165
msgid ""
"The harmonic mean, sometimes called the subcontrary mean, is the reciprocal "
"of the arithmetic :func:`mean` of the reciprocals of the data. For example, "
"the harmonic mean of three values *a*, *b* and *c* will be equivalent to ``3/"
"(1/a + 1/b + 1/c)``.  If one of the values is zero, the result will be zero."
msgstr ""

#: ../../../library/statistics.rst:171
msgid ""
"The harmonic mean is a type of average, a measure of the central location of "
"the data.  It is often appropriate when averaging rates or ratios, for "
"example speeds."
msgstr ""

#: ../../../library/statistics.rst:175
msgid ""
"Suppose a car travels 10 km at 40 km/hr, then another 10 km at 60 km/hr. "
"What is the average speed?"
msgstr ""

#: ../../../library/statistics.rst:178
msgid ""
">>> harmonic_mean([40, 60])\n"
"48.0"
msgstr ""

#: ../../../library/statistics.rst:183
msgid ""
"Suppose an investor purchases an equal value of shares in each of three "
"companies, with P/E (price/earning) ratios of 2.5, 3 and 10. What is the "
"average P/E ratio for the investor's portfolio?"
msgstr ""

#: ../../../library/statistics.rst:187
msgid ""
">>> harmonic_mean([2.5, 3, 10])  # For an equal investment portfolio.\n"
"3.6"
msgstr ""

#: ../../../library/statistics.rst:192
msgid ""
":exc:`StatisticsError` is raised if *data* is empty, or any element is less "
"than zero."
msgstr ""

#: ../../../library/statistics.rst:195
msgid ""
"The current algorithm has an early-out when it encounters a zero in the "
"input.  This means that the subsequent inputs are not tested for validity.  "
"(This behavior may change in the future.)"
msgstr ""

#: ../../../library/statistics.rst:204
msgid ""
"Return the median (middle value) of numeric data, using the common \"mean of "
"middle two\" method.  If *data* is empty, :exc:`StatisticsError` is raised. "
"*data* can be a sequence or iterable."
msgstr ""

#: ../../../library/statistics.rst:208
msgid ""
"The median is a robust measure of central location and is less affected by "
"the presence of outliers.  When the number of data points is odd, the middle "
"data point is returned:"
msgstr ""

#: ../../../library/statistics.rst:212
msgid ""
">>> median([1, 3, 5])\n"
"3"
msgstr ""

#: ../../../library/statistics.rst:217
msgid ""
"When the number of data points is even, the median is interpolated by taking "
"the average of the two middle values:"
msgstr ""

#: ../../../library/statistics.rst:220
msgid ""
">>> median([1, 3, 5, 7])\n"
"4.0"
msgstr ""

#: ../../../library/statistics.rst:225
msgid ""
"This is suited for when your data is discrete, and you don't mind that the "
"median may not be an actual data point."
msgstr ""

#: ../../../library/statistics.rst:228
msgid ""
"If the data is ordinal (supports order operations) but not numeric (doesn't "
"support addition), consider using :func:`median_low` or :func:`median_high` "
"instead."
msgstr ""

#: ../../../library/statistics.rst:234
msgid ""
"Return the low median of numeric data.  If *data* is empty, :exc:"
"`StatisticsError` is raised.  *data* can be a sequence or iterable."
msgstr ""

#: ../../../library/statistics.rst:237
msgid ""
"The low median is always a member of the data set.  When the number of data "
"points is odd, the middle value is returned.  When it is even, the smaller "
"of the two middle values is returned."
msgstr ""

#: ../../../library/statistics.rst:241
msgid ""
">>> median_low([1, 3, 5])\n"
"3\n"
">>> median_low([1, 3, 5, 7])\n"
"3"
msgstr ""

#: ../../../library/statistics.rst:248
msgid ""
"Use the low median when your data are discrete and you prefer the median to "
"be an actual data point rather than interpolated."
msgstr ""

#: ../../../library/statistics.rst:254
msgid ""
"Return the high median of data.  If *data* is empty, :exc:`StatisticsError` "
"is raised.  *data* can be a sequence or iterable."
msgstr ""

#: ../../../library/statistics.rst:257
msgid ""
"The high median is always a member of the data set.  When the number of data "
"points is odd, the middle value is returned.  When it is even, the larger of "
"the two middle values is returned."
msgstr ""

#: ../../../library/statistics.rst:261
msgid ""
">>> median_high([1, 3, 5])\n"
"3\n"
">>> median_high([1, 3, 5, 7])\n"
"5"
msgstr ""

#: ../../../library/statistics.rst:268
msgid ""
"Use the high median when your data are discrete and you prefer the median to "
"be an actual data point rather than interpolated."
msgstr ""

#: ../../../library/statistics.rst:274
msgid ""
"Return the median of grouped continuous data, calculated as the 50th "
"percentile, using interpolation.  If *data* is empty, :exc:`StatisticsError` "
"is raised.  *data* can be a sequence or iterable."
msgstr ""

#: ../../../library/statistics.rst:278
msgid ""
">>> median_grouped([52, 52, 53, 54])\n"
"52.5"
msgstr ""

#: ../../../library/statistics.rst:283
msgid ""
"In the following example, the data are rounded, so that each value "
"represents the midpoint of data classes, e.g. 1 is the midpoint of the class "
"0.5--1.5, 2 is the midpoint of 1.5--2.5, 3 is the midpoint of 2.5--3.5, "
"etc.  With the data given, the middle value falls somewhere in the class "
"3.5--4.5, and interpolation is used to estimate it:"
msgstr ""

#: ../../../library/statistics.rst:289
msgid ""
">>> median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])\n"
"3.7"
msgstr ""

#: ../../../library/statistics.rst:294
msgid ""
"Optional argument *interval* represents the class interval, and defaults to "
"1.  Changing the class interval naturally will change the interpolation:"
msgstr ""

#: ../../../library/statistics.rst:297
msgid ""
">>> median_grouped([1, 3, 3, 5, 7], interval=1)\n"
"3.25\n"
">>> median_grouped([1, 3, 3, 5, 7], interval=2)\n"
"3.5"
msgstr ""

#: ../../../library/statistics.rst:304
msgid ""
"This function does not check whether the data points are at least *interval* "
"apart."
msgstr ""

#: ../../../library/statistics.rst:309
msgid ""
"Under some circumstances, :func:`median_grouped` may coerce data points to "
"floats.  This behaviour is likely to change in the future."
msgstr ""

#: ../../../library/statistics.rst:314
msgid ""
"\"Statistics for the Behavioral Sciences\", Frederick J Gravetter and Larry "
"B Wallnau (8th Edition)."
msgstr ""

#: ../../../library/statistics.rst:317
msgid ""
"The `SSMEDIAN <https://help.gnome.org/users/gnumeric/stable/gnumeric."
"html#gnumeric-function-SSMEDIAN>`_ function in the Gnome Gnumeric "
"spreadsheet, including `this discussion <https://mail.gnome.org/archives/"
"gnumeric-list/2011-April/msg00018.html>`_."
msgstr ""

#: ../../../library/statistics.rst:325
msgid ""
"Return the single most common data point from discrete or nominal *data*. "
"The mode (when it exists) is the most typical value and serves as a measure "
"of central location."
msgstr ""

#: ../../../library/statistics.rst:329
msgid ""
"If there are multiple modes with the same frequency, returns the first one "
"encountered in the *data*.  If the smallest or largest of those is desired "
"instead, use ``min(multimode(data))`` or ``max(multimode(data))``. If the "
"input *data* is empty, :exc:`StatisticsError` is raised."
msgstr ""

#: ../../../library/statistics.rst:334
msgid ""
"``mode`` assumes discrete data and returns a single value. This is the "
"standard treatment of the mode as commonly taught in schools:"
msgstr ""

#: ../../../library/statistics.rst:337
msgid ""
">>> mode([1, 1, 2, 3, 3, 3, 3, 4])\n"
"3"
msgstr ""

#: ../../../library/statistics.rst:342
msgid ""
"The mode is unique in that it is the only statistic in this package that "
"also applies to nominal (non-numeric) data:"
msgstr ""

#: ../../../library/statistics.rst:345
msgid ""
">>> mode([\"red\", \"blue\", \"blue\", \"red\", \"green\", \"red\", "
"\"red\"])\n"
"'red'"
msgstr ""

#: ../../../library/statistics.rst:350
msgid ""
"Now handles multimodal datasets by returning the first mode encountered. "
"Formerly, it raised :exc:`StatisticsError` when more than one mode was found."
msgstr ""

#: ../../../library/statistics.rst:358
msgid ""
"Return a list of the most frequently occurring values in the order they were "
"first encountered in the *data*.  Will return more than one result if there "
"are multiple modes or an empty list if the *data* is empty:"
msgstr ""

#: ../../../library/statistics.rst:362
msgid ""
">>> multimode('aabbbbccddddeeffffgg')\n"
"['b', 'd', 'f']\n"
">>> multimode('')\n"
"[]"
msgstr ""

#: ../../../library/statistics.rst:374
msgid ""
"Return the population standard deviation (the square root of the population "
"variance).  See :func:`pvariance` for arguments and other details."
msgstr ""

#: ../../../library/statistics.rst:377
msgid ""
">>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n"
"0.986893273527251"
msgstr ""

#: ../../../library/statistics.rst:385
msgid ""
"Return the population variance of *data*, a non-empty sequence or iterable "
"of real-valued numbers.  Variance, or second moment about the mean, is a "
"measure of the variability (spread or dispersion) of data.  A large variance "
"indicates that the data is spread out; a small variance indicates it is "
"clustered closely around the mean."
msgstr ""

#: ../../../library/statistics.rst:391
msgid ""
"If the optional second argument *mu* is given, it is typically the mean of "
"the *data*.  It can also be used to compute the second moment around a point "
"that is not the mean.  If it is missing or ``None`` (the default), the "
"arithmetic mean is automatically calculated."
msgstr ""

#: ../../../library/statistics.rst:396
msgid ""
"Use this function to calculate the variance from the entire population.  To "
"estimate the variance from a sample, the :func:`variance` function is "
"usually a better choice."
msgstr ""

#: ../../../library/statistics.rst:400
msgid "Raises :exc:`StatisticsError` if *data* is empty."
msgstr ""

#: ../../../library/statistics.rst:402 ../../../library/statistics.rst:472
msgid "Examples:"
msgstr ""

#: ../../../library/statistics.rst:404
msgid ""
">>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]\n"
">>> pvariance(data)\n"
"1.25"
msgstr ""

#: ../../../library/statistics.rst:410
msgid ""
"If you have already calculated the mean of your data, you can pass it as the "
"optional second argument *mu* to avoid recalculation:"
msgstr ""

#: ../../../library/statistics.rst:413
msgid ""
">>> mu = mean(data)\n"
">>> pvariance(data, mu)\n"
"1.25"
msgstr ""

#: ../../../library/statistics.rst:419
msgid "Decimals and Fractions are supported:"
msgstr ""

#: ../../../library/statistics.rst:421
msgid ""
">>> from decimal import Decimal as D\n"
">>> pvariance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), "
"D(\"41.75\")])\n"
"Decimal('24.815')\n"
"\n"
">>> from fractions import Fraction as F\n"
">>> pvariance([F(1, 4), F(5, 4), F(1, 2)])\n"
"Fraction(13, 72)"
msgstr ""

#: ../../../library/statistics.rst:433
msgid ""
"When called with the entire population, this gives the population variance "
"ÏÂ².  When called on a sample instead, this is the biased sample variance sÂ², "
"also known as variance with N degrees of freedom."
msgstr ""

#: ../../../library/statistics.rst:437
msgid ""
"If you somehow know the true population mean Î¼, you may use this function to "
"calculate the variance of a sample, giving the known population mean as the "
"second argument.  Provided the data points are a random sample of the "
"population, the result will be an unbiased estimate of the population "
"variance."
msgstr ""

#: ../../../library/statistics.rst:446
msgid ""
"Return the sample standard deviation (the square root of the sample "
"variance).  See :func:`variance` for arguments and other details."
msgstr ""

#: ../../../library/statistics.rst:449
msgid ""
">>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n"
"1.0810874155219827"
msgstr ""

#: ../../../library/statistics.rst:457
msgid ""
"Return the sample variance of *data*, an iterable of at least two real-"
"valued numbers.  Variance, or second moment about the mean, is a measure of "
"the variability (spread or dispersion) of data.  A large variance indicates "
"that the data is spread out; a small variance indicates it is clustered "
"closely around the mean."
msgstr ""

#: ../../../library/statistics.rst:463
msgid ""
"If the optional second argument *xbar* is given, it should be the mean of "
"*data*.  If it is missing or ``None`` (the default), the mean is "
"automatically calculated."
msgstr ""

#: ../../../library/statistics.rst:467
msgid ""
"Use this function when your data is a sample from a population. To calculate "
"the variance from the entire population, see :func:`pvariance`."
msgstr ""

#: ../../../library/statistics.rst:470
msgid "Raises :exc:`StatisticsError` if *data* has fewer than two values."
msgstr ""

#: ../../../library/statistics.rst:474
msgid ""
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> variance(data)\n"
"1.3720238095238095"
msgstr ""

#: ../../../library/statistics.rst:480
msgid ""
"If you have already calculated the mean of your data, you can pass it as the "
"optional second argument *xbar* to avoid recalculation:"
msgstr ""

#: ../../../library/statistics.rst:483
msgid ""
">>> m = mean(data)\n"
">>> variance(data, m)\n"
"1.3720238095238095"
msgstr ""

#: ../../../library/statistics.rst:489
msgid ""
"This function does not attempt to verify that you have passed the actual "
"mean as *xbar*.  Using arbitrary values for *xbar* can lead to invalid or "
"impossible results."
msgstr ""

#: ../../../library/statistics.rst:493
msgid "Decimal and Fraction values are supported:"
msgstr ""

#: ../../../library/statistics.rst:495
msgid ""
">>> from decimal import Decimal as D\n"
">>> variance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), "
"D(\"41.75\")])\n"
"Decimal('31.01875')\n"
"\n"
">>> from fractions import Fraction as F\n"
">>> variance([F(1, 6), F(1, 2), F(5, 3)])\n"
"Fraction(67, 108)"
msgstr ""

#: ../../../library/statistics.rst:507
msgid ""
"This is the sample variance sÂ² with Bessel's correction, also known as "
"variance with N-1 degrees of freedom.  Provided that the data points are "
"representative (e.g. independent and identically distributed), the result "
"should be an unbiased estimate of the true population variance."
msgstr ""

#: ../../../library/statistics.rst:512
msgid ""
"If you somehow know the actual population mean Î¼ you should pass it to the :"
"func:`pvariance` function as the *mu* parameter to get the variance of a "
"sample."
msgstr ""

#: ../../../library/statistics.rst:518
msgid ""
"Divide *data* into *n* continuous intervals with equal probability. Returns "
"a list of ``n - 1`` cut points separating the intervals."
msgstr ""

#: ../../../library/statistics.rst:521
msgid ""
"Set *n* to 4 for quartiles (the default).  Set *n* to 10 for deciles.  Set "
"*n* to 100 for percentiles which gives the 99 cuts points that separate "
"*data* into 100 equal sized groups.  Raises :exc:`StatisticsError` if *n* is "
"not least 1."
msgstr ""

#: ../../../library/statistics.rst:526
msgid ""
"The *data* can be any iterable containing sample data.  For meaningful "
"results, the number of data points in *data* should be larger than *n*. "
"Raises :exc:`StatisticsError` if there are not at least two data points."
msgstr ""

#: ../../../library/statistics.rst:530
msgid ""
"The cut points are linearly interpolated from the two nearest data points.  "
"For example, if a cut point falls one-third of the distance between two "
"sample values, ``100`` and ``112``, the cut-point will evaluate to ``104``."
msgstr ""

#: ../../../library/statistics.rst:535
msgid ""
"The *method* for computing quantiles can be varied depending on whether the "
"*data* includes or excludes the lowest and highest possible values from the "
"population."
msgstr ""

#: ../../../library/statistics.rst:539
msgid ""
"The default *method* is \"exclusive\" and is used for data sampled from a "
"population that can have more extreme values than found in the samples.  The "
"portion of the population falling below the *i-th* of *m* sorted data points "
"is computed as ``i / (m + 1)``.  Given nine sample values, the method sorts "
"them and assigns the following percentiles: 10%, 20%, 30%, 40%, 50%, 60%, "
"70%, 80%, 90%."
msgstr ""

#: ../../../library/statistics.rst:546
msgid ""
"Setting the *method* to \"inclusive\" is used for describing population data "
"or for samples that are known to include the most extreme values from the "
"population.  The minimum value in *data* is treated as the 0th percentile "
"and the maximum value is treated as the 100th percentile. The portion of the "
"population falling below the *i-th* of *m* sorted data points is computed as "
"``(i - 1) / (m - 1)``.  Given 11 sample values, the method sorts them and "
"assigns the following percentiles: 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, "
"80%, 90%, 100%."
msgstr ""

#: ../../../library/statistics.rst:555
msgid ""
"# Decile cut points for empirically sampled data\n"
">>> data = [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110,\n"
"...         100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129,\n"
"...         106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86,\n"
"...         111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95,\n"
"...         103, 107, 101, 81, 109, 104]\n"
">>> [round(q, 1) for q in quantiles(data, n=10)]\n"
"[81.0, 86.2, 89.0, 99.4, 102.5, 103.6, 106.0, 109.8, 111.0]"
msgstr ""

#: ../../../library/statistics.rst:570
msgid "Exceptions"
msgstr ""

#: ../../../library/statistics.rst:572
msgid "A single exception is defined:"
msgstr ""

#: ../../../library/statistics.rst:576
msgid "Subclass of :exc:`ValueError` for statistics-related exceptions."
msgstr ""

#: ../../../library/statistics.rst:580
msgid ":class:`NormalDist` objects"
msgstr ""

#: ../../../library/statistics.rst:582
msgid ""
":class:`NormalDist` is a tool for creating and manipulating normal "
"distributions of a `random variable <http://www.stat.yale.edu/"
"Courses/1997-98/101/ranvar.htm>`_.  It is a class that treats the mean and "
"standard deviation of data measurements as a single entity."
msgstr ""

#: ../../../library/statistics.rst:588
msgid ""
"Normal distributions arise from the `Central Limit Theorem <https://en."
"wikipedia.org/wiki/Central_limit_theorem>`_ and have a wide range of "
"applications in statistics."
msgstr ""

#: ../../../library/statistics.rst:594
msgid ""
"Returns a new *NormalDist* object where *mu* represents the `arithmetic mean "
"<https://en.wikipedia.org/wiki/Arithmetic_mean>`_ and *sigma* represents the "
"`standard deviation <https://en.wikipedia.org/wiki/Standard_deviation>`_."
msgstr ""

#: ../../../library/statistics.rst:599
msgid "If *sigma* is negative, raises :exc:`StatisticsError`."
msgstr ""

#: ../../../library/statistics.rst:603
msgid ""
"A read-only property for the `arithmetic mean <https://en.wikipedia.org/wiki/"
"Arithmetic_mean>`_ of a normal distribution."
msgstr ""

#: ../../../library/statistics.rst:609
msgid ""
"A read-only property for the `median <https://en.wikipedia.org/wiki/"
"Median>`_ of a normal distribution."
msgstr ""

#: ../../../library/statistics.rst:615
msgid ""
"A read-only property for the `mode <https://en.wikipedia.org/wiki/"
"Mode_(statistics)>`_ of a normal distribution."
msgstr ""

#: ../../../library/statistics.rst:621
msgid ""
"A read-only property for the `standard deviation <https://en.wikipedia.org/"
"wiki/Standard_deviation>`_ of a normal distribution."
msgstr ""

#: ../../../library/statistics.rst:627
msgid ""
"A read-only property for the `variance <https://en.wikipedia.org/wiki/"
"Variance>`_ of a normal distribution. Equal to the square of the standard "
"deviation."
msgstr ""

#: ../../../library/statistics.rst:633
msgid ""
"Makes a normal distribution instance with *mu* and *sigma* parameters "
"estimated from the *data* using :func:`fmean` and :func:`stdev`."
msgstr ""

#: ../../../library/statistics.rst:636
msgid ""
"The *data* can be any :term:`iterable` and should consist of values that can "
"be converted to type :class:`float`.  If *data* does not contain at least "
"two elements, raises :exc:`StatisticsError` because it takes at least one "
"point to estimate a central value and at least two points to estimate "
"dispersion."
msgstr ""

#: ../../../library/statistics.rst:644
msgid ""
"Generates *n* random samples for a given mean and standard deviation. "
"Returns a :class:`list` of :class:`float` values."
msgstr ""

#: ../../../library/statistics.rst:647
msgid ""
"If *seed* is given, creates a new instance of the underlying random number "
"generator.  This is useful for creating reproducible results, even in a "
"multi-threading context."
msgstr ""

#: ../../../library/statistics.rst:653
msgid ""
"Using a `probability density function (pdf) <https://en.wikipedia.org/wiki/"
"Probability_density_function>`_, compute the relative likelihood that a "
"random variable *X* will be near the given value *x*.  Mathematically, it is "
"the limit of the ratio ``P(x <= X < x+dx) / dx`` as *dx* approaches zero."
msgstr ""

#: ../../../library/statistics.rst:659
msgid ""
"The relative likelihood is computed as the probability of a sample occurring "
"in a narrow range divided by the width of the range (hence the word "
"\"density\").  Since the likelihood is relative to other points, its value "
"can be greater than `1.0`."
msgstr ""

#: ../../../library/statistics.rst:666
msgid ""
"Using a `cumulative distribution function (cdf) <https://en.wikipedia.org/"
"wiki/Cumulative_distribution_function>`_, compute the probability that a "
"random variable *X* will be less than or equal to *x*.  Mathematically, it "
"is written ``P(X <= x)``."
msgstr ""

#: ../../../library/statistics.rst:673
msgid ""
"Compute the inverse cumulative distribution function, also known as the "
"`quantile function <https://en.wikipedia.org/wiki/Quantile_function>`_ or "
"the `percent-point <https://www.statisticshowto.datasciencecentral.com/"
"inverse-distribution-function/>`_ function.  Mathematically, it is written "
"``x : P(X <= x) = p``."
msgstr ""

#: ../../../library/statistics.rst:679
msgid ""
"Finds the value *x* of the random variable *X* such that the probability of "
"the variable being less than or equal to that value equals the given "
"probability *p*."
msgstr ""

#: ../../../library/statistics.rst:685
msgid ""
"Measures the agreement between two normal probability distributions. Returns "
"a value between 0.0 and 1.0 giving `the overlapping area for the two "
"probability density functions <https://www.rasch.org/rmt/rmt101r.htm>`_."
msgstr ""

#: ../../../library/statistics.rst:692
msgid ""
"Divide the normal distribution into *n* continuous intervals with equal "
"probability.  Returns a list of (n - 1) cut points separating the intervals."
msgstr ""

#: ../../../library/statistics.rst:696
msgid ""
"Set *n* to 4 for quartiles (the default).  Set *n* to 10 for deciles. Set "
"*n* to 100 for percentiles which gives the 99 cuts points that separate the "
"normal distribution into 100 equal sized groups."
msgstr ""

#: ../../../library/statistics.rst:702
msgid ""
"Compute the `Standard Score <https://www.statisticshowto.com/probability-and-"
"statistics/z-score/>`_ describing *x* in terms of the number of standard "
"deviations above or below the mean of the normal distribution: ``(x - "
"mean) / stdev``."
msgstr ""

#: ../../../library/statistics.rst:710
msgid ""
"Instances of :class:`NormalDist` support addition, subtraction, "
"multiplication and division by a constant.  These operations are used for "
"translation and scaling.  For example:"
msgstr ""

#: ../../../library/statistics.rst:714
msgid ""
">>> temperature_february = NormalDist(5, 2.5)             # Celsius\n"
">>> temperature_february * (9/5) + 32                     # Fahrenheit\n"
"NormalDist(mu=41.0, sigma=4.5)"
msgstr ""

#: ../../../library/statistics.rst:720
msgid ""
"Dividing a constant by an instance of :class:`NormalDist` is not supported "
"because the result wouldn't be normally distributed."
msgstr ""

#: ../../../library/statistics.rst:723
msgid ""
"Since normal distributions arise from additive effects of independent "
"variables, it is possible to `add and subtract two independent normally "
"distributed random variables <https://en.wikipedia.org/wiki/"
"Sum_of_normally_distributed_random_variables>`_ represented as instances of :"
"class:`NormalDist`.  For example:"
msgstr ""

#: ../../../library/statistics.rst:729
msgid ""
">>> birth_weights = NormalDist.from_samples([2.5, 3.1, 2.1, 2.4, 2.7, 3.5])\n"
">>> drug_effects = NormalDist(0.4, 0.15)\n"
">>> combined = birth_weights + drug_effects\n"
">>> round(combined.mean, 1)\n"
"3.1\n"
">>> round(combined.stdev, 1)\n"
"0.5"
msgstr ""

#: ../../../library/statistics.rst:743
msgid ":class:`NormalDist` Examples and Recipes"
msgstr ""

#: ../../../library/statistics.rst:745
msgid ":class:`NormalDist` readily solves classic probability problems."
msgstr ""

#: ../../../library/statistics.rst:747
msgid ""
"For example, given `historical data for SAT exams <https://nces.ed.gov/"
"programs/digest/d17/tables/dt17_226.40.asp>`_ showing that scores are "
"normally distributed with a mean of 1060 and a standard deviation of 195, "
"determine the percentage of students with test scores between 1100 and 1200, "
"after rounding to the nearest whole number:"
msgstr ""

#: ../../../library/statistics.rst:753
msgid ""
">>> sat = NormalDist(1060, 195)\n"
">>> fraction = sat.cdf(1200 + 0.5) - sat.cdf(1100 - 0.5)\n"
">>> round(fraction * 100.0, 1)\n"
"18.4"
msgstr ""

#: ../../../library/statistics.rst:760
msgid ""
"Find the `quartiles <https://en.wikipedia.org/wiki/Quartile>`_ and `deciles "
"<https://en.wikipedia.org/wiki/Decile>`_ for the SAT scores:"
msgstr ""

#: ../../../library/statistics.rst:763
msgid ""
">>> list(map(round, sat.quantiles()))\n"
"[928, 1060, 1192]\n"
">>> list(map(round, sat.quantiles(n=10)))\n"
"[810, 896, 958, 1011, 1060, 1109, 1162, 1224, 1310]"
msgstr ""

#: ../../../library/statistics.rst:770
msgid ""
"To estimate the distribution for a model than isn't easy to solve "
"analytically, :class:`NormalDist` can generate input samples for a `Monte "
"Carlo simulation <https://en.wikipedia.org/wiki/Monte_Carlo_method>`_:"
msgstr ""

#: ../../../library/statistics.rst:774
msgid ""
">>> def model(x, y, z):\n"
"...     return (3*x + 7*x*y - 5*y) / (11 * z)\n"
"...\n"
">>> n = 100_000\n"
">>> X = NormalDist(10, 2.5).samples(n, seed=3652260728)\n"
">>> Y = NormalDist(15, 1.75).samples(n, seed=4582495471)\n"
">>> Z = NormalDist(50, 1.25).samples(n, seed=6582483453)\n"
">>> quantiles(map(model, X, Y, Z))       \n"
"[1.4591308524824727, 1.8035946855390597, 2.175091447274739]"
msgstr ""

#: ../../../library/statistics.rst:786
msgid ""
"Normal distributions can be used to approximate `Binomial distributions "
"<http://mathworld.wolfram.com/BinomialDistribution.html>`_ when the sample "
"size is large and when the probability of a successful trial is near 50%."
msgstr ""

#: ../../../library/statistics.rst:791
msgid ""
"For example, an open source conference has 750 attendees and two rooms with "
"a 500 person capacity.  There is a talk about Python and another about Ruby. "
"In previous conferences, 65% of the attendees preferred to listen to Python "
"talks.  Assuming the population preferences haven't changed, what is the "
"probability that the Python room will stay within its capacity limits?"
msgstr ""

#: ../../../library/statistics.rst:797
msgid ""
">>> n = 750             # Sample size\n"
">>> p = 0.65            # Preference for Python\n"
">>> q = 1.0 - p         # Preference for Ruby\n"
">>> k = 500             # Room capacity\n"
"\n"
">>> # Approximation using the cumulative normal distribution\n"
">>> from math import sqrt\n"
">>> round(NormalDist(mu=n*p, sigma=sqrt(n*p*q)).cdf(k + 0.5), 4)\n"
"0.8402\n"
"\n"
">>> # Solution using the cumulative binomial distribution\n"
">>> from math import comb, fsum\n"
">>> round(fsum(comb(n, r) * p**r * q**(n-r) for r in range(k+1)), 4)\n"
"0.8402\n"
"\n"
">>> # Approximation using a simulation\n"
">>> from random import seed, choices\n"
">>> seed(8675309)\n"
">>> def trial():\n"
"...     return choices(('Python', 'Ruby'), (p, q), k=n).count('Python')\n"
">>> mean(trial() <= k for i in range(10_000))\n"
"0.8398"
msgstr ""

#: ../../../library/statistics.rst:822
msgid "Normal distributions commonly arise in machine learning problems."
msgstr ""

#: ../../../library/statistics.rst:824
msgid ""
"Wikipedia has a `nice example of a Naive Bayesian Classifier <https://en."
"wikipedia.org/wiki/Naive_Bayes_classifier#Sex_classification>`_. The "
"challenge is to predict a person's gender from measurements of normally "
"distributed features including height, weight, and foot size."
msgstr ""

#: ../../../library/statistics.rst:829
msgid ""
"We're given a training dataset with measurements for eight people.  The "
"measurements are assumed to be normally distributed, so we summarize the "
"data with :class:`NormalDist`:"
msgstr ""

#: ../../../library/statistics.rst:833
msgid ""
">>> height_male = NormalDist.from_samples([6, 5.92, 5.58, 5.92])\n"
">>> height_female = NormalDist.from_samples([5, 5.5, 5.42, 5.75])\n"
">>> weight_male = NormalDist.from_samples([180, 190, 170, 165])\n"
">>> weight_female = NormalDist.from_samples([100, 150, 130, 150])\n"
">>> foot_size_male = NormalDist.from_samples([12, 11, 12, 10])\n"
">>> foot_size_female = NormalDist.from_samples([6, 8, 7, 9])"
msgstr ""

#: ../../../library/statistics.rst:842
msgid ""
"Next, we encounter a new person whose feature measurements are known but "
"whose gender is unknown:"
msgstr ""

#: ../../../library/statistics.rst:845
msgid ""
">>> ht = 6.0        # height\n"
">>> wt = 130        # weight\n"
">>> fs = 8          # foot size"
msgstr ""

#: ../../../library/statistics.rst:851
msgid ""
"Starting with a 50% `prior probability <https://en.wikipedia.org/wiki/"
"Prior_probability>`_ of being male or female, we compute the posterior as "
"the prior times the product of likelihoods for the feature measurements "
"given the gender:"
msgstr ""

#: ../../../library/statistics.rst:856
msgid ""
">>> prior_male = 0.5\n"
">>> prior_female = 0.5\n"
">>> posterior_male = (prior_male * height_male.pdf(ht) *\n"
"...                   weight_male.pdf(wt) * foot_size_male.pdf(fs))\n"
"\n"
">>> posterior_female = (prior_female * height_female.pdf(ht) *\n"
"...                     weight_female.pdf(wt) * foot_size_female.pdf(fs))"
msgstr ""

#: ../../../library/statistics.rst:866
msgid ""
"The final prediction goes to the largest posterior. This is known as the "
"`maximum a posteriori <https://en.wikipedia.org/wiki/"
"Maximum_a_posteriori_estimation>`_ or MAP:"
msgstr ""

#: ../../../library/statistics.rst:870
msgid ""
">>> 'male' if posterior_male > posterior_female else 'female'\n"
"'female'"
msgstr ""
