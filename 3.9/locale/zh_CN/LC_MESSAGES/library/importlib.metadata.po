# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr ""

#: ../../../library/importlib.metadata.rst:10
msgid "**Source code:** :source:`Lib/importlib/metadata.py`"
msgstr ""

#: ../../../library/importlib.metadata.rst:15
msgid ""
"This functionality is provisional and may deviate from the usual version "
"semantics of the standard library."
msgstr ""

#: ../../../library/importlib.metadata.rst:18
msgid ""
"``importlib.metadata`` is a library that provides for access to installed "
"package metadata.  Built in part on Python's import system, this library "
"intends to replace similar functionality in the `entry point API`_ and "
"`metadata API`_ of ``pkg_resources``.  Along with :mod:`importlib.resources` "
"in Python 3.7 and newer (backported as `importlib_resources`_ for older "
"versions of Python), this can eliminate the need to use the older and less "
"efficient ``pkg_resources`` package."
msgstr ""

#: ../../../library/importlib.metadata.rst:27
msgid ""
"By \"installed package\" we generally mean a third-party package installed "
"into Python's ``site-packages`` directory via tools such as `pip <https://"
"pypi.org/project/pip/>`_.  Specifically, it means a package with either a "
"discoverable ``dist-info`` or ``egg-info`` directory, and metadata defined "
"by :pep:`566` or its older specifications. By default, package metadata can "
"live on the file system or in zip archives on :data:`sys.path`.  Through an "
"extension mechanism, the metadata can live almost anywhere."
msgstr ""

#: ../../../library/importlib.metadata.rst:38
msgid "Overview"
msgstr ""

#: ../../../library/importlib.metadata.rst:40
msgid ""
"Let's say you wanted to get the version string for a package you've "
"installed using ``pip``.  We start by creating a virtual environment and "
"installing something into it:"
msgstr ""

#: ../../../library/importlib.metadata.rst:44
msgid ""
"$ python3 -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ pip install wheel"
msgstr ""

#: ../../../library/importlib.metadata.rst:50
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""

#: ../../../library/importlib.metadata.rst:52
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version  \n"
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../../library/importlib.metadata.rst:59
msgid ""
"You can also get the set of entry points keyed by group, such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group contains "
"a sequence of :ref:`EntryPoint <entry-points>` objects."
msgstr ""

#: ../../../library/importlib.metadata.rst:63
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""

#: ../../../library/importlib.metadata.rst:65
msgid ""
">>> list(metadata('wheel'))  \n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""

#: ../../../library/importlib.metadata.rst:68
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""

#: ../../../library/importlib.metadata.rst:74
msgid "Functional API"
msgstr ""

#: ../../../library/importlib.metadata.rst:76
msgid "This package provides the following functionality via its public API."
msgstr ""

#: ../../../library/importlib.metadata.rst:82
msgid "Entry points"
msgstr ""

#: ../../../library/importlib.metadata.rst:84
msgid ""
"The ``entry_points()`` function returns a dictionary of all entry points, "
"keyed by group.  Entry points are represented by ``EntryPoint`` instances; "
"each ``EntryPoint`` has a ``.name``, ``.group``, and ``.value`` attributes "
"and a ``.load()`` method to resolve the value.  There are also ``.module``, "
"``.attr``, and ``.extras`` attributes for getting the components of the ``."
"value`` attribute::"
msgstr ""

#: ../../../library/importlib.metadata.rst:91
msgid ""
">>> eps = entry_points()  \n"
">>> list(eps)  \n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']\n"
">>> scripts = eps['console_scripts']  \n"
">>> wheel = [ep for ep in scripts if ep.name == 'wheel'][0]  \n"
">>> wheel  \n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module  \n"
"'wheel.cli'\n"
">>> wheel.attr  \n"
"'main'\n"
">>> wheel.extras  \n"
"[]\n"
">>> main = wheel.load()  \n"
">>> main  \n"
"<function main at 0x103528488>"
msgstr ""

#: ../../../library/importlib.metadata.rst:108
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.readthedocs."
"io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ "
"for more information on entry points, their definition, and usage."
msgstr ""

#: ../../../library/importlib.metadata.rst:118
msgid "Distribution metadata"
msgstr ""

#: ../../../library/importlib.metadata.rst:120
msgid ""
"Every distribution includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr ""

#: ../../../library/importlib.metadata.rst:123
msgid ">>> wheel_metadata = metadata('wheel')  "
msgstr ""

#: ../../../library/importlib.metadata.rst:125
msgid ""
"The keys of the returned data structure [#f1]_ name the metadata keywords, "
"and their values are returned unparsed from the distribution metadata::"
msgstr ""

#: ../../../library/importlib.metadata.rst:128
msgid ""
">>> wheel_metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../../library/importlib.metadata.rst:135
msgid "Distribution versions"
msgstr ""

#: ../../../library/importlib.metadata.rst:137
msgid ""
"The ``version()`` function is the quickest way to get a distribution's "
"version number, as a string::"
msgstr ""

#: ../../../library/importlib.metadata.rst:140
msgid ""
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../../library/importlib.metadata.rst:147
msgid "Distribution files"
msgstr ""

#: ../../../library/importlib.metadata.rst:149
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a distribution package name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""

#: ../../../library/importlib.metadata.rst:155
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  \n"
">>> util  \n"
"PackagePath('wheel/util.py')\n"
">>> util.size  \n"
"859\n"
">>> util.dist  \n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash  \n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""

#: ../../../library/importlib.metadata.rst:165
msgid "Once you have the file, you can also read its contents::"
msgstr ""

#: ../../../library/importlib.metadata.rst:167
msgid ""
">>> print(util.read_text())  \n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""

#: ../../../library/importlib.metadata.rst:176
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""

#: ../../../library/importlib.metadata.rst:179
msgid ""
">>> util.locate()  \n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""

#: ../../../library/importlib.metadata.rst:182
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""

#: ../../../library/importlib.metadata.rst:193
msgid "Distribution requirements"
msgstr ""

#: ../../../library/importlib.metadata.rst:195
msgid ""
"To get the full set of requirements for a distribution, use the "
"``requires()`` function::"
msgstr ""

#: ../../../library/importlib.metadata.rst:198
msgid ""
">>> requires('wheel')  \n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""

#: ../../../library/importlib.metadata.rst:205
msgid "Distributions"
msgstr ""

#: ../../../library/importlib.metadata.rst:207
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python package.  You "
"can get the ``Distribution`` instance::"
msgstr ""

#: ../../../library/importlib.metadata.rst:212
msgid ""
">>> from importlib.metadata import distribution  \n"
">>> dist = distribution('wheel')  "
msgstr ""

#: ../../../library/importlib.metadata.rst:215
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""

#: ../../../library/importlib.metadata.rst:218
msgid ""
">>> dist.version  \n"
"'0.32.3'"
msgstr ""

#: ../../../library/importlib.metadata.rst:221
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""

#: ../../../library/importlib.metadata.rst:224
msgid ""
">>> dist.metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']  \n"
"'MIT'"
msgstr ""

#: ../../../library/importlib.metadata.rst:229
msgid ""
"The full set of available metadata is not described here.  See :pep:`566` "
"for additional details."
msgstr ""

#: ../../../library/importlib.metadata.rst:234
msgid "Extending the search algorithm"
msgstr ""

#: ../../../library/importlib.metadata.rst:236
msgid ""
"Because package metadata is not available through :data:`sys.path` searches, "
"or package loaders directly, the metadata for a package is found through "
"import system :ref:`finders <finders-and-loaders>`.  To find a distribution "
"package's metadata, ``importlib.metadata`` queries the list of :term:`meta "
"path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""

#: ../../../library/importlib.metadata.rst:242
msgid ""
"The default ``PathFinder`` for Python includes a hook that calls into "
"``importlib.metadata.MetadataPathFinder`` for finding distributions loaded "
"from typical file-system-based paths."
msgstr ""

#: ../../../library/importlib.metadata.rst:246
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""

#: ../../../library/importlib.metadata.rst:254
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""

#: ../../../library/importlib.metadata.rst:260
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""

#: ../../../library/importlib.metadata.rst:264
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""

#: ../../../library/importlib.metadata.rst:277
msgid "Footnotes"
msgstr ""

#: ../../../library/importlib.metadata.rst:278
msgid ""
"Technically, the returned distribution metadata object is an :class:`email."
"message.EmailMessage` instance, but this is an implementation detail, and "
"not part of the stable API.  You should only use dictionary-like methods and "
"syntax to access the metadata contents."
msgstr ""
