# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ""

#: ../../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr ""

#: ../../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""

#: ../../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints. The most fundamental "
"support consists of the types :data:`Any`, :data:`Union`, :data:`Callable`, :"
"class:`TypeVar`, and :class:`Generic`. For a full specification, please see :"
"pep:`484`. For a simplified introduction to type hints, see :pep:`483`."
msgstr ""

#: ../../../library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""

#: ../../../library/typing.rst:28
msgid ""
"def greeting(name: str) -> str:\n"
"    return 'Hello ' + name"
msgstr ""

#: ../../../library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""

#: ../../../library/typing.rst:35
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""

#: ../../../library/typing.rst:42
msgid "Relevant PEPs"
msgstr ""

#: ../../../library/typing.rst:44
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations. These include:"
msgstr ""

#: ../../../library/typing.rst:49
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ""

#: ../../../library/typing.rst:49
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""

#: ../../../library/typing.rst:52
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""

#: ../../../library/typing.rst:52
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""

#: ../../../library/typing.rst:55
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../../library/typing.rst:55
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""

#: ../../../library/typing.rst:57
msgid ":pep:`586`: Literal Types"
msgstr ""

#: ../../../library/typing.rst:58
msgid "*Introducing* :class:`Literal`"
msgstr ""

#: ../../../library/typing.rst:59
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""

#: ../../../library/typing.rst:60
msgid "*Introducing* :class:`TypedDict`"
msgstr ""

#: ../../../library/typing.rst:61
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ""

#: ../../../library/typing.rst:62
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ""

#: ../../../library/typing.rst:64
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ""

#: ../../../library/typing.rst:64
msgid "*Introducing* :class:`Annotated`"
msgstr ""

#: ../../../library/typing.rst:67
msgid "Type aliases"
msgstr ""

#: ../../../library/typing.rst:69
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""

#: ../../../library/typing.rst:72
msgid ""
"Vector = list[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# typechecks; a list of floats qualifies as a Vector.\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"
msgstr ""

#: ../../../library/typing.rst:80
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""

#: ../../../library/typing.rst:82
msgid ""
"from collections.abc import Sequence\n"
"\n"
"ConnectionOptions = dict[str, str]\n"
"Address = tuple[str, int]\n"
"Server = tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# The static type checker will treat the previous type signature as\n"
"# being exactly equivalent to this one.\n"
"def broadcast_message(\n"
"        message: str,\n"
"        servers: Sequence[tuple[tuple[str, int], dict[str, str]]]) -> None:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:98
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""

#: ../../../library/typing.rst:104
msgid "NewType"
msgstr ""

#: ../../../library/typing.rst:106
msgid "Use the :func:`NewType` helper to create distinct types::"
msgstr ""

#: ../../../library/typing.rst:108
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""

#: ../../../library/typing.rst:113
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""

#: ../../../library/typing.rst:116
msgid ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# typechecks\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# does not typecheck; an int is not a UserId\n"
"user_b = get_user_name(-1)"
msgstr ""

#: ../../../library/typing.rst:125
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""

#: ../../../library/typing.rst:130
msgid ""
"# 'output' is of type 'int', not 'UserId'\n"
"output = UserId(23413) + UserId(54341)"
msgstr ""

#: ../../../library/typing.rst:133
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""

#: ../../../library/typing.rst:139
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""

#: ../../../library/typing.rst:142
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr ""

#: ../../../library/typing.rst:145
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# Fails at runtime and does not typecheck\n"
"class AdminUserId(UserId): pass"
msgstr ""

#: ../../../library/typing.rst:152
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""

#: ../../../library/typing.rst:154
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"
msgstr ""

#: ../../../library/typing.rst:160
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""

#: ../../../library/typing.rst:162
msgid "See :pep:`484` for more details."
msgstr ""

#: ../../../library/typing.rst:166
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../../library/typing.rst:171
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""

#: ../../../library/typing.rst:181
msgid "Callable"
msgstr ""

#: ../../../library/typing.rst:183
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""

#: ../../../library/typing.rst:186
msgid "For example::"
msgstr ""

#: ../../../library/typing.rst:188
msgid ""
"from collections.abc import Callable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    # Body\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    # Body\n"
"\n"
"async def on_update(value: str) -> None:\n"
"    # Body\n"
"callback: Callable[[str], Awaitable[None]] = on_update"
msgstr ""

#: ../../../library/typing.rst:201
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""

#: ../../../library/typing.rst:208
msgid "Generics"
msgstr ""

#: ../../../library/typing.rst:210
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""

#: ../../../library/typing.rst:216
msgid ""
"from collections.abc import Mapping, Sequence\n"
"\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."
msgstr ""

#: ../../../library/typing.rst:221
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr ""

#: ../../../library/typing.rst:226
msgid ""
"from collections.abc import Sequence\n"
"from typing import TypeVar\n"
"\n"
"T = TypeVar('T')      # Declare type variable\n"
"\n"
"def first(l: Sequence[T]) -> T:   # Generic function\n"
"    return l[0]"
msgstr ""

#: ../../../library/typing.rst:237
msgid "User-defined generic types"
msgstr ""

#: ../../../library/typing.rst:239
msgid "A user-defined class can be defined as a generic class."
msgstr ""

#: ../../../library/typing.rst:243
msgid ""
"from typing import TypeVar, Generic\n"
"from logging import Logger\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"
msgstr ""

#: ../../../library/typing.rst:265
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""

#: ../../../library/typing.rst:269
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[t]`` is valid as a type::"
msgstr ""

#: ../../../library/typing.rst:272
msgid ""
"from collections.abc import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"
msgstr ""

#: ../../../library/typing.rst:278
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

#: ../../../library/typing.rst:281
msgid ""
"from typing import TypeVar, Generic, Sequence\n"
"\n"
"T = TypeVar('T', contravariant=True)\n"
"B = TypeVar('B', bound=Sequence[bytes], covariant=True)\n"
"S = TypeVar('S', int, str)\n"
"\n"
"class WeirdTrio(Generic[T, B, S]):\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:290
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""

#: ../../../library/typing.rst:293
msgid ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # INVALID\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:301
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ""

#: ../../../library/typing.rst:303
msgid ""
"from collections.abc import Sized\n"
"from typing import TypeVar, Generic\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LinkedList(Sized, Generic[T]):\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:311
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""

#: ../../../library/typing.rst:313
msgid ""
"from collections.abc import Mapping\n"
"from typing import TypeVar\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class MyDict(Mapping[str, T]):\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:321
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr ""

#: ../../../library/typing.rst:323
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""

#: ../../../library/typing.rst:327
msgid ""
"from collections.abc import Iterable\n"
"\n"
"class MyIterable(Iterable): # Same as Iterable[Any]"
msgstr ""

#: ../../../library/typing.rst:331
msgid "User defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../../library/typing.rst:333
msgid ""
"from collections.abc import Iterable\n"
"from typing import TypeVar, Union\n"
"S = TypeVar('S')\n"
"Response = Union[Iterable[S], int]\n"
"\n"
"# Return type here is same as Union[Iterable[str], int]\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"T = TypeVar('T', int, float, complex)\n"
"Vec = Iterable[tuple[T, T]]\n"
"\n"
"def inproduct(v: Vec[T]) -> T: # Same as Iterable[tuple[T, T]]\n"
"    return sum(x*y for x, y in v)"
msgstr ""

#: ../../../library/typing.rst:348
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

#: ../../../library/typing.rst:351
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""

#: ../../../library/typing.rst:358
msgid "The :data:`Any` type"
msgstr ""

#: ../../../library/typing.rst:360
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""

#: ../../../library/typing.rst:364
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""

#: ../../../library/typing.rst:367
msgid ""
"from typing import Any\n"
"\n"
"a: Any = None\n"
"a = []          # OK\n"
"a = 2           # OK\n"
"\n"
"s: str = ''\n"
"s = a           # OK\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # Typechecks; 'item' could be any type,\n"
"    # and that type might have a 'bar' method\n"
"    item.bar()\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:382
msgid ""
"Notice that no typechecking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""

#: ../../../library/typing.rst:388
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""

#: ../../../library/typing.rst:391
msgid ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# A static type checker will treat the above\n"
"# as having the same signature as:\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"
msgstr ""

#: ../../../library/typing.rst:401
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""

#: ../../../library/typing.rst:404
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""

#: ../../../library/typing.rst:409
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""

#: ../../../library/typing.rst:413
msgid ""
"def hash_a(item: object) -> int:\n"
"    # Fails; an object does not have a 'magic' method.\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # Typechecks\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# Typechecks, since ints and strs are subclasses of object\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# Typechecks, since Any is compatible with all types\n"
"hash_b(42)\n"
"hash_b(\"foo\")"
msgstr ""

#: ../../../library/typing.rst:431
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""

#: ../../../library/typing.rst:436
msgid "Nominal vs structural subtyping"
msgstr ""

#: ../../../library/typing.rst:438
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

#: ../../../library/typing.rst:442
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""

#: ../../../library/typing.rst:448
msgid ""
"from collections.abc import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."
msgstr ""

#: ../../../library/typing.rst:455
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

#: ../../../library/typing.rst:461
msgid ""
"from collections.abc import Iterator, Iterable\n"
"\n"
"class Bucket:  # Note: no base classes\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # Passes type check"
msgstr ""

#: ../../../library/typing.rst:471
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

#: ../../../library/typing.rst:476
msgid "Module contents"
msgstr ""

#: ../../../library/typing.rst:478
msgid "The module defines the following classes, functions and decorators."
msgstr ""

#: ../../../library/typing.rst:482
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the "
"corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""

#: ../../../library/typing.rst:488
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""

#: ../../../library/typing.rst:493
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See "
"details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""

#: ../../../library/typing.rst:499
msgid "Special typing primitives"
msgstr ""

#: ../../../library/typing.rst:502
msgid "Special types"
msgstr ""

#: ../../../library/typing.rst:504
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr ""

#: ../../../library/typing.rst:508
msgid "Special type indicating an unconstrained type."
msgstr ""

#: ../../../library/typing.rst:510
msgid "Every type is compatible with :data:`Any`."
msgstr ""

#: ../../../library/typing.rst:511
msgid ":data:`Any` is compatible with every type."
msgstr ""

#: ../../../library/typing.rst:515
msgid "Special type indicating that a function never returns. For example::"
msgstr ""

#: ../../../library/typing.rst:518
msgid ""
"from typing import NoReturn\n"
"\n"
"def stop() -> NoReturn:\n"
"    raise RuntimeError('no way')"
msgstr ""

#: ../../../library/typing.rst:527
msgid "Special forms"
msgstr ""

#: ../../../library/typing.rst:529
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr ""

#: ../../../library/typing.rst:533
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""

#: ../../../library/typing.rst:537
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""

#: ../../../library/typing.rst:541
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""

#: ../../../library/typing.rst:545
msgid ""
":class:`builtins.tuple <tuple>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:551
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr ""

#: ../../../library/typing.rst:553
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr ""

#: ../../../library/typing.rst:555
msgid "The arguments must be types and there must be at least one."
msgstr ""

#: ../../../library/typing.rst:557
msgid "Unions of unions are flattened, e.g.::"
msgstr ""

#: ../../../library/typing.rst:559
msgid "Union[Union[int, str], float] == Union[int, str, float]"
msgstr ""

#: ../../../library/typing.rst:561
msgid "Unions of a single argument vanish, e.g.::"
msgstr ""

#: ../../../library/typing.rst:563
msgid "Union[int] == int  # The constructor actually returns int"
msgstr ""

#: ../../../library/typing.rst:565
msgid "Redundant arguments are skipped, e.g.::"
msgstr ""

#: ../../../library/typing.rst:567
msgid "Union[int, str, int] == Union[int, str]"
msgstr ""

#: ../../../library/typing.rst:569
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

#: ../../../library/typing.rst:571
msgid "Union[int, str] == Union[str, int]"
msgstr ""

#: ../../../library/typing.rst:573
msgid "You cannot subclass or instantiate a union."
msgstr ""

#: ../../../library/typing.rst:575
msgid "You cannot write ``Union[X][Y]``."
msgstr ""

#: ../../../library/typing.rst:577
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr ""

#: ../../../library/typing.rst:579
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

#: ../../../library/typing.rst:584
msgid "Optional type."
msgstr ""

#: ../../../library/typing.rst:586
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr ""

#: ../../../library/typing.rst:588
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

#: ../../../library/typing.rst:593
msgid ""
"def foo(arg: int = 0) -> None:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:596
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

#: ../../../library/typing.rst:600
msgid ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:605
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""

#: ../../../library/typing.rst:607
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""

#: ../../../library/typing.rst:612
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""

#: ../../../library/typing.rst:620
msgid ""
":class:`collections.abc.Callable` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:626
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""

#: ../../../library/typing.rst:631
msgid ""
"a = 3         # Has type 'int'\n"
"b = int       # Has type 'Type[int]'\n"
"c = type(a)   # Also has type 'Type[int]'"
msgstr ""

#: ../../../library/typing.rst:635
msgid "Note that ``Type[C]`` is covariant::"
msgstr ""

#: ../../../library/typing.rst:637
msgid ""
"class User: ...\n"
"class BasicUser(User): ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"# Accepts User, BasicUser, ProUser, TeamUser, ...\n"
"def make_new_user(user_class: Type[User]) -> User:\n"
"    # ...\n"
"    return user_class()"
msgstr ""

#: ../../../library/typing.rst:647
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""

#: ../../../library/typing.rst:655
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""

#: ../../../library/typing.rst:659
msgid "def new_non_team_user(user_class: Type[Union[BasicUser, ProUser]]): ..."
msgstr ""

#: ../../../library/typing.rst:661
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""

#: ../../../library/typing.rst:666
msgid ""
":class:`builtins.type <type>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:672
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""

#: ../../../library/typing.rst:676
msgid ""
"def validate_simple(data: Any) -> Literal[True]:  # always returns True\n"
"    ...\n"
"\n"
"MODE = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: MODE) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')  # Passes type check\n"
"open_helper('/other/path', 'typo')  # Error in type checker"
msgstr ""

#: ../../../library/typing.rst:686
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

#: ../../../library/typing.rst:692
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""

#: ../../../library/typing.rst:700
msgid "Special type construct to mark class variables."
msgstr ""

#: ../../../library/typing.rst:702
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

#: ../../../library/typing.rst:706
msgid ""
"class Starship:\n"
"    stats: ClassVar[dict[str, int]] = {} # class variable\n"
"    damage: int = 10                     # instance variable"
msgstr ""

#: ../../../library/typing.rst:710
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

#: ../../../library/typing.rst:712
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""

#: ../../../library/typing.rst:718
msgid ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # Error, setting class variable on instance\n"
"Starship.stats = {}     # This is OK"
msgstr ""

#: ../../../library/typing.rst:726
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""

#: ../../../library/typing.rst:729
msgid ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # Error reported by type checker\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # Error reported by type checker"
msgstr ""

#: ../../../library/typing.rst:738 ../../../library/typing.rst:1818
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

#: ../../../library/typing.rst:745
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (which can "
"safely ignore ``x``) together with runtime access to ``x`` within a specific "
"application."
msgstr ""

#: ../../../library/typing.rst:759
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can "
"scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""

#: ../../../library/typing.rst:765
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr ""

#: ../../../library/typing.rst:769
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr ""

#: ../../../library/typing.rst:773
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""

#: ../../../library/typing.rst:779
msgid ""
"T1 = Annotated[int, ValueRange(-10, 5)]\n"
"T2 = Annotated[T1, ValueRange(-20, 3)]"
msgstr ""

#: ../../../library/typing.rst:782
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr ""

#: ../../../library/typing.rst:785
msgid "The details of the syntax:"
msgstr ""

#: ../../../library/typing.rst:787
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../../library/typing.rst:789
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../../library/typing.rst:792
msgid "Annotated[int, ValueRange(3, 10), ctype(\"char\")]"
msgstr ""

#: ../../../library/typing.rst:794
msgid ""
"``Annotated`` must be called with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../../library/typing.rst:797
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr ""

#: ../../../library/typing.rst:800
msgid ""
"Annotated[int, ValueRange(3, 10), ctype(\"char\")] != Annotated[\n"
"    int, ctype(\"char\"), ValueRange(3, 10)\n"
"]"
msgstr ""

#: ../../../library/typing.rst:804
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""

#: ../../../library/typing.rst:807
msgid ""
"Annotated[Annotated[int, ValueRange(3, 10)], ctype(\"char\")] == Annotated[\n"
"    int, ValueRange(3, 10), ctype(\"char\")\n"
"]"
msgstr ""

#: ../../../library/typing.rst:811
msgid "Duplicated annotations are not removed::"
msgstr ""

#: ../../../library/typing.rst:813
msgid ""
"Annotated[int, ValueRange(3, 10)] != Annotated[\n"
"    int, ValueRange(3, 10), ValueRange(3, 10)\n"
"]"
msgstr ""

#: ../../../library/typing.rst:817
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr ""

#: ../../../library/typing.rst:819
msgid ""
"T = TypeVar('T')\n"
"Vec = Annotated[list[tuple[T, T]], MaxLen(10)]\n"
"V = Vec[int]\n"
"\n"
"V == Annotated[list[tuple[int, int]], MaxLen(10)]"
msgstr ""

#: ../../../library/typing.rst:828
msgid "Building generic types"
msgstr ""

#: ../../../library/typing.rst:830
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr ""

#: ../../../library/typing.rst:834
msgid "Abstract base class for generic types."
msgstr ""

#: ../../../library/typing.rst:836
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""

#: ../../../library/typing.rst:840
msgid ""
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""

#: ../../../library/typing.rst:845
msgid "This class can then be used as follows::"
msgstr ""

#: ../../../library/typing.rst:847
msgid ""
"X = TypeVar('X')\n"
"Y = TypeVar('Y')\n"
"\n"
"def lookup_name(mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"
msgstr ""

#: ../../../library/typing.rst:858
msgid "Type variable."
msgstr ""

#: ../../../library/typing.rst:860 ../../../library/typing.rst:1043
msgid "Usage::"
msgstr ""

#: ../../../library/typing.rst:862
msgid ""
"T = TypeVar('T')  # Can be anything\n"
"S = TypeVar('S', bound=str)  # Can be any subtype of str\n"
"A = TypeVar('A', str, bytes)  # Must be exactly str or bytes"
msgstr ""

#: ../../../library/typing.rst:866
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: ../../../library/typing.rst:871
msgid ""
"def repeat(x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Return a list containing n references to x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"\n"
"def print_capitalized(x: S) -> S:\n"
"    \"\"\"Print x capitalized, and return x.\"\"\"\n"
"    print(x.capitalize())\n"
"    return x\n"
"\n"
"\n"
"def concatenate(x: A, y: A) -> A:\n"
"    \"\"\"Add two strings or bytes objects together.\"\"\"\n"
"    return x + y"
msgstr ""

#: ../../../library/typing.rst:886
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../../library/typing.rst:889
msgid ""
"Constrained type variables and bound type variables have different semantics "
"in several important ways. Using a *constrained* type variable means that "
"the ``TypeVar`` can only ever be solved as being exactly one of the "
"constraints given::"
msgstr ""

#: ../../../library/typing.rst:894
msgid ""
"a = concatenate('one', 'two')  # Ok, variable 'a' has type 'str'\n"
"b = concatenate(StringSubclass('one'), StringSubclass('two'))  # Inferred "
"type of variable 'b' is 'str',\n"
"                                                               # despite "
"'StringSubclass' being passed in\n"
"c = concatenate('one', b'two')  # error: type variable 'A' can be either "
"'str' or 'bytes' in a function call, but not both"
msgstr ""

#: ../../../library/typing.rst:899
msgid ""
"Using a *bound* type variable, however, means that the ``TypeVar`` will be "
"solved using the most specific type possible::"
msgstr ""

#: ../../../library/typing.rst:902
msgid ""
"print_capitalized('a string')  # Ok, output has type 'str'\n"
"\n"
"class StringSubclass(str):\n"
"    pass\n"
"\n"
"print_capitalized(StringSubclass('another string'))  # Ok, output has type "
"'StringSubclass'\n"
"print_capitalized(45)  # error: int is not a subtype of str"
msgstr ""

#: ../../../library/typing.rst:910
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../../library/typing.rst:913
msgid ""
"U = TypeVar('U', bound=str|bytes)  # Can be any subtype of the union str|"
"bytes\n"
"V = TypeVar('V', bound=SupportsAbs)  # Can be anything with an __abs__ method"
msgstr ""

#: ../../../library/typing.rst:916
msgid ""
"Bound type variables are particularly useful for annotating :func:"
"`classmethods <classmethod>` that serve as alternative constructors. In the "
"following example (© `Raymond Hettinger <https://www.youtube.com/watch?"
"v=HTLu2DFOdTg>`_), the type variable ``C`` is bound to the ``Circle`` class "
"through the use of a forward reference. Using this type variable to annotate "
"the ``with_circumference`` classmethod, rather than hardcoding the return "
"type as ``Circle``, means that a type checker can correctly infer the return "
"type even if the method is called on a subclass::"
msgstr ""

#: ../../../library/typing.rst:926
msgid ""
"import math\n"
"\n"
"C = TypeVar('C', bound='Circle')\n"
"\n"
"class Circle:\n"
"    \"\"\"An abstract circle\"\"\"\n"
"\n"
"    def __init__(self, radius: float) -> None:\n"
"        self.radius = radius\n"
"\n"
"    # Use a type variable to show that the return type\n"
"    # will always be an instance of whatever ``cls`` is\n"
"    @classmethod\n"
"    def with_circumference(cls: type[C], circumference: float) -> C:\n"
"        \"\"\"Create a circle with the specified circumference\"\"\"\n"
"        radius = circumference / (math.pi * 2)\n"
"        return cls(radius)\n"
"\n"
"\n"
"class Tire(Circle):\n"
"    \"\"\"A specialised circle (made out of rubber)\"\"\"\n"
"\n"
"    MATERIAL = 'rubber'\n"
"\n"
"\n"
"c = Circle.with_circumference(3)  # Ok, variable 'c' has type 'Circle'\n"
"t = Tire.with_circumference(4)  # Ok, variable 't' has type 'Tire' (not "
"'Circle')"
msgstr ""

#: ../../../library/typing.rst:954
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""

#: ../../../library/typing.rst:957
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../../library/typing.rst:963
msgid ""
"``AnyStr`` is a :class:`constrained type variable <TypeVar>` defined as "
"``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr ""

#: ../../../library/typing.rst:966
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""

#: ../../../library/typing.rst:969
msgid ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(u\"foo\", u\"bar\")  # Ok, output has type 'unicode'\n"
"concat(b\"foo\", b\"bar\")  # Ok, output has type 'bytes'\n"
"concat(u\"foo\", b\"bar\")  # Error, cannot mix unicode and bytes"
msgstr ""

#: ../../../library/typing.rst:978
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""

#: ../../../library/typing.rst:980
msgid ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."
msgstr ""

#: ../../../library/typing.rst:984
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: ../../../library/typing.rst:987
msgid ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passes static type check"
msgstr ""

#: ../../../library/typing.rst:996
msgid ""
"See :pep:`544` for details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""

#: ../../../library/typing.rst:1001
msgid "Protocol classes can be generic, for example::"
msgstr ""

#: ../../../library/typing.rst:1003
msgid ""
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""

#: ../../../library/typing.rst:1011
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../../library/typing.rst:1013
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../../library/typing.rst:1018
msgid ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)"
msgstr ""

#: ../../../library/typing.rst:1026
msgid ""
":func:`runtime_checkable` will check only the presence of the required "
"methods, not their type signatures! For example, :class:`builtins.complex "
"<complex>` implements :func:`__float__`, therefore it passes an :func:"
"`issubclass` check against :class:`SupportsFloat`. However, the ``complex."
"__float__`` method exists only to raise a :class:`TypeError` with a more "
"informative message."
msgstr ""

#: ../../../library/typing.rst:1035
msgid "Other special directives"
msgstr ""

#: ../../../library/typing.rst:1037
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr ""

#: ../../../library/typing.rst:1041
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

#: ../../../library/typing.rst:1045
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"
msgstr ""

#: ../../../library/typing.rst:1049
msgid "This is equivalent to::"
msgstr ""

#: ../../../library/typing.rst:1051
msgid "Employee = collections.namedtuple('Employee', ['name', 'id'])"
msgstr ""

#: ../../../library/typing.rst:1053
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

#: ../../../library/typing.rst:1055
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"
msgstr ""

#: ../../../library/typing.rst:1062
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

#: ../../../library/typing.rst:1064
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""

#: ../../../library/typing.rst:1070
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

#: ../../../library/typing.rst:1072
msgid ""
"class Employee(NamedTuple):\n"
"    \"\"\"Represents an employee.\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"
msgstr ""

#: ../../../library/typing.rst:1080
msgid "Backward-compatible usage::"
msgstr ""

#: ../../../library/typing.rst:1082
msgid "Employee = NamedTuple('Employee', [('name', str), ('id', int)])"
msgstr ""

#: ../../../library/typing.rst:1084
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

#: ../../../library/typing.rst:1087
msgid "Added support for default values, methods, and docstrings."
msgstr ""

#: ../../../library/typing.rst:1090
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

#: ../../../library/typing.rst:1094
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../../library/typing.rst:1100
msgid ""
"A helper function to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns a function that returns its argument. "
"Usage::"
msgstr ""

#: ../../../library/typing.rst:1104
msgid ""
"UserId = NewType('UserId', int)\n"
"first_user = UserId(1)"
msgstr ""

#: ../../../library/typing.rst:1111
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../../library/typing.rst:1114
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../../library/typing.rst:1120
msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: str\n"
"\n"
"a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n"
"b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n"
"\n"
"assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')"
msgstr ""

#: ../../../library/typing.rst:1130
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""

#: ../../../library/typing.rst:1134
msgid "Using a literal :class:`dict` as the second argument::"
msgstr ""

#: ../../../library/typing.rst:1136
msgid "Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})"
msgstr ""

#: ../../../library/typing.rst:1138
msgid "Using keyword arguments::"
msgstr ""

#: ../../../library/typing.rst:1140
msgid "Point2D = TypedDict('Point2D', x=int, y=int, label=str)"
msgstr ""

#: ../../../library/typing.rst:1142
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../../library/typing.rst:1146
msgid ""
"# raises SyntaxError\n"
"class Point2D(TypedDict):\n"
"    in: int  # 'in' is a keyword\n"
"    x-y: int  # name with hyphens\n"
"\n"
"# OK, functional syntax\n"
"Point2D = TypedDict('Point2D', {'in': int, 'x-y': int})"
msgstr ""

#: ../../../library/typing.rst:1154
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""

#: ../../../library/typing.rst:1158
msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: int\n"
"    y: int\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int}, total=False)"
msgstr ""

#: ../../../library/typing.rst:1165
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../../library/typing.rst:1170
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../../library/typing.rst:1174
msgid ""
"class Point3D(Point2D):\n"
"    z: int"
msgstr ""

#: ../../../library/typing.rst:1177
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../../library/typing.rst:1180
msgid ""
"class Point3D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    z: int"
msgstr ""

#: ../../../library/typing.rst:1185
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, notably "
"including :class:`Generic`. For example::"
msgstr ""

#: ../../../library/typing.rst:1188
msgid ""
"class X(TypedDict):\n"
"    x: int\n"
"\n"
"class Y(TypedDict):\n"
"    y: int\n"
"\n"
"class Z(object): pass  # A non-TypedDict class\n"
"\n"
"class XY(X, Y): pass  # OK\n"
"\n"
"class XZ(X, Z): pass  # raises TypeError\n"
"\n"
"T = TypeVar('T')\n"
"class XT(X, Generic[T]): pass  # raises TypeError"
msgstr ""

#: ../../../library/typing.rst:1203
msgid ""
"A ``TypedDict`` can be introspected via :attr:`__annotations__`, :attr:"
"`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

#: ../../../library/typing.rst:1208
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example::"
msgstr ""

#: ../../../library/typing.rst:1211
msgid ""
">>> from typing import TypedDict\n"
">>> class Point2D(TypedDict): pass\n"
">>> Point2D.__total__\n"
"True\n"
">>> class Point2D(TypedDict, total=False): pass\n"
">>> Point2D.__total__\n"
"False\n"
">>> class Point3D(Point2D): pass\n"
">>> Point3D.__total__\n"
"True"
msgstr ""

#: ../../../library/typing.rst:1225
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively. Currently the only way to declare both required and non-"
"required keys in the same ``TypedDict`` is mixed inheritance, declaring a "
"``TypedDict`` with one value for the ``total`` argument and then inheriting "
"it from another ``TypedDict`` with a different value for ``total``. Usage::"
msgstr ""

#: ../../../library/typing.rst:1233
msgid ""
">>> class Point2D(TypedDict, total=False):\n"
"...     x: int\n"
"...     y: int\n"
"...\n"
">>> class Point3D(Point2D):\n"
"...     z: int\n"
"...\n"
">>> Point3D.__required_keys__ == frozenset({'z'})\n"
"True\n"
">>> Point3D.__optional_keys__ == frozenset({'x', 'y'})\n"
"True"
msgstr ""

#: ../../../library/typing.rst:1245
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""

#: ../../../library/typing.rst:1250
msgid "Generic concrete collections"
msgstr ""

#: ../../../library/typing.rst:1253
msgid "Corresponding to built-in types"
msgstr ""

#: ../../../library/typing.rst:1257
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""

#: ../../../library/typing.rst:1261
msgid "This type can be used as follows::"
msgstr ""

#: ../../../library/typing.rst:1263
msgid ""
"def count_words(text: str) -> Dict[str, int]:\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:1266
msgid ""
":class:`builtins.dict <dict>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1272
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""

#: ../../../library/typing.rst:1277
msgid "This type may be used as follows::"
msgstr ""

#: ../../../library/typing.rst:1279
msgid ""
"T = TypeVar('T', int, float)\n"
"\n"
"def vec2(x: T, y: T) -> List[T]:\n"
"    return [x, y]\n"
"\n"
"def keep_positives(vector: Sequence[T]) -> List[T]:\n"
"    return [item for item in vector if item > 0]"
msgstr ""

#: ../../../library/typing.rst:1287
msgid ""
":class:`builtins.list <list>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1293
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""

#: ../../../library/typing.rst:1297
msgid ""
":class:`builtins.set <set>` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1303
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../../library/typing.rst:1305
msgid ""
":class:`builtins.frozenset <frozenset>` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1309
msgid ":data:`Tuple` is a special form."
msgstr ""

#: ../../../library/typing.rst:1312
msgid "Corresponding to types in :mod:`collections`"
msgstr ""

#: ../../../library/typing.rst:1316
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ""

#: ../../../library/typing.rst:1320
msgid ""
":class:`collections.defaultdict` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1326
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ""

#: ../../../library/typing.rst:1330
msgid ""
":class:`collections.OrderedDict` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1336
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ""

#: ../../../library/typing.rst:1341
msgid ""
":class:`collections.ChainMap` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1347
msgid "A generic version of :class:`collections.Counter`."
msgstr ""

#: ../../../library/typing.rst:1352
msgid ""
":class:`collections.Counter` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1358
msgid "A generic version of :class:`collections.deque`."
msgstr ""

#: ../../../library/typing.rst:1363
msgid ""
":class:`collections.deque` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1368
msgid "Other concrete types"
msgstr ""

#: ../../../library/typing.rst:1374
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""

#: ../../../library/typing.rst:1381
msgid ""
"These types are also in the ``typing.io`` namespace, which was never "
"supported by type checkers and will be removed."
msgstr ""

#: ../../../library/typing.rst:1386
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""

#: ../../../library/typing.rst:1396
msgid ""
"These types are also in the ``typing.re`` namespace, which was never "
"supported by type checkers and will be removed."
msgstr ""

#: ../../../library/typing.rst:1397
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1403
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""

#: ../../../library/typing.rst:1407
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

#: ../../../library/typing.rst:1410
msgid ""
"def add_unicode_checkmark(text: Text) -> Text:\n"
"    return text + u' \\u2713'"
msgstr ""

#: ../../../library/typing.rst:1416
msgid "Abstract Base Classes"
msgstr ""

#: ../../../library/typing.rst:1419
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ""

#: ../../../library/typing.rst:1423
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ""

#: ../../../library/typing.rst:1425
msgid ""
":class:`collections.abc.Set` now supports ``[]``. See :pep:`585` and :ref:"
"`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1431
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ""

#: ../../../library/typing.rst:1433
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""

#: ../../../library/typing.rst:1436
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""

#: ../../../library/typing.rst:1439
msgid ""
":class:`collections.abc.ByteString` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1445
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ""

#: ../../../library/typing.rst:1449
msgid ""
":class:`collections.abc.Collection` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1455
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ""

#: ../../../library/typing.rst:1457
msgid ""
":class:`collections.abc.Container` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1463
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../../library/typing.rst:1465
msgid ""
":class:`collections.abc.ItemsView` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1471
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ""

#: ../../../library/typing.rst:1473
msgid ""
":class:`collections.abc.KeysView` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1479
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""

#: ../../../library/typing.rst:1482
msgid ""
"def get_position_in_index(word_list: Mapping[str, int], word: str) -> int:\n"
"    return word_list[word]"
msgstr ""

#: ../../../library/typing.rst:1485
msgid ""
":class:`collections.abc.Mapping` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1491
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ""

#: ../../../library/typing.rst:1493
msgid ""
":class:`collections.abc.MappingView` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1499
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../../library/typing.rst:1501
msgid ""
":class:`collections.abc.MutableMapping` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1507
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../../library/typing.rst:1509
msgid ""
":class:`collections.abc.MutableSequence` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1515
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../../library/typing.rst:1517
msgid ""
":class:`collections.abc.MutableSet` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1523
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ""

#: ../../../library/typing.rst:1525
msgid ""
":class:`collections.abc.Sequence` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1531
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../../library/typing.rst:1533
msgid ""
":class:`collections.abc.ValuesView` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1538
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ""

#: ../../../library/typing.rst:1542
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ""

#: ../../../library/typing.rst:1544
msgid ""
":class:`collections.abc.Iterable` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1550
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ""

#: ../../../library/typing.rst:1552
msgid ""
":class:`collections.abc.Iterator` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1558
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""

#: ../../../library/typing.rst:1561
msgid ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"
msgstr ""

#: ../../../library/typing.rst:1567
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""

#: ../../../library/typing.rst:1571
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""

#: ../../../library/typing.rst:1574
msgid ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

#: ../../../library/typing.rst:1579
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""

#: ../../../library/typing.rst:1582
msgid ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

#: ../../../library/typing.rst:1587
msgid ""
":class:`collections.abc.Generator` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1593
msgid "An alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../../library/typing.rst:1597
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ""

#: ../../../library/typing.rst:1599
msgid ""
":class:`collections.abc.Reversible` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1605
msgid "An alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../../library/typing.rst:1608
msgid "Asynchronous programming"
msgstr ""

#: ../../../library/typing.rst:1612
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""

#: ../../../library/typing.rst:1616
msgid ""
"from collections.abc import Coroutine\n"
"c: Coroutine[list[str], str, int]  # Some coroutine defined elsewhere\n"
"x = c.send('hi')                   # Inferred type of 'x' is list[str]\n"
"async def bar() -> None:\n"
"    y = await c                    # Inferred type of 'y' is int"
msgstr ""

#: ../../../library/typing.rst:1624
msgid ""
":class:`collections.abc.Coroutine` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1630
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""

#: ../../../library/typing.rst:1633
msgid ""
"async def echo_round() -> AsyncGenerator[int, float]:\n"
"    sent = yield 0\n"
"    while sent >= 0.0:\n"
"        rounded = await round(sent)\n"
"        sent = yield rounded"
msgstr ""

#: ../../../library/typing.rst:1639
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""

#: ../../../library/typing.rst:1643
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""

#: ../../../library/typing.rst:1646
msgid ""
"async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

#: ../../../library/typing.rst:1651
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""

#: ../../../library/typing.rst:1654
msgid ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

#: ../../../library/typing.rst:1661
msgid ""
":class:`collections.abc.AsyncGenerator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1667
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../../library/typing.rst:1671
msgid ""
":class:`collections.abc.AsyncIterable` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1677
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../../library/typing.rst:1681
msgid ""
":class:`collections.abc.AsyncIterator` now supports ``[]``. See :pep:`585` "
"and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1687
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../../library/typing.rst:1691
msgid ""
":class:`collections.abc.Awaitable` now supports ``[]``. See :pep:`585` and :"
"ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1697
msgid "Context manager types"
msgstr ""

#: ../../../library/typing.rst:1701
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../../library/typing.rst:1706
msgid ""
":class:`contextlib.AbstractContextManager` now supports ``[]``. See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1712
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../../library/typing.rst:1717
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../../library/typing.rst:1722
msgid "Protocols"
msgstr ""

#: ../../../library/typing.rst:1724
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr ""

#: ../../../library/typing.rst:1728
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

#: ../../../library/typing.rst:1733
msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

#: ../../../library/typing.rst:1737
msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

#: ../../../library/typing.rst:1741
msgid "An ABC with one abstract method ``__float__``."
msgstr ""

#: ../../../library/typing.rst:1745
msgid "An ABC with one abstract method ``__index__``."
msgstr ""

#: ../../../library/typing.rst:1751
msgid "An ABC with one abstract method ``__int__``."
msgstr ""

#: ../../../library/typing.rst:1755
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

#: ../../../library/typing.rst:1759
msgid "Functions and decorators"
msgstr ""

#: ../../../library/typing.rst:1763
msgid "Cast a value to a type."
msgstr ""

#: ../../../library/typing.rst:1765
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

#: ../../../library/typing.rst:1772
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""

#: ../../../library/typing.rst:1784
msgid ""
"@overload\n"
"def process(response: None) -> None:\n"
"    ...\n"
"@overload\n"
"def process(response: int) -> tuple[int, str]:\n"
"    ...\n"
"@overload\n"
"def process(response: bytes) -> str:\n"
"    ...\n"
"def process(response):\n"
"    <actual implementation>"
msgstr ""

#: ../../../library/typing.rst:1796
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr ""

#: ../../../library/typing.rst:1800
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""

#: ../../../library/typing.rst:1804
msgid ""
"class Base:\n"
"    @final\n"
"    def done(self) -> None:\n"
"        ...\n"
"class Sub(Base):\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ...\n"
"\n"
"@final\n"
"class Leaf:\n"
"    ...\n"
"class Other(Leaf):  # Error reported by type checker\n"
"    ..."
msgstr ""

#: ../../../library/typing.rst:1825
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

#: ../../../library/typing.rst:1827
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""

#: ../../../library/typing.rst:1831
msgid "This mutates the function(s) in place."
msgstr ""

#: ../../../library/typing.rst:1835
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

#: ../../../library/typing.rst:1837
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

#: ../../../library/typing.rst:1842
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr ""

#: ../../../library/typing.rst:1844
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

#: ../../../library/typing.rst:1848
msgid ""
"@type_check_only\n"
"class Response:  # private or not available at runtime\n"
"    code: int\n"
"    def get_header(self, name: str) -> str: ...\n"
"\n"
"def fetch_response() -> Response: ..."
msgstr ""

#: ../../../library/typing.rst:1855
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

#: ../../../library/typing.rst:1859
msgid "Introspection helpers"
msgstr ""

#: ../../../library/typing.rst:1863
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

#: ../../../library/typing.rst:1866
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""

#: ../../../library/typing.rst:1874
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""

#: ../../../library/typing.rst:1878
msgid ""
"class Student(NamedTuple):\n"
"    name: Annotated[str, 'some marker']\n"
"\n"
"get_type_hints(Student) == {'name': str}\n"
"get_type_hints(Student, include_extras=False) == {'name': str}\n"
"get_type_hints(Student, include_extras=True) == {\n"
"    'name': Annotated[str, 'some marker']\n"
"}"
msgstr ""

#: ../../../library/typing.rst:1887
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ""

#: ../../../library/typing.rst:1893
msgid "Provide basic introspection for generic types and special typing forms."
msgstr ""

#: ../../../library/typing.rst:1895
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. If ``X`` is "
"a :class:`Union` or :class:`Literal` contained in another generic type, the "
"order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. For unsupported objects "
"return ``None`` and ``()`` correspondingly. Examples::"
msgstr ""

#: ../../../library/typing.rst:1904
msgid ""
"assert get_origin(Dict[str, int]) is dict\n"
"assert get_args(Dict[int, str]) == (int, str)\n"
"\n"
"assert get_origin(Union[int, str]) is Union\n"
"assert get_args(Union[int, str]) == (int, str)"
msgstr ""

#: ../../../library/typing.rst:1914
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../../library/typing.rst:1920
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../../library/typing.rst:1927
msgid "Constant"
msgstr ""

#: ../../../library/typing.rst:1931
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""

#: ../../../library/typing.rst:1934
msgid ""
"if TYPE_CHECKING:\n"
"    import expensive_mod\n"
"\n"
"def fun(arg: 'expensive_mod.SomeType') -> None:\n"
"    local_var: expensive_mod.AnotherType = other_fun()"
msgstr ""

#: ../../../library/typing.rst:1940
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""

#: ../../../library/typing.rst:1947
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
