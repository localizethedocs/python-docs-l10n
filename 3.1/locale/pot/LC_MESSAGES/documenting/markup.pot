# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../documenting/markup.rst:4
msgid "Additional Markup Constructs"
msgstr ""

#: ../../../documenting/markup.rst:6
msgid ""
"Sphinx adds a lot of new directives and interpreted text roles to standard "
"reST markup.  This section contains the reference material for these "
"facilities. Documentation for \"standard\" reST constructs is not included "
"here, though they are used in the Python documentation."
msgstr ""

#: ../../../documenting/markup.rst:13
msgid ""
"This is just an overview of Sphinx' extended markup capabilities; full "
"coverage can be found in `its own documentation <http://sphinx.pocoo.org/"
"contents.html>`_."
msgstr ""

#: ../../../documenting/markup.rst:19
msgid "Meta-information markup"
msgstr ""

#: ../../../documenting/markup.rst:23
msgid ""
"Identifies the author of the current section.  The argument should include "
"the author's name such that it can be used for presentation (though it "
"isn't) and email address.  The domain name portion of the address should be "
"lower case.  Example::"
msgstr ""

#: ../../../documenting/markup.rst:28
msgid ".. sectionauthor:: Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../../documenting/markup.rst:30
msgid ""
"Currently, this markup isn't reflected in the output in any way, but it "
"helps keep track of contributions."
msgstr ""

#: ../../../documenting/markup.rst:35
msgid "Module-specific markup"
msgstr ""

#: ../../../documenting/markup.rst:37
msgid ""
"The markup described in this section is used to provide information about a "
"module being documented.  Each module should be documented in its own file. "
"Normally this markup appears after the title heading of that file; a typical "
"file might start like this::"
msgstr ""

#: ../../../documenting/markup.rst:42
msgid ""
":mod:`parrot` -- Dead parrot access\n"
"===================================\n"
"\n"
".. module:: parrot\n"
"   :platform: Unix, Windows\n"
"   :synopsis: Analyze and reanimate dead parrots.\n"
".. moduleauthor:: Eric Cleese <eric@python.invalid>\n"
".. moduleauthor:: John Idle <john@python.invalid>"
msgstr ""

#: ../../../documenting/markup.rst:51
msgid ""
"As you can see, the module-specific markup consists of two directives, the "
"``module`` directive and the ``moduleauthor`` directive."
msgstr ""

#: ../../../documenting/markup.rst:56
msgid ""
"This directive marks the beginning of the description of a module, package, "
"or submodule. The name should be fully qualified (i.e. including the package "
"name for submodules)."
msgstr ""

#: ../../../documenting/markup.rst:60
msgid ""
"The ``platform`` option, if present, is a comma-separated list of the "
"platforms on which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\", and "
"\"Unix\".  It is important to use a key which has already been used when "
"applicable."
msgstr ""

#: ../../../documenting/markup.rst:66
msgid ""
"The ``synopsis`` option should consist of one sentence describing the "
"module's purpose -- it is currently only used in the Global Module Index."
msgstr ""

#: ../../../documenting/markup.rst:69
msgid ""
"The ``deprecated`` option can be given (with no value) to mark a module as "
"deprecated; it will be designated as such in various locations then."
msgstr ""

#: ../../../documenting/markup.rst:74
msgid ""
"The ``moduleauthor`` directive, which can appear multiple times, names the "
"authors of the module code, just like ``sectionauthor`` names the author(s) "
"of a piece of documentation.  It too does not result in any output currently."
msgstr ""

#: ../../../documenting/markup.rst:80
msgid ""
"It is important to make the section title of a module-describing file "
"meaningful since that value will be inserted in the table-of-contents trees "
"in overview files."
msgstr ""

#: ../../../documenting/markup.rst:86
msgid "Information units"
msgstr ""

#: ../../../documenting/markup.rst:88
msgid ""
"There are a number of directives used to describe specific features provided "
"by modules.  Each directive requires one or more signatures to provide basic "
"information about what is being described, and the content should be the "
"description.  The basic version makes entries in the general index; if no "
"index entry is desired, you can give the directive option flag ``:noindex:"
"``.  The following example shows all of the features of this directive type::"
msgstr ""

#: ../../../documenting/markup.rst:95
msgid ""
".. function:: spam(eggs)\n"
"              ham(eggs)\n"
"   :noindex:\n"
"\n"
"   Spam or ham the foo."
msgstr ""

#: ../../../documenting/markup.rst:101
msgid ""
"The signatures of object methods or data attributes should always include "
"the type name (``.. method:: FileInput.input(...)``), even if it is obvious "
"from the context which type they belong to; this is to enable consistent "
"cross-references.  If you describe methods belonging to an abstract "
"protocol, such as \"context managers\", include a (pseudo-)type name too to "
"make the index entries more informative."
msgstr ""

#: ../../../documenting/markup.rst:108
msgid "The directives are:"
msgstr ""

#: ../../../documenting/markup.rst:112
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr ""

#: ../../../documenting/markup.rst:114
msgid ""
".. cfunction:: PyObject* PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t "
"nitems)"
msgstr ""

#: ../../../documenting/markup.rst:116
msgid ""
"This is also used to describe function-like preprocessor macros.  The names "
"of the arguments should be given so they may be used in the description."
msgstr ""

#: ../../../documenting/markup.rst:119
msgid ""
"Note that you don't have to backslash-escape asterisks in the signature, as "
"it is not parsed by the reST inliner."
msgstr ""

#: ../../../documenting/markup.rst:124
msgid "Describes a C struct member. Example signature::"
msgstr ""

#: ../../../documenting/markup.rst:126
msgid ".. cmember:: PyObject* PyTypeObject.tp_bases"
msgstr ""

#: ../../../documenting/markup.rst:128
msgid ""
"The text of the description should include the range of values allowed, how "
"the value should be interpreted, and whether the value can be changed. "
"References to structure members in text should use the ``member`` role."
msgstr ""

#: ../../../documenting/markup.rst:134
msgid ""
"Describes a \"simple\" C macro.  Simple macros are macros which are used for "
"code expansion, but which do not take arguments so cannot be described as "
"functions.  This is not to be used for simple constant definitions.  "
"Examples of its use in the Python documentation include :cmacro:"
"`PyObject_HEAD` and :cmacro:`Py_BEGIN_ALLOW_THREADS`."
msgstr ""

#: ../../../documenting/markup.rst:142
msgid "Describes a C type. The signature should just be the type name."
msgstr ""

#: ../../../documenting/markup.rst:146
msgid ""
"Describes a global C variable.  The signature should include the type, such "
"as::"
msgstr ""

#: ../../../documenting/markup.rst:149
msgid ".. cvar:: PyObject* PyClass_Type"
msgstr ""

#: ../../../documenting/markup.rst:153
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\"  Class and object attributes are not documented "
"using this directive."
msgstr ""

#: ../../../documenting/markup.rst:159
msgid ""
"Describes an exception class.  The signature can, but need not include "
"parentheses with constructor arguments."
msgstr ""

#: ../../../documenting/markup.rst:164
msgid ""
"Describes a module-level function.  The signature should include the "
"parameters, enclosing optional parameters in brackets.  Default values can "
"be given if it enhances clarity.  For example::"
msgstr ""

#: ../../../documenting/markup.rst:168
msgid ".. function:: repeat([repeat=3[, number=1000000]])"
msgstr ""

#: ../../../documenting/markup.rst:170
msgid ""
"Object methods are not documented using this directive. Bound object methods "
"placed in the module namespace as part of the public interface of the module "
"are documented using this, as they are equivalent to normal functions for "
"most purposes."
msgstr ""

#: ../../../documenting/markup.rst:175
msgid ""
"The description should include information about the parameters required and "
"how they are used (especially whether mutable objects passed as parameters "
"are modified), side effects, and possible exceptions.  A small example may "
"be provided."
msgstr ""

#: ../../../documenting/markup.rst:182
msgid ""
"Describes a class.  The signature can include parentheses with parameters "
"which will be shown as the constructor arguments."
msgstr ""

#: ../../../documenting/markup.rst:187
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly.  This directive should be nested in a class directive, "
"like in this example::"
msgstr ""

#: ../../../documenting/markup.rst:192
msgid ""
".. class:: Spam\n"
"\n"
"      Description of the class.\n"
"\n"
"      .. data:: ham\n"
"\n"
"         Description of the attribute."
msgstr ""

#: ../../../documenting/markup.rst:200
msgid ""
"If is also possible to document an attribute outside of a class directive, "
"for example if the documentation for different attributes and methods is "
"split in multiple sections.  The class name should then be included "
"explicitly::"
msgstr ""

#: ../../../documenting/markup.rst:205
msgid ".. data:: Spam.eggs"
msgstr ""

#: ../../../documenting/markup.rst:209
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  This directive should be nested in a class "
"directive, like in the example above."
msgstr ""

#: ../../../documenting/markup.rst:216
msgid "Describes a Python :term:`bytecode` instruction."
msgstr ""

#: ../../../documenting/markup.rst:220
msgid ""
"Describes a Python command line option or switch.  Option argument names "
"should be enclosed in angle brackets.  Example::"
msgstr ""

#: ../../../documenting/markup.rst:223
msgid ""
".. cmdoption:: -m <module>\n"
"\n"
"   Run a module as a script."
msgstr ""

#: ../../../documenting/markup.rst:229
msgid "Describes an environment variable that Python uses or defines."
msgstr ""

#: ../../../documenting/markup.rst:232
msgid "There is also a generic version of these directives:"
msgstr ""

#: ../../../documenting/markup.rst:236
msgid ""
"This directive produces the same formatting as the specific ones explained "
"above but does not create index entries or cross-referencing targets.  It is "
"used, for example, to describe the directives in this document. Example::"
msgstr ""

#: ../../../documenting/markup.rst:240
msgid ""
".. describe:: opcode\n"
"\n"
"   Describes a Python bytecode instruction."
msgstr ""

#: ../../../documenting/markup.rst:246
msgid "Showing code examples"
msgstr ""

#: ../../../documenting/markup.rst:248
msgid ""
"Examples of Python source code or interactive sessions are represented using "
"standard reST literal blocks.  They are started by a ``::`` at the end of "
"the preceding paragraph and delimited by indentation."
msgstr ""

#: ../../../documenting/markup.rst:252
msgid ""
"Representing an interactive session requires including the prompts and "
"output along with the Python code.  No special markup is required for "
"interactive sessions.  After the last line of input or output presented, "
"there should not be an \"unused\" primary prompt; this is an example of what "
"*not* to do::"
msgstr ""

#: ../../../documenting/markup.rst:257
msgid ""
">>> 1 + 1\n"
"2\n"
">>>"
msgstr ""

#: ../../../documenting/markup.rst:261
msgid "Syntax highlighting is handled in a smart way:"
msgstr ""

#: ../../../documenting/markup.rst:263
msgid ""
"There is a \"highlighting language\" for each source file.  Per default, "
"this is ``'python'`` as the majority of files will have to highlight Python "
"snippets."
msgstr ""

#: ../../../documenting/markup.rst:267
msgid ""
"Within Python highlighting mode, interactive sessions are recognized "
"automatically and highlighted appropriately."
msgstr ""

#: ../../../documenting/markup.rst:270
msgid ""
"The highlighting language can be changed using the ``highlightlang`` "
"directive, used as follows::"
msgstr ""

#: ../../../documenting/markup.rst:273
msgid ".. highlightlang:: c"
msgstr ""

#: ../../../documenting/markup.rst:275
msgid ""
"This language is used until the next ``highlightlang`` directive is "
"encountered."
msgstr ""

#: ../../../documenting/markup.rst:278
msgid "The values normally used for the highlighting language are:"
msgstr ""

#: ../../../documenting/markup.rst:280
msgid "``python`` (the default)"
msgstr ""

#: ../../../documenting/markup.rst:281
msgid "``c``"
msgstr ""

#: ../../../documenting/markup.rst:282
msgid "``rest``"
msgstr ""

#: ../../../documenting/markup.rst:283
msgid "``none`` (no highlighting)"
msgstr ""

#: ../../../documenting/markup.rst:285
msgid ""
"If highlighting with the current language fails, the block is not "
"highlighted in any way."
msgstr ""

#: ../../../documenting/markup.rst:288
msgid ""
"Longer displays of verbatim text may be included by storing the example text "
"in an external file containing only plain text.  The file may be included "
"using the ``literalinclude`` directive. [1]_ For example, to include the "
"Python source file :file:`example.py`, use::"
msgstr ""

#: ../../../documenting/markup.rst:293
msgid ".. literalinclude:: example.py"
msgstr ""

#: ../../../documenting/markup.rst:295
msgid ""
"The file name is relative to the current file's path.  Documentation-"
"specific include files should be placed in the ``Doc/includes`` subdirectory."
msgstr ""

#: ../../../documenting/markup.rst:300
msgid "Inline markup"
msgstr ""

#: ../../../documenting/markup.rst:302
msgid ""
"As said before, Sphinx uses interpreted text roles to insert semantic markup "
"in documents."
msgstr ""

#: ../../../documenting/markup.rst:305
msgid ""
"Names of local variables, such as function/method arguments, are an "
"exception, they should be marked simply with ``*var*``."
msgstr ""

#: ../../../documenting/markup.rst:308
msgid "For all other roles, you have to write ``:rolename:`content```."
msgstr ""

#: ../../../documenting/markup.rst:310
msgid ""
"There are some additional facilities that make cross-referencing roles more "
"versatile:"
msgstr ""

#: ../../../documenting/markup.rst:313
msgid ""
"You may supply an explicit title and reference target, like in reST direct "
"hyperlinks: ``:role:`title <target>``` will refer to *target*, but the link "
"text will be *title*."
msgstr ""

#: ../../../documenting/markup.rst:317
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be created."
msgstr ""

#: ../../../documenting/markup.rst:319
msgid ""
"For the Python object roles, if you prefix the content with ``~``, the link "
"text will only be the last component of the target.  For example, ``:meth:"
"`~Queue.Queue.get``` will refer to ``Queue.Queue.get`` but only display "
"``get`` as the link text."
msgstr ""

#: ../../../documenting/markup.rst:324
msgid ""
"In HTML output, the link's ``title`` attribute (that is e.g. shown as a tool-"
"tip on mouse-hover) will always be the full target name."
msgstr ""

#: ../../../documenting/markup.rst:327
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked "
"if a matching identifier is found:"
msgstr ""

#: ../../../documenting/markup.rst:332
msgid ""
"The name of a module; a dotted name may be used.  This should also be used "
"for package names."
msgstr ""

#: ../../../documenting/markup.rst:337
msgid ""
"The name of a Python function; dotted names may be used.  The role text "
"should not include trailing parentheses to enhance readability.  The "
"parentheses are stripped when searching for identifiers."
msgstr ""

#: ../../../documenting/markup.rst:343
msgid "The name of a module-level variable or constant."
msgstr ""

#: ../../../documenting/markup.rst:347
msgid ""
"The name of a \"defined\" constant.  This may be a C-language ``#define`` or "
"a Python variable that is not intended to be changed."
msgstr ""

#: ../../../documenting/markup.rst:352
msgid "A class name; a dotted name may be used."
msgstr ""

#: ../../../documenting/markup.rst:356
msgid ""
"The name of a method of an object.  The role text should include the type "
"name and the method name.  A dotted name may be used."
msgstr ""

#: ../../../documenting/markup.rst:361
msgid "The name of a data attribute of an object."
msgstr ""

#: ../../../documenting/markup.rst:365
msgid "The name of an exception. A dotted name may be used."
msgstr ""

#: ../../../documenting/markup.rst:367
msgid ""
"The name enclosed in this markup can include a module name and/or a class "
"name. For example, ``:func:`filter``` could refer to a function named "
"``filter`` in the current module, or the built-in function of that name.  In "
"contrast, ``:func:`foo.filter``` clearly refers to the ``filter`` function "
"in the ``foo`` module."
msgstr ""

#: ../../../documenting/markup.rst:373
msgid ""
"Normally, names in these roles are searched first without any further "
"qualification, then with the current module name prepended, then with the "
"current module and class name (if any) prepended.  If you prefix the name "
"with a dot, this order is reversed.  For example, in the documentation of "
"the :mod:`codecs` module, ``:func:`open``` always refers to the built-in "
"function, while ``:func:`.open``` refers to :func:`codecs.open`."
msgstr ""

#: ../../../documenting/markup.rst:380
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of "
"the currently documented class."
msgstr ""

#: ../../../documenting/markup.rst:383
msgid ""
"The following roles create cross-references to C-language constructs if they "
"are defined in the API documentation:"
msgstr ""

#: ../../../documenting/markup.rst:388
msgid "The name of a C-language variable."
msgstr ""

#: ../../../documenting/markup.rst:392
msgid "The name of a C-language function. Should include trailing parentheses."
msgstr ""

#: ../../../documenting/markup.rst:396
msgid "The name of a \"simple\" C macro, as defined above."
msgstr ""

#: ../../../documenting/markup.rst:400
msgid "The name of a C-language type."
msgstr ""

#: ../../../documenting/markup.rst:403
msgid ""
"The following role does possibly create a cross-reference, but does not "
"refer to objects:"
msgstr ""

#: ../../../documenting/markup.rst:408
msgid ""
"The name of a grammar token (used in the reference manual to create links "
"between production displays)."
msgstr ""

#: ../../../documenting/markup.rst:412
msgid ""
"The following role creates a cross-reference to the term in the glossary:"
msgstr ""

#: ../../../documenting/markup.rst:416
msgid ""
"Reference to a term in the glossary.  The glossary is created using the "
"``glossary`` directive containing a definition list with terms and "
"definitions.  It does not have to be in the same file as the ``term`` "
"markup, in fact, by default the Python docs have one global glossary in the "
"``glossary.rst`` file."
msgstr ""

#: ../../../documenting/markup.rst:422
msgid ""
"If you use a term that's not explained in a glossary, you'll get a warning "
"during build."
msgstr ""

#: ../../../documenting/markup.rst:427
msgid ""
"The following roles don't do anything special except formatting the text in "
"a different style:"
msgstr ""

#: ../../../documenting/markup.rst:432
msgid "The name of an OS-level command, such as ``rm``."
msgstr ""

#: ../../../documenting/markup.rst:436
msgid ""
"Mark the defining instance of a term in the text.  (No index entries are "
"generated.)"
msgstr ""

#: ../../../documenting/markup.rst:441
msgid "An environment variable.  Index entries are generated."
msgstr ""

#: ../../../documenting/markup.rst:445
msgid ""
"The name of a file or directory.  Within the contents, you can use curly "
"braces to indicate a \"variable\" part, for example::"
msgstr ""

#: ../../../documenting/markup.rst:448
msgid "... is installed in :file:`/usr/lib/python2.{x}/site-packages` ..."
msgstr ""

#: ../../../documenting/markup.rst:450
msgid ""
"In the built documentation, the ``x`` will be displayed differently to "
"indicate that it is to be replaced by the Python minor version."
msgstr ""

#: ../../../documenting/markup.rst:455
msgid ""
"Labels presented as part of an interactive user interface should be marked "
"using ``guilabel``.  This includes labels from text-based interfaces such as "
"those created using :mod:`curses` or other text-based libraries.  Any label "
"used in the interface should be marked with this role, including button "
"labels, window titles, field names, menu and menu selection names, and even "
"values in selection lists."
msgstr ""

#: ../../../documenting/markup.rst:464
msgid ""
"Mark a sequence of keystrokes.  What form the key sequence takes may depend "
"on platform- or application-specific conventions.  When there are no "
"relevant conventions, the names of modifier keys should be spelled out, to "
"improve accessibility for new users and non-native speakers.  For example, "
"an *xemacs* key sequence may be marked like ``:kbd:`C-x C-f```, but without "
"reference to a specific application or platform, the same sequence should be "
"marked as ``:kbd:`Control-x Control-f```."
msgstr ""

#: ../../../documenting/markup.rst:474
msgid "The name of a keyword in Python."
msgstr ""

#: ../../../documenting/markup.rst:478
msgid ""
"The name of an RFC 822-style mail header.  This markup does not imply that "
"the header is being used in an email message, but can be used to refer to "
"any header of the same \"style.\"  This is also used for headers defined by "
"the various MIME specifications.  The header name should be entered in the "
"same way it would normally be found in practice, with the camel-casing "
"conventions being preferred where there is more than one common usage. For "
"example: ``:mailheader:`Content-Type```."
msgstr ""

#: ../../../documenting/markup.rst:488
msgid "The name of a :command:`make` variable."
msgstr ""

#: ../../../documenting/markup.rst:492
msgid ""
"A reference to a Unix manual page including the section, e.g. ``:manpage:"
"`ls(1)```."
msgstr ""

#: ../../../documenting/markup.rst:497
msgid ""
"Menu selections should be marked using the ``menuselection`` role.  This is "
"used to mark a complete sequence of menu selections, including selecting "
"submenus and choosing a specific operation, or any subsequence of such a "
"sequence.  The names of individual selections should be separated by ``-->``."
msgstr ""

#: ../../../documenting/markup.rst:503
msgid ""
"For example, to mark the selection \"Start > Programs\", use this markup::"
msgstr ""

#: ../../../documenting/markup.rst:505
msgid ":menuselection:`Start --> Programs`"
msgstr ""

#: ../../../documenting/markup.rst:507
msgid ""
"When including a selection that includes some trailing indicator, such as "
"the ellipsis some operating systems use to indicate that the command opens a "
"dialog, the indicator should be omitted from the selection name."
msgstr ""

#: ../../../documenting/markup.rst:513
msgid ""
"The name of a MIME type, or a component of a MIME type (the major or minor "
"portion, taken alone)."
msgstr ""

#: ../../../documenting/markup.rst:518
msgid "The name of a Usenet newsgroup."
msgstr ""

#: ../../../documenting/markup.rst:522
msgid ""
"A command-line option of Python.  The leading hyphen(s) must be included. If "
"a matching ``cmdoption`` directive exists, it is linked to.  For options of "
"other programs or scripts, use simple ````code```` markup."
msgstr ""

#: ../../../documenting/markup.rst:528
msgid ""
"The name of an executable program.  This may differ from the file name for "
"the executable for some platforms.  In particular, the ``.exe`` (or other) "
"extension should be omitted for Windows programs."
msgstr ""

#: ../../../documenting/markup.rst:534
msgid "A regular expression. Quotes should not be included."
msgstr ""

#: ../../../documenting/markup.rst:538
msgid ""
"A piece of literal text, such as code.  Within the contents, you can use "
"curly braces to indicate a \"variable\" part, as in ``:file:``."
msgstr ""

#: ../../../documenting/markup.rst:541
msgid ""
"If you don't need the \"variable part\" indication, use the standard "
"````code```` instead."
msgstr ""

#: ../../../documenting/markup.rst:546
msgid "A Python or C variable or parameter name."
msgstr ""

#: ../../../documenting/markup.rst:549
msgid "The following roles generate external links:"
msgstr ""

#: ../../../documenting/markup.rst:553
msgid ""
"A reference to a Python Enhancement Proposal.  This generates appropriate "
"index entries. The text \"PEP *number*\\ \" is generated; in the HTML "
"output, this text is a hyperlink to an online copy of the specified PEP."
msgstr ""

#: ../../../documenting/markup.rst:559
msgid ""
"A reference to an Internet Request for Comments.  This generates appropriate "
"index entries. The text \"RFC *number*\\ \" is generated; in the HTML "
"output, this text is a hyperlink to an online copy of the specified RFC."
msgstr ""

#: ../../../documenting/markup.rst:564
msgid ""
"Note that there are no special roles for including hyperlinks as you can use "
"the standard reST markup for that purpose."
msgstr ""

#: ../../../documenting/markup.rst:571
msgid "Cross-linking markup"
msgstr ""

#: ../../../documenting/markup.rst:573
msgid ""
"To support cross-referencing to arbitrary sections in the documentation, the "
"standard reST labels are \"abused\" a bit: Every label must precede a "
"section title; and every label name must be unique throughout the entire "
"documentation source."
msgstr ""

#: ../../../documenting/markup.rst:578
msgid ""
"You can then reference to these sections using the ``:ref:`label-name``` "
"role."
msgstr ""

#: ../../../documenting/markup.rst:580 ../../../documenting/markup.rst:607
#: ../../../documenting/markup.rst:632
msgid "Example::"
msgstr ""

#: ../../../documenting/markup.rst:582
msgid ""
".. _my-reference-label:\n"
"\n"
"Section to cross-reference\n"
"--------------------------\n"
"\n"
"This is the text of the section.\n"
"\n"
"It refers to the section itself, see :ref:`my-reference-label`."
msgstr ""

#: ../../../documenting/markup.rst:591
msgid "The ``:ref:`` invocation is replaced with the section title."
msgstr ""

#: ../../../documenting/markup.rst:595
msgid "Paragraph-level markup"
msgstr ""

#: ../../../documenting/markup.rst:597
msgid ""
"These directives create short paragraphs and can be used inside information "
"units as well as normal text:"
msgstr ""

#: ../../../documenting/markup.rst:602
msgid ""
"An especially important bit of information about an API that a user should "
"be aware of when using whatever bit of API the note pertains to.  The "
"content of the directive should be written in complete sentences and include "
"all appropriate punctuation."
msgstr ""

#: ../../../documenting/markup.rst:609
msgid ""
".. note::\n"
"\n"
"   This function is not suitable for sending spam e-mails."
msgstr ""

#: ../../../documenting/markup.rst:615
msgid ""
"An important bit of information about an API that a user should be aware of "
"when using whatever bit of API the warning pertains to.  The content of the "
"directive should be written in complete sentences and include all "
"appropriate punctuation.  In the interest of not scaring users away from "
"pages filled with warnings, this directive should only be chosen over "
"``note`` for information regarding the possibility of crashes, data loss, or "
"security implications."
msgstr ""

#: ../../../documenting/markup.rst:625
msgid ""
"This directive documents the version of Python which added the described "
"feature to the library or C API. When this applies to an entire module, it "
"should be placed at the top of the module section before any prose."
msgstr ""

#: ../../../documenting/markup.rst:629
msgid ""
"The first argument must be given and is the version in question; you can add "
"a second argument consisting of a *brief* explanation of the change."
msgstr ""

#: ../../../documenting/markup.rst:634
msgid ""
".. versionadded:: 3.1\n"
"   The *spam* parameter."
msgstr ""

#: ../../../documenting/markup.rst:637
msgid ""
"Note that there must be no blank line between the directive head and the "
"explanation; this is to make these blocks visually continuous in the markup."
msgstr ""

#: ../../../documenting/markup.rst:642
msgid ""
"Similar to ``versionadded``, but describes when and what changed in the "
"named feature in some way (new parameters, changed side effects, etc.)."
msgstr ""

#: ../../../documenting/markup.rst:649
msgid ""
"This directive is used to mark CPython-specific information.  Use either "
"with a block content or a single sentence as an argument, i.e. either ::"
msgstr ""

#: ../../../documenting/markup.rst:652
msgid ""
".. impl-detail::\n"
"\n"
"   This describes some implementation detail.\n"
"\n"
"   More explanation."
msgstr ""

#: ../../../documenting/markup.rst:658
msgid "or ::"
msgstr ""

#: ../../../documenting/markup.rst:660
msgid ".. impl-detail:: This shortly mentions an implementation detail."
msgstr ""

#: ../../../documenting/markup.rst:662
msgid ""
"\"\\ **CPython implementation detail:**\\ \" is automatically prepended to "
"the content."
msgstr ""

#: ../../../documenting/markup.rst:667
msgid ""
"Many sections include a list of references to module documentation or "
"external documents.  These lists are created using the ``seealso`` directive."
msgstr ""

#: ../../../documenting/markup.rst:670
msgid ""
"The ``seealso`` directive is typically placed in a section just before any "
"sub-sections.  For the HTML output, it is shown boxed off from the main flow "
"of the text."
msgstr ""

#: ../../../documenting/markup.rst:674
msgid ""
"The content of the ``seealso`` directive should be a reST definition list. "
"Example::"
msgstr ""

#: ../../../documenting/markup.rst:677
msgid ""
".. seealso::\n"
"\n"
"   Module :mod:`zipfile`\n"
"      Documentation of the :mod:`zipfile` standard module.\n"
"\n"
"   `GNU tar manual, Basic Tar Format <http://link>`_\n"
"      Documentation for tar archive files, including GNU tar extensions."
msgstr ""

#: ../../../documenting/markup.rst:687
msgid ""
"This directive creates a paragraph heading that is not used to create a "
"table of contents node.  It is currently used for the \"Footnotes\" caption."
msgstr ""

#: ../../../documenting/markup.rst:692
msgid ""
"This directive creates a centered boldfaced paragraph.  Use it as follows::"
msgstr ""

#: ../../../documenting/markup.rst:694
msgid ""
".. centered::\n"
"\n"
"   Paragraph contents."
msgstr ""

#: ../../../documenting/markup.rst:700
msgid "Table-of-contents markup"
msgstr ""

#: ../../../documenting/markup.rst:702
msgid ""
"Since reST does not have facilities to interconnect several documents, or "
"split documents into multiple output files, Sphinx uses a custom directive "
"to add relations between the single files the documentation is made of, as "
"well as tables of contents.  The ``toctree`` directive is the central "
"element."
msgstr ""

#: ../../../documenting/markup.rst:709
msgid ""
"This directive inserts a \"TOC tree\" at the current location, using the "
"individual TOCs (including \"sub-TOC trees\") of the files given in the "
"directive body.  A numeric ``maxdepth`` option may be given to indicate the "
"depth of the tree; by default, all levels are included."
msgstr ""

#: ../../../documenting/markup.rst:714
msgid "Consider this example (taken from the library reference index)::"
msgstr ""

#: ../../../documenting/markup.rst:716
msgid ""
".. toctree::\n"
"   :maxdepth: 2\n"
"\n"
"   intro\n"
"   strings\n"
"   datatypes\n"
"   numeric\n"
"   (many more files listed here)"
msgstr ""

#: ../../../documenting/markup.rst:725
msgid "This accomplishes two things:"
msgstr ""

#: ../../../documenting/markup.rst:727
msgid ""
"Tables of contents from all those files are inserted, with a maximum depth "
"of two, that means one nested heading.  ``toctree`` directives in those "
"files are also taken into account."
msgstr ""

#: ../../../documenting/markup.rst:730
msgid ""
"Sphinx knows that the relative order of the files ``intro``, ``strings`` and "
"so forth, and it knows that they are children of the shown file, the library "
"index.  From this information it generates \"next chapter\", \"previous "
"chapter\" and \"parent chapter\" links."
msgstr ""

#: ../../../documenting/markup.rst:735
msgid ""
"In the end, all files included in the build process must occur in one "
"``toctree`` directive; Sphinx will emit a warning if it finds a file that is "
"not included, because that means that this file will not be reachable "
"through standard navigation."
msgstr ""

#: ../../../documenting/markup.rst:740
msgid ""
"The special file ``contents.rst`` at the root of the source directory is the "
"\"root\" of the TOC tree hierarchy; from it the \"Contents\" page is "
"generated."
msgstr ""

#: ../../../documenting/markup.rst:745
msgid "Index-generating markup"
msgstr ""

#: ../../../documenting/markup.rst:747
msgid ""
"Sphinx automatically creates index entries from all information units (like "
"functions, classes or attributes) like discussed before."
msgstr ""

#: ../../../documenting/markup.rst:750
msgid ""
"However, there is also an explicit directive available, to make the index "
"more comprehensive and enable index entries in documents where information "
"is not mainly contained in information units, such as the language reference."
msgstr ""

#: ../../../documenting/markup.rst:754
msgid ""
"The directive is ``index`` and contains one or more index entries.  Each "
"entry consists of a type and a value, separated by a colon."
msgstr ""

#: ../../../documenting/markup.rst:757
msgid "For example::"
msgstr ""

#: ../../../documenting/markup.rst:759
msgid ""
".. index::\n"
"   single: execution; context\n"
"   module: __main__\n"
"   module: sys\n"
"   triple: module; search; path"
msgstr ""

#: ../../../documenting/markup.rst:765
msgid ""
"This directive contains five entries, which will be converted to entries in "
"the generated index which link to the exact location of the index statement "
"(or, in case of offline media, the corresponding page number)."
msgstr ""

#: ../../../documenting/markup.rst:769
msgid "The possible entry types are:"
msgstr ""

#: ../../../documenting/markup.rst:773
msgid "single"
msgstr ""

#: ../../../documenting/markup.rst:772
msgid ""
"Creates a single index entry.  Can be made a subentry by separating the "
"subentry text with a semicolon (this notation is also used below to describe "
"what entries are created)."
msgstr ""

#: ../../../documenting/markup.rst:776
msgid "pair"
msgstr ""

#: ../../../documenting/markup.rst:776
msgid ""
"``pair: loop; statement`` is a shortcut that creates two index entries, "
"namely ``loop; statement`` and ``statement; loop``."
msgstr ""

#: ../../../documenting/markup.rst:780
msgid "triple"
msgstr ""

#: ../../../documenting/markup.rst:779
msgid ""
"Likewise, ``triple: module; search; path`` is a shortcut that creates three "
"index entries, which are ``module; search path``, ``search; path, module`` "
"and ``path; module search``."
msgstr ""

#: ../../../documenting/markup.rst:784
msgid "module, keyword, operator, object, exception, statement, builtin"
msgstr ""

#: ../../../documenting/markup.rst:783
msgid ""
"These all create two index entries.  For example, ``module: hashlib`` "
"creates the entries ``module; hashlib`` and ``hashlib; module``."
msgstr ""

#: ../../../documenting/markup.rst:786
msgid ""
"For index directives containing only \"single\" entries, there is a "
"shorthand notation::"
msgstr ""

#: ../../../documenting/markup.rst:789
msgid ".. index:: BNF, grammar, syntax, notation"
msgstr ""

#: ../../../documenting/markup.rst:791
msgid "This creates four index entries."
msgstr ""

#: ../../../documenting/markup.rst:795
msgid "Grammar production displays"
msgstr ""

#: ../../../documenting/markup.rst:797
msgid ""
"Special markup is available for displaying the productions of a formal "
"grammar. The markup is simple and does not attempt to model all aspects of "
"BNF (or any derived forms), but provides enough to allow context-free "
"grammars to be displayed in a way that causes uses of a symbol to be "
"rendered as hyperlinks to the definition of the symbol.  There is this "
"directive:"
msgstr ""

#: ../../../documenting/markup.rst:805
msgid ""
"This directive is used to enclose a group of productions.  Each production "
"is given on a single line and consists of a name, separated by a colon from "
"the following definition.  If the definition spans multiple lines, each "
"continuation line must begin with a colon placed at the same column as in "
"the first line."
msgstr ""

#: ../../../documenting/markup.rst:811
msgid ""
"Blank lines are not allowed within ``productionlist`` directive arguments."
msgstr ""

#: ../../../documenting/markup.rst:813
msgid ""
"The definition can contain token names which are marked as interpreted text "
"(e.g. ``unaryneg ::= \"-\" `integer```) -- this generates cross-references "
"to the productions of these tokens."
msgstr ""

#: ../../../documenting/markup.rst:817
msgid ""
"Note that no further reST parsing is done in the production, so that you "
"don't have to escape ``*`` or ``|`` characters."
msgstr ""

#: ../../../documenting/markup.rst:823
msgid "The following is an example taken from the Python Reference Manual::"
msgstr ""

#: ../../../documenting/markup.rst:825
msgid ""
".. productionlist::\n"
"   try_stmt: try1_stmt | try2_stmt\n"
"   try1_stmt: \"try\" \":\" `suite`\n"
"            : (\"except\" [`expression` [\",\" `target`]] \":\" `suite`)+\n"
"            : [\"else\" \":\" `suite`]\n"
"            : [\"finally\" \":\" `suite`]\n"
"   try2_stmt: \"try\" \":\" `suite`\n"
"            : \"finally\" \":\" `suite`"
msgstr ""

#: ../../../documenting/markup.rst:836
msgid "Substitutions"
msgstr ""

#: ../../../documenting/markup.rst:838
msgid ""
"The documentation system provides three substitutions that are defined by "
"default. They are set in the build configuration file :file:`conf.py`."
msgstr ""

#: ../../../documenting/markup.rst:843
msgid ""
"Replaced by the Python release the documentation refers to.  This is the "
"full version string including alpha/beta/release candidate tags, e.g. "
"``2.5.2b3``."
msgstr ""

#: ../../../documenting/markup.rst:848
msgid ""
"Replaced by the Python version the documentation refers to. This consists "
"only of the major and minor version parts, e.g. ``2.5``, even for version "
"2.5.1."
msgstr ""

#: ../../../documenting/markup.rst:854
msgid ""
"Replaced by either today's date, or the date set in the build configuration "
"file.  Normally has the format ``April 14, 2007``."
msgstr ""

#: ../../../documenting/markup.rst:859
msgid "Footnotes"
msgstr ""

#: ../../../documenting/markup.rst:860
msgid ""
"There is a standard ``.. include`` directive, but it raises errors if the "
"file is not found.  This one only emits a warning."
msgstr ""
