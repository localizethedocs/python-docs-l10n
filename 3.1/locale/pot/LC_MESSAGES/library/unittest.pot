# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/unittest.rst:2
msgid ":mod:`unittest` --- Unit testing framework"
msgstr ""

#: ../../../library/unittest.rst:11
msgid ""
"(If you are already familiar with the basic concepts of testing, you might "
"want to skip to :ref:`the list of assert methods <assert-methods>`.)"
msgstr ""

#: ../../../library/unittest.rst:14
msgid ""
"The Python unit testing framework, sometimes referred to as \"PyUnit,\" is a "
"Python language version of JUnit, by Kent Beck and Erich Gamma. JUnit is, in "
"turn, a Java version of Kent's Smalltalk testing framework.  Each is the de "
"facto standard unit testing framework for its respective language."
msgstr ""

#: ../../../library/unittest.rst:19
msgid ""
":mod:`unittest` supports test automation, sharing of setup and shutdown code "
"for tests, aggregation of tests into collections, and independence of the "
"tests from the reporting framework.  The :mod:`unittest` module provides "
"classes that make it easy to support these qualities for a set of tests."
msgstr ""

#: ../../../library/unittest.rst:24
msgid "To achieve this, :mod:`unittest` supports some important concepts:"
msgstr ""

#: ../../../library/unittest.rst:30
msgid "test fixture"
msgstr ""

#: ../../../library/unittest.rst:27
msgid ""
"A :dfn:`test fixture` represents the preparation needed to perform one or "
"more tests, and any associate cleanup actions.  This may involve, for "
"example, creating temporary or proxy databases, directories, or starting a "
"server process."
msgstr ""

#: ../../../library/unittest.rst:35
msgid "test case"
msgstr ""

#: ../../../library/unittest.rst:33
msgid ""
"A :dfn:`test case` is the smallest unit of testing.  It checks for a "
"specific response to a particular set of inputs.  :mod:`unittest` provides a "
"base class, :class:`TestCase`, which may be used to create new test cases."
msgstr ""

#: ../../../library/unittest.rst:39
msgid "test suite"
msgstr ""

#: ../../../library/unittest.rst:38
msgid ""
"A :dfn:`test suite` is a collection of test cases, test suites, or both.  It "
"is used to aggregate tests that should be executed together."
msgstr ""

#: ../../../library/unittest.rst:45
msgid "test runner"
msgstr ""

#: ../../../library/unittest.rst:42
msgid ""
"A :dfn:`test runner` is a component which orchestrates the execution of "
"tests and provides the outcome to the user.  The runner may use a graphical "
"interface, a textual interface, or return a special value to indicate the "
"results of executing the tests."
msgstr ""

#: ../../../library/unittest.rst:47
msgid ""
"The test case and test fixture concepts are supported through the :class:"
"`TestCase` and :class:`FunctionTestCase` classes; the former should be used "
"when creating new tests, and the latter can be used when integrating "
"existing test code with a :mod:`unittest`\\ -driven framework. When building "
"test fixtures using :class:`TestCase`, the :meth:`~TestCase.setUp` and :meth:"
"`~TestCase.tearDown` methods can be overridden to provide initialization and "
"cleanup for the fixture.  With :class:`FunctionTestCase`, existing functions "
"can be passed to the constructor for these purposes.  When the test is run, "
"the fixture initialization is run first; if it succeeds, the cleanup method "
"is run after the test has been executed, regardless of the outcome of the "
"test.  Each instance of the :class:`TestCase` will only be used to run a "
"single test method, so a new fixture is created for each test."
msgstr ""

#: ../../../library/unittest.rst:60
msgid ""
"Test suites are implemented by the :class:`TestSuite` class.  This class "
"allows individual tests and test suites to be aggregated; when the suite is "
"executed, all tests added directly to the suite and in \"child\" test suites "
"are run."
msgstr ""

#: ../../../library/unittest.rst:64
msgid ""
"A test runner is an object that provides a single method, :meth:`~TestRunner."
"run`, which accepts a :class:`TestCase` or :class:`TestSuite` object as a "
"parameter, and returns a result object.  The class :class:`TestResult` is "
"provided for use as the result object. :mod:`unittest` provides the :class:"
"`TextTestRunner` as an example test runner which reports test results on the "
"standard error stream by default.  Alternate runners can be implemented for "
"other environments (such as graphical environments) without any need to "
"derive from a specific class."
msgstr ""

#: ../../../library/unittest.rst:77
msgid "Module :mod:`doctest`"
msgstr ""

#: ../../../library/unittest.rst:77
msgid "Another test-support module with a very different flavor."
msgstr ""

#: ../../../library/unittest.rst:82
msgid ""
"`unittest2: A backport of new unittest features for Python 2.4-2.6 <http://"
"pypi.python.org/pypi/unittest2>`_"
msgstr ""

#: ../../../library/unittest.rst:80
msgid ""
"Many new features were added to unittest in Python 2.7, including test "
"discovery. unittest2 allows you to use these features with earlier versions "
"of Python."
msgstr ""

#: ../../../library/unittest.rst:86
msgid ""
"`Simple Smalltalk Testing: With Patterns <http://www.XProgramming.com/"
"testfram.htm>`_"
msgstr ""

#: ../../../library/unittest.rst:85
msgid ""
"Kent Beck's original paper on testing frameworks using the pattern shared "
"by :mod:`unittest`."
msgstr ""

#: ../../../library/unittest.rst:90
msgid ""
"`Nose <http://code.google.com/p/python-nose/>`_ and `py.test <http://pytest."
"org>`_"
msgstr ""

#: ../../../library/unittest.rst:89
msgid ""
"Third-party unittest frameworks with a lighter-weight syntax for writing "
"tests.  For example, ``assert func(10) == 42``."
msgstr ""

#: ../../../library/unittest.rst:94
msgid ""
"`The Python Testing Tools Taxonomy <http://pycheesecake.org/wiki/"
"PythonTestingToolsTaxonomy>`_"
msgstr ""

#: ../../../library/unittest.rst:93
msgid ""
"An extensive list of Python testing tools including functional testing "
"frameworks and mock object libraries."
msgstr ""

#: ../../../library/unittest.rst:97
msgid ""
"`Testing in Python Mailing List <http://lists.idyll.org/listinfo/testing-in-"
"python>`_"
msgstr ""

#: ../../../library/unittest.rst:97
msgid ""
"A special-interest-group for discussion of testing, and testing tools, in "
"Python."
msgstr ""

#: ../../../library/unittest.rst:103
msgid "Basic example"
msgstr ""

#: ../../../library/unittest.rst:105
msgid ""
"The :mod:`unittest` module provides a rich set of tools for constructing and "
"running tests.  This section demonstrates that a small subset of the tools "
"suffice to meet the needs of most users."
msgstr ""

#: ../../../library/unittest.rst:109
msgid ""
"Here is a short script to test three functions from the :mod:`random` "
"module::"
msgstr ""

#: ../../../library/unittest.rst:141
msgid ""
"A testcase is created by subclassing :class:`unittest.TestCase`.  The three "
"individual tests are defined with methods whose names start with the letters "
"``test``.  This naming convention informs the test runner about which "
"methods represent tests."
msgstr ""

#: ../../../library/unittest.rst:146
msgid ""
"The crux of each test is a call to :meth:`~TestCase.assertEqual` to check "
"for an expected result; :meth:`~TestCase.assertTrue` to verify a condition; "
"or :meth:`~TestCase.assertRaises` to verify that an expected exception gets "
"raised. These methods are used instead of the :keyword:`assert` statement so "
"the test runner can accumulate all test results and produce a report."
msgstr ""

#: ../../../library/unittest.rst:152
msgid ""
"When a :meth:`~TestCase.setUp` method is defined, the test runner will run "
"that method prior to each test.  Likewise, if a :meth:`~TestCase.tearDown` "
"method is defined, the test runner will invoke that method after each test.  "
"In the example, :meth:`~TestCase.setUp` was used to create a fresh sequence "
"for each test."
msgstr ""

#: ../../../library/unittest.rst:158
msgid ""
"The final block shows a simple way to run the tests. :func:`unittest.main` "
"provides a command-line interface to the test script.  When run from the "
"command line, the above script produces an output that looks like this::"
msgstr ""

#: ../../../library/unittest.rst:168
msgid ""
"Instead of :func:`unittest.main`, there are other ways to run the tests with "
"a finer level of control, less terse output, and no requirement to be run "
"from the command line.  For example, the last two lines may be replaced "
"with::"
msgstr ""

#: ../../../library/unittest.rst:175
msgid ""
"Running the revised script from the interpreter or another script produces "
"the following output::"
msgstr ""

#: ../../../library/unittest.rst:187
msgid ""
"The above examples show the most commonly used :mod:`unittest` features "
"which are sufficient to meet many everyday testing needs.  The remainder of "
"the documentation explores the full feature set from first principles."
msgstr ""

#: ../../../library/unittest.rst:195
msgid "Command-Line Interface"
msgstr ""

#: ../../../library/unittest.rst:197
msgid ""
"The unittest module can be used from the command line to run tests from "
"modules, classes or even individual test methods::"
msgstr ""

#: ../../../library/unittest.rst:204
msgid ""
"You can pass in a list with any combination of module names, and fully "
"qualified class or method names."
msgstr ""

#: ../../../library/unittest.rst:207
msgid ""
"You can run tests with more detail (higher verbosity) by passing in the -v "
"flag::"
msgstr ""

#: ../../../library/unittest.rst:211
msgid "For a list of all the command-line options::"
msgstr ""

#: ../../../library/unittest.rst:219
msgid "Organizing test code"
msgstr ""

#: ../../../library/unittest.rst:221
msgid ""
"The basic building blocks of unit testing are :dfn:`test cases` --- single "
"scenarios that must be set up and checked for correctness.  In :mod:"
"`unittest`, test cases are represented by instances of :mod:`unittest`'s :"
"class:`TestCase` class. To make your own test cases you must write "
"subclasses of :class:`TestCase`, or use :class:`FunctionTestCase`."
msgstr ""

#: ../../../library/unittest.rst:227
msgid ""
"An instance of a :class:`TestCase`\\ -derived class is an object that can "
"completely run a single test method, together with optional set-up and tidy-"
"up code."
msgstr ""

#: ../../../library/unittest.rst:231
msgid ""
"The testing code of a :class:`TestCase` instance should be entirely self "
"contained, such that it can be run either in isolation or in arbitrary "
"combination with any number of other test cases."
msgstr ""

#: ../../../library/unittest.rst:235
msgid ""
"The simplest :class:`TestCase` subclass will simply override the :meth:"
"`~TestCase.runTest` method in order to perform specific testing code::"
msgstr ""

#: ../../../library/unittest.rst:245
msgid ""
"Note that in order to test something, we use the one of the :meth:"
"`assert\\*` methods provided by the :class:`TestCase` base class.  If the "
"test fails, an exception will be raised, and :mod:`unittest` will identify "
"the test case as a :dfn:`failure`.  Any other exceptions will be treated as :"
"dfn:`errors`. This helps you identify where the problem is: :dfn:`failures` "
"are caused by incorrect results - a 5 where you expected a 6. :dfn:`Errors` "
"are caused by incorrect code - e.g., a :exc:`TypeError` caused by an "
"incorrect function call."
msgstr ""

#: ../../../library/unittest.rst:253
msgid ""
"The way to run a test case will be described later.  For now, note that to "
"construct an instance of such a test case, we call its constructor without "
"arguments::"
msgstr ""

#: ../../../library/unittest.rst:259
msgid ""
"Now, such test cases can be numerous, and their set-up can be repetitive.  "
"In the above case, constructing a :class:`Widget` in each of 100 Widget test "
"case subclasses would mean unsightly duplication."
msgstr ""

#: ../../../library/unittest.rst:263
msgid ""
"Luckily, we can factor out such set-up code by implementing a method called :"
"meth:`~TestCase.setUp`, which the testing framework will automatically call "
"for us when we run the test::"
msgstr ""

#: ../../../library/unittest.rst:284
msgid ""
"If the :meth:`~TestCase.setUp` method raises an exception while the test is "
"running, the framework will consider the test to have suffered an error, and "
"the :meth:`~TestCase.runTest` method will not be executed."
msgstr ""

#: ../../../library/unittest.rst:288
msgid ""
"Similarly, we can provide a :meth:`~TestCase.tearDown` method that tidies up "
"after the :meth:`~TestCase.runTest` method has been run::"
msgstr ""

#: ../../../library/unittest.rst:301
msgid ""
"If :meth:`~TestCase.setUp` succeeded, the :meth:`~TestCase.tearDown` method "
"will be run whether :meth:`~TestCase.runTest` succeeded or not."
msgstr ""

#: ../../../library/unittest.rst:304
msgid ""
"Such a working environment for the testing code is called a :dfn:`fixture`."
msgstr ""

#: ../../../library/unittest.rst:306
msgid ""
"Often, many small test cases will use the same fixture.  In this case, we "
"would end up subclassing :class:`SimpleWidgetTestCase` into many small one-"
"method classes such as :class:`DefaultWidgetSizeTestCase`.  This is time-"
"consuming and discouraging, so in the same vein as JUnit, :mod:`unittest` "
"provides a simpler mechanism::"
msgstr ""

#: ../../../library/unittest.rst:331
msgid ""
"Here we have not provided a :meth:`~TestCase.runTest` method, but have "
"instead provided two different test methods.  Class instances will now each "
"run one of the :meth:`test_\\*` methods, with ``self.widget`` created and "
"destroyed separately for each instance.  When creating an instance we must "
"specify the test method it is to run.  We do this by passing the method name "
"in the constructor::"
msgstr ""

#: ../../../library/unittest.rst:341
msgid ""
"Test case instances are grouped together according to the features they "
"test. :mod:`unittest` provides a mechanism for this: the :dfn:`test suite`, "
"represented by :mod:`unittest`'s :class:`TestSuite` class::"
msgstr ""

#: ../../../library/unittest.rst:349
msgid ""
"For the ease of running tests, as we will see later, it is a good idea to "
"provide in each test module a callable object that returns a pre-built test "
"suite::"
msgstr ""

#: ../../../library/unittest.rst:359
msgid "or even::"
msgstr ""

#: ../../../library/unittest.rst:366
msgid ""
"Since it is a common pattern to create a :class:`TestCase` subclass with "
"many similarly named test functions, :mod:`unittest` provides a :class:"
"`TestLoader` class that can be used to automate the process of creating a "
"test suite and populating it with individual tests. For example, ::"
msgstr ""

#: ../../../library/unittest.rst:373
msgid ""
"will create a test suite that will run ``WidgetTestCase."
"test_default_size()`` and ``WidgetTestCase.test_resize``. :class:"
"`TestLoader` uses the ``'test'`` method name prefix to identify test methods "
"automatically."
msgstr ""

#: ../../../library/unittest.rst:377
msgid ""
"Note that the order in which the various test cases will be run is "
"determined by sorting the test function names with respect to the built-in "
"ordering for strings."
msgstr ""

#: ../../../library/unittest.rst:381
msgid ""
"Often it is desirable to group suites of test cases together, so as to run "
"tests for the whole system at once.  This is easy, since :class:`TestSuite` "
"instances can be added to a :class:`TestSuite` just as :class:`TestCase` "
"instances can be added to a :class:`TestSuite`::"
msgstr ""

#: ../../../library/unittest.rst:390
msgid ""
"You can place the definitions of test cases and test suites in the same "
"modules as the code they are to test (such as :file:`widget.py`), but there "
"are several advantages to placing the test code in a separate module, such "
"as :file:`test_widget.py`:"
msgstr ""

#: ../../../library/unittest.rst:395
msgid "The test module can be run standalone from the command line."
msgstr ""

#: ../../../library/unittest.rst:397
msgid "The test code can more easily be separated from shipped code."
msgstr ""

#: ../../../library/unittest.rst:399
msgid ""
"There is less temptation to change test code to fit the code it tests "
"without a good reason."
msgstr ""

#: ../../../library/unittest.rst:402
msgid ""
"Test code should be modified much less frequently than the code it tests."
msgstr ""

#: ../../../library/unittest.rst:404
msgid "Tested code can be refactored more easily."
msgstr ""

#: ../../../library/unittest.rst:406
msgid ""
"Tests for modules written in C must be in separate modules anyway, so why "
"not be consistent?"
msgstr ""

#: ../../../library/unittest.rst:409
msgid ""
"If the testing strategy changes, there is no need to change the source code."
msgstr ""

#: ../../../library/unittest.rst:415
msgid "Re-using old test code"
msgstr ""

#: ../../../library/unittest.rst:417
msgid ""
"Some users will find that they have existing test code that they would like "
"to run from :mod:`unittest`, without converting every old test function to "
"a :class:`TestCase` subclass."
msgstr ""

#: ../../../library/unittest.rst:421
msgid ""
"For this reason, :mod:`unittest` provides a :class:`FunctionTestCase` class. "
"This subclass of :class:`TestCase` can be used to wrap an existing test "
"function.  Set-up and tear-down functions can also be provided."
msgstr ""

#: ../../../library/unittest.rst:425
msgid "Given the following test function::"
msgstr ""

#: ../../../library/unittest.rst:432
msgid "one can create an equivalent test case instance as follows::"
msgstr ""

#: ../../../library/unittest.rst:436
msgid ""
"If there are additional set-up and tear-down methods that should be called "
"as part of the test case's operation, they can also be provided like so::"
msgstr ""

#: ../../../library/unittest.rst:443
msgid ""
"To make migrating existing test suites easier, :mod:`unittest` supports "
"tests raising :exc:`AssertionError` to indicate test failure. However, it is "
"recommended that you use the explicit :meth:`TestCase.fail\\*` and :meth:"
"`TestCase.assert\\*` methods instead, as future versions of :mod:`unittest` "
"may treat :exc:`AssertionError` differently."
msgstr ""

#: ../../../library/unittest.rst:451
msgid ""
"Even though :class:`FunctionTestCase` can be used to quickly convert an "
"existing test base over to a :mod:`unittest`\\ -based system, this approach "
"is not recommended.  Taking the time to set up proper :class:`TestCase` "
"subclasses will make future test refactorings infinitely easier."
msgstr ""

#: ../../../library/unittest.rst:456
msgid ""
"In some cases, the existing tests may have been written using the :mod:"
"`doctest` module.  If so, :mod:`doctest` provides a :class:`DocTestSuite` "
"class that can automatically build :class:`unittest.TestSuite` instances "
"from the existing :mod:`doctest`\\ -based tests."
msgstr ""

#: ../../../library/unittest.rst:465
msgid "Skipping tests and expected failures"
msgstr ""

#: ../../../library/unittest.rst:469
msgid ""
"Unittest supports skipping individual test methods and even whole classes of "
"tests.  In addition, it supports marking a test as a \"expected failure,\" a "
"test that is broken and will fail, but shouldn't be counted as a failure on "
"a :class:`TestResult`."
msgstr ""

#: ../../../library/unittest.rst:474
msgid ""
"Skipping a test is simply a matter of using the :func:`skip` :term:"
"`decorator` or one of its conditional variants."
msgstr ""

#: ../../../library/unittest.rst:477
msgid "Basic skipping looks like this: ::"
msgstr ""

#: ../../../library/unittest.rst:496
msgid "This is the output of running the example above in verbose mode: ::"
msgstr ""

#: ../../../library/unittest.rst:507
msgid "Classes can be skipped just like methods: ::"
msgstr ""

#: ../../../library/unittest.rst:514
msgid ""
":meth:`TestCase.setUp` can also skip the test.  This is useful when a "
"resource that needs to be set up is not available."
msgstr ""

#: ../../../library/unittest.rst:517
msgid "Expected failures use the :func:`expectedFailure` decorator. ::"
msgstr ""

#: ../../../library/unittest.rst:524
msgid ""
"It's easy to roll your own skipping decorators by making a decorator that "
"calls :func:`skip` on the test when it wants it to be skipped.  This "
"decorator skips the test unless the passed object has a certain attribute: ::"
msgstr ""

#: ../../../library/unittest.rst:533
msgid "The following decorators implement test skipping and expected failures:"
msgstr ""

#: ../../../library/unittest.rst:537
msgid ""
"Unconditionally skip the decorated test.  *reason* should describe why the "
"test is being skipped."
msgstr ""

#: ../../../library/unittest.rst:542
msgid "Skip the decorated test if *condition* is true."
msgstr ""

#: ../../../library/unittest.rst:546
msgid "Skip the decorated test unless *condition* is true."
msgstr ""

#: ../../../library/unittest.rst:550
msgid ""
"Mark the test as an expected failure.  If the test fails when run, the test "
"is not counted as a failure."
msgstr ""

#: ../../../library/unittest.rst:557
msgid "Classes and functions"
msgstr ""

#: ../../../library/unittest.rst:559
msgid "This section describes in depth the API of :mod:`unittest`."
msgstr ""

#: ../../../library/unittest.rst:565
msgid "Test cases"
msgstr ""

#: ../../../library/unittest.rst:569
msgid ""
"Instances of the :class:`TestCase` class represent the smallest testable "
"units in the :mod:`unittest` universe.  This class is intended to be used as "
"a base class, with specific tests being implemented by concrete subclasses.  "
"This class implements the interface needed by the test runner to allow it to "
"drive the test, and methods that the test code can use to check for and "
"report various kinds of failure."
msgstr ""

#: ../../../library/unittest.rst:576
msgid ""
"Each instance of :class:`TestCase` will run a single test method: the method "
"named *methodName*.  If you remember, we had an earlier example that went "
"something like this::"
msgstr ""

#: ../../../library/unittest.rst:586
msgid ""
"Here, we create two instances of :class:`WidgetTestCase`, each of which runs "
"a single test."
msgstr ""

#: ../../../library/unittest.rst:589
msgid "*methodName* defaults to :meth:`runTest`."
msgstr ""

#: ../../../library/unittest.rst:591
msgid ""
":class:`TestCase` instances provide three groups of methods: one group used "
"to run the test, another used by the test implementation to check conditions "
"and report failures, and some inquiry methods allowing information about the "
"test itself to be gathered."
msgstr ""

#: ../../../library/unittest.rst:596
msgid "Methods in the first group (running the test) are:"
msgstr ""

#: ../../../library/unittest.rst:601
msgid ""
"Method called to prepare the test fixture.  This is called immediately "
"before calling the test method; any exception raised by this method will be "
"considered an error rather than a test failure. The default implementation "
"does nothing."
msgstr ""

#: ../../../library/unittest.rst:609
msgid ""
"Method called immediately after the test method has been called and the "
"result recorded.  This is called even if the test method raised an "
"exception, so the implementation in subclasses may need to be particularly "
"careful about checking internal state.  Any exception raised by this method "
"will be considered an error rather than a test failure.  This method will "
"only be called if the :meth:`setUp` succeeds, regardless of the outcome of "
"the test method. The default implementation does nothing."
msgstr ""

#: ../../../library/unittest.rst:620
msgid ""
"Run the test, collecting the result into the test result object passed as "
"*result*.  If *result* is omitted or ``None``, a temporary result object is "
"created (by calling the :meth:`defaultTestResult` method) and used. The "
"result object is not returned to :meth:`run`'s caller."
msgstr ""

#: ../../../library/unittest.rst:625
msgid ""
"The same effect may be had by simply calling the :class:`TestCase` instance."
msgstr ""

#: ../../../library/unittest.rst:631
msgid ""
"Calling this during a test method or :meth:`setUp` skips the current test.  "
"See :ref:`unittest-skipping` for more information."
msgstr ""

#: ../../../library/unittest.rst:639
msgid ""
"Run the test without collecting the result.  This allows exceptions raised "
"by the test to be propagated to the caller, and can be used to support "
"running tests under a debugger."
msgstr ""

#: ../../../library/unittest.rst:645
msgid ""
"The :class:`TestCase` class provides a number of methods to check for and "
"report failures, such as:"
msgstr ""

#: ../../../library/unittest.rst:649 ../../../library/unittest.rst:749
#: ../../../library/unittest.rst:801 ../../../library/unittest.rst:920
msgid "Method"
msgstr ""

#: ../../../library/unittest.rst:649 ../../../library/unittest.rst:749
#: ../../../library/unittest.rst:801
msgid "Checks that"
msgstr ""

#: ../../../library/unittest.rst:649 ../../../library/unittest.rst:749
#: ../../../library/unittest.rst:801 ../../../library/unittest.rst:920
msgid "New in"
msgstr ""

#: ../../../library/unittest.rst:651
msgid ":meth:`assertEqual(a, b) <TestCase.assertEqual>`"
msgstr ""

#: ../../../library/unittest.rst:651
msgid "``a == b``"
msgstr ""

#: ../../../library/unittest.rst:654
msgid ":meth:`assertNotEqual(a, b) <TestCase.assertNotEqual>`"
msgstr ""

#: ../../../library/unittest.rst:654
msgid "``a != b``"
msgstr ""

#: ../../../library/unittest.rst:657
msgid ":meth:`assertTrue(x) <TestCase.assertTrue>`"
msgstr ""

#: ../../../library/unittest.rst:657
msgid "``bool(x) is True``"
msgstr ""

#: ../../../library/unittest.rst:660
msgid ":meth:`assertFalse(x) <TestCase.assertFalse>`"
msgstr ""

#: ../../../library/unittest.rst:660
msgid "``bool(x) is False``"
msgstr ""

#: ../../../library/unittest.rst:663
msgid ":meth:`assertIs(a, b) <TestCase.assertIs>`"
msgstr ""

#: ../../../library/unittest.rst:663
msgid "``a is b``"
msgstr ""

#: ../../../library/unittest.rst:663 ../../../library/unittest.rst:666
#: ../../../library/unittest.rst:669 ../../../library/unittest.rst:672
#: ../../../library/unittest.rst:675 ../../../library/unittest.rst:678
#: ../../../library/unittest.rst:754 ../../../library/unittest.rst:809
#: ../../../library/unittest.rst:812 ../../../library/unittest.rst:815
#: ../../../library/unittest.rst:818 ../../../library/unittest.rst:821
#: ../../../library/unittest.rst:824 ../../../library/unittest.rst:922
#: ../../../library/unittest.rst:925 ../../../library/unittest.rst:928
#: ../../../library/unittest.rst:931 ../../../library/unittest.rst:934
#: ../../../library/unittest.rst:937
msgid "3.1"
msgstr ""

#: ../../../library/unittest.rst:666
msgid ":meth:`assertIsNot(a, b) <TestCase.assertIsNot>`"
msgstr ""

#: ../../../library/unittest.rst:666
msgid "``a is not b``"
msgstr ""

#: ../../../library/unittest.rst:669
msgid ":meth:`assertIsNone(x) <TestCase.assertIsNone>`"
msgstr ""

#: ../../../library/unittest.rst:669
msgid "``x is None``"
msgstr ""

#: ../../../library/unittest.rst:672
msgid ":meth:`assertIsNotNone(x) <TestCase.assertIsNotNone>`"
msgstr ""

#: ../../../library/unittest.rst:672
msgid "``x is not None``"
msgstr ""

#: ../../../library/unittest.rst:675
msgid ":meth:`assertIn(a, b) <TestCase.assertIn>`"
msgstr ""

#: ../../../library/unittest.rst:675
msgid "``a in b``"
msgstr ""

#: ../../../library/unittest.rst:678
msgid ":meth:`assertNotIn(a, b) <TestCase.assertNotIn>`"
msgstr ""

#: ../../../library/unittest.rst:678
msgid "``a not in b``"
msgstr ""

#: ../../../library/unittest.rst:682
msgid ""
"All the assert methods (except :meth:`assertRaises`, :meth:"
"`assertRaisesRegexp`, :meth:`assertWarns`, :meth:`assertWarnsRegexp`) accept "
"a *msg* argument that, if specified, is used as the error message on failure "
"(see also :data:`longMessage`)."
msgstr ""

#: ../../../library/unittest.rst:689
msgid ""
"Test that *first* and *second* are equal.  If the values do not compare "
"equal, the test will fail."
msgstr ""

#: ../../../library/unittest.rst:692
msgid ""
"In addition, if *first* and *second* are the exact same type and one of "
"list, tuple, dict, set, frozenset or str or any type that a subclass "
"registers with :meth:`addTypeEqualityFunc` the type specific equality "
"function will be called in order to generate a more useful default error "
"message (see also the :ref:`list of type-specific methods <type-specific-"
"methods>`)."
msgstr ""

#: ../../../library/unittest.rst:699
msgid "Added the automatic calling of type specific equality function."
msgstr ""

#: ../../../library/unittest.rst:705
msgid ""
"Test that *first* and *second* are not equal.  If the values do compare "
"equal, the test will fail."
msgstr ""

#: ../../../library/unittest.rst:711
msgid "Test that *expr* is true (or false)."
msgstr ""

#: ../../../library/unittest.rst:713
msgid ""
"Note that this is equivalent to ``bool(expr) is True`` and not to ``expr is "
"True`` (use ``assertIs(expr, True)`` for the latter).  This method should "
"also be avoided when more specific methods are available (e.g. "
"``assertEqual(a, b)`` instead of ``assertTrue(a == b)``), because they "
"provide a better error message in case of failure."
msgstr ""

#: ../../../library/unittest.rst:723
msgid ""
"Test that *first* and *second* evaluate (or don't evaluate) to the same "
"object."
msgstr ""

#: ../../../library/unittest.rst:731
msgid "Test that *expr* is (or is not) None."
msgstr ""

#: ../../../library/unittest.rst:739
msgid "Test that *first* is (or is not) in *second*."
msgstr ""

#: ../../../library/unittest.rst:745
msgid ""
"It is also possible to check that exceptions and warnings are raised using "
"the following methods:"
msgstr ""

#: ../../../library/unittest.rst:751
msgid ":meth:`assertRaises(exc, fun, *args, **kwds) <TestCase.assertRaises>`"
msgstr ""

#: ../../../library/unittest.rst:751
msgid "``fun(*args, **kwds)`` raises `exc`"
msgstr ""

#: ../../../library/unittest.rst:754
msgid ""
":meth:`assertRaisesRegexp(exc, re, fun, *args, **kwds) <TestCase."
"assertRaisesRegexp>`"
msgstr ""

#: ../../../library/unittest.rst:754
msgid "``fun(*args, **kwds)`` raises `exc` and the message matches `re`"
msgstr ""

#: ../../../library/unittest.rst:761
msgid ""
"Test that an exception is raised when *callable* is called with any "
"positional or keyword arguments that are also passed to :meth:"
"`assertRaises`.  The test passes if *exception* is raised, is an error if "
"another exception is raised, or fails if no exception is raised. To catch "
"any of a group of exceptions, a tuple containing the exception classes may "
"be passed as *exception*."
msgstr ""

#: ../../../library/unittest.rst:768
msgid ""
"If only the *exception* argument is given, returns a context manager so that "
"the code under test can be written inline rather than as a function::"
msgstr ""

#: ../../../library/unittest.rst:774
msgid "Added the ability to use :meth:`assertRaises` as a context manager."
msgstr ""

#: ../../../library/unittest.rst:781
msgid ""
"Like :meth:`assertRaises` but also tests that *regexp* matches on the string "
"representation of the raised exception.  *regexp* may be a regular "
"expression object or a string containing a regular expression suitable for "
"use by :func:`re.search`.  Examples::"
msgstr ""

#: ../../../library/unittest.rst:789
msgid "or::"
msgstr ""

#: ../../../library/unittest.rst:798
msgid ""
"There are also other methods used to perform more specific checks, such as:"
msgstr ""

#: ../../../library/unittest.rst:803
msgid ":meth:`assertAlmostEqual(a, b) <TestCase.assertAlmostEqual>`"
msgstr ""

#: ../../../library/unittest.rst:803
msgid "``round(a-b, 7) == 0``"
msgstr ""

#: ../../../library/unittest.rst:806
msgid ":meth:`assertNotAlmostEqual(a, b) <TestCase.assertNotAlmostEqual>`"
msgstr ""

#: ../../../library/unittest.rst:806
msgid "``round(a-b, 7) != 0``"
msgstr ""

#: ../../../library/unittest.rst:809
msgid ":meth:`assertGreater(a, b) <TestCase.assertGreater>`"
msgstr ""

#: ../../../library/unittest.rst:809
msgid "``a > b``"
msgstr ""

#: ../../../library/unittest.rst:812
msgid ":meth:`assertGreaterEqual(a, b) <TestCase.assertGreaterEqual>`"
msgstr ""

#: ../../../library/unittest.rst:812
msgid "``a >= b``"
msgstr ""

#: ../../../library/unittest.rst:815
msgid ":meth:`assertLess(a, b) <TestCase.assertLess>`"
msgstr ""

#: ../../../library/unittest.rst:815
msgid "``a < b``"
msgstr ""

#: ../../../library/unittest.rst:818
msgid ":meth:`assertLessEqual(a, b) <TestCase.assertLessEqual>`"
msgstr ""

#: ../../../library/unittest.rst:818
msgid "``a <= b``"
msgstr ""

#: ../../../library/unittest.rst:821
msgid ":meth:`assertRegexpMatches(s, re) <TestCase.assertRegexpMatches>`"
msgstr ""

#: ../../../library/unittest.rst:821
msgid "``regex.search(s)``"
msgstr ""

#: ../../../library/unittest.rst:824
msgid ""
":meth:`assertDictContainsSubset(a, b) <TestCase.assertDictContainsSubset>`"
msgstr ""

#: ../../../library/unittest.rst:824
msgid "all the key/value pairs in `a` exist in `b`"
msgstr ""

#: ../../../library/unittest.rst:832
msgid ""
"Test that *first* and *second* are approximately (or not approximately) "
"equal by computing the difference, rounding to the given number of decimal "
"*places* (default 7), and comparing to zero.  Note that these methods round "
"the values to the given number of *decimal places* (i.e. like the :func:"
"`round` function) and not *significant digits*."
msgstr ""

#: ../../../library/unittest.rst:838
msgid ""
"If *delta* is supplied instead of *places* then the difference between "
"*first* and *second* must be less (or more) than *delta*."
msgstr ""

#: ../../../library/unittest.rst:841
msgid "Supplying both *delta* and *places* raises a ``TypeError``."
msgstr ""

#: ../../../library/unittest.rst:849
msgid ""
"Test that *first* is respectively >, >=, < or <= than *second* depending on "
"the method name.  If not, the test will fail::"
msgstr ""

#: ../../../library/unittest.rst:860
msgid ""
"Test that a *regexp* search matches *text*.  In case of failure, the error "
"message will include the pattern and the *text* (or the pattern and the part "
"of *text* that unexpectedly matched).  *regexp* may be a regular expression "
"object or a string containing a regular expression suitable for use by :func:"
"`re.search`."
msgstr ""

#: ../../../library/unittest.rst:866
msgid ":meth:`~TestCase.assertRegexpMatches`"
msgstr ""

#: ../../../library/unittest.rst:871
msgid ""
"Tests whether the key/value pairs in dictionary *actual* are a superset of "
"those in *expected*.  If not, an error message listing the missing keys and "
"mismatched values is generated."
msgstr ""

#: ../../../library/unittest.rst:881
msgid ""
"Test that sequence *expected* contains the same elements as *actual*, "
"regardless of their order. When they don't, an error message listing the "
"differences between the sequences will be generated."
msgstr ""

#: ../../../library/unittest.rst:885
msgid ""
"Duplicate elements are ignored when comparing *actual* and *expected*. It is "
"the equivalent of ``assertEqual(set(expected), set(actual))`` but it works "
"with sequences of unhashable objects as well. Because duplicates are "
"ignored, this method has been deprecated in favour of :meth:"
"`assertItemsEqual`."
msgstr ""

#: ../../../library/unittest.rst:897
msgid ""
"The :meth:`assertEqual` method dispatches the equality check for objects of "
"the same type to different type-specific methods.  These methods are already "
"implemented for most of the built-in types, but it's also possible to "
"register new methods using :meth:`addTypeEqualityFunc`:"
msgstr ""

#: ../../../library/unittest.rst:904
msgid ""
"Registers a type-specific method called by :meth:`assertEqual` to check if "
"two objects of exactly the same *typeobj* (not subclasses) compare equal.  "
"*function* must take two positional arguments and a third msg=None keyword "
"argument just as :meth:`assertEqual` does.  It must raise :data:`self."
"failureException(msg) <failureException>` when inequality between the first "
"two parameters is detected -- possibly providing useful information and "
"explaining the inequalities in details in the error message."
msgstr ""

#: ../../../library/unittest.rst:915
msgid ""
"The list of type-specific methods automatically used by :meth:`~TestCase."
"assertEqual` are summarized in the following table.  Note that it's usually "
"not necessary to invoke these methods directly."
msgstr ""

#: ../../../library/unittest.rst:920
msgid "Used to compare"
msgstr ""

#: ../../../library/unittest.rst:922
msgid ":meth:`assertMultiLineEqual(a, b) <TestCase.assertMultiLineEqual>`"
msgstr ""

#: ../../../library/unittest.rst:922
msgid "strings"
msgstr ""

#: ../../../library/unittest.rst:925
msgid ":meth:`assertSequenceEqual(a, b) <TestCase.assertSequenceEqual>`"
msgstr ""

#: ../../../library/unittest.rst:925
msgid "sequences"
msgstr ""

#: ../../../library/unittest.rst:928
msgid ":meth:`assertListEqual(a, b) <TestCase.assertListEqual>`"
msgstr ""

#: ../../../library/unittest.rst:928
msgid "lists"
msgstr ""

#: ../../../library/unittest.rst:931
msgid ":meth:`assertTupleEqual(a, b) <TestCase.assertTupleEqual>`"
msgstr ""

#: ../../../library/unittest.rst:931
msgid "tuples"
msgstr ""

#: ../../../library/unittest.rst:934
msgid ":meth:`assertSetEqual(a, b) <TestCase.assertSetEqual>`"
msgstr ""

#: ../../../library/unittest.rst:934
msgid "sets or frozensets"
msgstr ""

#: ../../../library/unittest.rst:937
msgid ":meth:`assertDictEqual(a, b) <TestCase.assertDictEqual>`"
msgstr ""

#: ../../../library/unittest.rst:937
msgid "dicts"
msgstr ""

#: ../../../library/unittest.rst:945
msgid ""
"Test that the multiline string *first* is equal to the string *second*. When "
"not equal a diff of the two strings highlighting the differences will be "
"included in the error message. This method is used by default when comparing "
"strings with :meth:`assertEqual`."
msgstr ""

#: ../../../library/unittest.rst:955
msgid ""
"Tests that two sequences are equal.  If a *seq_type* is supplied, both "
"*seq1* and *seq2* must be instances of *seq_type* or a failure will be "
"raised.  If the sequences are different an error message is constructed that "
"shows the difference between the two."
msgstr ""

#: ../../../library/unittest.rst:960
msgid ""
"This method is not called directly by :meth:`assertEqual`, but it's used to "
"implement :meth:`assertListEqual` and :meth:`assertTupleEqual`."
msgstr ""

#: ../../../library/unittest.rst:970
msgid ""
"Tests that two lists or tuples are equal.  If not an error message is "
"constructed that shows only the differences between the two.  An error is "
"also raised if either of the parameters are of the wrong type. These methods "
"are used by default when comparing lists or tuples with :meth:`assertEqual`."
msgstr ""

#: ../../../library/unittest.rst:981
msgid ""
"Tests that two sets are equal.  If not, an error message is constructed that "
"lists the differences between the sets.  This method is used by default when "
"comparing sets or frozensets with :meth:`assertEqual`."
msgstr ""

#: ../../../library/unittest.rst:985
msgid ""
"Fails if either of *set1* or *set2* does not have a :meth:`set.difference` "
"method."
msgstr ""

#: ../../../library/unittest.rst:993
msgid ""
"Test that two dictionaries are equal.  If not, an error message is "
"constructed that shows the differences in the dictionaries. This method will "
"be used by default to compare dictionaries in calls to :meth:`assertEqual`."
msgstr ""

#: ../../../library/unittest.rst:1004
msgid ""
"Finally the :class:`TestCase` provides the following methods and attributes:"
msgstr ""

#: ../../../library/unittest.rst:1009
msgid ""
"Signals a test failure unconditionally, with *msg* or ``None`` for the error "
"message."
msgstr ""

#: ../../../library/unittest.rst:1015
msgid ""
"This class attribute gives the exception raised by the test method.  If a "
"test framework needs to use a specialized exception, possibly to carry "
"additional information, it must subclass this exception in order to \"play "
"fair\" with the framework.  The initial value of this attribute is :exc:"
"`AssertionError`."
msgstr ""

#: ../../../library/unittest.rst:1024
msgid ""
"If set to ``True`` then any explicit failure message you pass in to the :ref:"
"`assert methods <assert-methods>` will be appended to the end of the normal "
"failure message.  The normal messages contain useful information about the "
"objects involved, for example the message from assertEqual shows you the "
"repr of the two unequal objects. Setting this attribute to ``True`` allows "
"you to have a custom error message in addition to the normal one."
msgstr ""

#: ../../../library/unittest.rst:1032
msgid ""
"This attribute defaults to ``False``, meaning that a custom message passed "
"to an assert method will silence the normal message."
msgstr ""

#: ../../../library/unittest.rst:1035
msgid ""
"The class setting can be overridden in individual tests by assigning an "
"instance attribute to ``True`` or ``False`` before calling the assert "
"methods."
msgstr ""

#: ../../../library/unittest.rst:1041
msgid ""
"Testing frameworks can use the following methods to collect information on "
"the test:"
msgstr ""

#: ../../../library/unittest.rst:1047
msgid ""
"Return the number of tests represented by this test object.  For :class:"
"`TestCase` instances, this will always be ``1``."
msgstr ""

#: ../../../library/unittest.rst:1053
msgid ""
"Return an instance of the test result class that should be used for this "
"test case class (if no other result instance is provided to the :meth:`run` "
"method)."
msgstr ""

#: ../../../library/unittest.rst:1057
msgid ""
"For :class:`TestCase` instances, this will always be an instance of :class:"
"`TestResult`; subclasses of :class:`TestCase` should override this as "
"necessary."
msgstr ""

#: ../../../library/unittest.rst:1064
msgid ""
"Return a string identifying the specific test case.  This is usually the "
"full name of the test method, including the module and class name."
msgstr ""

#: ../../../library/unittest.rst:1070
msgid ""
"Returns a description of the test, or ``None`` if no description has been "
"provided.  The default implementation of this method returns the first line "
"of the test method's docstring, if available, along with the method name."
msgstr ""

#: ../../../library/unittest.rst:1075
msgid ""
"In earlier versions this only returned the first line of the test method's "
"docstring, if available or the :const:`None`.  That led to undesirable "
"behavior of not printing the test name when someone was thoughtful enough to "
"write a docstring."
msgstr ""

#: ../../../library/unittest.rst:1084
msgid ""
"Add a function to be called after :meth:`tearDown` to cleanup resources used "
"during the test. Functions will be called in reverse order to the order they "
"are added (LIFO). They are called with any arguments and keyword arguments "
"passed into :meth:`addCleanup` when they are added."
msgstr ""

#: ../../../library/unittest.rst:1090
msgid ""
"If :meth:`setUp` fails, meaning that :meth:`tearDown` is not called, then "
"any cleanup functions added will still be called."
msgstr ""

#: ../../../library/unittest.rst:1098
msgid ""
"This method is called unconditionally after :meth:`tearDown`, or after :meth:"
"`setUp` if :meth:`setUp` raises an exception."
msgstr ""

#: ../../../library/unittest.rst:1101
msgid ""
"It is responsible for calling all the cleanup functions added by :meth:"
"`addCleanup`. If you need cleanup functions to be called *prior* to :meth:"
"`tearDown` then you can call :meth:`doCleanups` yourself."
msgstr ""

#: ../../../library/unittest.rst:1106
msgid ""
":meth:`doCleanups` pops methods off the stack of cleanup functions one at a "
"time, so it can be called at any time."
msgstr ""

#: ../../../library/unittest.rst:1114
msgid ""
"This class implements the portion of the :class:`TestCase` interface which "
"allows the test runner to drive the test, but does not provide the methods "
"which test code can use to check and report errors.  This is used to create "
"test cases using legacy test code, allowing it to be integrated into a :mod:"
"`unittest`-based test framework."
msgstr ""

#: ../../../library/unittest.rst:1122
msgid "Deprecated aliases"
msgstr ""

#: ../../../library/unittest.rst:1124
msgid ""
"For historical reasons, some of the :class:`TestCase` methods had one or "
"more aliases that are now deprecated.  The following table lists the correct "
"names along with their deprecated aliases:"
msgstr ""

#: ../../../library/unittest.rst:1129
msgid "Method Name"
msgstr ""

#: ../../../library/unittest.rst:1129
msgid "Deprecated alias(es)"
msgstr ""

#: ../../../library/unittest.rst:1131
msgid ":meth:`.assertEqual`"
msgstr ""

#: ../../../library/unittest.rst:1131
msgid "failUnlessEqual, assertEquals"
msgstr ""

#: ../../../library/unittest.rst:1132
msgid ":meth:`.assertNotEqual`"
msgstr ""

#: ../../../library/unittest.rst:1132
msgid "failIfEqual"
msgstr ""

#: ../../../library/unittest.rst:1133
msgid ":meth:`.assertTrue`"
msgstr ""

#: ../../../library/unittest.rst:1133
msgid "failUnless, assert\\_"
msgstr ""

#: ../../../library/unittest.rst:1134
msgid ":meth:`.assertFalse`"
msgstr ""

#: ../../../library/unittest.rst:1134
msgid "failIf"
msgstr ""

#: ../../../library/unittest.rst:1135
msgid ":meth:`.assertRaises`"
msgstr ""

#: ../../../library/unittest.rst:1135
msgid "failUnlessRaises"
msgstr ""

#: ../../../library/unittest.rst:1136
msgid ":meth:`.assertAlmostEqual`"
msgstr ""

#: ../../../library/unittest.rst:1136
msgid "failUnlessAlmostEqual"
msgstr ""

#: ../../../library/unittest.rst:1137
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ""

#: ../../../library/unittest.rst:1137
msgid "failIfAlmostEqual"
msgstr ""

#: ../../../library/unittest.rst:1140
msgid "the aliases listed in the second column"
msgstr ""

#: ../../../library/unittest.rst:1148
msgid "Grouping tests"
msgstr ""

#: ../../../library/unittest.rst:1152
msgid ""
"This class represents an aggregation of individual tests cases and test "
"suites. The class presents the interface needed by the test runner to allow "
"it to be run as any other test case.  Running a :class:`TestSuite` instance "
"is the same as iterating over the suite, running each test individually."
msgstr ""

#: ../../../library/unittest.rst:1157
msgid ""
"If *tests* is given, it must be an iterable of individual test cases or "
"other test suites that will be used to build the suite initially. Additional "
"methods are provided to add test cases and suites to the collection later on."
msgstr ""

#: ../../../library/unittest.rst:1161
msgid ""
":class:`TestSuite` objects behave much like :class:`TestCase` objects, "
"except they do not actually implement a test.  Instead, they are used to "
"aggregate tests into groups of tests that should be run together. Some "
"additional methods are available to add tests to :class:`TestSuite` "
"instances:"
msgstr ""

#: ../../../library/unittest.rst:1169
msgid "Add a :class:`TestCase` or :class:`TestSuite` to the suite."
msgstr ""

#: ../../../library/unittest.rst:1174
msgid ""
"Add all the tests from an iterable of :class:`TestCase` and :class:"
"`TestSuite` instances to this test suite."
msgstr ""

#: ../../../library/unittest.rst:1177
msgid ""
"This is equivalent to iterating over *tests*, calling :meth:`addTest` for "
"each element."
msgstr ""

#: ../../../library/unittest.rst:1180
msgid ":class:`TestSuite` shares the following methods with :class:`TestCase`:"
msgstr ""

#: ../../../library/unittest.rst:1185
msgid ""
"Run the tests associated with this suite, collecting the result into the "
"test result object passed as *result*.  Note that unlike :meth:`TestCase."
"run`, :meth:`TestSuite.run` requires the result object to be passed in."
msgstr ""

#: ../../../library/unittest.rst:1193
msgid ""
"Run the tests associated with this suite without collecting the result. This "
"allows exceptions raised by the test to be propagated to the caller and can "
"be used to support running tests under a debugger."
msgstr ""

#: ../../../library/unittest.rst:1200
msgid ""
"Return the number of tests represented by this test object, including all "
"individual tests and sub-suites."
msgstr ""

#: ../../../library/unittest.rst:1206
msgid ""
"Tests grouped by a :class:`TestSuite` are always accessed by iteration. "
"Subclasses can lazily provide tests by overriding :meth:`__iter__`. Note "
"that this method maybe called several times on a single suite (for example "
"when counting tests or comparing for equality) so the tests returned must be "
"the same for repeated iterations."
msgstr ""

#: ../../../library/unittest.rst:1212
msgid ""
"In the typical usage of a :class:`TestSuite` object, the :meth:`run` method "
"is invoked by a :class:`TestRunner` rather than by the end-user test harness."
msgstr ""

#: ../../../library/unittest.rst:1217
msgid "Loading and running tests"
msgstr ""

#: ../../../library/unittest.rst:1221
msgid ""
"The :class:`TestLoader` class is used to create test suites from classes and "
"modules.  Normally, there is no need to create an instance of this class; "
"the :mod:`unittest` module provides an instance that can be shared as "
"``unittest.defaultTestLoader``. Using a subclass or instance, however, "
"allows customization of some configurable properties."
msgstr ""

#: ../../../library/unittest.rst:1227
msgid ":class:`TestLoader` objects have the following methods:"
msgstr ""

#: ../../../library/unittest.rst:1232
msgid ""
"Return a suite of all tests cases contained in the :class:`TestCase`\\ -"
"derived :class:`testCaseClass`."
msgstr ""

#: ../../../library/unittest.rst:1238
msgid ""
"Return a suite of all tests cases contained in the given module. This method "
"searches *module* for classes derived from :class:`TestCase` and creates an "
"instance of the class for each test method defined for the class."
msgstr ""

#: ../../../library/unittest.rst:1245
msgid ""
"While using a hierarchy of :class:`TestCase`\\ -derived classes can be "
"convenient in sharing fixtures and helper functions, defining test methods "
"on base classes that are not intended to be instantiated directly does not "
"play well with this method.  Doing so, however, can be useful when the "
"fixtures are different and defined in subclasses."
msgstr ""

#: ../../../library/unittest.rst:1254
msgid "Return a suite of all tests cases given a string specifier."
msgstr ""

#: ../../../library/unittest.rst:1256
msgid ""
"The specifier *name* is a \"dotted name\" that may resolve either to a "
"module, a test case class, a test method within a test case class, a :class:"
"`TestSuite` instance, or a callable object which returns a :class:`TestCase` "
"or :class:`TestSuite` instance.  These checks are applied in the order "
"listed here; that is, a method on a possible test case class will be picked "
"up as \"a test method within a test case class\", rather than \"a callable "
"object\"."
msgstr ""

#: ../../../library/unittest.rst:1264
msgid ""
"For example, if you have a module :mod:`SampleTests` containing a :class:"
"`TestCase`\\ -derived class :class:`SampleTestCase` with three test methods "
"(:meth:`test_one`, :meth:`test_two`, and :meth:`test_three`), the specifier "
"``'SampleTests.SampleTestCase'`` would cause this method to return a suite "
"which will run all three test methods. Using the specifier ``'SampleTests."
"SampleTestCase.test_two'`` would cause it to return a test suite which will "
"run only the :meth:`test_two` test method. The specifier can refer to "
"modules and packages which have not been imported; they will be imported as "
"a side-effect."
msgstr ""

#: ../../../library/unittest.rst:1274
msgid "The method optionally resolves *name* relative to the given *module*."
msgstr ""

#: ../../../library/unittest.rst:1279
msgid ""
"Similar to :meth:`loadTestsFromName`, but takes a sequence of names rather "
"than a single name.  The return value is a test suite which supports all the "
"tests defined for each name."
msgstr ""

#: ../../../library/unittest.rst:1286
msgid ""
"Return a sorted sequence of method names found within *testCaseClass*; this "
"should be a subclass of :class:`TestCase`."
msgstr ""

#: ../../../library/unittest.rst:1290
msgid ""
"The following attributes of a :class:`TestLoader` can be configured either "
"by subclassing or assignment on an instance:"
msgstr ""

#: ../../../library/unittest.rst:1296
msgid ""
"String giving the prefix of method names which will be interpreted as test "
"methods.  The default value is ``'test'``."
msgstr ""

#: ../../../library/unittest.rst:1299
msgid ""
"This affects :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` "
"methods."
msgstr ""

#: ../../../library/unittest.rst:1305
msgid ""
"Function to be used to compare method names when sorting them in :meth:"
"`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

#: ../../../library/unittest.rst:1311
msgid ""
"Callable object that constructs a test suite from a list of tests. No "
"methods on the resulting object are needed.  The default value is the :class:"
"`TestSuite` class."
msgstr ""

#: ../../../library/unittest.rst:1315
msgid "This affects all the :meth:`loadTestsFrom\\*` methods."
msgstr ""

#: ../../../library/unittest.rst:1320
msgid ""
"This class is used to compile information about which tests have succeeded "
"and which have failed."
msgstr ""

#: ../../../library/unittest.rst:1323
msgid ""
"A :class:`TestResult` object stores the results of a set of tests.  The :"
"class:`TestCase` and :class:`TestSuite` classes ensure that results are "
"properly recorded; test authors do not need to worry about recording the "
"outcome of tests."
msgstr ""

#: ../../../library/unittest.rst:1328
msgid ""
"Testing frameworks built on top of :mod:`unittest` may want access to the :"
"class:`TestResult` object generated by running a set of tests for reporting "
"purposes; a :class:`TestResult` instance is returned by the :meth:"
"`TestRunner.run` method for this purpose."
msgstr ""

#: ../../../library/unittest.rst:1333
msgid ""
":class:`TestResult` instances have the following attributes that will be of "
"interest when inspecting the results of running a set of tests:"
msgstr ""

#: ../../../library/unittest.rst:1339
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding formatted tracebacks. Each tuple represents a test which raised an "
"unexpected exception."
msgstr ""

#: ../../../library/unittest.rst:1345
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding formatted tracebacks. Each tuple represents a test where a failure "
"was explicitly signalled using the :meth:`TestCase.fail\\*` or :meth:"
"`TestCase.assert\\*` methods."
msgstr ""

#: ../../../library/unittest.rst:1352
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding the reason for skipping the test."
msgstr ""

#: ../../../library/unittest.rst:1359
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding formatted tracebacks.  Each tuple represents an expected failure of "
"the test case."
msgstr ""

#: ../../../library/unittest.rst:1365
msgid ""
"A list containing :class:`TestCase` instances that were marked as expected "
"failures, but succeeded."
msgstr ""

#: ../../../library/unittest.rst:1370
msgid ""
"Set to ``True`` when the execution of tests should stop by :meth:`stop`."
msgstr ""

#: ../../../library/unittest.rst:1375
msgid "The total number of tests run so far."
msgstr ""

#: ../../../library/unittest.rst:1380
msgid ""
"Return ``True`` if all tests run so far have passed, otherwise returns "
"``False``."
msgstr ""

#: ../../../library/unittest.rst:1386
msgid ""
"This method can be called to signal that the set of tests being run should "
"be aborted by setting the :attr:`shouldStop` attribute to ``True``. :class:"
"`TestRunner` objects should respect this flag and return without running any "
"additional tests."
msgstr ""

#: ../../../library/unittest.rst:1391
msgid ""
"For example, this feature is used by the :class:`TextTestRunner` class to "
"stop the test framework when the user signals an interrupt from the "
"keyboard.  Interactive tools which provide :class:`TestRunner` "
"implementations can use this in a similar manner."
msgstr ""

#: ../../../library/unittest.rst:1396
msgid ""
"The following methods of the :class:`TestResult` class are used to maintain "
"the internal data structures, and may be extended in subclasses to support "
"additional reporting requirements.  This is particularly useful in building "
"tools which support interactive reporting while tests are being run."
msgstr ""

#: ../../../library/unittest.rst:1404
msgid "Called when the test case *test* is about to be run."
msgstr ""

#: ../../../library/unittest.rst:1406
msgid ""
"The default implementation simply increments the instance's :attr:`testsRun` "
"counter."
msgstr ""

#: ../../../library/unittest.rst:1412
msgid ""
"Called after the test case *test* has been executed, regardless of the "
"outcome."
msgstr ""

#: ../../../library/unittest.rst:1415 ../../../library/unittest.rst:1457
msgid "The default implementation does nothing."
msgstr ""

#: ../../../library/unittest.rst:1420
msgid "Called once before any tests are executed."
msgstr ""

#: ../../../library/unittest.rst:1427
msgid "Called once after all tests are executed."
msgstr ""

#: ../../../library/unittest.rst:1434
msgid ""
"Called when the test case *test* raises an unexpected exception *err* is a "
"tuple of the form returned by :func:`sys.exc_info`: ``(type, value, "
"traceback)``."
msgstr ""

#: ../../../library/unittest.rst:1438
msgid ""
"The default implementation appends a tuple ``(test, formatted_err)`` to the "
"instance's :attr:`errors` attribute, where *formatted_err* is a formatted "
"traceback derived from *err*."
msgstr ""

#: ../../../library/unittest.rst:1445
msgid ""
"Called when the test case *test* signals a failure. *err* is a tuple of the "
"form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""

#: ../../../library/unittest.rst:1448
msgid ""
"The default implementation appends a tuple ``(test, formatted_err)`` to the "
"instance's :attr:`failures` attribute, where *formatted_err* is a formatted "
"traceback derived from *err*."
msgstr ""

#: ../../../library/unittest.rst:1455
msgid "Called when the test case *test* succeeds."
msgstr ""

#: ../../../library/unittest.rst:1462
msgid ""
"Called when the test case *test* is skipped.  *reason* is the reason the "
"test gave for skipping."
msgstr ""

#: ../../../library/unittest.rst:1465
msgid ""
"The default implementation appends a tuple ``(test, reason)`` to the "
"instance's :attr:`skipped` attribute."
msgstr ""

#: ../../../library/unittest.rst:1471
msgid ""
"Called when the test case *test* fails, but was marked with the :func:"
"`expectedFailure` decorator."
msgstr ""

#: ../../../library/unittest.rst:1474
msgid ""
"The default implementation appends a tuple ``(test, formatted_err)`` to the "
"instance's :attr:`expectedFailures` attribute, where *formatted_err* is a "
"formatted traceback derived from *err*."
msgstr ""

#: ../../../library/unittest.rst:1481
msgid ""
"Called when the test case *test* was marked with the :func:`expectedFailure` "
"decorator, but succeeded."
msgstr ""

#: ../../../library/unittest.rst:1484
msgid ""
"The default implementation appends the test to the instance's :attr:"
"`unexpectedSuccesses` attribute."
msgstr ""

#: ../../../library/unittest.rst:1490
msgid ""
"Instance of the :class:`TestLoader` class intended to be shared.  If no "
"customization of the :class:`TestLoader` is needed, this instance can be "
"used instead of repeatedly creating new instances."
msgstr ""

#: ../../../library/unittest.rst:1497
msgid ""
"A basic test runner implementation which prints results on standard error.  "
"It has a few configurable parameters, but is essentially very simple.  "
"Graphical applications which run test suites should provide alternate "
"implementations."
msgstr ""

#: ../../../library/unittest.rst:1503
msgid ""
"This method returns the instance of ``TestResult`` used by :meth:`run`. It "
"is not intended to be called directly, but can be overridden in subclasses "
"to provide a custom ``TestResult``."
msgstr ""

#: ../../../library/unittest.rst:1510
msgid ""
"A command-line program that runs a set of tests; this is primarily for "
"making test modules conveniently executable.  The simplest use for this "
"function is to include the following line at the end of a test script::"
msgstr ""

#: ../../../library/unittest.rst:1518
msgid ""
"The *testRunner* argument can either be a test runner class or an already "
"created instance of it. By default ``main`` calls :func:`sys.exit` with an "
"exit code indicating success or failure of the tests run."
msgstr ""

#: ../../../library/unittest.rst:1522
msgid ""
"``main`` supports being used from the interactive interpreter by passing in "
"the argument ``exit=False``. This displays the result on standard output "
"without calling :func:`sys.exit`::"
msgstr ""

#: ../../../library/unittest.rst:1529
msgid ""
"Calling ``main`` actually returns an instance of the ``TestProgram`` class. "
"This stores the result of the tests run as the ``result`` attribute."
msgstr ""

#: ../../../library/unittest.rst:1532
msgid "The ``exit`` parameter was added."
msgstr ""
