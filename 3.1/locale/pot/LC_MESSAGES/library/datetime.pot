# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ""

#: ../../../library/datetime.rst:12
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways.  While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member extraction "
"for output formatting and manipulation. For related functionality, see also "
"the :mod:`time` and :mod:`calendar` modules."
msgstr ""

#: ../../../library/datetime.rst:18
msgid ""
"There are two kinds of date and time objects: \"naive\" and \"aware\". This "
"distinction refers to whether the object has any notion of time zone, "
"daylight saving time, or other kind of algorithmic or political time "
"adjustment.  Whether a naive :class:`datetime` object represents Coordinated "
"Universal Time (UTC), local time, or time in some other timezone is purely "
"up to the program, just like it's up to the program whether a particular "
"number represents metres, miles, or mass.  Naive :class:`datetime` objects "
"are easy to understand and to work with, at the cost of ignoring some "
"aspects of reality."
msgstr ""

#: ../../../library/datetime.rst:27
msgid ""
"For applications requiring more, :class:`datetime` and :class:`time` objects "
"have an optional time zone information member, :attr:`tzinfo`, that can "
"contain an instance of a subclass of the abstract :class:`tzinfo` class.  "
"These :class:`tzinfo` objects capture information about the offset from UTC "
"time, the time zone name, and whether Daylight Saving Time is in effect.  "
"Note that no concrete :class:`tzinfo` classes are supplied by the :mod:"
"`datetime` module. Supporting timezones at whatever level of detail is "
"required is up to the application.  The rules for time adjustment across the "
"world are more political than rational, and there is no standard suitable "
"for every application."
msgstr ""

#: ../../../library/datetime.rst:37
msgid "The :mod:`datetime` module exports the following constants:"
msgstr ""

#: ../../../library/datetime.rst:41
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""

#: ../../../library/datetime.rst:47
msgid ""
"The largest year number allowed in a :class:`date` or :class:`datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""

#: ../../../library/datetime.rst:54
msgid "Module :mod:`calendar`"
msgstr ""

#: ../../../library/datetime.rst:54
msgid "General calendar related functions."
msgstr ""

#: ../../../library/datetime.rst:56
msgid "Module :mod:`time`"
msgstr ""

#: ../../../library/datetime.rst:57
msgid "Time access and conversions."
msgstr ""

#: ../../../library/datetime.rst:61
msgid "Available Types"
msgstr ""

#: ../../../library/datetime.rst:66
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""

#: ../../../library/datetime.rst:74
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" "
"here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`tzinfo`."
msgstr ""

#: ../../../library/datetime.rst:83
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`tzinfo`."
msgstr ""

#: ../../../library/datetime.rst:91
msgid ""
"A duration expressing the difference between two :class:`date`, :class:"
"`time`, or :class:`datetime` instances to microsecond resolution."
msgstr ""

#: ../../../library/datetime.rst:97
msgid ""
"An abstract base class for time zone information objects.  These are used by "
"the :class:`datetime` and :class:`time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""

#: ../../../library/datetime.rst:102
msgid "Objects of these types are immutable."
msgstr ""

#: ../../../library/datetime.rst:104
msgid "Objects of the :class:`date` type are always naive."
msgstr ""

#: ../../../library/datetime.rst:106
msgid ""
"An object *d* of type :class:`time` or :class:`datetime` may be naive or "
"aware. *d* is aware if ``d.tzinfo`` is not ``None`` and ``d.tzinfo."
"utcoffset(d)`` does not return ``None``.  If ``d.tzinfo`` is ``None``, or if "
"``d.tzinfo`` is not ``None`` but ``d.tzinfo.utcoffset(d)`` returns ``None``, "
"*d* is naive."
msgstr ""

#: ../../../library/datetime.rst:111
msgid ""
"The distinction between naive and aware doesn't apply to :class:`timedelta` "
"objects."
msgstr ""

#: ../../../library/datetime.rst:114
msgid "Subclass relationships::"
msgstr ""

#: ../../../library/datetime.rst:127
msgid ":class:`timedelta` Objects"
msgstr ""

#: ../../../library/datetime.rst:129
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""

#: ../../../library/datetime.rst:134
msgid ""
"All arguments are optional and default to ``0``.  Arguments may be integers "
"or floats, and may be positive or negative."
msgstr ""

#: ../../../library/datetime.rst:137
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally.  Arguments "
"are converted to those units:"
msgstr ""

#: ../../../library/datetime.rst:140
msgid "A millisecond is converted to 1000 microseconds."
msgstr ""

#: ../../../library/datetime.rst:141
msgid "A minute is converted to 60 seconds."
msgstr ""

#: ../../../library/datetime.rst:142
msgid "An hour is converted to 3600 seconds."
msgstr ""

#: ../../../library/datetime.rst:143
msgid "A week is converted to 7 days."
msgstr ""

#: ../../../library/datetime.rst:145
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""

#: ../../../library/datetime.rst:148
msgid "``0 <= microseconds < 1000000``"
msgstr ""

#: ../../../library/datetime.rst:149
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr ""

#: ../../../library/datetime.rst:150
msgid "``-999999999 <= days <= 999999999``"
msgstr ""

#: ../../../library/datetime.rst:152
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond.  If no argument is a float, the "
"conversion and normalization processes are exact (no information is lost)."
msgstr ""

#: ../../../library/datetime.rst:157
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""

#: ../../../library/datetime.rst:160
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example,"
msgstr ""

#: ../../../library/datetime.rst:169
msgid "Class attributes are:"
msgstr ""

#: ../../../library/datetime.rst:173
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""

#: ../../../library/datetime.rst:178
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""

#: ../../../library/datetime.rst:184
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../../library/datetime.rst:187
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../../library/datetime.rst:190 ../../../library/datetime.rst:377
#: ../../../library/datetime.rst:718 ../../../library/datetime.rst:1160
msgid "Instance attributes (read-only):"
msgstr ""

#: ../../../library/datetime.rst:193
msgid "Attribute"
msgstr ""

#: ../../../library/datetime.rst:193
msgid "Value"
msgstr ""

#: ../../../library/datetime.rst:195
msgid "``days``"
msgstr ""

#: ../../../library/datetime.rst:195
msgid "Between -999999999 and 999999999 inclusive"
msgstr ""

#: ../../../library/datetime.rst:197
msgid "``seconds``"
msgstr ""

#: ../../../library/datetime.rst:197
msgid "Between 0 and 86399 inclusive"
msgstr ""

#: ../../../library/datetime.rst:199
msgid "``microseconds``"
msgstr ""

#: ../../../library/datetime.rst:199
msgid "Between 0 and 999999 inclusive"
msgstr ""

#: ../../../library/datetime.rst:202 ../../../library/datetime.rst:394
#: ../../../library/datetime.rst:761 ../../../library/datetime.rst:1188
msgid "Supported operations:"
msgstr ""

#: ../../../library/datetime.rst:207 ../../../library/datetime.rst:397
#: ../../../library/datetime.rst:764
msgid "Operation"
msgstr ""

#: ../../../library/datetime.rst:207 ../../../library/datetime.rst:397
#: ../../../library/datetime.rst:764
msgid "Result"
msgstr ""

#: ../../../library/datetime.rst:209
msgid "``t1 = t2 + t3``"
msgstr ""

#: ../../../library/datetime.rst:209
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""

#: ../../../library/datetime.rst:212
msgid "``t1 = t2 - t3``"
msgstr ""

#: ../../../library/datetime.rst:212
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)"
msgstr ""

#: ../../../library/datetime.rst:216
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr ""

#: ../../../library/datetime.rst:216
msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr ""

#: ../../../library/datetime.rst:220
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr ""

#: ../../../library/datetime.rst:223
msgid "``t1 = t2 // i``"
msgstr ""

#: ../../../library/datetime.rst:223
msgid "The floor is computed and the remainder (if any) is thrown away. (3)"
msgstr ""

#: ../../../library/datetime.rst:226
msgid "``+t1``"
msgstr ""

#: ../../../library/datetime.rst:226
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr ""

#: ../../../library/datetime.rst:229
msgid "``-t1``"
msgstr ""

#: ../../../library/datetime.rst:229
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""

#: ../../../library/datetime.rst:233
msgid "``abs(t)``"
msgstr ""

#: ../../../library/datetime.rst:233
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""

#: ../../../library/datetime.rst:236
msgid "``str(t)``"
msgstr ""

#: ../../../library/datetime.rst:236
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../../../library/datetime.rst:240
msgid "``repr(t)``"
msgstr ""

#: ../../../library/datetime.rst:240
msgid ""
"Returns a string in the form ``datetime.timedelta(D[, S[, U]])``, where D is "
"negative for negative ``t``. (5)"
msgstr ""

#: ../../../library/datetime.rst:245 ../../../library/datetime.rst:411
#: ../../../library/datetime.rst:1640
msgid "Notes:"
msgstr ""

#: ../../../library/datetime.rst:248
msgid "This is exact, but may overflow."
msgstr ""

#: ../../../library/datetime.rst:251
msgid "This is exact, and cannot overflow."
msgstr ""

#: ../../../library/datetime.rst:254
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr ""

#: ../../../library/datetime.rst:257
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""

#: ../../../library/datetime.rst:260
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation.  This leads to somewhat unusual "
"results for negative timedeltas.  For example:"
msgstr ""

#: ../../../library/datetime.rst:269
msgid ""
"In addition to the operations listed above :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:"
"`datetime` objects (see below)."
msgstr ""

#: ../../../library/datetime.rst:273
msgid ""
"Comparisons of :class:`timedelta` objects are supported with the :class:"
"`timedelta` object representing the smaller duration considered to be the "
"smaller timedelta. In order to stop mixed-type comparisons from falling back "
"to the default comparison by object address, when a :class:`timedelta` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../../library/datetime.rst:281
msgid ""
":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), "
"support efficient pickling, and in Boolean contexts, a :class:`timedelta` "
"object is considered to be true if and only if it isn't equal to "
"``timedelta(0)``."
msgstr ""

#: ../../../library/datetime.rst:285
msgid "Example usage:"
msgstr ""

#: ../../../library/datetime.rst:309
msgid ":class:`date` Objects"
msgstr ""

#: ../../../library/datetime.rst:311
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions.  January 1 of year 1 is called day number 1, January 2 of "
"year 1 is called day number 2, and so on.  This matches the definition of "
"the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book "
"Calendrical Calculations, where it's the base calendar for all "
"computations.  See the book for algorithms for converting between proleptic "
"Gregorian ordinals and many other calendar systems."
msgstr ""

#: ../../../library/datetime.rst:323
msgid ""
"All arguments are required.  Arguments may be integers, in the following "
"ranges:"
msgstr ""

#: ../../../library/datetime.rst:326 ../../../library/datetime.rst:601
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr ""

#: ../../../library/datetime.rst:327 ../../../library/datetime.rst:602
msgid "``1 <= month <= 12``"
msgstr ""

#: ../../../library/datetime.rst:328 ../../../library/datetime.rst:603
msgid "``1 <= day <= number of days in the given month and year``"
msgstr ""

#: ../../../library/datetime.rst:330 ../../../library/datetime.rst:609
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr ""

#: ../../../library/datetime.rst:333 ../../../library/datetime.rst:611
msgid "Other constructors, all class methods:"
msgstr ""

#: ../../../library/datetime.rst:337
msgid ""
"Return the current local date.  This is equivalent to ``date."
"fromtimestamp(time.time())``."
msgstr ""

#: ../../../library/datetime.rst:343
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`.  This may raise :exc:`ValueError`, if the "
"timestamp is out of the range of values supported by the platform C :cfunc:"
"`localtime` function. It's common for this to be restricted to years from "
"1970 through 2038.  Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`."
msgstr ""

#: ../../../library/datetime.rst:353
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 "
"<= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../../../library/datetime.rst:359 ../../../library/datetime.rst:698
#: ../../../library/datetime.rst:1140
msgid "Class attributes:"
msgstr ""

#: ../../../library/datetime.rst:363
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr ""

#: ../../../library/datetime.rst:368
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr ""

#: ../../../library/datetime.rst:373
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr ""

#: ../../../library/datetime.rst:381 ../../../library/datetime.rst:722
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""

#: ../../../library/datetime.rst:386 ../../../library/datetime.rst:727
msgid "Between 1 and 12 inclusive."
msgstr ""

#: ../../../library/datetime.rst:391 ../../../library/datetime.rst:732
msgid "Between 1 and the number of days in the given month of the given year."
msgstr ""

#: ../../../library/datetime.rst:399
msgid "``date2 = date1 + timedelta``"
msgstr ""

#: ../../../library/datetime.rst:399
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr ""

#: ../../../library/datetime.rst:402
msgid "``date2 = date1 - timedelta``"
msgstr ""

#: ../../../library/datetime.rst:402
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""

#: ../../../library/datetime.rst:405
msgid "``timedelta = date1 - date2``"
msgstr ""

#: ../../../library/datetime.rst:405 ../../../library/datetime.rst:770
#: ../../../library/datetime.rst:1596
msgid "\\(3)"
msgstr ""

#: ../../../library/datetime.rst:407
msgid "``date1 < date2``"
msgstr ""

#: ../../../library/datetime.rst:407
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""

#: ../../../library/datetime.rst:414
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""

#: ../../../library/datetime.rst:421
msgid ""
"This isn't quite equivalent to date1 + (-timedelta), because -timedelta in "
"isolation can overflow in cases where date1 - timedelta does not. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""

#: ../../../library/datetime.rst:426
msgid ""
"This is exact, and cannot overflow.  timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""

#: ../../../library/datetime.rst:430
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. In order to stop comparison from falling back to the default "
"scheme of comparing object addresses, date comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`date` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison. If not, when a :class:`date` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../../library/datetime.rst:441
msgid ""
"Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` "
"objects are considered to be true."
msgstr ""

#: ../../../library/datetime.rst:444 ../../../library/datetime.rst:832
#: ../../../library/datetime.rst:1211
msgid "Instance methods:"
msgstr ""

#: ../../../library/datetime.rst:448
msgid ""
"Return a date with the same value, except for those members given new values "
"by whichever keyword arguments are specified.  For example, if ``d == "
"date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""

#: ../../../library/datetime.rst:455
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. "
"``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d."
"day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` is the day number within the current "
"year starting with ``1`` for January 1st."
msgstr ""

#: ../../../library/datetime.rst:465
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""

#: ../../../library/datetime.rst:472
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""

#: ../../../library/datetime.rst:479
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""

#: ../../../library/datetime.rst:486
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr ""

#: ../../../library/datetime.rst:488
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. See "
"http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm for a good explanation."
msgstr ""

#: ../../../library/datetime.rst:492
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday.  The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""

#: ../../../library/datetime.rst:497
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that "
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4)."
"isocalendar() == (2004, 1, 7)``."
msgstr ""

#: ../../../library/datetime.rst:505
msgid ""
"Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For "
"example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""

#: ../../../library/datetime.rst:511
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""

#: ../../../library/datetime.rst:516
msgid ""
"Return a string representing the date, for example ``date(2002, 12, 4)."
"ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to "
"``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :"
"cfunc:`ctime` function (which :func:`time.ctime` invokes, but which :meth:"
"`date.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../../../library/datetime.rst:525
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../../library/datetime.rst:530
msgid "Example of counting days to an event::"
msgstr ""

#: ../../../library/datetime.rst:548
msgid "Example of working with :class:`date`:"
msgstr ""

#: ../../../library/datetime.rst:585
msgid ":class:`datetime` Objects"
msgstr ""

#: ../../../library/datetime.rst:587
msgid ""
"A :class:`datetime` object is a single object containing all the information "
"from a :class:`date` object and a :class:`time` object.  Like a :class:"
"`date` object, :class:`datetime` assumes the current Gregorian calendar "
"extended in both directions; like a time object, :class:`datetime` assumes "
"there are exactly 3600\\*24 seconds in every day."
msgstr ""

#: ../../../library/datetime.rst:593
msgid "Constructor:"
msgstr ""

#: ../../../library/datetime.rst:597
msgid ""
"The year, month and day arguments are required.  *tzinfo* may be ``None``, "
"or an instance of a :class:`tzinfo` subclass.  The remaining arguments may "
"be integers, in the following ranges:"
msgstr ""

#: ../../../library/datetime.rst:604 ../../../library/datetime.rst:1132
msgid "``0 <= hour < 24``"
msgstr ""

#: ../../../library/datetime.rst:605 ../../../library/datetime.rst:1133
msgid "``0 <= minute < 60``"
msgstr ""

#: ../../../library/datetime.rst:606 ../../../library/datetime.rst:1134
msgid "``0 <= second < 60``"
msgstr ""

#: ../../../library/datetime.rst:607
msgid "``0 <= microsecond < 1000000``"
msgstr ""

#: ../../../library/datetime.rst:615
msgid ""
"Return the current local datetime, with :attr:`tzinfo` ``None``. This is "
"equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:"
"`now`, :meth:`fromtimestamp`."
msgstr ""

#: ../../../library/datetime.rst:622
msgid ""
"Return the current local date and time.  If optional argument *tz* is "
"``None`` or not specified, this is like :meth:`today`, but, if possible, "
"supplies more precision than can be gotten from going through a :func:`time."
"time` timestamp (for example, this may be possible on platforms supplying "
"the C :cfunc:`gettimeofday` function)."
msgstr ""

#: ../../../library/datetime.rst:628
msgid ""
"Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the "
"current date and time are converted to *tz*'s time zone.  In this case the "
"result is equivalent to ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""

#: ../../../library/datetime.rst:636
msgid ""
"Return the current UTC date and time, with :attr:`tzinfo` ``None``. This is "
"like :meth:`now`, but returns the current UTC date and time, as a naive :"
"class:`datetime` object. See also :meth:`now`."
msgstr ""

#: ../../../library/datetime.rst:643
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`datetime` object is naive."
msgstr ""

#: ../../../library/datetime.rst:648
msgid ""
"Else *tz* must be an instance of a class :class:`tzinfo` subclass, and the "
"timestamp is converted to *tz*'s time zone.  In this case the result is "
"equivalent to ``tz.fromutc(datetime.utcfromtimestamp(timestamp)."
"replace(tzinfo=tz))``."
msgstr ""

#: ../../../library/datetime.rst:653
msgid ""
":meth:`fromtimestamp` may raise :exc:`ValueError`, if the timestamp is out "
"of the range of values supported by the platform C :cfunc:`localtime` or :"
"cfunc:`gmtime` functions.  It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`datetime` objects. See also :meth:"
"`utcfromtimestamp`."
msgstr ""

#: ../../../library/datetime.rst:664
msgid ""
"Return the UTC :class:`datetime` corresponding to the POSIX timestamp, with :"
"attr:`tzinfo` ``None``. This may raise :exc:`ValueError`, if the timestamp "
"is out of the range of values supported by the platform C :cfunc:`gmtime` "
"function. It's common for this to be restricted to years in 1970 through "
"2038. See also :meth:`fromtimestamp`."
msgstr ""

#: ../../../library/datetime.rst:673
msgid ""
"Return the :class:`datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`tzinfo` "
"is ``None``."
msgstr ""

#: ../../../library/datetime.rst:681
msgid ""
"Return a new :class:`datetime` object whose date members are equal to the "
"given :class:`date` object's, and whose time and :attr:`tzinfo` members are "
"equal to the given :class:`time` object's. For any :class:`datetime` object "
"*d*, ``d == datetime.combine(d.date(), d.timetz())``.  If date is a :class:"
"`datetime` object, its time and :attr:`tzinfo` members are ignored."
msgstr ""

#: ../../../library/datetime.rst:690
msgid ""
"Return a :class:`datetime` corresponding to *date_string*, parsed according "
"to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, "
"format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format "
"can't be parsed by :func:`time.strptime` or if it returns a value which "
"isn't a time tuple. See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../../library/datetime.rst:702
msgid ""
"The earliest representable :class:`datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""

#: ../../../library/datetime.rst:708
msgid ""
"The latest representable :class:`datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""

#: ../../../library/datetime.rst:714
msgid ""
"The smallest possible difference between non-equal :class:`datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""

#: ../../../library/datetime.rst:737 ../../../library/datetime.rst:1164
msgid "In ``range(24)``."
msgstr ""

#: ../../../library/datetime.rst:742 ../../../library/datetime.rst:747
#: ../../../library/datetime.rst:1169 ../../../library/datetime.rst:1174
msgid "In ``range(60)``."
msgstr ""

#: ../../../library/datetime.rst:752 ../../../library/datetime.rst:1179
msgid "In ``range(1000000)``."
msgstr ""

#: ../../../library/datetime.rst:757
msgid ""
"The object passed as the *tzinfo* argument to the :class:`datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""

#: ../../../library/datetime.rst:766
msgid "``datetime2 = datetime1 + timedelta``"
msgstr ""

#: ../../../library/datetime.rst:766 ../../../library/datetime.rst:1574
msgid "\\(1)"
msgstr ""

#: ../../../library/datetime.rst:768
msgid "``datetime2 = datetime1 - timedelta``"
msgstr ""

#: ../../../library/datetime.rst:768 ../../../library/datetime.rst:1593
msgid "\\(2)"
msgstr ""

#: ../../../library/datetime.rst:770
msgid "``timedelta = datetime1 - datetime2``"
msgstr ""

#: ../../../library/datetime.rst:772
msgid "``datetime1 < datetime2``"
msgstr ""

#: ../../../library/datetime.rst:772
msgid "Compares :class:`datetime` to :class:`datetime`. (4)"
msgstr ""

#: ../../../library/datetime.rst:777
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  "
"The result has the same :attr:`tzinfo` member as the input datetime, and "
"datetime2 - datetime1 == timedelta after. :exc:`OverflowError` is raised if "
"datetime2.year would be smaller than :const:`MINYEAR` or larger than :const:"
"`MAXYEAR`. Note that no time zone adjustments are done even if the input is "
"an aware object."
msgstr ""

#: ../../../library/datetime.rst:785
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`tzinfo` member as the input "
"datetime, and no time zone adjustments are done even if the input is aware. "
"This isn't quite equivalent to datetime1 + (-timedelta), because -timedelta "
"in isolation can overflow in cases where datetime1 - timedelta does not."
msgstr ""

#: ../../../library/datetime.rst:792
msgid ""
"Subtraction of a :class:`datetime` from a :class:`datetime` is defined only "
"if both operands are naive, or if both are aware.  If one is aware and the "
"other is naive, :exc:`TypeError` is raised."
msgstr ""

#: ../../../library/datetime.rst:796
msgid ""
"If both are naive, or both are aware and have the same :attr:`tzinfo` "
"member, the :attr:`tzinfo` members are ignored, and the result is a :class:"
"`timedelta` object *t* such that ``datetime2 + t == datetime1``.  No time "
"zone adjustments are done in this case."
msgstr ""

#: ../../../library/datetime.rst:801
msgid ""
"If both are aware and have different :attr:`tzinfo` members, ``a-b`` acts as "
"if *a* and *b* were first converted to naive UTC datetimes first.  The "
"result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""

#: ../../../library/datetime.rst:807
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""

#: ../../../library/datetime.rst:810
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is "
"raised. If both comparands are aware, and have the same :attr:`tzinfo` "
"member, the common :attr:`tzinfo` member is ignored and the base datetimes "
"are compared.  If both comparands are aware and have different :attr:"
"`tzinfo` members, the comparands are first adjusted by subtracting their UTC "
"offsets (obtained from ``self.utcoffset()``)."
msgstr ""

#: ../../../library/datetime.rst:819
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`datetime` object.  "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison.  If not, when a :class:"
"`datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""

#: ../../../library/datetime.rst:829
msgid ""
":class:`datetime` objects can be used as dictionary keys. In Boolean "
"contexts, all :class:`datetime` objects are considered to be true."
msgstr ""

#: ../../../library/datetime.rst:836
msgid "Return :class:`date` object with same year, month and day."
msgstr ""

#: ../../../library/datetime.rst:841
msgid ""
"Return :class:`time` object with same hour, minute, second and microsecond. :"
"attr:`tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""

#: ../../../library/datetime.rst:847
msgid ""
"Return :class:`time` object with same hour, minute, second, microsecond, and "
"tzinfo members.  See also method :meth:`time`."
msgstr ""

#: ../../../library/datetime.rst:853
msgid ""
"Return a datetime with the same members, except for those members given new "
"values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time members."
msgstr ""

#: ../../../library/datetime.rst:861
msgid ""
"Return a :class:`datetime` object with new :attr:`tzinfo` member *tz*, "
"adjusting the date and time members so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""

#: ../../../library/datetime.rst:865
msgid ""
"*tz* must be an instance of a :class:`tzinfo` subclass, and its :meth:"
"`utcoffset` and :meth:`dst` methods must not return ``None``.  *self* must "
"be aware (``self.tzinfo`` must not be ``None``, and ``self.utcoffset()`` "
"must not return ``None``)."
msgstr ""

#: ../../../library/datetime.rst:870
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time members is performed. Else the result is local "
"time in time zone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have "
"the same date and time members as ``dt - dt.utcoffset()``. The discussion of "
"class :class:`tzinfo` explains the cases at Daylight Saving Time transition "
"boundaries where this cannot be achieved (an issue only if *tz* models both "
"standard and daylight time)."
msgstr ""

#: ../../../library/datetime.rst:879
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time members, use ``dt.replace(tzinfo=tz)``.  "
"If you merely want to remove the time zone object from an aware datetime "
"*dt* without conversion of date and time members, use ``dt."
"replace(tzinfo=None)``."
msgstr ""

#: ../../../library/datetime.rst:884
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""

#: ../../../library/datetime.rst:899
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None``, or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""

#: ../../../library/datetime.rst:907
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""

#: ../../../library/datetime.rst:915
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""

#: ../../../library/datetime.rst:922
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d."
"month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where "
"``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day "
"number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else ``tm_isdst`` is set to ``0``."
msgstr ""

#: ../../../library/datetime.rst:935
msgid ""
"If :class:`datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""

#: ../../../library/datetime.rst:939
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned.  :attr:`tm_isdst` is forced to 0. Note that the result's :attr:"
"`tm_year` member may be :const:`MINYEAR`\\ -1 or :const:`MAXYEAR`\\ +1, if "
"*d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment spills over a "
"year boundary."
msgstr ""

#: ../../../library/datetime.rst:949
msgid ""
"Return the proleptic Gregorian ordinal of the date.  The same as ``self."
"date().toordinal()``."
msgstr ""

#: ../../../library/datetime.rst:955
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""

#: ../../../library/datetime.rst:961
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""

#: ../../../library/datetime.rst:968
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as "
"``self.date().isocalendar()``."
msgstr ""

#: ../../../library/datetime.rst:974
msgid ""
"Return a string representing the date and time in ISO 8601 format, YYYY-MM-"
"DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

#: ../../../library/datetime.rst:978
msgid ""
"If :meth:`utcoffset` does not return ``None``, a 6-character string is "
"appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:"
"MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""

#: ../../../library/datetime.rst:983
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result.  For example,"
msgstr ""

#: ../../../library/datetime.rst:996
msgid ""
"For a :class:`datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""

#: ../../../library/datetime.rst:1002
msgid ""
"Return a string representing the date and time, for example ``datetime(2002, "
"12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is "
"equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where "
"the native C :cfunc:`ctime` function (which :func:`time.ctime` invokes, but "
"which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""

#: ../../../library/datetime.rst:1011
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string.  See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../../library/datetime.rst:1015
msgid "Examples of working with datetime objects:"
msgstr ""

#: ../../../library/datetime.rst:1060
msgid "Using datetime with tzinfo:"
msgstr ""

#: ../../../library/datetime.rst:1121
msgid ":class:`time` Objects"
msgstr ""

#: ../../../library/datetime.rst:1123
msgid ""
"A time object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""

#: ../../../library/datetime.rst:1128
msgid ""
"All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass.  The remaining arguments may be integers, in the "
"following ranges:"
msgstr ""

#: ../../../library/datetime.rst:1135
msgid "``0 <= microsecond < 1000000``."
msgstr ""

#: ../../../library/datetime.rst:1137
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised.  "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""

#: ../../../library/datetime.rst:1145
msgid "The earliest representable :class:`time`, ``time(0, 0, 0, 0)``."
msgstr ""

#: ../../../library/datetime.rst:1150
msgid "The latest representable :class:`time`, ``time(23, 59, 59, 999999)``."
msgstr ""

#: ../../../library/datetime.rst:1155
msgid ""
"The smallest possible difference between non-equal :class:`time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:"
"`time` objects is not supported."
msgstr ""

#: ../../../library/datetime.rst:1184
msgid ""
"The object passed as the tzinfo argument to the :class:`time` constructor, "
"or ``None`` if none was passed."
msgstr ""

#: ../../../library/datetime.rst:1190
msgid ""
"comparison of :class:`time` to :class:`time`, where *a* is considered less "
"than *b* when *a* precedes *b* in time.  If one comparand is naive and the "
"other is aware, :exc:`TypeError` is raised.  If both comparands are aware, "
"and have the same :attr:`tzinfo` member, the common :attr:`tzinfo` member is "
"ignored and the base times are compared.  If both comparands are aware and "
"have different :attr:`tzinfo` members, the comparands are first adjusted by "
"subtracting their UTC offsets (obtained from ``self.utcoffset()``). In order "
"to stop mixed-type comparisons from falling back to the default comparison "
"by object address, when a :class:`time` object is compared to an object of a "
"different type, :exc:`TypeError` is raised unless the comparison is ``==`` "
"or ``!=``.  The latter cases return :const:`False` or :const:`True`, "
"respectively."
msgstr ""

#: ../../../library/datetime.rst:1202
msgid "hash, use as dict key"
msgstr ""

#: ../../../library/datetime.rst:1204
msgid "efficient pickling"
msgstr ""

#: ../../../library/datetime.rst:1206
msgid ""
"in Boolean contexts, a :class:`time` object is considered to be true if and "
"only if, after converting it to minutes and subtracting :meth:`utcoffset` "
"(or ``0`` if that's ``None``), the result is non-zero."
msgstr ""

#: ../../../library/datetime.rst:1215
msgid ""
"Return a :class:`time` with the same value, except for those members given "
"new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive :class:`time` from an "
"aware :class:`time`, without conversion of the time members."
msgstr ""

#: ../../../library/datetime.rst:1223
msgid ""
"Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm "
"or, if self.microsecond is 0, HH:MM:SS If :meth:`utcoffset` does not return "
"``None``, a 6-character string is appended, giving the UTC offset in "
"(signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is "
"0, HH:MM:SS+HH:MM"
msgstr ""

#: ../../../library/datetime.rst:1231
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""

#: ../../../library/datetime.rst:1236
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string. See section :ref:`strftime-strptime-behavior`."
msgstr ""

#: ../../../library/datetime.rst:1242
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""

#: ../../../library/datetime.rst:1250
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""

#: ../../../library/datetime.rst:1258
msgid ""
"If :attr:`tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""

#: ../../../library/datetime.rst:1263
msgid "Example:"
msgstr ""

#: ../../../library/datetime.rst:1291
msgid ":class:`tzinfo` Objects"
msgstr ""

#: ../../../library/datetime.rst:1293
msgid ""
":class:`tzinfo` is an abstract base class, meaning that this class should "
"not be instantiated directly.  You need to derive a concrete subclass, and "
"(at least) supply implementations of the standard :class:`tzinfo` methods "
"needed by the :class:`datetime` methods you use.  The :mod:`datetime` module "
"does not supply any concrete subclasses of :class:`tzinfo`."
msgstr ""

#: ../../../library/datetime.rst:1299
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`datetime` and :class:`time` objects. The latter "
"objects view their members as being in local time, and the :class:`tzinfo` "
"object supports methods revealing offset of local time from UTC, the name of "
"the time zone, and DST offset, all relative to a date or time object passed "
"to them."
msgstr ""

#: ../../../library/datetime.rst:1305
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, else it can be "
"pickled but possibly not unpickled again.  This is a technical requirement "
"that may be relaxed in the future."
msgstr ""

#: ../../../library/datetime.rst:1310
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods.  Exactly which methods are needed depends on the uses made of "
"aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""

#: ../../../library/datetime.rst:1317
msgid ""
"Return offset of local time from UTC, in minutes east of UTC.  If local time "
"is west of UTC, this should be negative.  Note that this is intended to be "
"the total offset from UTC; for example, if a :class:`tzinfo` object "
"represents both time zone and DST adjustments, :meth:`utcoffset` should "
"return their sum.  If the UTC offset isn't known, return ``None``.  Else the "
"value returned must be a :class:`timedelta` object specifying a whole number "
"of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the "
"magnitude of the offset must be less than one day).  Most implementations "
"of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""

#: ../../../library/datetime.rst:1330
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""

#: ../../../library/datetime.rst:1333
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../../library/datetime.rst:1339
msgid ""
"Return the daylight saving time (DST) adjustment, in minutes east of UTC, or "
"``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is "
"not in effect. If DST is in effect, return the offset as a :class:"
"`timedelta` object (see :meth:`utcoffset` for details). Note that DST "
"offset, if applicable, has already been added to the UTC offset returned by :"
"meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're "
"interested in obtaining DST info separately.  For example, :meth:`datetime."
"timetuple` calls its :attr:`tzinfo` member's :meth:`dst` method to determine "
"how the :attr:`tm_isdst` flag should be set, and :meth:`tzinfo.fromutc` "
"calls :meth:`dst` to account for DST changes when crossing time zones."
msgstr ""

#: ../../../library/datetime.rst:1350
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""

#: ../../../library/datetime.rst:1353
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr ""

#: ../../../library/datetime.rst:1355
msgid ""
"must return the same result for every :class:`datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location.  The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""

#: ../../../library/datetime.rst:1364
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""

#: ../../../library/datetime.rst:1370
msgid "or ::"
msgstr ""

#: ../../../library/datetime.rst:1382
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""

#: ../../../library/datetime.rst:1387
msgid ""
"Return the time zone name corresponding to the :class:`datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` "
"if a string name isn't known.  Note that this is a method rather than a "
"fixed string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""

#: ../../../library/datetime.rst:1397
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../../library/datetime.rst:1400
msgid ""
"These methods are called by a :class:`datetime` or :class:`time` object, in "
"response to their methods of the same names.  A :class:`datetime` object "
"passes itself as the argument, and a :class:`time` object passes ``None`` as "
"the argument.  A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:"
"`datetime`."
msgstr ""

#: ../../../library/datetime.rst:1406
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response.  For example, returning ``None`` is appropriate if the class "
"wishes to say that time objects don't participate in the :class:`tzinfo` "
"protocols.  It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""

#: ../../../library/datetime.rst:1412
msgid ""
"When a :class:`datetime` object is passed in response to a :class:`datetime` "
"method, ``dt.tzinfo`` is the same object as *self*.  :class:`tzinfo` methods "
"can rely on this, unless user code calls :class:`tzinfo` methods directly.  "
"The intent is that the :class:`tzinfo` methods interpret *dt* as being in "
"local time, and not need worry about objects in other timezones."
msgstr ""

#: ../../../library/datetime.rst:1418
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""

#: ../../../library/datetime.rst:1423
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation. When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time members are to be viewed as expressing a UTC time.  The "
"purpose of :meth:`fromutc` is to adjust the date and time members, returning "
"an equivalent datetime in *self*'s local time."
msgstr ""

#: ../../../library/datetime.rst:1429
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems.  It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years.  An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""

#: ../../../library/datetime.rst:1440
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""

#: ../../../library/datetime.rst:1458
msgid "Example :class:`tzinfo` classes:"
msgstr ""

#: ../../../library/datetime.rst:1463
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points.  For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""

#: ../../../library/datetime.rst:1477
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00.  A wall time of the form 2:MM doesn't really make sense on that "
"day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on "
"the day DST begins.  In order for :meth:`astimezone` to make this guarantee, "
"the :meth:`rzinfo.dst` method must consider times in the \"missing hour\" (2:"
"MM for Eastern) to be in daylight time."
msgstr ""

#: ../../../library/datetime.rst:1484
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC "
"on the day daylight time ends.  The local wall clock leaps from 1:59 "
"(daylight time) back to 1:00 (standard time) again. Local times of the form "
"1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by "
"mapping two adjacent UTC hours into the same local hour then.  In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern.  In order for :meth:`astimezone` to make this "
"guarantee, the :meth:`tzinfo.dst` method must consider times in the "
"\"repeated hour\" to be in standard time.  This is easily arranged, as in "
"the example, by expressing DST switch times in the time zone's standard "
"local time."
msgstr ""

#: ../../../library/datetime.rst:1497
msgid ""
"Applications that can't bear such ambiguities should avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using UTC, or any "
"other fixed-offset :class:`tzinfo` subclass (such as a class representing "
"only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours))."
msgstr ""

#: ../../../library/datetime.rst:1506
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ""

#: ../../../library/datetime.rst:1508
msgid ""
":class:`date`, :class:`datetime`, and :class:`time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string.  Broadly speaking, ``d."
"strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d."
"timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""

#: ../../../library/datetime.rst:1514
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:"
"`datetime` object from a string representing a date and time and a "
"corresponding format string. ``datetime.strptime(date_string, format)`` is "
"equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``."
msgstr ""

#: ../../../library/datetime.rst:1519
msgid ""
"For :class:`time` objects, the format codes for year, month, and day should "
"not be used, as time objects have no such values.  If they're used anyway, "
"``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""

#: ../../../library/datetime.rst:1523
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""

#: ../../../library/datetime.rst:1527
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""

#: ../../../library/datetime.rst:1530
msgid "For an aware object:"
msgstr ""

#: ../../../library/datetime.rst:1537 ../../../library/datetime.rst:1630
msgid "``%z``"
msgstr ""

#: ../../../library/datetime.rst:1533
msgid ""
":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM "
"or -HHMM, where HH is a 2-digit string giving the number of UTC offset "
"hours, and MM is a 2-digit string giving the number of UTC offset minutes.  "
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

#: ../../../library/datetime.rst:1541 ../../../library/datetime.rst:1634
msgid "``%Z``"
msgstr ""

#: ../../../library/datetime.rst:1540
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string. "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""

#: ../../../library/datetime.rst:1543
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common."
msgstr ""

#: ../../../library/datetime.rst:1547
msgid ""
"The following is a list of all the format codes that the C standard (1989 "
"version) requires, and these work on all platforms with a standard C "
"implementation.  Note that the 1999 version of the C standard added "
"additional format codes."
msgstr ""

#: ../../../library/datetime.rst:1552
msgid ""
"The exact range of years for which :meth:`strftime` works also varies across "
"platforms.  Regardless of platform, years before 1900 cannot be used."
msgstr ""

#: ../../../library/datetime.rst:1556
msgid "Directive"
msgstr ""

#: ../../../library/datetime.rst:1556
msgid "Meaning"
msgstr ""

#: ../../../library/datetime.rst:1556
msgid "Notes"
msgstr ""

#: ../../../library/datetime.rst:1558
msgid "``%a``"
msgstr ""

#: ../../../library/datetime.rst:1558
msgid "Locale's abbreviated weekday name."
msgstr ""

#: ../../../library/datetime.rst:1561
msgid "``%A``"
msgstr ""

#: ../../../library/datetime.rst:1561
msgid "Locale's full weekday name."
msgstr ""

#: ../../../library/datetime.rst:1563
msgid "``%b``"
msgstr ""

#: ../../../library/datetime.rst:1563
msgid "Locale's abbreviated month name."
msgstr ""

#: ../../../library/datetime.rst:1566
msgid "``%B``"
msgstr ""

#: ../../../library/datetime.rst:1566
msgid "Locale's full month name."
msgstr ""

#: ../../../library/datetime.rst:1568
msgid "``%c``"
msgstr ""

#: ../../../library/datetime.rst:1568
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../../../library/datetime.rst:1571
msgid "``%d``"
msgstr ""

#: ../../../library/datetime.rst:1571
msgid "Day of the month as a decimal number [01,31]."
msgstr ""

#: ../../../library/datetime.rst:1574
msgid "``%f``"
msgstr ""

#: ../../../library/datetime.rst:1574
msgid "Microsecond as a decimal number [0,999999], zero-padded on the left"
msgstr ""

#: ../../../library/datetime.rst:1578
msgid "``%H``"
msgstr ""

#: ../../../library/datetime.rst:1578
msgid "Hour (24-hour clock) as a decimal number [00,23]."
msgstr ""

#: ../../../library/datetime.rst:1581
msgid "``%I``"
msgstr ""

#: ../../../library/datetime.rst:1581
msgid "Hour (12-hour clock) as a decimal number [01,12]."
msgstr ""

#: ../../../library/datetime.rst:1584
msgid "``%j``"
msgstr ""

#: ../../../library/datetime.rst:1584
msgid "Day of the year as a decimal number [001,366]."
msgstr ""

#: ../../../library/datetime.rst:1587
msgid "``%m``"
msgstr ""

#: ../../../library/datetime.rst:1587
msgid "Month as a decimal number [01,12]."
msgstr ""

#: ../../../library/datetime.rst:1590
msgid "``%M``"
msgstr ""

#: ../../../library/datetime.rst:1590
msgid "Minute as a decimal number [00,59]."
msgstr ""

#: ../../../library/datetime.rst:1593
msgid "``%p``"
msgstr ""

#: ../../../library/datetime.rst:1593
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../../../library/datetime.rst:1596
msgid "``%S``"
msgstr ""

#: ../../../library/datetime.rst:1596
msgid "Second as a decimal number [00,61]."
msgstr ""

#: ../../../library/datetime.rst:1599
msgid "``%U``"
msgstr ""

#: ../../../library/datetime.rst:1599
msgid ""
"Week number of the year (Sunday as the first day of the week) as a decimal "
"number [00,53].  All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../../../library/datetime.rst:1599 ../../../library/datetime.rst:1610
msgid "\\(4)"
msgstr ""

#: ../../../library/datetime.rst:1607
msgid "``%w``"
msgstr ""

#: ../../../library/datetime.rst:1607
msgid "Weekday as a decimal number [0(Sunday),6]."
msgstr ""

#: ../../../library/datetime.rst:1610
msgid "``%W``"
msgstr ""

#: ../../../library/datetime.rst:1610
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number [00,53].  All days in a new year preceding the first Monday are "
"considered to be in week 0."
msgstr ""

#: ../../../library/datetime.rst:1618
msgid "``%x``"
msgstr ""

#: ../../../library/datetime.rst:1618
msgid "Locale's appropriate date representation."
msgstr ""

#: ../../../library/datetime.rst:1621
msgid "``%X``"
msgstr ""

#: ../../../library/datetime.rst:1621
msgid "Locale's appropriate time representation."
msgstr ""

#: ../../../library/datetime.rst:1624
msgid "``%y``"
msgstr ""

#: ../../../library/datetime.rst:1624
msgid "Year without century as a decimal number [00,99]."
msgstr ""

#: ../../../library/datetime.rst:1627
msgid "``%Y``"
msgstr ""

#: ../../../library/datetime.rst:1627
msgid "Year with century as a decimal number."
msgstr ""

#: ../../../library/datetime.rst:1630
msgid ""
"UTC offset in the form +HHMM or -HHMM (empty string if the the object is "
"naive)."
msgstr ""

#: ../../../library/datetime.rst:1630
msgid "\\(5)"
msgstr ""

#: ../../../library/datetime.rst:1634
msgid "Time zone name (empty string if the object is naive)."
msgstr ""

#: ../../../library/datetime.rst:1637
msgid "``%%``"
msgstr ""

#: ../../../library/datetime.rst:1637
msgid "A literal ``'%'`` character."
msgstr ""

#: ../../../library/datetime.rst:1643
msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right.  ``%f`` is an extension "
"to the set of format characters in the C standard (but implemented "
"separately in datetime objects, and therefore always available)."
msgstr ""

#: ../../../library/datetime.rst:1650
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../../../library/datetime.rst:1654
msgid ""
"The range really is ``0`` to ``61``; according to the Posix standard this "
"accounts for leap seconds and the (very rare) double leap seconds. The :mod:"
"`time` module may produce and does accept leap seconds since it is based on "
"the Posix standard, but the :mod:`datetime` module does not accept leap "
"seconds in :meth:`strptime` input nor will it produce them in :func:"
"`strftime` output."
msgstr ""

#: ../../../library/datetime.rst:1662
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the year are specified."
msgstr ""

#: ../../../library/datetime.rst:1666
msgid ""
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""
