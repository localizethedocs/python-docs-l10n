# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ""

#: ../../../library/runpy.rst:9
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""

#: ../../../library/runpy.rst:14
msgid "When executed as a script, the module effectively operates as follows::"
msgstr ""

#: ../../../library/runpy.rst:19
msgid "The :mod:`runpy` module provides a single function:"
msgstr ""

#: ../../../library/runpy.rst:24
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to PEP 302 for details) and then executed in a fresh "
"module namespace."
msgstr ""

#: ../../../library/runpy.rst:29
msgid ""
"If the supplied module name refers to a package rather than a normal module, "
"then that package is imported and the ``__main__`` submodule within that "
"package is then executed and the resulting module globals dictionary "
"returned."
msgstr ""

#: ../../../library/runpy.rst:33
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the globals dictionary before the code is executed. The supplied dictionary "
"will not be modified. If any of the special global variables below are "
"defined in the supplied dictionary, those definitions are overridden by the "
"``run_module`` function."
msgstr ""

#: ../../../library/runpy.rst:39
msgid ""
"The special global variables ``__name__``, ``__file__``, ``__loader__``, "
"``__builtins__`` and ``__package__`` are set in the globals dictionary "
"before the module code is executed."
msgstr ""

#: ../../../library/runpy.rst:43
msgid ""
"``__name__`` is set to *run_name* if this optional argument is supplied, to "
"``mod_name + '.__main__'`` if the named module is a package and to the "
"*mod_name* argument otherwise."
msgstr ""

#: ../../../library/runpy.rst:47
msgid ""
"``__loader__`` is set to the PEP 302 module loader used to retrieve the code "
"for the module (This loader may be a wrapper around the standard import "
"mechanism)."
msgstr ""

#: ../../../library/runpy.rst:50
msgid ""
"``__file__`` is set to the name provided by the module loader. If the loader "
"does not make filename information available, this variable is set to "
"``None``."
msgstr ""

#: ../../../library/runpy.rst:53
msgid ""
"``__builtins__`` is automatically initialised with a reference to the top "
"level namespace of the :mod:`builtins` module."
msgstr ""

#: ../../../library/runpy.rst:56
msgid ""
"``__package__`` is set to *mod_name* if the named module is a package and to "
"``mod_name.rpartition('.')[0]`` otherwise."
msgstr ""

#: ../../../library/runpy.rst:59
msgid ""
"If the argument *alter_sys* is supplied and evaluates to ``True``, then "
"``sys.argv[0]`` is updated with the value of ``__file__`` and ``sys."
"modules[__name__]`` is updated with a temporary module object for the module "
"being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` are "
"restored to their original values before the function returns."
msgstr ""

#: ../../../library/runpy.rst:65
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the :mod:`sys` module be left alone when "
"invoking this function from threaded code."
msgstr ""

#: ../../../library/runpy.rst:70
msgid ""
"Added ability to execute packages by looking for a ``__main__`` submodule."
msgstr ""

#: ../../../library/runpy.rst:77
msgid ":pep:`338` - Executing modules as scripts"
msgstr ""

#: ../../../library/runpy.rst:77 ../../../library/runpy.rst:80
msgid "PEP written and implemented by Nick Coghlan."
msgstr ""

#: ../../../library/runpy.rst:79
msgid ":pep:`366` - Main module explicit relative imports"
msgstr ""
