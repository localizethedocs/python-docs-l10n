# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/functions.rst:5 ../../../library/functions.rst:11
msgid "Built-in Functions"
msgstr ""

#: ../../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions and types built into it "
"that are always available.  They are listed here in alphabetical order."
msgstr ""

#: ../../../library/functions.rst:13
msgid ":func:`abs`"
msgstr ""

#: ../../../library/functions.rst:13
msgid ":func:`dir`"
msgstr ""

#: ../../../library/functions.rst:13
msgid ":func:`hex`"
msgstr ""

#: ../../../library/functions.rst:13
msgid ":func:`next`"
msgstr ""

#: ../../../library/functions.rst:13
msgid ":func:`slice`"
msgstr ""

#: ../../../library/functions.rst:14
msgid ":func:`all`"
msgstr ""

#: ../../../library/functions.rst:14
msgid ":func:`divmod`"
msgstr ""

#: ../../../library/functions.rst:14
msgid ":func:`id`"
msgstr ""

#: ../../../library/functions.rst:14
msgid ":func:`object`"
msgstr ""

#: ../../../library/functions.rst:14
msgid ":func:`sorted`"
msgstr ""

#: ../../../library/functions.rst:15
msgid ":func:`any`"
msgstr ""

#: ../../../library/functions.rst:15
msgid ":func:`enumerate`"
msgstr ""

#: ../../../library/functions.rst:15
msgid ":func:`input`"
msgstr ""

#: ../../../library/functions.rst:15
msgid ":func:`oct`"
msgstr ""

#: ../../../library/functions.rst:15
msgid ":func:`staticmethod`"
msgstr ""

#: ../../../library/functions.rst:16
msgid ":func:`ascii`"
msgstr ""

#: ../../../library/functions.rst:16
msgid ":func:`eval`"
msgstr ""

#: ../../../library/functions.rst:16
msgid ":func:`int`"
msgstr ""

#: ../../../library/functions.rst:16
msgid ":func:`open`"
msgstr ""

#: ../../../library/functions.rst:16
msgid ":func:`str`"
msgstr ""

#: ../../../library/functions.rst:17
msgid ":func:`bin`"
msgstr ""

#: ../../../library/functions.rst:17
msgid ":func:`exec`"
msgstr ""

#: ../../../library/functions.rst:17
msgid ":func:`isinstance`"
msgstr ""

#: ../../../library/functions.rst:17
msgid ":func:`ord`"
msgstr ""

#: ../../../library/functions.rst:17
msgid ":func:`sum`"
msgstr ""

#: ../../../library/functions.rst:18
msgid ":func:`bool`"
msgstr ""

#: ../../../library/functions.rst:18
msgid ":func:`filter`"
msgstr ""

#: ../../../library/functions.rst:18
msgid ":func:`issubclass`"
msgstr ""

#: ../../../library/functions.rst:18
msgid ":func:`pow`"
msgstr ""

#: ../../../library/functions.rst:18
msgid ":func:`super`"
msgstr ""

#: ../../../library/functions.rst:19
msgid ":func:`bytearray`"
msgstr ""

#: ../../../library/functions.rst:19
msgid ":func:`float`"
msgstr ""

#: ../../../library/functions.rst:19
msgid ":func:`iter`"
msgstr ""

#: ../../../library/functions.rst:19
msgid ":func:`print`"
msgstr ""

#: ../../../library/functions.rst:19
msgid ":func:`tuple`"
msgstr ""

#: ../../../library/functions.rst:20
msgid ":func:`bytes`"
msgstr ""

#: ../../../library/functions.rst:20
msgid ":func:`format`"
msgstr ""

#: ../../../library/functions.rst:20
msgid ":func:`len`"
msgstr ""

#: ../../../library/functions.rst:20
msgid ":func:`property`"
msgstr ""

#: ../../../library/functions.rst:20
msgid ":func:`type`"
msgstr ""

#: ../../../library/functions.rst:21
msgid ":func:`chr`"
msgstr ""

#: ../../../library/functions.rst:21
msgid ":func:`frozenset`"
msgstr ""

#: ../../../library/functions.rst:21
msgid ":func:`list`"
msgstr ""

#: ../../../library/functions.rst:21
msgid ":func:`range`"
msgstr ""

#: ../../../library/functions.rst:21
msgid ":func:`vars`"
msgstr ""

#: ../../../library/functions.rst:22
msgid ":func:`classmethod`"
msgstr ""

#: ../../../library/functions.rst:22
msgid ":func:`getattr`"
msgstr ""

#: ../../../library/functions.rst:22
msgid ":func:`locals`"
msgstr ""

#: ../../../library/functions.rst:22
msgid ":func:`repr`"
msgstr ""

#: ../../../library/functions.rst:22
msgid ":func:`zip`"
msgstr ""

#: ../../../library/functions.rst:23
msgid ":func:`compile`"
msgstr ""

#: ../../../library/functions.rst:23
msgid ":func:`globals`"
msgstr ""

#: ../../../library/functions.rst:23
msgid ":func:`map`"
msgstr ""

#: ../../../library/functions.rst:23
msgid ":func:`reversed`"
msgstr ""

#: ../../../library/functions.rst:23
msgid ":func:`__import__`"
msgstr ""

#: ../../../library/functions.rst:24
msgid ":func:`complex`"
msgstr ""

#: ../../../library/functions.rst:24
msgid ":func:`hasattr`"
msgstr ""

#: ../../../library/functions.rst:24
msgid ":func:`max`"
msgstr ""

#: ../../../library/functions.rst:24
msgid ":func:`round`"
msgstr ""

#: ../../../library/functions.rst:25
msgid ":func:`delattr`"
msgstr ""

#: ../../../library/functions.rst:25
msgid ":func:`hash`"
msgstr ""

#: ../../../library/functions.rst:25
msgid ":func:`memoryview`"
msgstr ""

#: ../../../library/functions.rst:25
msgid ":func:`set`"
msgstr ""

#: ../../../library/functions.rst:26
msgid ":func:`dict`"
msgstr ""

#: ../../../library/functions.rst:26
msgid ":func:`help`"
msgstr ""

#: ../../../library/functions.rst:26
msgid ":func:`min`"
msgstr ""

#: ../../../library/functions.rst:26
msgid ":func:`setattr`"
msgstr ""

#: ../../../library/functions.rst:31
msgid ""
"Return the absolute value of a number.  The argument may be an integer or a "
"floating point number.  If the argument is a complex number, its magnitude "
"is returned."
msgstr ""

#: ../../../library/functions.rst:38
msgid ""
"Return True if all elements of the *iterable* are true (or if the iterable "
"is empty).  Equivalent to::"
msgstr ""

#: ../../../library/functions.rst:41
msgid ""
"def all(iterable):\n"
"    for element in iterable:\n"
"        if not element:\n"
"            return False\n"
"    return True"
msgstr ""

#: ../../../library/functions.rst:50
msgid ""
"Return True if any element of the *iterable* is true.  If the iterable is "
"empty, return False.  Equivalent to::"
msgstr ""

#: ../../../library/functions.rst:53
msgid ""
"def any(iterable):\n"
"    for element in iterable:\n"
"        if element:\n"
"            return True\n"
"    return False"
msgstr ""

#: ../../../library/functions.rst:62
msgid ""
"As :func:`repr`, return a string containing a printable representation of an "
"object, but escape the non-ASCII characters in the string returned by :func:"
"`repr` using ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a string "
"similar to that returned by :func:`repr` in Python 2."
msgstr ""

#: ../../../library/functions.rst:70
msgid ""
"Convert an integer number to a binary string. The result is a valid Python "
"expression.  If *x* is not a Python :class:`int` object, it has to define "
"an :meth:`__index__` method that returns an integer."
msgstr ""

#: ../../../library/functions.rst:77
msgid ""
"Convert a value to a Boolean, using the standard truth testing procedure.  "
"If *x* is false or omitted, this returns :const:`False`; otherwise it "
"returns :const:`True`. :class:`bool` is also a class, which is a subclass "
"of :class:`int`. Class :class:`bool` cannot be subclassed further.  Its only "
"instances are :const:`False` and :const:`True`."
msgstr ""

#: ../../../library/functions.rst:88
msgid ""
"Return a new array of bytes.  The :class:`bytearray` type is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`bytes` type has, see :ref:`bytes-methods`."
msgstr ""

#: ../../../library/functions.rst:93
msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr ""

#: ../../../library/functions.rst:96
msgid ""
"If it is a *string*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the string to bytes "
"using :meth:`str.encode`."
msgstr ""

#: ../../../library/functions.rst:100
msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr ""

#: ../../../library/functions.rst:103
msgid ""
"If it is an object conforming to the *buffer* interface, a read-only buffer "
"of the object will be used to initialize the bytes array."
msgstr ""

#: ../../../library/functions.rst:106
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""

#: ../../../library/functions.rst:109
msgid "Without an argument, an array of size 0 is created."
msgstr ""

#: ../../../library/functions.rst:114
msgid ""
"Return a new \"bytes\" object, which is an immutable sequence of integers in "
"the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of :"
"class:`bytearray` -- it has the same non-mutating methods and the same "
"indexing and slicing behavior."
msgstr ""

#: ../../../library/functions.rst:119
msgid ""
"Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr ""

#: ../../../library/functions.rst:121
msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr ""

#: ../../../library/functions.rst:126
msgid ""
"Return the string representing a character whose Unicode codepoint is the "
"integer *i*.  For example, ``chr(97)`` returns the string ``'a'``. This is "
"the inverse of :func:`ord`.  The valid range for the argument is from 0 "
"through 1,114,111 (0x10FFFF in base 16).  :exc:`ValueError` will be raised "
"if *i* is outside that range."
msgstr ""

#: ../../../library/functions.rst:132
msgid ""
"Note that on narrow Unicode builds, the result is a string of length two for "
"*i* greater than 65,535 (0xFFFF in hexadecimal)."
msgstr ""

#: ../../../library/functions.rst:139
msgid "Return a class method for *function*."
msgstr ""

#: ../../../library/functions.rst:141
msgid ""
"A class method receives the class as implicit first argument, just like an "
"instance method receives the instance. To declare a class method, use this "
"idiom::"
msgstr ""

#: ../../../library/functions.rst:145
msgid ""
"class C:\n"
"    @classmethod\n"
"    def f(cls, arg1, arg2, ...): ..."
msgstr ""

#: ../../../library/functions.rst:149
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see the "
"description of function definitions in :ref:`function` for details."
msgstr ""

#: ../../../library/functions.rst:152
msgid ""
"It can be called either on the class (such as ``C.f()``) or on an instance "
"(such as ``C().f()``).  The instance is ignored except for its class. If a "
"class method is called for a derived class, the derived class object is "
"passed as the implied first argument."
msgstr ""

#: ../../../library/functions.rst:157
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod` in this section."
msgstr ""

#: ../../../library/functions.rst:160
msgid ""
"For more information on class methods, consult the documentation on the "
"standard type hierarchy in :ref:`types`."
msgstr ""

#: ../../../library/functions.rst:166
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by :func:`exec` or :func:`eval`.  *source* can either be a string "
"or an AST object.  Refer to the :mod:`ast` module documentation for "
"information on how to work with AST objects."
msgstr ""

#: ../../../library/functions.rst:171
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""

#: ../../../library/functions.rst:175
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""

#: ../../../library/functions.rst:181
msgid ""
"The optional arguments *flags* and *dont_inherit* control which future "
"statements (see :pep:`236`) affect the compilation of *source*.  If neither "
"is present (or both are zero) the code is compiled with those future "
"statements that are in effect in the code that is calling compile.  If the "
"*flags* argument is given and *dont_inherit* is not (or is zero) then the "
"future statements specified by the *flags* argument are used in addition to "
"those that would be used anyway. If *dont_inherit* is a non-zero integer "
"then the *flags* argument is it -- the future statements in effect around "
"the call to compile are ignored."
msgstr ""

#: ../../../library/functions.rst:191
msgid ""
"Future statements are specified by bits which can be bitwise ORed together "
"to specify multiple statements.  The bitfield required to specify a given "
"feature can be found as the :attr:`compiler_flag` attribute on the :class:"
"`_Feature` instance in the :mod:`__future__` module."
msgstr ""

#: ../../../library/functions.rst:196
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`TypeError` if the source contains null bytes."
msgstr ""

#: ../../../library/functions.rst:201
msgid ""
"When compiling a string with multi-line statements, line endings must be "
"represented by a single newline character (``'\\n'``), and the input must be "
"terminated by at least one newline character.  If line endings are "
"represented by ``'\\r\\n'``, use :meth:`str.replace` to change them into "
"``'\\n'``."
msgstr ""

#: ../../../library/functions.rst:210
msgid ""
"Create a complex number with the value *real* + *imag*\\*j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex). If *imag* is "
"omitted, it defaults to zero and the function serves as a numeric conversion "
"function like :func:`int` and :func:`float`.  If both arguments are omitted, "
"returns ``0j``."
msgstr ""

#: ../../../library/functions.rst:218
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../../library/functions.rst:223
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``."
msgstr ""

#: ../../../library/functions.rst:232
msgid ""
"Create a new data dictionary, optionally with items taken from *arg*. The "
"dictionary type is described in :ref:`typesmapping`."
msgstr ""

#: ../../../library/functions.rst:235
msgid ""
"For other containers see the built in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, and the :mod:`collections` module."
msgstr ""

#: ../../../library/functions.rst:241
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""

#: ../../../library/functions.rst:244
msgid ""
"If the object has a method named :meth:`__dir__`, this method will be called "
"and must return the list of attributes. This allows objects that implement a "
"custom :func:`__getattr__` or :func:`__getattribute__` function to customize "
"the way :func:`dir` reports their attributes."
msgstr ""

#: ../../../library/functions.rst:249
msgid ""
"If the object does not provide :meth:`__dir__`, the function tries its best "
"to gather information from the object's :attr:`__dict__` attribute, if "
"defined, and from its type object.  The resulting list is not necessarily "
"complete, and may be inaccurate when the object has a custom :func:"
"`__getattr__`."
msgstr ""

#: ../../../library/functions.rst:254
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""

#: ../../../library/functions.rst:258
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""

#: ../../../library/functions.rst:261
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""

#: ../../../library/functions.rst:264
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""

#: ../../../library/functions.rst:268
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr ""

#: ../../../library/functions.rst:287
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""

#: ../../../library/functions.rst:297
msgid ""
"Take two (non complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using integer division.  "
"With mixed operand types, the rules for binary arithmetic operators apply.  "
"For integers, the result is the same as ``(a // b, a % b)``. For floating "
"point numbers the result is ``(q, a % b)``, where *q* is usually ``math."
"floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a % b`` "
"is very close to *a*, if ``a % b`` is non-zero it has the same sign as *b*, "
"and ``0 <= abs(a % b) < abs(b)``."
msgstr ""

#: ../../../library/functions.rst:309
msgid ""
"Return an enumerate object. *iterable* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration.  The :meth:"
"`__next__` method of the iterator returned by :func:`enumerate` returns a "
"tuple containing a count (from *start* which defaults to 0) and the "
"corresponding value obtained from iterating over *iterable*. :func:"
"`enumerate` is useful for obtaining an indexed series: ``(0, seq[0])``, "
"``(1, seq[1])``, ``(2, seq[2])``, .... For example:"
msgstr ""

#: ../../../library/functions.rst:327
msgid ""
"The arguments are a string and optional globals and locals.  If provided, "
"*globals* must be a dictionary.  If provided, *locals* can be any mapping "
"object."
msgstr ""

#: ../../../library/functions.rst:331
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and lacks '__builtins__', the current globals are copied into "
"*globals* before *expression* is parsed.  This means that *expression* "
"normally has full access to the standard :mod:`builtins` module and "
"restricted environments are propagated.  If the *locals* dictionary is "
"omitted it defaults to the *globals* dictionary.  If both dictionaries are "
"omitted, the expression is executed in the environment where :func:`eval` is "
"called.  The return value is the result of the evaluated expression. Syntax "
"errors are reported as exceptions.  Example:"
msgstr ""

#: ../../../library/functions.rst:346
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*kind* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""

#: ../../../library/functions.rst:351
msgid ""
"Hints: dynamic execution of statements is supported by the :func:`exec` "
"function.  The :func:`globals` and :func:`locals` functions returns the "
"current global and local dictionary, respectively, which may be useful to "
"pass around for use by :func:`eval` or :func:`exec`."
msgstr ""

#: ../../../library/functions.rst:356
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""

#: ../../../library/functions.rst:362
msgid ""
"This function supports dynamic execution of Python code. *object* must be "
"either a string or a code object.  If it is a string, the string is parsed "
"as a suite of Python statements which is then executed (unless a syntax "
"error occurs). [#]_ If it is a code object, it is simply executed.  In all "
"cases, the code that's executed is expected to be valid as file input (see "
"the section \"File input\" in the Reference Manual). Be aware that the :"
"keyword:`return` and :keyword:`yield` statements may not be used outside of "
"function definitions even within the context of code passed to the :func:"
"`exec` function. The return value is ``None``."
msgstr ""

#: ../../../library/functions.rst:372
msgid ""
"In all cases, if the optional parts are omitted, the code is executed in the "
"current scope.  If only *globals* is provided, it must be a dictionary, "
"which will be used for both the global and the local variables.  If "
"*globals* and *locals* are given, they are used for the global and local "
"variables, respectively.  If provided, *locals* can be any mapping object."
msgstr ""

#: ../../../library/functions.rst:378
msgid ""
"If the *globals* dictionary does not contain a value for the key "
"``__builtins__``, a reference to the dictionary of the built-in module :mod:"
"`builtins` is inserted under that key.  That way you can control what "
"builtins are available to the executed code by inserting your own "
"``__builtins__`` dictionary into *globals* before passing it to :func:`exec`."
msgstr ""

#: ../../../library/functions.rst:386
msgid ""
"The built-in functions :func:`globals` and :func:`locals` return the current "
"global and local dictionary, respectively, which may be useful to pass "
"around for use as the second and third argument to :func:`exec`."
msgstr ""

#: ../../../library/functions.rst:392
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted. "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`exec` returns."
msgstr ""

#: ../../../library/functions.rst:400
msgid ""
"Construct an iterator from those elements of *iterable* for which *function* "
"returns true.  *iterable* may be either a sequence, a container which "
"supports iteration, or an iterator.  If *function* is ``None``, the identity "
"function is assumed, that is, all elements of *iterable* that are false are "
"removed."
msgstr ""

#: ../../../library/functions.rst:406
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to the generator "
"expression ``(item for item in iterable if function(item))`` if function is "
"not ``None`` and ``(item for item in iterable if item)`` if function is "
"``None``."
msgstr ""

#: ../../../library/functions.rst:411
msgid ""
"See :func:`itertools.filterfalse` for the complementary function that "
"returns elements of *iterable* for which *function* returns false."
msgstr ""

#: ../../../library/functions.rst:417
msgid ""
"Convert a string or a number to floating point.  If the argument is a "
"string, it must contain a possibly signed decimal or floating point number, "
"possibly embedded in whitespace. The argument may also be ``'[+|-]nan'`` or "
"``'[+|-]inf'``.  Otherwise, the argument may be an integer or a floating "
"point number, and a floating point number with the same value (within "
"Python's floating point precision) is returned.  If no argument is given, "
"``0.0`` is returned."
msgstr ""

#: ../../../library/functions.rst:431
msgid ""
"When passing in a string, values for NaN and Infinity may be returned, "
"depending on the underlying C library.  Float accepts the strings ``'nan'``, "
"``'inf'`` and ``'-inf'`` for NaN and positive or negative infinity.  The "
"case and a leading + are ignored as well as a leading - is ignored for NaN.  "
"Float always represents NaN and infinity as ``nan``, ``inf`` or ``-inf``."
msgstr ""

#: ../../../library/functions.rst:438
msgid "The float type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../../library/functions.rst:446
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument, however there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""

#: ../../../library/functions.rst:453
msgid ""
"``format(value, format_spec)`` merely calls ``value."
"__format__(format_spec)``."
msgstr ""

#: ../../../library/functions.rst:460
msgid ""
"Return a frozenset object, optionally with elements taken from *iterable*. "
"The frozenset type is described in :ref:`types-set`."
msgstr ""

#: ../../../library/functions.rst:463
msgid ""
"For other containers see the built in :class:`dict`, :class:`list`, and :"
"class:`tuple` classes, and the :mod:`collections` module."
msgstr ""

#: ../../../library/functions.rst:469
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised."
msgstr ""

#: ../../../library/functions.rst:478
msgid ""
"Return a dictionary representing the current global symbol table. This is "
"always the dictionary of the current module (inside a function or method, "
"this is the module where it is defined, not the module from which it is "
"called)."
msgstr ""

#: ../../../library/functions.rst:485
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an exception or not.)"
msgstr ""

#: ../../../library/functions.rst:493
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers. They are used to quickly compare dictionary keys during a "
"dictionary lookup. Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""

#: ../../../library/functions.rst:501
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""

#: ../../../library/functions.rst:508
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""

#: ../../../library/functions.rst:513
msgid ""
"Convert an integer number to a hexadecimal string. The result is a valid "
"Python expression.  If *x* is not a Python :class:`int` object, it has to "
"define an :meth:`__index__` method that returns an integer."
msgstr ""

#: ../../../library/functions.rst:519
msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr ""

#: ../../../library/functions.rst:525
msgid ""
"Return the \"identity\" of an object.  This is an integer which is "
"guaranteed to be unique and constant for this object during its lifetime. "
"Two objects with non-overlapping lifetimes may have the same :func:`id` "
"value."
msgstr ""

#: ../../../library/functions.rst:535
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that.  "
"When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""

#: ../../../library/functions.rst:540
msgid ""
">>> s = input('--> ')\n"
"--> Monty Python's Flying Circus\n"
">>> s\n"
"\"Monty Python's Flying Circus\""
msgstr ""

#: ../../../library/functions.rst:545
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""

#: ../../../library/functions.rst:551
msgid ""
"Convert a number or string to an integer.  If no arguments are given, return "
"``0``.  If a number is given, return ``number.__int__()``.  Conversion of "
"floating point numbers to integers truncates towards zero.  A string must be "
"a base-radix integer literal optionally preceded by '+' or '-' (with no "
"space in between) and optionally surrounded by whitespace.  A base-n literal "
"consists of the digits 0 to n-1, with 'a' to 'z' (or 'A' to 'Z') having "
"values 10 to 35.  The default *base* is 10. The allowed values are 0 and "
"2-36. Base-2, -8, and -16 literals can be optionally prefixed with ``0b``/"
"``0B``, ``0o``/``0O``, or ``0x``/``0X``, as with integer literals in code.  "
"Base 0 means to interpret exactly as a code literal, so that the actual base "
"is 2, 8, 10, or 16, and so that ``int('010', 0)`` is not legal, while "
"``int('010')`` is, as well as ``int('010', 8)``."
msgstr ""

#: ../../../library/functions.rst:564
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../../library/functions.rst:569
msgid ""
"Return true if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct or indirect) subclass thereof.  If *object* is not "
"an object of the given type, the function always returns false.  If "
"*classinfo* is not a class (type object), it may be a tuple of type objects, "
"or may recursively contain other such tuples (other sequence types are not "
"accepted).  If *classinfo* is not a type or tuple of types and such tuples, "
"a :exc:`TypeError` exception is raised."
msgstr ""

#: ../../../library/functions.rst:580
msgid ""
"Return true if *class* is a subclass (direct or indirect) of *classinfo*.  A "
"class is considered a subclass of itself. *classinfo* may be a tuple of "
"class objects, in which case every entry in *classinfo* will be checked. In "
"any other case, a :exc:`TypeError` exception is raised."
msgstr ""

#: ../../../library/functions.rst:588
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *object* must be a collection object which supports the "
"iteration protocol (the :meth:`__iter__` method), or it must support the "
"sequence protocol (the :meth:`__getitem__` method with integer arguments "
"starting at ``0``).  If it does not support either of those protocols, :exc:"
"`TypeError` is raised. If the second argument, *sentinel*, is given, then "
"*object* must be a callable object.  The iterator created in this case will "
"call *object* with no arguments for each call to its :meth:`__next__` "
"method; if the value returned is equal to *sentinel*, :exc:`StopIteration` "
"will be raised, otherwise the value will be returned."
msgstr ""

#: ../../../library/functions.rst:600
msgid ""
"One useful application of the second form of :func:`iter` is to read lines "
"of a file until a certain line is reached.  The following example reads a "
"file until ``\"STOP\"`` is reached: ::"
msgstr ""

#: ../../../library/functions.rst:604
msgid ""
"with open(\"mydata.txt\") as fp:\n"
"    for line in iter(fp.readline, \"STOP\"):\n"
"        process_line(line)"
msgstr ""

#: ../../../library/functions.rst:611
msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (string, tuple or list) or a mapping (dictionary)."
msgstr ""

#: ../../../library/functions.rst:617
msgid ""
"Return a list whose items are the same and in the same order as *iterable*'s "
"items.  *iterable* may be either a sequence, a container that supports "
"iteration, or an iterator object.  If *iterable* is already a list, a copy "
"is made and returned, similar to ``iterable[:]``.  For instance, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``. If no argument is given, returns a new empty list, "
"``[]``."
msgstr ""

#: ../../../library/functions.rst:624
msgid ""
":class:`list` is a mutable sequence type, as documented in :ref:`typesseq`."
msgstr ""

#: ../../../library/functions.rst:629
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks."
msgstr ""

#: ../../../library/functions.rst:634
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""

#: ../../../library/functions.rst:639
msgid ""
"Return an iterator that applies *function* to every item of *iterable*, "
"yielding the results.  If additional *iterable* arguments are passed, "
"*function* must take that many arguments and is applied to the items from "
"all iterables in parallel.  With multiple iterables, the iterator stops when "
"the shortest iterable is exhausted.  For cases where the function inputs are "
"already arranged into argument tuples, see :func:`itertools.starmap`\\."
msgstr ""

#: ../../../library/functions.rst:649
msgid ""
"With a single argument *iterable*, return the largest item of a non-empty "
"iterable (such as a string, tuple or list).  With more than one argument, "
"return the largest of the arguments."
msgstr ""

#: ../../../library/functions.rst:653 ../../../library/functions.rst:670
msgid ""
"The optional keyword-only *key* argument specifies a one-argument ordering "
"function like that used for :meth:`list.sort`."
msgstr ""

#: ../../../library/functions.rst:660
msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""

#: ../../../library/functions.rst:666
msgid ""
"With a single argument *iterable*, return the smallest item of a non-empty "
"iterable (such as a string, tuple or list).  With more than one argument, "
"return the smallest of the arguments."
msgstr ""

#: ../../../library/functions.rst:676
msgid ""
"Retrieve the next item from the *iterator* by calling its :meth:`__next__` "
"method.  If *default* is given, it is returned if the iterator is exhausted, "
"otherwise :exc:`StopIteration` is raised."
msgstr ""

#: ../../../library/functions.rst:683
msgid ""
"Return a new featureless object.  :class:`object` is a base for all classes. "
"It has the methods that are common to all instances of Python classes.  This "
"function does not accept any arguments."
msgstr ""

#: ../../../library/functions.rst:689
msgid ""
":class:`object` does *not* have a :attr:`__dict__`, so you can't assign "
"arbitrary attributes to an instance of the :class:`object` class."
msgstr ""

#: ../../../library/functions.rst:695
msgid ""
"Convert an integer number to an octal string.  The result is a valid Python "
"expression.  If *x* is not a Python :class:`int` object, it has to define "
"an :meth:`__index__` method that returns an integer."
msgstr ""

#: ../../../library/functions.rst:702
msgid ""
"Open *file* and return a corresponding stream.  If the file cannot be "
"opened, an :exc:`IOError` is raised."
msgstr ""

#: ../../../library/functions.rst:705
msgid ""
"*file* is either a string or bytes object giving the pathname (absolute or "
"relative to the current working directory) of the file to be opened or an "
"integer file descriptor of the file to be wrapped.  (If a file descriptor is "
"given, it is closed when the returned I/O object is closed, unless *closefd* "
"is set to ``False``.)"
msgstr ""

#: ../../../library/functions.rst:711
msgid ""
"*mode* is an optional string that specifies the mode in which the file is "
"opened.  It defaults to ``'r'`` which means open for reading in text mode. "
"Other common values are ``'w'`` for writing (truncating the file if it "
"already exists), and ``'a'`` for appending (which on *some* Unix systems, "
"means that *all* writes append to the end of the file regardless of the "
"current seek position).  In text mode, if *encoding* is not specified the "
"encoding used is platform dependent. (For reading and writing raw bytes use "
"binary mode and leave *encoding* unspecified.)  The available modes are:"
msgstr ""

#: ../../../library/functions.rst:721
msgid "Character"
msgstr ""

#: ../../../library/functions.rst:721
msgid "Meaning"
msgstr ""

#: ../../../library/functions.rst:723
msgid "``'r'``"
msgstr ""

#: ../../../library/functions.rst:723
msgid "open for reading (default)"
msgstr ""

#: ../../../library/functions.rst:724
msgid "``'w'``"
msgstr ""

#: ../../../library/functions.rst:724
msgid "open for writing, truncating the file first"
msgstr ""

#: ../../../library/functions.rst:725
msgid "``'a'``"
msgstr ""

#: ../../../library/functions.rst:725
msgid "open for writing, appending to the end of the file if it exists"
msgstr ""

#: ../../../library/functions.rst:726
msgid "``'b'``"
msgstr ""

#: ../../../library/functions.rst:726 ../../../library/functions.rst:819
msgid "binary mode"
msgstr ""

#: ../../../library/functions.rst:727
msgid "``'t'``"
msgstr ""

#: ../../../library/functions.rst:727
msgid "text mode (default)"
msgstr ""

#: ../../../library/functions.rst:728
msgid "``'+'``"
msgstr ""

#: ../../../library/functions.rst:728
msgid "open a disk file for updating (reading and writing)"
msgstr ""

#: ../../../library/functions.rst:729
msgid "``'U'``"
msgstr ""

#: ../../../library/functions.rst:729
msgid ""
"universal newline mode (for backwards compatibility; should not be used in "
"new code)"
msgstr ""

#: ../../../library/functions.rst:733
msgid ""
"The default mode is ``'r'`` (open for reading text, synonym of ``'rt'``). "
"For binary read-write access, the mode ``'w+b'`` opens and truncates the "
"file to 0 bytes.  ``'r+b'`` opens the file without truncation."
msgstr ""

#: ../../../library/functions.rst:737
msgid ""
"As mentioned in the :ref:`io-overview`, Python distinguishes between binary "
"and text I/O.  Files opened in binary mode (including ``'b'`` in the *mode* "
"argument) return contents as :class:`bytes` objects without any decoding.  "
"In text mode (the default, or when ``'t'`` is included in the *mode* "
"argument), the contents of the file are returned as :class:`str`, the bytes "
"having been first decoded using a platform-dependent encoding or using the "
"specified *encoding* if given."
msgstr ""

#: ../../../library/functions.rst:747
msgid ""
"Python doesn't depend on the underlying operating system's notion of text "
"files; all the the processing is done by Python itself, and is therefore "
"platform-independent."
msgstr ""

#: ../../../library/functions.rst:751
msgid ""
"*buffering* is an optional integer used to set the buffering policy.  Pass 0 "
"to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable in text mode), and an integer > 1 to indicate the "
"size of a fixed-size chunk buffer.  When no *buffering* argument is given, "
"the default buffering policy works as follows:"
msgstr ""

#: ../../../library/functions.rst:757
msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is "
"chosen using a heuristic trying to determine the underlying device's \"block "
"size\" and falling back on :attr:`io.DEFAULT_BUFFER_SIZE`.  On many systems, "
"the buffer will typically be 4096 or 8192 bytes long."
msgstr ""

#: ../../../library/functions.rst:762
msgid ""
"\"Interactive\" text files (files for which :meth:`isatty` returns True) use "
"line buffering.  Other text files use the policy described above for binary "
"files."
msgstr ""

#: ../../../library/functions.rst:766
msgid ""
"*encoding* is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode.  The default encoding is platform "
"dependent (whatever :func:`locale.getpreferredencoding` returns), but any "
"encoding supported by Python can be used.  See the :mod:`codecs` module for "
"the list of supported encodings."
msgstr ""

#: ../../../library/functions.rst:772
msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled--this cannot be used in binary mode.  Pass "
"``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding "
"error (the default of ``None`` has the same effect), or pass ``'ignore'`` to "
"ignore errors.  (Note that ignoring encoding errors can lead to data loss.) "
"``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted "
"where there is malformed data.  When writing, ``'xmlcharrefreplace'`` "
"(replace with the appropriate XML character reference) or "
"``'backslashreplace'`` (replace with backslashed escape sequences) can be "
"used.  Any other error handling name that has been registered with :func:"
"`codecs.register_error` is also valid."
msgstr ""

#: ../../../library/functions.rst:784
msgid ""
"*newline* controls how universal newlines works (it only applies to text "
"mode).  It can be ``None``, ``''``, ``'\\n'``, ``'\\r'``, and ``'\\r\\n'``.  "
"It works as follows:"
msgstr ""

#: ../../../library/functions.rst:788
msgid ""
"On input, if *newline* is ``None``, universal newlines mode is enabled. "
"Lines in the input can end in ``'\\n'``, ``'\\r'``, or ``'\\r\\n'``, and "
"these are translated into ``'\\n'`` before being returned to the caller.  If "
"it is ``''``, universal newline mode is enabled, but line endings are "
"returned to the caller untranslated.  If it has any of the other legal "
"values, input lines are only terminated by the given string, and the line "
"ending is returned to the caller untranslated."
msgstr ""

#: ../../../library/functions.rst:796
msgid ""
"On output, if *newline* is ``None``, any ``'\\n'`` characters written are "
"translated to the system default line separator, :data:`os.linesep`.  If "
"*newline* is ``''``, no translation takes place.  If *newline* is any of the "
"other legal values, any ``'\\n'`` characters written are translated to the "
"given string."
msgstr ""

#: ../../../library/functions.rst:802
msgid ""
"If *closefd* is ``False`` and a file descriptor rather than a filename was "
"given, the underlying file descriptor will be kept open when the file is "
"closed.  If a filename is given *closefd* has no effect and must be ``True`` "
"(the default)."
msgstr ""

#: ../../../library/functions.rst:807
msgid ""
"The type of file object returned by the :func:`open` function depends on the "
"mode.  When :func:`open` is used to open a file in a text mode (``'w'``, "
"``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :class:`io."
"TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used to open a "
"file in a binary mode with buffering, the returned class is a subclass of :"
"class:`io.BufferedIOBase`.  The exact class varies: in read binary mode, it "
"returns a :class:`io.BufferedReader`; in write binary and append binary "
"modes, it returns a :class:`io.BufferedWriter`, and in read/write mode, it "
"returns a :class:`io.BufferedRandom`.  When buffering is disabled, the raw "
"stream, a subclass of :class:`io.RawIOBase`, :class:`io.FileIO`, is returned."
msgstr ""

#: ../../../library/functions.rst:828
msgid ""
"See also the file handling modules, such as, :mod:`fileinput`, :mod:`io` "
"(where :func:`open` is declared), :mod:`os`, :mod:`os.path`, :mod:"
"`tempfile`, and :mod:`shutil`."
msgstr ""

#: ../../../library/functions.rst:836
msgid ""
"Given a string representing one Uncicode character, return an integer "
"representing the Unicode code point of that character.  For example, "
"``ord('a')`` returns the integer ``97`` and ``ord('\\u2020')`` returns "
"``8224``.  This is the inverse of :func:`chr`."
msgstr ""

#: ../../../library/functions.rst:841
msgid ""
"On wide Unicode builds, if the argument length is not one, a :exc:"
"`TypeError` will be raised.  On narrow Unicode builds, strings of length two "
"are accepted when they form a UTF-16 surrogate pair."
msgstr ""

#: ../../../library/functions.rst:847
msgid ""
"Return *x* to the power *y*; if *z* is present, return *x* to the power *y*, "
"modulo *z* (computed more efficiently than ``pow(x, y) % z``). The two-"
"argument form ``pow(x, y)`` is equivalent to using the power operator: "
"``x**y``."
msgstr ""

#: ../../../library/functions.rst:851
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For :class:`int` "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``10**2`` "
"returns ``100``, but ``10**-2`` returns ``0.01``.  If the second argument is "
"negative, the third argument must be omitted.  If *z* is present, *x* and "
"*y* must be of integer types, and *y* must be non-negative."
msgstr ""

#: ../../../library/functions.rst:863
msgid ""
"Print *object*\\(s) to the stream *file*, separated by *sep* and followed by "
"*end*.  *sep*, *end* and *file*, if present, must be given as keyword "
"arguments."
msgstr ""

#: ../../../library/functions.rst:867
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *object* is given, :func:`print` will just write "
"*end*."
msgstr ""

#: ../../../library/functions.rst:873
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used."
msgstr ""

#: ../../../library/functions.rst:879
msgid "Return a property attribute."
msgstr ""

#: ../../../library/functions.rst:881
msgid ""
"*fget* is a function for getting an attribute value, likewise *fset* is a "
"function for setting, and *fdel* a function for del'ing, an attribute.  "
"Typical use is to define a managed attribute ``x``::"
msgstr ""

#: ../../../library/functions.rst:885
msgid ""
"class C:\n"
"    def __init__(self):\n"
"        self._x = None\n"
"\n"
"    def getx(self):\n"
"        return self._x\n"
"    def setx(self, value):\n"
"        self._x = value\n"
"    def delx(self):\n"
"        del self._x\n"
"    x = property(getx, setx, delx, \"I'm the 'x' property.\")"
msgstr ""

#: ../../../library/functions.rst:897
msgid ""
"If then *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter and ``del c.x`` the deleter."
msgstr ""

#: ../../../library/functions.rst:900
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""

#: ../../../library/functions.rst:904
msgid ""
"class Parrot:\n"
"    def __init__(self):\n"
"        self._voltage = 100000\n"
"\n"
"    @property\n"
"    def voltage(self):\n"
"        \"\"\"Get the current voltage.\"\"\"\n"
"        return self._voltage"
msgstr ""

#: ../../../library/functions.rst:913
msgid ""
"turns the :meth:`voltage` method into a \"getter\" for a read-only attribute "
"with the same name."
msgstr ""

#: ../../../library/functions.rst:916
msgid ""
"A property object has :attr:`getter`, :attr:`setter`, and :attr:`deleter` "
"methods usable as decorators that create a copy of the property with the "
"corresponding accessor function set to the decorated function.  This is best "
"explained with an example::"
msgstr ""

#: ../../../library/functions.rst:921
msgid ""
"class C:\n"
"    def __init__(self):\n"
"        self._x = None\n"
"\n"
"    @property\n"
"    def x(self):\n"
"        \"\"\"I'm the 'x' property.\"\"\"\n"
"        return self._x\n"
"\n"
"    @x.setter\n"
"    def x(self, value):\n"
"        self._x = value\n"
"\n"
"    @x.deleter\n"
"    def x(self):\n"
"        del self._x"
msgstr ""

#: ../../../library/functions.rst:938
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""

#: ../../../library/functions.rst:942
msgid ""
"The returned property also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""

#: ../../../library/functions.rst:949
msgid ""
"This is a versatile function to create iterables yielding arithmetic "
"progressions.  It is most often used in :keyword:`for` loops.  The arguments "
"must be integers.  If the *step* argument is omitted, it defaults to ``1``. "
"If the *start* argument is omitted, it defaults to ``0``.  The full form "
"returns an iterable of integers ``[start, start + step, start + 2 * "
"step, ...]``.  If *step* is positive, the last element is the largest "
"``start + i * step`` less than *stop*; if *step* is negative, the last "
"element is the smallest ``start + i * step`` greater than *stop*.  *step* "
"must not be zero (or else :exc:`ValueError` is raised).  Example:"
msgstr ""

#: ../../../library/functions.rst:977
msgid ""
"Return a string containing a printable representation of an object.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`, otherwise "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`__repr__` method."
msgstr ""

#: ../../../library/functions.rst:988
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`__reversed__` method or supports the sequence protocol (the :meth:"
"`__len__` method and the :meth:`__getitem__` method with integer arguments "
"starting at ``0``)."
msgstr ""

#: ../../../library/functions.rst:996
msgid ""
"Return the floating point value *x* rounded to *n* digits after the decimal "
"point.  If *n* is omitted, it defaults to zero.  Delegates to ``x."
"__round__(n)``."
msgstr ""

#: ../../../library/functions.rst:1000
msgid ""
"For the built-in types supporting :func:`round`, values are rounded to the "
"closest multiple of 10 to the power minus *n*; if two multiples are equally "
"close, rounding is done toward the even choice (so, for example, both "
"``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is ``2``). "
"The return value is an integer if called with one argument, otherwise of the "
"same type as *x*."
msgstr ""

#: ../../../library/functions.rst:1009
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""

#: ../../../library/functions.rst:1018
msgid ""
"Return a new set, optionally with elements taken from *iterable*. The set "
"type is described in :ref:`types-set`."
msgstr ""

#: ../../../library/functions.rst:1024
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string and an arbitrary value.  The string may name an existing attribute or "
"a new attribute.  The function assigns the value to the attribute, provided "
"the object allows it.  For example, ``setattr(x, 'foobar', 123)`` is "
"equivalent to ``x.foobar = 123``."
msgstr ""

#: ../../../library/functions.rst:1035
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``.  Slice objects have read-only data attributes :attr:`start`, :attr:"
"`stop` and :attr:`step` which merely return the argument values (or their "
"default).  They have no other explicit functionality; however they are used "
"by Numerical Python and other third party extensions.  Slice objects are "
"also generated when extended indexing syntax is used.  For example: "
"``a[start:stop:step]`` or ``a[start:stop, i]``.  See :func:`itertools."
"islice` for an alternate version that returns an iterator."
msgstr ""

#: ../../../library/functions.rst:1048
msgid "Return a new sorted list from the items in *iterable*."
msgstr ""

#: ../../../library/functions.rst:1050
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""

#: ../../../library/functions.rst:1052
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element: ``key=str.lower``.  The default value "
"is ``None``."
msgstr ""

#: ../../../library/functions.rst:1055
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""

#: ../../../library/functions.rst:1058
msgid ""
"To convert an old-style *cmp* function to a *key* function, see the "
"`CmpToKey recipe in the ASPN cookbook <http://code.activestate.com/"
"recipes/576653/>`_\\."
msgstr ""

#: ../../../library/functions.rst:1062
msgid ""
"For sorting examples and a brief sorting tutorial, see `Sorting HowTo "
"<http://wiki.python.org/moin/HowTo/Sorting/>`_\\."
msgstr ""

#: ../../../library/functions.rst:1067
msgid "Return a static method for *function*."
msgstr ""

#: ../../../library/functions.rst:1069
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""

#: ../../../library/functions.rst:1072
msgid ""
"class C:\n"
"    @staticmethod\n"
"    def f(arg1, arg2, ...): ..."
msgstr ""

#: ../../../library/functions.rst:1076
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see the "
"description of function definitions in :ref:`function` for details."
msgstr ""

#: ../../../library/functions.rst:1079
msgid ""
"It can be called either on the class (such as ``C.f()``) or on an instance "
"(such as ``C().f()``).  The instance is ignored except for its class."
msgstr ""

#: ../../../library/functions.rst:1082
msgid ""
"Static methods in Python are similar to those found in Java or C++. For a "
"more advanced concept, see :func:`classmethod` in this section."
msgstr ""

#: ../../../library/functions.rst:1085
msgid ""
"For more information on static methods, consult the documentation on the "
"standard type hierarchy in :ref:`types`."
msgstr ""

#: ../../../library/functions.rst:1091
msgid "Return a string version of an object, using one of the following modes:"
msgstr ""

#: ../../../library/functions.rst:1093
msgid ""
"If *encoding* and/or *errors* are given, :func:`str` will decode the "
"*object* which can either be a byte string or a character buffer using the "
"codec for *encoding*. The *encoding* parameter is a string giving the name "
"of an encoding; if the encoding is not known, :exc:`LookupError` is raised.  "
"Error handling is done according to *errors*; this specifies the treatment "
"of characters which are invalid in the input encoding. If *errors* is "
"``'strict'`` (the default), a :exc:`ValueError` is raised on errors, while a "
"value of ``'ignore'`` causes errors to be silently ignored, and a value of "
"``'replace'`` causes the official Unicode replacement character, U+FFFD, to "
"be used to replace input characters which cannot be decoded. See also the :"
"mod:`codecs` module."
msgstr ""

#: ../../../library/functions.rst:1105
msgid ""
"When only *object* is given, this returns its nicely printable "
"representation. For strings, this is the string itself.  The difference with "
"``repr(object)`` is that ``str(object)`` does not always attempt to return a "
"string that is acceptable to :func:`eval`; its goal is to return a printable "
"string. With no arguments, this returns the empty string."
msgstr ""

#: ../../../library/functions.rst:1111
msgid ""
"Objects can specify what ``str(object)`` returns by defining a :meth:"
"`__str__` special method."
msgstr ""

#: ../../../library/functions.rst:1114
msgid ""
"For more information on strings see :ref:`typesseq` which describes sequence "
"functionality (strings are sequences), and also the string-specific methods "
"described in the :ref:`string-methods` section. To output formatted strings, "
"see the :ref:`string-formatting` section. In addition see the :ref:"
"`stringservices` section."
msgstr ""

#: ../../../library/functions.rst:1123
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  *start* defaults to ``0``. The *iterable*'s items are normally "
"numbers, and the start value is not allowed to be a string."
msgstr ""

#: ../../../library/functions.rst:1127
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""

#: ../../../library/functions.rst:1135
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class. The search order is same as that used by :func:"
"`getattr` except that the *type* itself is skipped."
msgstr ""

#: ../../../library/functions.rst:1140
msgid ""
"The :attr:`__mro__` attribute of the *type* lists the method resolution "
"search order used by both :func:`getattr` and :func:`super`.  The attribute "
"is dynamic and can change whenever the inheritance hierarchy is updated."
msgstr ""

#: ../../../library/functions.rst:1144
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""

#: ../../../library/functions.rst:1149
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""

#: ../../../library/functions.rst:1154
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"this method have the same calling signature in every case (because the order "
"of calls is determined at runtime, because that order adapts to changes in "
"the class hierarchy, and because that order can include sibling classes that "
"are unknown prior to runtime)."
msgstr ""

#: ../../../library/functions.rst:1164
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""

#: ../../../library/functions.rst:1166
msgid ""
"class C(B):\n"
"    def method(self, arg):\n"
"        super().method(arg)    # This does the same thing as:\n"
"                               # super(C, self).method(arg)"
msgstr ""

#: ../../../library/functions.rst:1171
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""

#: ../../../library/functions.rst:1178
msgid ""
"Also note that :func:`super` is not limited to use inside methods.  The two "
"argument form specifies the arguments exactly and makes the appropriate "
"references.  The zero argument form automatically searches the stack frame "
"for the class (``__class__``) and the first argument."
msgstr ""

#: ../../../library/functions.rst:1186
msgid ""
"Return a tuple whose items are the same and in the same order as "
"*iterable*'s items.  *iterable* may be a sequence, a container that supports "
"iteration, or an iterator object. If *iterable* is already a tuple, it is "
"returned unchanged. For instance, ``tuple('abc')`` returns ``('a', 'b', "
"'c')`` and ``tuple([1, 2, 3])`` returns ``(1, 2, 3)``.  If no argument is "
"given, returns a new empty tuple, ``()``."
msgstr ""

#: ../../../library/functions.rst:1193
msgid ""
":class:`tuple` is an immutable sequence type, as documented in :ref:"
"`typesseq`."
msgstr ""

#: ../../../library/functions.rst:1200
msgid ""
"Return the type of an *object*.  The return value is a type object and "
"generally the same object as returned by ``object.__class__``."
msgstr ""

#: ../../../library/functions.rst:1203
msgid ""
"The :func:`isinstance` built-in function is recommended for testing the type "
"of an object, because it takes subclasses into account."
msgstr ""

#: ../../../library/functions.rst:1206
msgid ""
"With three arguments, :func:`type` functions as a constructor as detailed "
"below."
msgstr ""

#: ../../../library/functions.rst:1213
msgid ""
"Return a new type object.  This is essentially a dynamic form of the :"
"keyword:`class` statement. The *name* string is the class name and becomes "
"the :attr:`__name__` attribute; the *bases* tuple itemizes the base classes "
"and becomes the :attr:`__bases__` attribute; and the *dict* dictionary is "
"the namespace containing definitions for class body and becomes the :attr:"
"`__dict__` attribute.  For example, the following two statements create "
"identical :class:`type` objects:"
msgstr ""

#: ../../../library/functions.rst:1229
msgid "Without an argument, act like :func:`locals`."
msgstr ""

#: ../../../library/functions.rst:1231
msgid ""
"With a module, class or class instance object as argument (or anything else "
"that has a :attr:`__dict__` attribute), return that attribute."
msgstr ""

#: ../../../library/functions.rst:1235
msgid ""
"The returned dictionary should not be modified: the effects on the "
"corresponding symbol table are undefined. [#]_"
msgstr ""

#: ../../../library/functions.rst:1240
msgid "Make an iterator that aggregates elements from each of the iterables."
msgstr ""

#: ../../../library/functions.rst:1242
msgid ""
"Returns an iterator of tuples, where the *i*-th tuple contains the *i*-th "
"element from each of the argument sequences or iterables.  The iterator "
"stops when the shortest input iterable is exhausted. With a single iterable "
"argument, it returns an iterator of 1-tuples.  With no arguments, it returns "
"an empty iterator.  Equivalent to::"
msgstr ""

#: ../../../library/functions.rst:1248
msgid ""
"def zip(*iterables):\n"
"    # zip('ABCD', 'xy') --> Ax By\n"
"    sentinel = object()\n"
"    iterables = [iter(it) for it in iterables]\n"
"    while iterables:\n"
"        result = []\n"
"        for it in iterables:\n"
"            elem = next(it, sentinel)\n"
"            if elem is sentinel:\n"
"                return\n"
"            result.append(elem)\n"
"        yield tuple(result)"
msgstr ""

#: ../../../library/functions.rst:1261
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n)``."
msgstr ""

#: ../../../library/functions.rst:1265
msgid ""
":func:`zip` should only be used with unequal length inputs when you don't "
"care about trailing, unmatched values from the longer iterables.  If those "
"values are important, use :func:`itertools.zip_longest` instead."
msgstr ""

#: ../../../library/functions.rst:1269
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""

#: ../../../library/functions.rst:1272
msgid ""
">>> x = [1, 2, 3]\n"
">>> y = [4, 5, 6]\n"
">>> zipped = zip(x, y)\n"
">>> list(zipped)\n"
"[(1, 4), (2, 5), (3, 6)]\n"
">>> x2, y2 = zip(*zip(x, y))\n"
">>> x == list(x2) and y == list(y2)\n"
"True"
msgstr ""

#: ../../../library/functions.rst:1290
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming."
msgstr ""

#: ../../../library/functions.rst:1293
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`builtins` module and assigning to "
"``builtins.__import__``) in order to change semantics of the :keyword:"
"`import` statement, but nowadays it is usually simpler to use import hooks "
"(see :pep:`302`).  Direct use of :func:`__import__` is rare, except in cases "
"where you want to import a module whose name is only known at runtime."
msgstr ""

#: ../../../library/functions.rst:1300
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all, and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""

#: ../../../library/functions.rst:1307
msgid ""
"*level* specifies whether to use absolute or relative imports. ``0`` (the "
"default) means only perform absolute imports.  Positive values for *level* "
"indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__`."
msgstr ""

#: ../../../library/functions.rst:1312
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""

#: ../../../library/functions.rst:1317
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""

#: ../../../library/functions.rst:1320
msgid "spam = __import__('spam', globals(), locals(), [], 0)"
msgstr ""

#: ../../../library/functions.rst:1322
msgid "The statement ``import spam.ham`` results in this call::"
msgstr ""

#: ../../../library/functions.rst:1324
msgid "spam = __import__('spam.ham', globals(), locals(), [], 0)"
msgstr ""

#: ../../../library/functions.rst:1326
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""

#: ../../../library/functions.rst:1329
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""

#: ../../../library/functions.rst:1332
msgid ""
"_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)\n"
"eggs = _temp.eggs\n"
"saus = _temp.sausage"
msgstr ""

#: ../../../library/functions.rst:1336
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""

#: ../../../library/functions.rst:1340
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, you can call :func:`__import__` and then look it up in :data:`sys."
"modules`::"
msgstr ""

#: ../../../library/functions.rst:1343
msgid ""
">>> import sys\n"
">>> name = 'foo.bar.baz'\n"
">>> __import__(name)\n"
"<module 'foo' from ...>\n"
">>> baz = sys.modules[name]\n"
">>> baz\n"
"<module 'foo.bar.baz' from ...>"
msgstr ""

#: ../../../library/functions.rst:1352
msgid "Footnotes"
msgstr ""

#: ../../../library/functions.rst:1353
msgid ""
"Note that the parser only accepts the Unix-style end of line convention. If "
"you are reading the code from a file, make sure to use newline conversion "
"mode to convert Windows or Mac-style newlines."
msgstr ""

#: ../../../library/functions.rst:1357
msgid ""
"In the current implementation, local variable bindings cannot normally be "
"affected this way, but variables retrieved from other scopes (such as "
"modules) can be.  This may change."
msgstr ""

#: ../../../library/functions.rst:83
msgid "Boolean"
msgstr ""

#: ../../../library/functions.rst:83 ../../../library/functions.rst:1198
msgid "type"
msgstr ""

#: ../../../library/functions.rst:427
msgid "NaN"
msgstr ""

#: ../../../library/functions.rst:427
msgid "Infinity"
msgstr ""

#: ../../../library/functions.rst:442
msgid "str"
msgstr ""

#: ../../../library/functions.rst:442
msgid "format"
msgstr ""

#: ../../../library/functions.rst:442
msgid "__format__"
msgstr ""

#: ../../../library/functions.rst:819
msgid "line-buffered I/O"
msgstr ""

#: ../../../library/functions.rst:819
msgid "unbuffered I/O"
msgstr ""

#: ../../../library/functions.rst:819
msgid "buffer size, I/O"
msgstr ""

#: ../../../library/functions.rst:819
msgid "I/O control"
msgstr ""

#: ../../../library/functions.rst:819
msgid "buffering"
msgstr ""

#: ../../../library/functions.rst:819
msgid "text mode"
msgstr ""

#: ../../../library/functions.rst:819
msgid "sys"
msgstr ""

#: ../../../library/functions.rst:1033
msgid "Numerical Python"
msgstr ""

#: ../../../library/functions.rst:1284
msgid "import"
msgstr ""

#: ../../../library/functions.rst:1284
msgid "imp"
msgstr ""
