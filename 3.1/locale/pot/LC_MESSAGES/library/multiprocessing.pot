# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/multiprocessing.rst:2
msgid ":mod:`multiprocessing` --- Process-based parallelism"
msgstr ""

#: ../../../library/multiprocessing.rst:9
msgid "Introduction"
msgstr ""

#: ../../../library/multiprocessing.rst:11
msgid ""
":mod:`multiprocessing` is a package that supports spawning processes using "
"an API similar to the :mod:`threading` module.  The :mod:`multiprocessing` "
"package offers both local and remote concurrency, effectively side-stepping "
"the :term:`Global Interpreter Lock` by using subprocesses instead of "
"threads.  Due to this, the :mod:`multiprocessing` module allows the "
"programmer to fully leverage multiple processors on a given machine.  It "
"runs on both Unix and Windows."
msgstr ""

#: ../../../library/multiprocessing.rst:21
msgid ""
"Some of this package's functionality requires a functioning shared semaphore "
"implementation on the host operating system. Without one, the :mod:"
"`multiprocessing.synchronize` module will be disabled, and attempts to "
"import it will result in an :exc:`ImportError`. See :issue:`3770` for "
"additional information."
msgstr ""

#: ../../../library/multiprocessing.rst:29
msgid ""
"Functionality within this package requires that the ``__main__`` module be "
"importable by the children. This is covered in :ref:`multiprocessing-"
"programming` however it is worth pointing out here. This means that some "
"examples, such as the :class:`multiprocessing.Pool` examples will not work "
"in the interactive interpreter. For example::"
msgstr ""

#: ../../../library/multiprocessing.rst:51
msgid ""
"(If you try this it will actually output three full tracebacks interleaved "
"in a semi-random fashion, and then you may have to stop the master process "
"somehow.)"
msgstr ""

#: ../../../library/multiprocessing.rst:57
msgid "The :class:`Process` class"
msgstr ""

#: ../../../library/multiprocessing.rst:59
msgid ""
"In :mod:`multiprocessing`, processes are spawned by creating a :class:"
"`Process` object and then calling its :meth:`~Process.start` method.  :class:"
"`Process` follows the API of :class:`threading.Thread`.  A trivial example "
"of a multiprocess program is ::"
msgstr ""

#: ../../../library/multiprocessing.rst:74
msgid ""
"To show the individual process IDs involved, here is an expanded example::"
msgstr ""

#: ../../../library/multiprocessing.rst:95
msgid ""
"For an explanation of why (on Windows) the ``if __name__ == '__main__'`` "
"part is necessary, see :ref:`multiprocessing-programming`."
msgstr ""

#: ../../../library/multiprocessing.rst:101
msgid "Exchanging objects between processes"
msgstr ""

#: ../../../library/multiprocessing.rst:103
msgid ""
":mod:`multiprocessing` supports two types of communication channel between "
"processes:"
msgstr ""

#: ../../../library/multiprocessing.rst:106
msgid "**Queues**"
msgstr ""

#: ../../../library/multiprocessing.rst:108
msgid ""
"The :class:`Queue` class is a near clone of :class:`queue.Queue`.  For "
"example::"
msgstr ""

#: ../../../library/multiprocessing.rst:123
msgid "Queues are thread and process safe."
msgstr ""

#: ../../../library/multiprocessing.rst:125
msgid "**Pipes**"
msgstr ""

#: ../../../library/multiprocessing.rst:127
msgid ""
"The :func:`Pipe` function returns a pair of connection objects connected by "
"a pipe which by default is duplex (two-way).  For example::"
msgstr ""

#: ../../../library/multiprocessing.rst:143
msgid ""
"The two connection objects returned by :func:`Pipe` represent the two ends "
"of the pipe.  Each connection object has :meth:`~Connection.send` and :meth:"
"`~Connection.recv` methods (among others).  Note that data in a pipe may "
"become corrupted if two processes (or threads) try to read from or write to "
"the *same* end of the pipe at the same time.  Of course there is no risk of "
"corruption from processes using different ends of the pipe at the same time."
msgstr ""

#: ../../../library/multiprocessing.rst:153
msgid "Synchronization between processes"
msgstr ""

#: ../../../library/multiprocessing.rst:155
msgid ""
":mod:`multiprocessing` contains equivalents of all the synchronization "
"primitives from :mod:`threading`.  For instance one can use a lock to ensure "
"that only one process prints to standard output at a time::"
msgstr ""

#: ../../../library/multiprocessing.rst:172
msgid ""
"Without using the lock output from the different processes is liable to get "
"all mixed up."
msgstr ""

#: ../../../library/multiprocessing.rst:177
msgid "Sharing state between processes"
msgstr ""

#: ../../../library/multiprocessing.rst:179
msgid ""
"As mentioned above, when doing concurrent programming it is usually best to "
"avoid using shared state as far as possible.  This is particularly true when "
"using multiple processes."
msgstr ""

#: ../../../library/multiprocessing.rst:183
msgid ""
"However, if you really do need to use some shared data then :mod:"
"`multiprocessing` provides a couple of ways of doing so."
msgstr ""

#: ../../../library/multiprocessing.rst:186
msgid "**Shared memory**"
msgstr ""

#: ../../../library/multiprocessing.rst:188
msgid ""
"Data can be stored in a shared memory map using :class:`Value` or :class:"
"`Array`.  For example, the following code ::"
msgstr ""

#: ../../../library/multiprocessing.rst:209
#: ../../../library/multiprocessing.rst:256
msgid "will print ::"
msgstr ""

#: ../../../library/multiprocessing.rst:214
msgid ""
"The ``'d'`` and ``'i'`` arguments used when creating ``num`` and ``arr`` are "
"typecodes of the kind used by the :mod:`array` module: ``'d'`` indicates a "
"double precision float and ``'i'`` indicates a signed integer.  These shared "
"objects will be process and thread-safe."
msgstr ""

#: ../../../library/multiprocessing.rst:219
msgid ""
"For more flexibility in using shared memory one can use the :mod:"
"`multiprocessing.sharedctypes` module which supports the creation of "
"arbitrary ctypes objects allocated from shared memory."
msgstr ""

#: ../../../library/multiprocessing.rst:223
msgid "**Server process**"
msgstr ""

#: ../../../library/multiprocessing.rst:225
msgid ""
"A manager object returned by :func:`Manager` controls a server process which "
"holds Python objects and allows other processes to manipulate them using "
"proxies."
msgstr ""

#: ../../../library/multiprocessing.rst:229
msgid ""
"A manager returned by :func:`Manager` will support types :class:`list`, :"
"class:`dict`, :class:`Namespace`, :class:`Lock`, :class:`RLock`, :class:"
"`Semaphore`, :class:`BoundedSemaphore`, :class:`Condition`, :class:`Event`, :"
"class:`Queue`, :class:`Value` and :class:`Array`.  For example, ::"
msgstr ""

#: ../../../library/multiprocessing.rst:261
msgid ""
"Server process managers are more flexible than using shared memory objects "
"because they can be made to support arbitrary object types.  Also, a single "
"manager can be shared by processes on different computers over a network. "
"They are, however, slower than using shared memory."
msgstr ""

#: ../../../library/multiprocessing.rst:268
msgid "Using a pool of workers"
msgstr ""

#: ../../../library/multiprocessing.rst:270
msgid ""
"The :class:`~multiprocessing.pool.Pool` class represents a pool of worker "
"processes.  It has methods which allows tasks to be offloaded to the worker "
"processes in a few different ways."
msgstr ""

#: ../../../library/multiprocessing.rst:274
msgid "For example::"
msgstr ""

#: ../../../library/multiprocessing.rst:289
msgid "Reference"
msgstr ""

#: ../../../library/multiprocessing.rst:291
msgid ""
"The :mod:`multiprocessing` package mostly replicates the API of the :mod:"
"`threading` module."
msgstr ""

#: ../../../library/multiprocessing.rst:296
msgid ":class:`Process` and exceptions"
msgstr ""

#: ../../../library/multiprocessing.rst:300
msgid ""
"Process objects represent activity that is run in a separate process. The :"
"class:`Process` class has equivalents of all the methods of :class:"
"`threading.Thread`."
msgstr ""

#: ../../../library/multiprocessing.rst:304
msgid ""
"The constructor should always be called with keyword arguments. *group* "
"should always be ``None``; it exists solely for compatibility with :class:"
"`threading.Thread`.  *target* is the callable object to be invoked by the :"
"meth:`run()` method.  It defaults to ``None``, meaning nothing is called. "
"*name* is the process name.  By default, a unique name is constructed of the "
"form 'Process-N\\ :sub:`1`:N\\ :sub:`2`:...:N\\ :sub:`k`' where N\\ :sub:`1`,"
"N\\ :sub:`2`,...,N\\ :sub:`k` is a sequence of integers whose length is "
"determined by the *generation* of the process.  *args* is the argument tuple "
"for the target invocation.  *kwargs* is a dictionary of keyword arguments "
"for the target invocation.  By default, no arguments are passed to *target*."
msgstr ""

#: ../../../library/multiprocessing.rst:316
msgid ""
"If a subclass overrides the constructor, it must make sure it invokes the "
"base class constructor (:meth:`Process.__init__`) before doing anything else "
"to the process."
msgstr ""

#: ../../../library/multiprocessing.rst:322
msgid "Method representing the process's activity."
msgstr ""

#: ../../../library/multiprocessing.rst:324
msgid ""
"You may override this method in a subclass.  The standard :meth:`run` method "
"invokes the callable object passed to the object's constructor as the target "
"argument, if any, with sequential and keyword arguments taken from the "
"*args* and *kwargs* arguments, respectively."
msgstr ""

#: ../../../library/multiprocessing.rst:331
msgid "Start the process's activity."
msgstr ""

#: ../../../library/multiprocessing.rst:333
msgid ""
"This must be called at most once per process object.  It arranges for the "
"object's :meth:`run` method to be invoked in a separate process."
msgstr ""

#: ../../../library/multiprocessing.rst:338
msgid ""
"Block the calling thread until the process whose :meth:`join` method is "
"called terminates or until the optional timeout occurs."
msgstr ""

#: ../../../library/multiprocessing.rst:341
msgid "If *timeout* is ``None`` then there is no timeout."
msgstr ""

#: ../../../library/multiprocessing.rst:343
msgid "A process can be joined many times."
msgstr ""

#: ../../../library/multiprocessing.rst:345
msgid ""
"A process cannot join itself because this would cause a deadlock.  It is an "
"error to attempt to join a process before it has been started."
msgstr ""

#: ../../../library/multiprocessing.rst:350
msgid "The process's name."
msgstr ""

#: ../../../library/multiprocessing.rst:352
msgid ""
"The name is a string used for identification purposes only.  It has no "
"semantics.  Multiple processes may be given the same name.  The initial name "
"is set by the constructor."
msgstr ""

#: ../../../library/multiprocessing.rst:358
msgid "Return whether the process is alive."
msgstr ""

#: ../../../library/multiprocessing.rst:360
msgid ""
"Roughly, a process object is alive from the moment the :meth:`start` method "
"returns until the child process terminates."
msgstr ""

#: ../../../library/multiprocessing.rst:365
msgid ""
"The process's daemon flag, a Boolean value.  This must be set before :meth:"
"`start` is called."
msgstr ""

#: ../../../library/multiprocessing.rst:368
msgid "The initial value is inherited from the creating process."
msgstr ""

#: ../../../library/multiprocessing.rst:370
msgid ""
"When a process exits, it attempts to terminate all of its daemonic child "
"processes."
msgstr ""

#: ../../../library/multiprocessing.rst:373
msgid ""
"Note that a daemonic process is not allowed to create child processes. "
"Otherwise a daemonic process would leave its children orphaned if it gets "
"terminated when its parent process exits. Additionally, these are **not** "
"Unix daemons or services, they are normal processes that will be terminated "
"(and not joined) if non-daemonic processes have exited."
msgstr ""

#: ../../../library/multiprocessing.rst:379
msgid ""
"In addition to the  :class:`Threading.Thread` API, :class:`Process` objects "
"also support the following attributes and methods:"
msgstr ""

#: ../../../library/multiprocessing.rst:384
msgid ""
"Return the process ID.  Before the process is spawned, this will be ``None``."
msgstr ""

#: ../../../library/multiprocessing.rst:389
msgid ""
"The child's exit code.  This will be ``None`` if the process has not yet "
"terminated.  A negative value *-N* indicates that the child was terminated "
"by signal *N*."
msgstr ""

#: ../../../library/multiprocessing.rst:395
msgid "The process's authentication key (a byte string)."
msgstr ""

#: ../../../library/multiprocessing.rst:397
msgid ""
"When :mod:`multiprocessing` is initialized the main process is assigned a "
"random string using :func:`os.random`."
msgstr ""

#: ../../../library/multiprocessing.rst:400
msgid ""
"When a :class:`Process` object is created, it will inherit the "
"authentication key of its parent process, although this may be changed by "
"setting :attr:`authkey` to another byte string."
msgstr ""

#: ../../../library/multiprocessing.rst:404
msgid "See :ref:`multiprocessing-auth-keys`."
msgstr ""

#: ../../../library/multiprocessing.rst:408
msgid ""
"Terminate the process.  On Unix this is done using the ``SIGTERM`` signal; "
"on Windows :cfunc:`TerminateProcess` is used.  Note that exit handlers and "
"finally clauses, etc., will not be executed."
msgstr ""

#: ../../../library/multiprocessing.rst:412
msgid ""
"Note that descendant processes of the process will *not* be terminated -- "
"they will simply become orphaned."
msgstr ""

#: ../../../library/multiprocessing.rst:417
msgid ""
"If this method is used when the associated process is using a pipe or queue "
"then the pipe or queue is liable to become corrupted and may become unusable "
"by other process.  Similarly, if the process has acquired a lock or "
"semaphore etc. then terminating it is liable to cause other processes to "
"deadlock."
msgstr ""

#: ../../../library/multiprocessing.rst:423
msgid ""
"Note that the :meth:`start`, :meth:`join`, :meth:`is_alive` and :attr:"
"`exit_code` methods should only be called by the process that created the "
"process object."
msgstr ""

#: ../../../library/multiprocessing.rst:427
msgid "Example usage of some of the methods of :class:`Process`:"
msgstr ""

#: ../../../library/multiprocessing.rst:448
msgid ""
"Exception raised by :meth:`Connection.recv_bytes_into()` when the supplied "
"buffer object is too small for the message read."
msgstr ""

#: ../../../library/multiprocessing.rst:451
msgid ""
"If ``e`` is an instance of :exc:`BufferTooShort` then ``e.args[0]`` will "
"give the message as a byte string."
msgstr ""

#: ../../../library/multiprocessing.rst:456
msgid "Pipes and Queues"
msgstr ""

#: ../../../library/multiprocessing.rst:458
msgid ""
"When using multiple processes, one generally uses message passing for "
"communication between processes and avoids having to use any synchronization "
"primitives like locks."
msgstr ""

#: ../../../library/multiprocessing.rst:462
msgid ""
"For passing messages one can use :func:`Pipe` (for a connection between two "
"processes) or a queue (which allows multiple producers and consumers)."
msgstr ""

#: ../../../library/multiprocessing.rst:465
msgid ""
"The :class:`Queue` and :class:`JoinableQueue` types are multi-producer, "
"multi-consumer FIFO queues modelled on the :class:`queue.Queue` class in the "
"standard library.  They differ in that :class:`Queue` lacks the :meth:"
"`~queue.Queue.task_done` and :meth:`~queue.Queue.join` methods introduced "
"into Python 2.5's :class:`queue.Queue` class."
msgstr ""

#: ../../../library/multiprocessing.rst:471
msgid ""
"If you use :class:`JoinableQueue` then you **must** call :meth:"
"`JoinableQueue.task_done` for each task removed from the queue or else the "
"semaphore used to count the number of unfinished tasks may eventually "
"overflow raising an exception."
msgstr ""

#: ../../../library/multiprocessing.rst:476
msgid ""
"Note that one can also create a shared queue by using a manager object -- "
"see :ref:`multiprocessing-managers`."
msgstr ""

#: ../../../library/multiprocessing.rst:481
msgid ""
":mod:`multiprocessing` uses the usual :exc:`queue.Empty` and :exc:`queue."
"Full` exceptions to signal a timeout.  They are not available in the :mod:"
"`multiprocessing` namespace so you need to import them from :mod:`queue`."
msgstr ""

#: ../../../library/multiprocessing.rst:489
msgid ""
"If a process is killed using :meth:`Process.terminate` or :func:`os.kill` "
"while it is trying to use a :class:`Queue`, then the data in the queue is "
"likely to become corrupted.  This may cause any other processes to get an "
"exception when it tries to use the queue later on."
msgstr ""

#: ../../../library/multiprocessing.rst:496
msgid ""
"As mentioned above, if a child process has put items on a queue (and it has "
"not used :meth:`JoinableQueue.cancel_join_thread`), then that process will "
"not terminate until all buffered items have been flushed to the pipe."
msgstr ""

#: ../../../library/multiprocessing.rst:500
msgid ""
"This means that if you try joining that process you may get a deadlock "
"unless you are sure that all items which have been put on the queue have "
"been consumed.  Similarly, if the child process is non-daemonic then the "
"parent process may hang on exit when it tries to join all its non-daemonic "
"children."
msgstr ""

#: ../../../library/multiprocessing.rst:505
msgid ""
"Note that a queue created using a manager does not have this issue.  See :"
"ref:`multiprocessing-programming`."
msgstr ""

#: ../../../library/multiprocessing.rst:508
msgid ""
"For an example of the usage of queues for interprocess communication see :"
"ref:`multiprocessing-examples`."
msgstr ""

#: ../../../library/multiprocessing.rst:514
msgid ""
"Returns a pair ``(conn1, conn2)`` of :class:`Connection` objects "
"representing the ends of a pipe."
msgstr ""

#: ../../../library/multiprocessing.rst:517
msgid ""
"If *duplex* is ``True`` (the default) then the pipe is bidirectional.  If "
"*duplex* is ``False`` then the pipe is unidirectional: ``conn1`` can only be "
"used for receiving messages and ``conn2`` can only be used for sending "
"messages."
msgstr ""

#: ../../../library/multiprocessing.rst:525
msgid ""
"Returns a process shared queue implemented using a pipe and a few locks/"
"semaphores.  When a process first puts an item on the queue a feeder thread "
"is started which transfers objects from a buffer into the pipe."
msgstr ""

#: ../../../library/multiprocessing.rst:529
msgid ""
"The usual :exc:`queue.Empty` and :exc:`queue.Full` exceptions from the "
"standard library's :mod:`Queue` module are raised to signal timeouts."
msgstr ""

#: ../../../library/multiprocessing.rst:532
msgid ""
":class:`Queue` implements all the methods of :class:`queue.Queue` except "
"for :meth:`~queue.Queue.task_done` and :meth:`~queue.Queue.join`."
msgstr ""

#: ../../../library/multiprocessing.rst:537
msgid ""
"Return the approximate size of the queue.  Because of multithreading/"
"multiprocessing semantics, this number is not reliable."
msgstr ""

#: ../../../library/multiprocessing.rst:540
msgid ""
"Note that this may raise :exc:`NotImplementedError` on Unix platforms like "
"Mac OS X where ``sem_getvalue()`` is not implemented."
msgstr ""

#: ../../../library/multiprocessing.rst:545
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

#: ../../../library/multiprocessing.rst:550
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

#: ../../../library/multiprocessing.rst:555
msgid ""
"Put item into the queue.  If the optional argument *block* is ``True`` (the "
"default) and *timeout* is ``None`` (the default), block if necessary until a "
"free slot is available.  If *timeout* is a positive number, it blocks at "
"most *timeout* seconds and raises the :exc:`queue.Full` exception if no free "
"slot was available within that time.  Otherwise (*block* is ``False``), put "
"an item on the queue if a free slot is immediately available, else raise "
"the :exc:`queue.Full` exception (*timeout* is ignored in that case)."
msgstr ""

#: ../../../library/multiprocessing.rst:566
msgid "Equivalent to ``put(item, False)``."
msgstr ""

#: ../../../library/multiprocessing.rst:570
msgid ""
"Remove and return an item from the queue.  If optional args *block* is "
"``True`` (the default) and *timeout* is ``None`` (the default), block if "
"necessary until an item is available.  If *timeout* is a positive number, it "
"blocks at most *timeout* seconds and raises the :exc:`queue.Empty` exception "
"if no item was available within that time.  Otherwise (block is ``False``), "
"return an item if one is immediately available, else raise the :exc:`queue."
"Empty` exception (*timeout* is ignored in that case)."
msgstr ""

#: ../../../library/multiprocessing.rst:581
msgid "Equivalent to ``get(False)``."
msgstr ""

#: ../../../library/multiprocessing.rst:583
msgid ""
":class:`multiprocessing.Queue` has a few additional methods not found in :"
"class:`queue.Queue`.  These methods are usually unnecessary for most code:"
msgstr ""

#: ../../../library/multiprocessing.rst:589
msgid ""
"Indicate that no more data will be put on this queue by the current "
"process.  The background thread will quit once it has flushed all buffered "
"data to the pipe.  This is called automatically when the queue is garbage "
"collected."
msgstr ""

#: ../../../library/multiprocessing.rst:596
msgid ""
"Join the background thread.  This can only be used after :meth:`close` has "
"been called.  It blocks until the background thread exits, ensuring that all "
"data in the buffer has been flushed to the pipe."
msgstr ""

#: ../../../library/multiprocessing.rst:600
msgid ""
"By default if a process is not the creator of the queue then on exit it will "
"attempt to join the queue's background thread.  The process can call :meth:"
"`cancel_join_thread` to make :meth:`join_thread` do nothing."
msgstr ""

#: ../../../library/multiprocessing.rst:606
msgid ""
"Prevent :meth:`join_thread` from blocking.  In particular, this prevents the "
"background thread from being joined automatically when the process exits -- "
"see :meth:`join_thread`."
msgstr ""

#: ../../../library/multiprocessing.rst:613
msgid ""
":class:`JoinableQueue`, a :class:`Queue` subclass, is a queue which "
"additionally has :meth:`task_done` and :meth:`join` methods."
msgstr ""

#: ../../../library/multiprocessing.rst:618
msgid ""
"Indicate that a formerly enqueued task is complete. Used by queue consumer "
"threads.  For each :meth:`~Queue.get` used to fetch a task, a subsequent "
"call to :meth:`task_done` tells the queue that the processing on the task is "
"complete."
msgstr ""

#: ../../../library/multiprocessing.rst:623
msgid ""
"If a :meth:`~Queue.join` is currently blocking, it will resume when all "
"items have been processed (meaning that a :meth:`task_done` call was "
"received for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: ../../../library/multiprocessing.rst:627
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

#: ../../../library/multiprocessing.rst:633
msgid "Block until all items in the queue have been gotten and processed."
msgstr ""

#: ../../../library/multiprocessing.rst:635
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue.  The count goes down whenever a consumer thread calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`~Queue."
"join` unblocks."
msgstr ""

#: ../../../library/multiprocessing.rst:643
msgid "Miscellaneous"
msgstr ""

#: ../../../library/multiprocessing.rst:647
msgid "Return list of all live children of the current process."
msgstr ""

#: ../../../library/multiprocessing.rst:649
msgid ""
"Calling this has the side affect of \"joining\" any processes which have "
"already finished."
msgstr ""

#: ../../../library/multiprocessing.rst:654
msgid ""
"Return the number of CPUs in the system.  May raise :exc:"
"`NotImplementedError`."
msgstr ""

#: ../../../library/multiprocessing.rst:659
msgid ""
"Return the :class:`Process` object corresponding to the current process."
msgstr ""

#: ../../../library/multiprocessing.rst:661
msgid "An analogue of :func:`threading.current_thread`."
msgstr ""

#: ../../../library/multiprocessing.rst:665
msgid ""
"Add support for when a program which uses :mod:`multiprocessing` has been "
"frozen to produce a Windows executable.  (Has been tested with **py2exe**, "
"**PyInstaller** and **cx_Freeze**.)"
msgstr ""

#: ../../../library/multiprocessing.rst:669
msgid ""
"One needs to call this function straight after the ``if __name__ == "
"'__main__'`` line of the main module.  For example::"
msgstr ""

#: ../../../library/multiprocessing.rst:681
msgid ""
"If the ``freeze_support()`` line is omitted then trying to run the frozen "
"executable will raise :exc:`RuntimeError`."
msgstr ""

#: ../../../library/multiprocessing.rst:684
msgid ""
"If the module is being run normally by the Python interpreter then :func:"
"`freeze_support` has no effect."
msgstr ""

#: ../../../library/multiprocessing.rst:689
msgid ""
"Sets the path of the Python interpreter to use when starting a child "
"process. (By default :data:`sys.executable` is used).  Embedders will "
"probably need to do some thing like ::"
msgstr ""

#: ../../../library/multiprocessing.rst:695
msgid "before they can create child processes.  (Windows only)"
msgstr ""

#: ../../../library/multiprocessing.rst:700
msgid ""
":mod:`multiprocessing` contains no analogues of :func:`threading."
"active_count`, :func:`threading.enumerate`, :func:`threading.settrace`, :"
"func:`threading.setprofile`, :class:`threading.Timer`, or :class:`threading."
"local`."
msgstr ""

#: ../../../library/multiprocessing.rst:707
msgid "Connection Objects"
msgstr ""

#: ../../../library/multiprocessing.rst:709
msgid ""
"Connection objects allow the sending and receiving of picklable objects or "
"strings.  They can be thought of as message oriented connected sockets."
msgstr ""

#: ../../../library/multiprocessing.rst:712
msgid ""
"Connection objects usually created using :func:`Pipe` -- see also :ref:"
"`multiprocessing-listeners-clients`."
msgstr ""

#: ../../../library/multiprocessing.rst:719
msgid ""
"Send an object to the other end of the connection which should be read "
"using :meth:`recv`."
msgstr ""

#: ../../../library/multiprocessing.rst:722
msgid ""
"The object must be picklable.  Very large pickles (approximately 32 MB+, "
"though it depends on the OS) may raise a ValueError exception."
msgstr ""

#: ../../../library/multiprocessing.rst:727
msgid ""
"Return an object sent from the other end of the connection using :meth:"
"`send`.  Raises :exc:`EOFError` if there is nothing left to receive and the "
"other end was closed."
msgstr ""

#: ../../../library/multiprocessing.rst:733
msgid "Returns the file descriptor or handle used by the connection."
msgstr ""

#: ../../../library/multiprocessing.rst:737
msgid "Close the connection."
msgstr ""

#: ../../../library/multiprocessing.rst:739
msgid "This is called automatically when the connection is garbage collected."
msgstr ""

#: ../../../library/multiprocessing.rst:743
msgid "Return whether there is any data available to be read."
msgstr ""

#: ../../../library/multiprocessing.rst:745
msgid ""
"If *timeout* is not specified then it will return immediately.  If *timeout* "
"is a number then this specifies the maximum time in seconds to block.  If "
"*timeout* is ``None`` then an infinite timeout is used."
msgstr ""

#: ../../../library/multiprocessing.rst:751
msgid ""
"Send byte data from an object supporting the buffer interface as a complete "
"message."
msgstr ""

#: ../../../library/multiprocessing.rst:754
msgid ""
"If *offset* is given then data is read from that position in *buffer*.  If "
"*size* is given then that many bytes will be read from buffer.  Very large "
"buffers (approximately 32 MB+, though it depends on the OS) may raise a "
"ValueError exception"
msgstr ""

#: ../../../library/multiprocessing.rst:761
msgid ""
"Return a complete message of byte data sent from the other end of the "
"connection as a string.  Raises :exc:`EOFError` if there is nothing left to "
"receive and the other end has closed."
msgstr ""

#: ../../../library/multiprocessing.rst:765
msgid ""
"If *maxlength* is specified and the message is longer than *maxlength* then :"
"exc:`IOError` is raised and the connection will no longer be readable."
msgstr ""

#: ../../../library/multiprocessing.rst:771
msgid ""
"Read into *buffer* a complete message of byte data sent from the other end "
"of the connection and return the number of bytes in the message.  Raises :"
"exc:`EOFError` if there is nothing left to receive and the other end was "
"closed."
msgstr ""

#: ../../../library/multiprocessing.rst:776
msgid ""
"*buffer* must be an object satisfying the writable buffer interface.  If "
"*offset* is given then the message will be written into the buffer from that "
"position.  Offset must be a non-negative integer less than the length of "
"*buffer* (in bytes)."
msgstr ""

#: ../../../library/multiprocessing.rst:781
msgid ""
"If the buffer is too short then a :exc:`BufferTooShort` exception is raised "
"and the complete message is available as ``e.args[0]`` where ``e`` is the "
"exception instance."
msgstr ""

#: ../../../library/multiprocessing.rst:786
msgid "For example:"
msgstr ""

#: ../../../library/multiprocessing.rst:810
msgid ""
"The :meth:`Connection.recv` method automatically unpickles the data it "
"receives, which can be a security risk unless you can trust the process "
"which sent the message."
msgstr ""

#: ../../../library/multiprocessing.rst:814
msgid ""
"Therefore, unless the connection object was produced using :func:`Pipe` you "
"should only use the :meth:`~Connection.recv` and :meth:`~Connection.send` "
"methods after performing some sort of authentication.  See :ref:"
"`multiprocessing-auth-keys`."
msgstr ""

#: ../../../library/multiprocessing.rst:821
msgid ""
"If a process is killed while it is trying to read or write to a pipe then "
"the data in the pipe is likely to become corrupted, because it may become "
"impossible to be sure where the message boundaries lie."
msgstr ""

#: ../../../library/multiprocessing.rst:827
msgid "Synchronization primitives"
msgstr ""

#: ../../../library/multiprocessing.rst:829
msgid ""
"Generally synchronization primitives are not as necessary in a multiprocess "
"program as they are in a multithreaded program.  See the documentation for :"
"mod:`threading` module."
msgstr ""

#: ../../../library/multiprocessing.rst:833
msgid ""
"Note that one can also create synchronization primitives by using a manager "
"object -- see :ref:`multiprocessing-managers`."
msgstr ""

#: ../../../library/multiprocessing.rst:838
msgid ""
"A bounded semaphore object: a clone of :class:`threading.BoundedSemaphore`."
msgstr ""

#: ../../../library/multiprocessing.rst:840
msgid ""
"(On Mac OS X, this is indistinguishable from :class:`Semaphore` because "
"``sem_getvalue()`` is not implemented on that platform)."
msgstr ""

#: ../../../library/multiprocessing.rst:845
msgid "A condition variable: a clone of :class:`threading.Condition`."
msgstr ""

#: ../../../library/multiprocessing.rst:847
msgid ""
"If *lock* is specified then it should be a :class:`Lock` or :class:`RLock` "
"object from :mod:`multiprocessing`."
msgstr ""

#: ../../../library/multiprocessing.rst:852
msgid ""
"A clone of :class:`threading.Event`. This method returns the state of the "
"internal semaphore on exit, so it will always return ``True`` except if a "
"timeout is given and the operation times out."
msgstr ""

#: ../../../library/multiprocessing.rst:857
msgid "Previously, the method always returned ``None``."
msgstr ""

#: ../../../library/multiprocessing.rst:862
msgid "A non-recursive lock object: a clone of :class:`threading.Lock`."
msgstr ""

#: ../../../library/multiprocessing.rst:866
msgid "A recursive lock object: a clone of :class:`threading.RLock`."
msgstr ""

#: ../../../library/multiprocessing.rst:870
msgid "A semaphore object: a clone of :class:`threading.Semaphore`."
msgstr ""

#: ../../../library/multiprocessing.rst:874
msgid ""
"The :meth:`acquire` method of :class:`BoundedSemaphore`, :class:`Lock`, :"
"class:`RLock` and :class:`Semaphore` has a timeout parameter not supported "
"by the equivalents in :mod:`threading`.  The signature is "
"``acquire(block=True, timeout=None)`` with keyword parameters being "
"acceptable.  If *block* is ``True`` and *timeout* is not ``None`` then it "
"specifies a timeout in seconds.  If *block* is ``False`` then *timeout* is "
"ignored."
msgstr ""

#: ../../../library/multiprocessing.rst:882
msgid ""
"On Mac OS X, ``sem_timedwait`` is unsupported, so calling ``acquire()`` with "
"a timeout will emulate that function's behavior using a sleeping loop."
msgstr ""

#: ../../../library/multiprocessing.rst:887
msgid ""
"If the SIGINT signal generated by Ctrl-C arrives while the main thread is "
"blocked by a call to :meth:`BoundedSemaphore.acquire`, :meth:`Lock."
"acquire`, :meth:`RLock.acquire`, :meth:`Semaphore.acquire`, :meth:`Condition."
"acquire` or :meth:`Condition.wait` then the call will be immediately "
"interrupted and :exc:`KeyboardInterrupt` will be raised."
msgstr ""

#: ../../../library/multiprocessing.rst:893
msgid ""
"This differs from the behaviour of :mod:`threading` where SIGINT will be "
"ignored while the equivalent blocking calls are in progress."
msgstr ""

#: ../../../library/multiprocessing.rst:898
msgid "Shared :mod:`ctypes` Objects"
msgstr ""

#: ../../../library/multiprocessing.rst:900
msgid ""
"It is possible to create shared objects using shared memory which can be "
"inherited by child processes."
msgstr ""

#: ../../../library/multiprocessing.rst:905
msgid ""
"Return a :mod:`ctypes` object allocated from shared memory.  By default the "
"return value is actually a synchronized wrapper for the object."
msgstr ""

#: ../../../library/multiprocessing.rst:908
#: ../../../library/multiprocessing.rst:983
msgid ""
"*typecode_or_type* determines the type of the returned object: it is either "
"a ctypes type or a one character typecode of the kind used by the :mod:"
"`array` module.  *\\*args* is passed on to the constructor for the type."
msgstr ""

#: ../../../library/multiprocessing.rst:912
#: ../../../library/multiprocessing.rst:933
#: ../../../library/multiprocessing.rst:1001
#: ../../../library/multiprocessing.rst:1016
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a :class:`Lock` or :class:"
"`RLock` object then that will be used to synchronize access to the value.  "
"If *lock* is ``False`` then access to the returned object will not be "
"automatically protected by a lock, so it will not necessarily be \"process-"
"safe\"."
msgstr ""

#: ../../../library/multiprocessing.rst:919
#: ../../../library/multiprocessing.rst:1008
#: ../../../library/multiprocessing.rst:1023
msgid "Note that *lock* is a keyword-only argument."
msgstr ""

#: ../../../library/multiprocessing.rst:923
msgid ""
"Return a ctypes array allocated from shared memory.  By default the return "
"value is actually a synchronized wrapper for the array."
msgstr ""

#: ../../../library/multiprocessing.rst:926
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer, "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise, *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: ../../../library/multiprocessing.rst:940
msgid "Note that *lock* is a keyword only argument."
msgstr ""

#: ../../../library/multiprocessing.rst:942
msgid ""
"Note that an array of :data:`ctypes.c_char` has *value* and *raw* attributes "
"which allow one to use it to store and retrieve strings."
msgstr ""

#: ../../../library/multiprocessing.rst:947
msgid "The :mod:`multiprocessing.sharedctypes` module"
msgstr ""

#: ../../../library/multiprocessing.rst:952
msgid ""
"The :mod:`multiprocessing.sharedctypes` module provides functions for "
"allocating :mod:`ctypes` objects from shared memory which can be inherited "
"by child processes."
msgstr ""

#: ../../../library/multiprocessing.rst:958
msgid ""
"Although it is possible to store a pointer in shared memory remember that "
"this will refer to a location in the address space of a specific process. "
"However, the pointer is quite likely to be invalid in the context of a "
"second process and trying to dereference the pointer from the second process "
"may cause a crash."
msgstr ""

#: ../../../library/multiprocessing.rst:966
msgid "Return a ctypes array allocated from shared memory."
msgstr ""

#: ../../../library/multiprocessing.rst:968
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: ../../../library/multiprocessing.rst:975
msgid ""
"Note that setting and getting an element is potentially non-atomic -- use :"
"func:`Array` instead to make sure that access is automatically synchronized "
"using a lock."
msgstr ""

#: ../../../library/multiprocessing.rst:981
msgid "Return a ctypes object allocated from shared memory."
msgstr ""

#: ../../../library/multiprocessing.rst:987
msgid ""
"Note that setting and getting the value is potentially non-atomic -- use :"
"func:`Value` instead to make sure that access is automatically synchronized "
"using a lock."
msgstr ""

#: ../../../library/multiprocessing.rst:991
msgid ""
"Note that an array of :data:`ctypes.c_char` has ``value`` and ``raw`` "
"attributes which allow one to use it to store and retrieve strings -- see "
"documentation for :mod:`ctypes`."
msgstr ""

#: ../../../library/multiprocessing.rst:997
msgid ""
"The same as :func:`RawArray` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes "
"array."
msgstr ""

#: ../../../library/multiprocessing.rst:1012
msgid ""
"The same as :func:`RawValue` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes "
"object."
msgstr ""

#: ../../../library/multiprocessing.rst:1027
msgid ""
"Return a ctypes object allocated from shared memory which is a copy of the "
"ctypes object *obj*."
msgstr ""

#: ../../../library/multiprocessing.rst:1032
msgid ""
"Return a process-safe wrapper object for a ctypes object which uses *lock* "
"to synchronize access.  If *lock* is ``None`` (the default) then a :class:"
"`multiprocessing.RLock` object is created automatically."
msgstr ""

#: ../../../library/multiprocessing.rst:1036
msgid ""
"A synchronized wrapper will have two methods in addition to those of the "
"object it wraps: :meth:`get_obj` returns the wrapped object and :meth:"
"`get_lock` returns the lock object used for synchronization."
msgstr ""

#: ../../../library/multiprocessing.rst:1040
msgid ""
"Note that accessing the ctypes object through the wrapper can be a lot "
"slower than accessing the raw ctypes object."
msgstr ""

#: ../../../library/multiprocessing.rst:1044
msgid ""
"The table below compares the syntax for creating shared ctypes objects from "
"shared memory with the normal ctypes syntax.  (In the table ``MyStruct`` is "
"some subclass of :class:`ctypes.Structure`.)"
msgstr ""

#: ../../../library/multiprocessing.rst:1049
msgid "ctypes"
msgstr ""

#: ../../../library/multiprocessing.rst:1049
msgid "sharedctypes using type"
msgstr ""

#: ../../../library/multiprocessing.rst:1049
msgid "sharedctypes using typecode"
msgstr ""

#: ../../../library/multiprocessing.rst:1051
msgid "c_double(2.4)"
msgstr ""

#: ../../../library/multiprocessing.rst:1051
msgid "RawValue(c_double, 2.4)"
msgstr ""

#: ../../../library/multiprocessing.rst:1051
msgid "RawValue('d', 2.4)"
msgstr ""

#: ../../../library/multiprocessing.rst:1052
msgid "MyStruct(4, 6)"
msgstr ""

#: ../../../library/multiprocessing.rst:1052
msgid "RawValue(MyStruct, 4, 6)"
msgstr ""

#: ../../../library/multiprocessing.rst:1053
msgid "(c_short * 7)()"
msgstr ""

#: ../../../library/multiprocessing.rst:1053
msgid "RawArray(c_short, 7)"
msgstr ""

#: ../../../library/multiprocessing.rst:1053
msgid "RawArray('h', 7)"
msgstr ""

#: ../../../library/multiprocessing.rst:1054
msgid "(c_int * 3)(9, 2, 8)"
msgstr ""

#: ../../../library/multiprocessing.rst:1054
msgid "RawArray(c_int, (9, 2, 8))"
msgstr ""

#: ../../../library/multiprocessing.rst:1054
msgid "RawArray('i', (9, 2, 8))"
msgstr ""

#: ../../../library/multiprocessing.rst:1058
msgid ""
"Below is an example where a number of ctypes objects are modified by a child "
"process::"
msgstr ""

#: ../../../library/multiprocessing.rst:1096
msgid "The results printed are ::"
msgstr ""

#: ../../../library/multiprocessing.rst:1109
msgid "Managers"
msgstr ""

#: ../../../library/multiprocessing.rst:1111
msgid ""
"Managers provide a way to create data which can be shared between different "
"processes. A manager object controls a server process which manages *shared "
"objects*.  Other processes can access the shared objects by using proxies."
msgstr ""

#: ../../../library/multiprocessing.rst:1117
msgid ""
"Returns a started :class:`~multiprocessing.managers.SyncManager` object "
"which can be used for sharing objects between processes.  The returned "
"manager object corresponds to a spawned child process and has methods which "
"will create shared objects and return corresponding proxies."
msgstr ""

#: ../../../library/multiprocessing.rst:1125
msgid ""
"Manager processes will be shutdown as soon as they are garbage collected or "
"their parent process exits.  The manager classes are defined in the :mod:"
"`multiprocessing.managers` module:"
msgstr ""

#: ../../../library/multiprocessing.rst:1131
msgid "Create a BaseManager object."
msgstr ""

#: ../../../library/multiprocessing.rst:1133
msgid ""
"Once created one should call :meth:`start` or :meth:`serve_forever` to "
"ensure that the manager object refers to a started manager process."
msgstr ""

#: ../../../library/multiprocessing.rst:1136
msgid ""
"*address* is the address on which the manager process listens for new "
"connections.  If *address* is ``None`` then an arbitrary one is chosen."
msgstr ""

#: ../../../library/multiprocessing.rst:1139
msgid ""
"*authkey* is the authentication key which will be used to check the validity "
"of incoming connections to the server process.  If *authkey* is ``None`` "
"then ``current_process().authkey``.  Otherwise *authkey* is used and it must "
"be a string."
msgstr ""

#: ../../../library/multiprocessing.rst:1146
msgid ""
"Start a subprocess to start the manager.  If *initializer* is not ``None`` "
"then the subprocess will call ``initializer(*initargs)`` when it starts."
msgstr ""

#: ../../../library/multiprocessing.rst:1151
msgid "Run the server in the current process."
msgstr ""

#: ../../../library/multiprocessing.rst:1155
msgid ""
"Returns a :class:`Server` object which represents the actual server under "
"the control of the Manager. The :class:`Server` object supports the :meth:"
"`serve_forever` method::"
msgstr ""

#: ../../../library/multiprocessing.rst:1164
msgid ":class:`Server` additionally has an :attr:`address` attribute."
msgstr ""

#: ../../../library/multiprocessing.rst:1168
msgid "Connect a local manager object to a remote manager process::"
msgstr ""

#: ../../../library/multiprocessing.rst:1176
msgid ""
"Stop the process used by the manager.  This is only available if :meth:"
"`start` has been used to start the server process."
msgstr ""

#: ../../../library/multiprocessing.rst:1179
msgid "This can be called multiple times."
msgstr ""

#: ../../../library/multiprocessing.rst:1183
msgid ""
"A classmethod which can be used for registering a type or callable with the "
"manager class."
msgstr ""

#: ../../../library/multiprocessing.rst:1186
msgid ""
"*typeid* is a \"type identifier\" which is used to identify a particular "
"type of shared object.  This must be a string."
msgstr ""

#: ../../../library/multiprocessing.rst:1189
msgid ""
"*callable* is a callable used for creating objects for this type "
"identifier.  If a manager instance will be created using the :meth:"
"`from_address` classmethod or if the *create_method* argument is ``False`` "
"then this can be left as ``None``."
msgstr ""

#: ../../../library/multiprocessing.rst:1194
msgid ""
"*proxytype* is a subclass of :class:`BaseProxy` which is used to create "
"proxies for shared objects with this *typeid*.  If ``None`` then a proxy "
"class is created automatically."
msgstr ""

#: ../../../library/multiprocessing.rst:1198
msgid ""
"*exposed* is used to specify a sequence of method names which proxies for "
"this typeid should be allowed to access using :meth:`BaseProxy."
"_callMethod`.  (If *exposed* is ``None`` then :attr:`proxytype._exposed_` is "
"used instead if it exists.)  In the case where no exposed list is specified, "
"all \"public methods\" of the shared object will be accessible.  (Here a "
"\"public method\" means any attribute which has a :meth:`__call__` method "
"and whose name does not begin with ``'_'``.)"
msgstr ""

#: ../../../library/multiprocessing.rst:1207
msgid ""
"*method_to_typeid* is a mapping used to specify the return type of those "
"exposed methods which should return a proxy.  It maps method names to typeid "
"strings.  (If *method_to_typeid* is ``None`` then :attr:`proxytype."
"_method_to_typeid_` is used instead if it exists.)  If a method's name is "
"not a key of this mapping or if the mapping is ``None`` then the object "
"returned by the method will be copied by value."
msgstr ""

#: ../../../library/multiprocessing.rst:1214
msgid ""
"*create_method* determines whether a method should be created with name "
"*typeid* which can be used to tell the server process to create a new shared "
"object and return a proxy for it.  By default it is ``True``."
msgstr ""

#: ../../../library/multiprocessing.rst:1218
msgid ":class:`BaseManager` instances also have one read-only property:"
msgstr ""

#: ../../../library/multiprocessing.rst:1222
msgid "The address used by the manager."
msgstr ""

#: ../../../library/multiprocessing.rst:1227
msgid ""
"A subclass of :class:`BaseManager` which can be used for the synchronization "
"of processes.  Objects of this type are returned by :func:`multiprocessing."
"Manager`."
msgstr ""

#: ../../../library/multiprocessing.rst:1231
msgid "It also supports creation of shared lists and dictionaries."
msgstr ""

#: ../../../library/multiprocessing.rst:1235
msgid ""
"Create a shared :class:`threading.BoundedSemaphore` object and return a "
"proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1240
msgid ""
"Create a shared :class:`threading.Condition` object and return a proxy for "
"it."
msgstr ""

#: ../../../library/multiprocessing.rst:1243
msgid ""
"If *lock* is supplied then it should be a proxy for a :class:`threading."
"Lock` or :class:`threading.RLock` object."
msgstr ""

#: ../../../library/multiprocessing.rst:1248
msgid ""
"Create a shared :class:`threading.Event` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1252
msgid ""
"Create a shared :class:`threading.Lock` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1256
msgid "Create a shared :class:`Namespace` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1260
msgid "Create a shared :class:`queue.Queue` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1264
msgid ""
"Create a shared :class:`threading.RLock` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1268
msgid ""
"Create a shared :class:`threading.Semaphore` object and return a proxy for "
"it."
msgstr ""

#: ../../../library/multiprocessing.rst:1273
msgid "Create an array and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1277
msgid ""
"Create an object with a writable ``value`` attribute and return a proxy for "
"it."
msgstr ""

#: ../../../library/multiprocessing.rst:1284
msgid "Create a shared ``dict`` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1289
msgid "Create a shared ``list`` object and return a proxy for it."
msgstr ""

#: ../../../library/multiprocessing.rst:1293
msgid ""
"Modifications to mutable values or items in dict and list proxies will not "
"be propagated through the manager, because the proxy has no way of knowing "
"when its values or items are modified.  To modify such an item, you can re-"
"assign the modified object to the container proxy::"
msgstr ""

#: ../../../library/multiprocessing.rst:1311
msgid "Namespace objects"
msgstr ""

#: ../../../library/multiprocessing.rst:1313
msgid ""
"A namespace object has no public methods, but does have writable attributes. "
"Its representation shows the values of its attributes."
msgstr ""

#: ../../../library/multiprocessing.rst:1316
msgid ""
"However, when using a proxy for a namespace object, an attribute beginning "
"with ``'_'`` will be an attribute of the proxy and not an attribute of the "
"referent:"
msgstr ""

#: ../../../library/multiprocessing.rst:1331
msgid "Customized managers"
msgstr ""

#: ../../../library/multiprocessing.rst:1333
msgid ""
"To create one's own manager, one creates a subclass of :class:`BaseManager` "
"and use the :meth:`~BaseManager.register` classmethod to register new types "
"or callables with the manager class.  For example::"
msgstr ""

#: ../../../library/multiprocessing.rst:1359
msgid "Using a remote manager"
msgstr ""

#: ../../../library/multiprocessing.rst:1361
msgid ""
"It is possible to run a manager server on one machine and have clients use "
"it from other machines (assuming that the firewalls involved allow it)."
msgstr ""

#: ../../../library/multiprocessing.rst:1364
msgid ""
"Running the following commands creates a server for a single shared queue "
"which remote clients can access::"
msgstr ""

#: ../../../library/multiprocessing.rst:1376
msgid "One client can access the server as follows::"
msgstr ""

#: ../../../library/multiprocessing.rst:1386
msgid "Another client can also use it::"
msgstr ""

#: ../../../library/multiprocessing.rst:1397
msgid ""
"Local processes can also access that queue, using the code from above on the "
"client to access it remotely::"
msgstr ""

#: ../../../library/multiprocessing.rst:1420
msgid "Proxy Objects"
msgstr ""

#: ../../../library/multiprocessing.rst:1422
msgid ""
"A proxy is an object which *refers* to a shared object which lives "
"(presumably) in a different process.  The shared object is said to be the "
"*referent* of the proxy.  Multiple proxy objects may have the same referent."
msgstr ""

#: ../../../library/multiprocessing.rst:1426
msgid ""
"A proxy object has methods which invoke corresponding methods of its "
"referent (although not every method of the referent will necessarily be "
"available through the proxy).  A proxy can usually be used in most of the "
"same ways that its referent can:"
msgstr ""

#: ../../../library/multiprocessing.rst:1445
msgid ""
"Notice that applying :func:`str` to a proxy will return the representation "
"of the referent, whereas applying :func:`repr` will return the "
"representation of the proxy."
msgstr ""

#: ../../../library/multiprocessing.rst:1449
msgid ""
"An important feature of proxy objects is that they are picklable so they can "
"be passed between processes.  Note, however, that if a proxy is sent to the "
"corresponding manager's process then unpickling it will produce the referent "
"itself.  This means, for example, that one shared object can contain a "
"second:"
msgstr ""

#: ../../../library/multiprocessing.rst:1467
msgid ""
"The proxy types in :mod:`multiprocessing` do nothing to support comparisons "
"by value.  So, for instance, we have:"
msgstr ""

#: ../../../library/multiprocessing.rst:1475
msgid ""
"One should just use a copy of the referent instead when making comparisons."
msgstr ""

#: ../../../library/multiprocessing.rst:1479
msgid "Proxy objects are instances of subclasses of :class:`BaseProxy`."
msgstr ""

#: ../../../library/multiprocessing.rst:1483
msgid "Call and return the result of a method of the proxy's referent."
msgstr ""

#: ../../../library/multiprocessing.rst:1485
msgid ""
"If ``proxy`` is a proxy whose referent is ``obj`` then the expression ::"
msgstr ""

#: ../../../library/multiprocessing.rst:1489
msgid "will evaluate the expression ::"
msgstr ""

#: ../../../library/multiprocessing.rst:1493
msgid "in the manager's process."
msgstr ""

#: ../../../library/multiprocessing.rst:1495
msgid ""
"The returned value will be a copy of the result of the call or a proxy to a "
"new shared object -- see documentation for the *method_to_typeid* argument "
"of :meth:`BaseManager.register`."
msgstr ""

#: ../../../library/multiprocessing.rst:1499
msgid ""
"If an exception is raised by the call, then then is re-raised by :meth:"
"`_callmethod`.  If some other exception is raised in the manager's process "
"then this is converted into a :exc:`RemoteError` exception and is raised by :"
"meth:`_callmethod`."
msgstr ""

#: ../../../library/multiprocessing.rst:1504
msgid ""
"Note in particular that an exception will be raised if *methodname* has not "
"been *exposed*"
msgstr ""

#: ../../../library/multiprocessing.rst:1507
msgid "An example of the usage of :meth:`_callmethod`:"
msgstr ""

#: ../../../library/multiprocessing.rst:1523
msgid "Return a copy of the referent."
msgstr ""

#: ../../../library/multiprocessing.rst:1525
msgid "If the referent is unpicklable then this will raise an exception."
msgstr ""

#: ../../../library/multiprocessing.rst:1529
msgid "Return a representation of the proxy object."
msgstr ""

#: ../../../library/multiprocessing.rst:1533
msgid "Return the representation of the referent."
msgstr ""

#: ../../../library/multiprocessing.rst:1537
msgid "Cleanup"
msgstr ""

#: ../../../library/multiprocessing.rst:1539
msgid ""
"A proxy object uses a weakref callback so that when it gets garbage "
"collected it deregisters itself from the manager which owns its referent."
msgstr ""

#: ../../../library/multiprocessing.rst:1542
msgid ""
"A shared object gets deleted from the manager process when there are no "
"longer any proxies referring to it."
msgstr ""

#: ../../../library/multiprocessing.rst:1547
msgid "Process Pools"
msgstr ""

#: ../../../library/multiprocessing.rst:1552
msgid ""
"One can create a pool of processes which will carry out tasks submitted to "
"it with the :class:`Pool` class."
msgstr ""

#: ../../../library/multiprocessing.rst:1557
msgid ""
"A process pool object which controls a pool of worker processes to which "
"jobs can be submitted.  It supports asynchronous results with timeouts and "
"callbacks and has a parallel map implementation."
msgstr ""

#: ../../../library/multiprocessing.rst:1561
msgid ""
"*processes* is the number of worker processes to use.  If *processes* is "
"``None`` then the number returned by :func:`cpu_count` is used.  If "
"*initializer* is not ``None`` then each worker process will call "
"``initializer(*initargs)`` when it starts."
msgstr ""

#: ../../../library/multiprocessing.rst:1568
msgid ""
"Call *func* with arguments *args* and keyword arguments *kwds*.  It blocks "
"till the result is ready. Given this blocks, :meth:`apply_async` is better "
"suited for performing work in parallel. Additionally, the passed in function "
"is only executed in one of the workers of the pool."
msgstr ""

#: ../../../library/multiprocessing.rst:1575
msgid "A variant of the :meth:`apply` method which returns a result object."
msgstr ""

#: ../../../library/multiprocessing.rst:1577
#: ../../../library/multiprocessing.rst:1595
msgid ""
"If *callback* is specified then it should be a callable which accepts a "
"single argument.  When the result becomes ready *callback* is applied to it "
"(unless the call failed).  *callback* should complete immediately since "
"otherwise the thread which handles the results will get blocked."
msgstr ""

#: ../../../library/multiprocessing.rst:1584
msgid ""
"A parallel equivalent of the :func:`map` built-in function (it supports only "
"one *iterable* argument though).  It blocks till the result is ready."
msgstr ""

#: ../../../library/multiprocessing.rst:1587
msgid ""
"This method chops the iterable into a number of chunks which it submits to "
"the process pool as separate tasks.  The (approximate) size of these chunks "
"can be specified by setting *chunksize* to a positive integer."
msgstr ""

#: ../../../library/multiprocessing.rst:1593
msgid "A variant of the :meth:`.map` method which returns a result object."
msgstr ""

#: ../../../library/multiprocessing.rst:1602
msgid "A lazier version of :meth:`map`."
msgstr ""

#: ../../../library/multiprocessing.rst:1604
msgid ""
"The *chunksize* argument is the same as the one used by the :meth:`.map` "
"method.  For very long iterables using a large value for *chunksize* can "
"make make the job complete **much** faster than using the default value of "
"``1``."
msgstr ""

#: ../../../library/multiprocessing.rst:1609
msgid ""
"Also if *chunksize* is ``1`` then the :meth:`!next` method of the iterator "
"returned by the :meth:`imap` method has an optional *timeout* parameter: "
"``next(timeout)`` will raise :exc:`multiprocessing.TimeoutError` if the "
"result cannot be returned within *timeout* seconds."
msgstr ""

#: ../../../library/multiprocessing.rst:1616
msgid ""
"The same as :meth:`imap` except that the ordering of the results from the "
"returned iterator should be considered arbitrary.  (Only when there is only "
"one worker process is the order guaranteed to be \"correct\".)"
msgstr ""

#: ../../../library/multiprocessing.rst:1622
msgid ""
"Prevents any more tasks from being submitted to the pool.  Once all the "
"tasks have been completed the worker processes will exit."
msgstr ""

#: ../../../library/multiprocessing.rst:1627
msgid ""
"Stops the worker processes immediately without completing outstanding work.  "
"When the pool object is garbage collected :meth:`terminate` will be called "
"immediately."
msgstr ""

#: ../../../library/multiprocessing.rst:1633
msgid ""
"Wait for the worker processes to exit.  One must call :meth:`close` or :meth:"
"`terminate` before using :meth:`join`."
msgstr ""

#: ../../../library/multiprocessing.rst:1639
msgid ""
"The class of the result returned by :meth:`Pool.apply_async` and :meth:`Pool."
"map_async`."
msgstr ""

#: ../../../library/multiprocessing.rst:1644
msgid ""
"Return the result when it arrives.  If *timeout* is not ``None`` and the "
"result does not arrive within *timeout* seconds then :exc:`multiprocessing."
"TimeoutError` is raised.  If the remote call raised an exception then that "
"exception will be reraised by :meth:`get`."
msgstr ""

#: ../../../library/multiprocessing.rst:1651
msgid "Wait until the result is available or until *timeout* seconds pass."
msgstr ""

#: ../../../library/multiprocessing.rst:1655
msgid "Return whether the call has completed."
msgstr ""

#: ../../../library/multiprocessing.rst:1659
msgid ""
"Return whether the call completed without raising an exception.  Will raise :"
"exc:`AssertionError` if the result is not ready."
msgstr ""

#: ../../../library/multiprocessing.rst:1662
msgid "The following example demonstrates the use of a pool::"
msgstr ""

#: ../../../library/multiprocessing.rst:1690
msgid "Listeners and Clients"
msgstr ""

#: ../../../library/multiprocessing.rst:1695
msgid ""
"Usually message passing between processes is done using queues or by using :"
"class:`Connection` objects returned by :func:`Pipe`."
msgstr ""

#: ../../../library/multiprocessing.rst:1698
msgid ""
"However, the :mod:`multiprocessing.connection` module allows some extra "
"flexibility.  It basically gives a high level message oriented API for "
"dealing with sockets or Windows named pipes, and also has support for "
"*digest authentication* using the :mod:`hmac` module."
msgstr ""

#: ../../../library/multiprocessing.rst:1706
msgid ""
"Send a randomly generated message to the other end of the connection and "
"wait for a reply."
msgstr ""

#: ../../../library/multiprocessing.rst:1709
msgid ""
"If the reply matches the digest of the message using *authkey* as the key "
"then a welcome message is sent to the other end of the connection.  "
"Otherwise :exc:`AuthenticationError` is raised."
msgstr ""

#: ../../../library/multiprocessing.rst:1715
msgid ""
"Receive a message, calculate the digest of the message using *authkey* as "
"the key, and then send the digest back."
msgstr ""

#: ../../../library/multiprocessing.rst:1718
msgid ""
"If a welcome message is not received, then :exc:`AuthenticationError` is "
"raised."
msgstr ""

#: ../../../library/multiprocessing.rst:1723
msgid ""
"Attempt to set up a connection to the listener which is using address "
"*address*, returning a :class:`~multiprocessing.Connection`."
msgstr ""

#: ../../../library/multiprocessing.rst:1726
msgid ""
"The type of the connection is determined by *family* argument, but this can "
"generally be omitted since it can usually be inferred from the format of "
"*address*. (See :ref:`multiprocessing-address-formats`)"
msgstr ""

#: ../../../library/multiprocessing.rst:1730
msgid ""
"If *authenticate* is ``True`` or *authkey* is a string then digest "
"authentication is used.  The key used for authentication will be either "
"*authkey* or ``current_process().authkey)`` if *authkey* is ``None``. If "
"authentication fails then :exc:`AuthenticationError` is raised.  See :ref:"
"`multiprocessing-auth-keys`."
msgstr ""

#: ../../../library/multiprocessing.rst:1738
msgid ""
"A wrapper for a bound socket or Windows named pipe which is 'listening' for "
"connections."
msgstr ""

#: ../../../library/multiprocessing.rst:1741
msgid ""
"*address* is the address to be used by the bound socket or named pipe of the "
"listener object."
msgstr ""

#: ../../../library/multiprocessing.rst:1746
msgid ""
"If an address of '0.0.0.0' is used, the address will not be a connectable "
"end point on Windows. If you require a connectable end-point, you should use "
"'127.0.0.1'."
msgstr ""

#: ../../../library/multiprocessing.rst:1750
msgid ""
"*family* is the type of socket (or named pipe) to use.  This can be one of "
"the strings ``'AF_INET'`` (for a TCP socket), ``'AF_UNIX'`` (for a Unix "
"domain socket) or ``'AF_PIPE'`` (for a Windows named pipe).  Of these only "
"the first is guaranteed to be available.  If *family* is ``None`` then the "
"family is inferred from the format of *address*.  If *address* is also "
"``None`` then a default is chosen.  This default is the family which is "
"assumed to be the fastest available.  See :ref:`multiprocessing-address-"
"formats`.  Note that if *family* is ``'AF_UNIX'`` and address is ``None`` "
"then the socket will be created in a private temporary directory created "
"using :func:`tempfile.mkstemp`."
msgstr ""

#: ../../../library/multiprocessing.rst:1761
msgid ""
"If the listener object uses a socket then *backlog* (1 by default) is passed "
"to the :meth:`listen` method of the socket once it has been bound."
msgstr ""

#: ../../../library/multiprocessing.rst:1764
msgid ""
"If *authenticate* is ``True`` (``False`` by default) or *authkey* is not "
"``None`` then digest authentication is used."
msgstr ""

#: ../../../library/multiprocessing.rst:1767
msgid ""
"If *authkey* is a string then it will be used as the authentication key; "
"otherwise it must be *None*."
msgstr ""

#: ../../../library/multiprocessing.rst:1770
msgid ""
"If *authkey* is ``None`` and *authenticate* is ``True`` then "
"``current_process().authkey`` is used as the authentication key.  If "
"*authkey* is ``None`` and *authenticate* is ``False`` then no authentication "
"is done.  If authentication fails then :exc:`AuthenticationError` is "
"raised.  See :ref:`multiprocessing-auth-keys`."
msgstr ""

#: ../../../library/multiprocessing.rst:1778
msgid ""
"Accept a connection on the bound socket or named pipe of the listener object "
"and return a :class:`Connection` object.  If authentication is attempted and "
"fails, then :exc:`AuthenticationError` is raised."
msgstr ""

#: ../../../library/multiprocessing.rst:1784
msgid ""
"Close the bound socket or named pipe of the listener object.  This is called "
"automatically when the listener is garbage collected.  However it is "
"advisable to call it explicitly."
msgstr ""

#: ../../../library/multiprocessing.rst:1788
msgid "Listener objects have the following read-only properties:"
msgstr ""

#: ../../../library/multiprocessing.rst:1792
msgid "The address which is being used by the Listener object."
msgstr ""

#: ../../../library/multiprocessing.rst:1796
msgid ""
"The address from which the last accepted connection came.  If this is "
"unavailable then it is ``None``."
msgstr ""

#: ../../../library/multiprocessing.rst:1800
msgid "The module defines two exceptions:"
msgstr ""

#: ../../../library/multiprocessing.rst:1804
msgid "Exception raised when there is an authentication error."
msgstr ""

#: ../../../library/multiprocessing.rst:1807
msgid "**Examples**"
msgstr ""

#: ../../../library/multiprocessing.rst:1809
msgid ""
"The following server code creates a listener which uses ``'secret "
"password'`` as an authentication key.  It then waits for a connection and "
"sends some data to the client::"
msgstr ""

#: ../../../library/multiprocessing.rst:1831
msgid ""
"The following code connects to the server and receives some data from the "
"server::"
msgstr ""

#: ../../../library/multiprocessing.rst:1854
msgid "Address Formats"
msgstr ""

#: ../../../library/multiprocessing.rst:1856
msgid ""
"An ``'AF_INET'`` address is a tuple of the form ``(hostname, port)`` where "
"*hostname* is a string and *port* is an integer."
msgstr ""

#: ../../../library/multiprocessing.rst:1859
msgid ""
"An ``'AF_UNIX'`` address is a string representing a filename on the "
"filesystem."
msgstr ""

#: ../../../library/multiprocessing.rst:1865
msgid "An ``'AF_PIPE'`` address is a string of the form"
msgstr ""

#: ../../../library/multiprocessing.rst:1863
msgid ""
":samp:`r'\\\\\\\\.\\\\pipe\\\\{PipeName}'`.  To use :func:`Client` to "
"connect to a named pipe on a remote computer called *ServerName* one should "
"use an address of the form :samp:`r'\\\\\\\\{ServerName}\\\\pipe\\"
"\\{PipeName}'` instead."
msgstr ""

#: ../../../library/multiprocessing.rst:1867
msgid ""
"Note that any string beginning with two backslashes is assumed by default to "
"be an ``'AF_PIPE'`` address rather than an ``'AF_UNIX'`` address."
msgstr ""

#: ../../../library/multiprocessing.rst:1874
msgid "Authentication keys"
msgstr ""

#: ../../../library/multiprocessing.rst:1876
msgid ""
"When one uses :meth:`Connection.recv`, the data received is automatically "
"unpickled.  Unfortunately unpickling data from an untrusted source is a "
"security risk.  Therefore :class:`Listener` and :func:`Client` use the :mod:"
"`hmac` module to provide digest authentication."
msgstr ""

#: ../../../library/multiprocessing.rst:1881
msgid ""
"An authentication key is a string which can be thought of as a password: "
"once a connection is established both ends will demand proof that the other "
"knows the authentication key.  (Demonstrating that both ends are using the "
"same key does **not** involve sending the key over the connection.)"
msgstr ""

#: ../../../library/multiprocessing.rst:1886
msgid ""
"If authentication is requested but do authentication key is specified then "
"the return value of ``current_process().authkey`` is used (see :class:"
"`~multiprocessing.Process`).  This value will automatically inherited by "
"any :class:`~multiprocessing.Process` object that the current process "
"creates. This means that (by default) all processes of a multi-process "
"program will share a single authentication key which can be used when "
"setting up connections between themselves."
msgstr ""

#: ../../../library/multiprocessing.rst:1894
msgid ""
"Suitable authentication keys can also be generated by using :func:`os."
"urandom`."
msgstr ""

#: ../../../library/multiprocessing.rst:1898
msgid "Logging"
msgstr ""

#: ../../../library/multiprocessing.rst:1900
msgid ""
"Some support for logging is available.  Note, however, that the :mod:"
"`logging` package does not use process shared locks so it is possible "
"(depending on the handler type) for messages from different processes to get "
"mixed up."
msgstr ""

#: ../../../library/multiprocessing.rst:1907
msgid ""
"Returns the logger used by :mod:`multiprocessing`.  If necessary, a new one "
"will be created."
msgstr ""

#: ../../../library/multiprocessing.rst:1910
msgid ""
"When first created the logger has level :data:`logging.NOTSET` and no "
"default handler. Messages sent to this logger will not by default propagate "
"to the root logger."
msgstr ""

#: ../../../library/multiprocessing.rst:1914
msgid ""
"Note that on Windows child processes will only inherit the level of the "
"parent process's logger -- any other customization of the logger will not be "
"inherited."
msgstr ""

#: ../../../library/multiprocessing.rst:1921
msgid ""
"This function performs a call to :func:`get_logger` but in addition to "
"returning the logger created by get_logger, it adds a handler which sends "
"output to :data:`sys.stderr` using format ``'[%(levelname)s/%(processName)s] "
"%(message)s'``."
msgstr ""

#: ../../../library/multiprocessing.rst:1926
msgid "Below is an example session with logging turned on::"
msgstr ""

#: ../../../library/multiprocessing.rst:1941
msgid ""
"In addition to having these two logging functions, the multiprocessing also "
"exposes two additional logging level attributes. These are  :const:"
"`SUBWARNING` and :const:`SUBDEBUG`. The table below illustrates where theses "
"fit in the normal level hierarchy."
msgstr ""

#: ../../../library/multiprocessing.rst:1947
msgid "Level"
msgstr ""

#: ../../../library/multiprocessing.rst:1947
msgid "Numeric value"
msgstr ""

#: ../../../library/multiprocessing.rst:1949
msgid "``SUBWARNING``"
msgstr ""

#: ../../../library/multiprocessing.rst:1949
msgid "25"
msgstr ""

#: ../../../library/multiprocessing.rst:1951
msgid "``SUBDEBUG``"
msgstr ""

#: ../../../library/multiprocessing.rst:1951
msgid "5"
msgstr ""

#: ../../../library/multiprocessing.rst:1954
msgid "For a full table of logging levels, see the :mod:`logging` module."
msgstr ""

#: ../../../library/multiprocessing.rst:1956
msgid ""
"These additional logging levels are used primarily for certain debug "
"messages within the multiprocessing module. Below is the same example as "
"above, except with :const:`SUBDEBUG` enabled::"
msgstr ""

#: ../../../library/multiprocessing.rst:1980
msgid "The :mod:`multiprocessing.dummy` module"
msgstr ""

#: ../../../library/multiprocessing.rst:1985
msgid ""
":mod:`multiprocessing.dummy` replicates the API of :mod:`multiprocessing` "
"but is no more than a wrapper around the :mod:`threading` module."
msgstr ""

#: ../../../library/multiprocessing.rst:1992
msgid "Programming guidelines"
msgstr ""

#: ../../../library/multiprocessing.rst:1994
msgid ""
"There are certain guidelines and idioms which should be adhered to when "
"using :mod:`multiprocessing`."
msgstr ""

#: ../../../library/multiprocessing.rst:1999
msgid "All platforms"
msgstr ""

#: ../../../library/multiprocessing.rst:2001
msgid "Avoid shared state"
msgstr ""

#: ../../../library/multiprocessing.rst:2003
msgid ""
"As far as possible one should try to avoid shifting large amounts of data "
"between processes."
msgstr ""

#: ../../../library/multiprocessing.rst:2006
msgid ""
"It is probably best to stick to using queues or pipes for communication "
"between processes rather than using the lower level synchronization "
"primitives from the :mod:`threading` module."
msgstr ""

#: ../../../library/multiprocessing.rst:2010
msgid "Picklability"
msgstr ""

#: ../../../library/multiprocessing.rst:2012
msgid "Ensure that the arguments to the methods of proxies are picklable."
msgstr ""

#: ../../../library/multiprocessing.rst:2014
msgid "Thread safety of proxies"
msgstr ""

#: ../../../library/multiprocessing.rst:2016
msgid ""
"Do not use a proxy object from more than one thread unless you protect it "
"with a lock."
msgstr ""

#: ../../../library/multiprocessing.rst:2019
msgid ""
"(There is never a problem with different processes using the *same* proxy.)"
msgstr ""

#: ../../../library/multiprocessing.rst:2021
msgid "Joining zombie processes"
msgstr ""

#: ../../../library/multiprocessing.rst:2023
msgid ""
"On Unix when a process finishes but has not been joined it becomes a zombie. "
"There should never be very many because each time a new process starts (or :"
"func:`active_children` is called) all completed processes which have not yet "
"been joined will be joined.  Also calling a finished process's :meth:"
"`Process.is_alive` will join the process.  Even so it is probably good "
"practice to explicitly join all the processes that you start."
msgstr ""

#: ../../../library/multiprocessing.rst:2030
msgid "Better to inherit than pickle/unpickle"
msgstr ""

#: ../../../library/multiprocessing.rst:2032
msgid ""
"On Windows many types from :mod:`multiprocessing` need to be picklable so "
"that child processes can use them.  However, one should generally avoid "
"sending shared objects to other processes using pipes or queues.  Instead "
"you should arrange the program so that a process which need access to a "
"shared resource created elsewhere can inherit it from an ancestor process."
msgstr ""

#: ../../../library/multiprocessing.rst:2038
msgid "Avoid terminating processes"
msgstr ""

#: ../../../library/multiprocessing.rst:2040
msgid ""
"Using the :meth:`Process.terminate` method to stop a process is liable to "
"cause any shared resources (such as locks, semaphores, pipes and queues) "
"currently being used by the process to become broken or unavailable to other "
"processes."
msgstr ""

#: ../../../library/multiprocessing.rst:2045
msgid ""
"Therefore it is probably best to only consider using :meth:`Process."
"terminate` on processes which never use any shared resources."
msgstr ""

#: ../../../library/multiprocessing.rst:2048
msgid "Joining processes that use queues"
msgstr ""

#: ../../../library/multiprocessing.rst:2050
msgid ""
"Bear in mind that a process that has put items in a queue will wait before "
"terminating until all the buffered items are fed by the \"feeder\" thread to "
"the underlying pipe.  (The child process can call the :meth:`Queue."
"cancel_join_thread` method of the queue to avoid this behaviour.)"
msgstr ""

#: ../../../library/multiprocessing.rst:2055
msgid ""
"This means that whenever you use a queue you need to make sure that all "
"items which have been put on the queue will eventually be removed before the "
"process is joined.  Otherwise you cannot be sure that processes which have "
"put items on the queue will terminate.  Remember also that non-daemonic "
"processes will be automatically be joined."
msgstr ""

#: ../../../library/multiprocessing.rst:2061
msgid "An example which will deadlock is the following::"
msgstr ""

#: ../../../library/multiprocessing.rst:2075
msgid ""
"A fix here would be to swap the last two lines round (or simply remove the "
"``p.join()`` line)."
msgstr ""

#: ../../../library/multiprocessing.rst:2078
msgid "Explicitly pass resources to child processes"
msgstr ""

#: ../../../library/multiprocessing.rst:2080
msgid ""
"On Unix a child process can make use of a shared resource created in a "
"parent process using a global resource.  However, it is better to pass the "
"object as an argument to the constructor for the child process."
msgstr ""

#: ../../../library/multiprocessing.rst:2084
msgid ""
"Apart from making the code (potentially) compatible with Windows this also "
"ensures that as long as the child process is still alive the object will not "
"be garbage collected in the parent process.  This might be important if some "
"resource is freed when the object is garbage collected in the parent process."
msgstr ""

#: ../../../library/multiprocessing.rst:2090
msgid "So for instance ::"
msgstr ""

#: ../../../library/multiprocessing.rst:2102
msgid "should be rewritten as ::"
msgstr ""

#: ../../../library/multiprocessing.rst:2114
msgid "Beware replacing sys.stdin with a \"file like object\""
msgstr ""

#: ../../../library/multiprocessing.rst:2116
msgid ":mod:`multiprocessing` originally unconditionally called::"
msgstr ""

#: ../../../library/multiprocessing.rst:2120
msgid ""
"in the :meth:`multiprocessing.Process._bootstrap` method --- this resulted "
"in issues with processes-in-processes. This has been changed to::"
msgstr ""

#: ../../../library/multiprocessing.rst:2126
msgid ""
"Which solves the fundamental issue of processes colliding with each other "
"resulting in a bad file descriptor error, but introduces a potential danger "
"to applications which replace :func:`sys.stdin` with a \"file-like object\" "
"with output buffering.  This danger is that if multiple processes call :func:"
"`close()` on this file-like object, it could result in the same data being "
"flushed to the object multiple times, resulting in corruption."
msgstr ""

#: ../../../library/multiprocessing.rst:2133
msgid ""
"If you write a file-like object and implement your own caching, you can make "
"it fork-safe by storing the pid whenever you append to the cache, and "
"discarding the cache when the pid changes. For example::"
msgstr ""

#: ../../../library/multiprocessing.rst:2145
msgid ""
"For more information, see :issue:`5155`, :issue:`5313` and :issue:`5331`"
msgstr ""

#: ../../../library/multiprocessing.rst:2148
msgid "Windows"
msgstr ""

#: ../../../library/multiprocessing.rst:2150
msgid "Since Windows lacks :func:`os.fork` it has a few extra restrictions:"
msgstr ""

#: ../../../library/multiprocessing.rst:2152
msgid "More picklability"
msgstr ""

#: ../../../library/multiprocessing.rst:2154
msgid ""
"Ensure that all arguments to :meth:`Process.__init__` are picklable.  This "
"means, in particular, that bound or unbound methods cannot be used directly "
"as the ``target`` argument on Windows --- just define a function and use "
"that instead."
msgstr ""

#: ../../../library/multiprocessing.rst:2159
msgid ""
"Also, if you subclass :class:`Process` then make sure that instances will be "
"picklable when the :meth:`Process.start` method is called."
msgstr ""

#: ../../../library/multiprocessing.rst:2162
msgid "Global variables"
msgstr ""

#: ../../../library/multiprocessing.rst:2164
msgid ""
"Bear in mind that if code run in a child process tries to access a global "
"variable, then the value it sees (if any) may not be the same as the value "
"in the parent process at the time that :meth:`Process.start` was called."
msgstr ""

#: ../../../library/multiprocessing.rst:2168
msgid ""
"However, global variables which are just module level constants cause no "
"problems."
msgstr ""

#: ../../../library/multiprocessing.rst:2171
msgid "Safe importing of main module"
msgstr ""

#: ../../../library/multiprocessing.rst:2173
msgid ""
"Make sure that the main module can be safely imported by a new Python "
"interpreter without causing unintended side effects (such a starting a new "
"process)."
msgstr ""

#: ../../../library/multiprocessing.rst:2177
msgid ""
"For example, under Windows running the following module would fail with a :"
"exc:`RuntimeError`::"
msgstr ""

#: ../../../library/multiprocessing.rst:2188
msgid ""
"Instead one should protect the \"entry point\" of the program by using ``if "
"__name__ == '__main__':`` as follows::"
msgstr ""

#: ../../../library/multiprocessing.rst:2201
msgid ""
"(The ``freeze_support()`` line can be omitted if the program will be run "
"normally instead of frozen.)"
msgstr ""

#: ../../../library/multiprocessing.rst:2204
msgid ""
"This allows the newly spawned Python interpreter to safely import the module "
"and then run the module's ``foo()`` function."
msgstr ""

#: ../../../library/multiprocessing.rst:2207
msgid ""
"Similar restrictions apply if a pool or manager is created in the main "
"module."
msgstr ""

#: ../../../library/multiprocessing.rst:2214
msgid "Examples"
msgstr ""

#: ../../../library/multiprocessing.rst:2216
msgid "Demonstration of how to create and use customized managers and proxies:"
msgstr ""

#: ../../../library/multiprocessing.rst:2221
msgid "Using :class:`Pool`:"
msgstr ""

#: ../../../library/multiprocessing.rst:2226
msgid "Synchronization types like locks, conditions and queues:"
msgstr ""

#: ../../../library/multiprocessing.rst:2231
msgid ""
"An example showing how to use queues to feed tasks to a collection of worker "
"process and collect the results:"
msgstr ""

#: ../../../library/multiprocessing.rst:2237
msgid ""
"An example of how a pool of worker processes can each run a :class:`~http."
"server.SimpleHTTPRequestHandler` instance while sharing a single listening "
"socket."
msgstr ""

#: ../../../library/multiprocessing.rst:2244
msgid ""
"Some simple benchmarks comparing :mod:`multiprocessing` with :mod:"
"`threading`:"
msgstr ""
