# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/gcsupport.rst:6
msgid "Supporting Cyclic Garbage Collection"
msgstr ""

#: ../../../c-api/gcsupport.rst:8
msgid ""
"Python's support for detecting and collecting garbage which involves "
"circular references requires support from object types which are "
"\"containers\" for other objects which may also be containers.  Types which "
"do not store references to other objects, or which only store references to "
"atomic types (such as numbers or strings), do not need to provide any "
"explicit support for garbage collection."
msgstr ""

#: ../../../c-api/gcsupport.rst:15
msgid ""
"To create a container type, the :attr:`tp_flags` field of the type object "
"must include the :const:`Py_TPFLAGS_HAVE_GC` and provide an implementation "
"of the :attr:`tp_traverse` handler.  If instances of the type are mutable, "
"a :attr:`tp_clear` implementation must also be provided."
msgstr ""

#: ../../../c-api/gcsupport.rst:24
msgid ""
"Objects with a type with this flag set must conform with the rules "
"documented here.  For convenience these objects will be referred to as "
"container objects."
msgstr ""

#: ../../../c-api/gcsupport.rst:28
msgid "Constructors for container types must conform to two rules:"
msgstr ""

#: ../../../c-api/gcsupport.rst:30
msgid ""
"The memory for the object must be allocated using :cfunc:`PyObject_GC_New` "
"or :cfunc:`PyObject_GC_NewVar`."
msgstr ""

#: ../../../c-api/gcsupport.rst:33
msgid ""
"Once all the fields which may contain references to other containers are "
"initialized, it must call :cfunc:`PyObject_GC_Track`."
msgstr ""

#: ../../../c-api/gcsupport.rst:69
msgid ""
"Similarly, the deallocator for the object must conform to a similar pair of "
"rules:"
msgstr ""

#: ../../../c-api/gcsupport.rst:72
msgid ""
"Before fields which refer to other containers are invalidated, :cfunc:"
"`PyObject_GC_UnTrack` must be called."
msgstr ""

#: ../../../c-api/gcsupport.rst:75
msgid "The object's memory must be deallocated using :cfunc:`PyObject_GC_Del`."
msgstr ""

#: ../../../c-api/gcsupport.rst:98
msgid ""
"The :attr:`tp_traverse` handler accepts a function parameter of this type:"
msgstr ""

#: ../../../c-api/gcsupport.rst:110
msgid "The :attr:`tp_traverse` handler must have the following type:"
msgstr ""

#: ../../../c-api/gcsupport.rst:122
msgid ""
"To simplify writing :attr:`tp_traverse` handlers, a :cfunc:`Py_VISIT` macro "
"is provided.  In order to use this macro, the :attr:`tp_traverse` "
"implementation must name its arguments exactly *visit* and *arg*:"
msgstr ""

#: ../../../c-api/gcsupport.rst:141
msgid ""
"The :attr:`tp_clear` handler must be of the :ctype:`inquiry` type, or *NULL* "
"if the object is immutable."
msgstr ""
