# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/buffer.rst:6
msgid "Buffer Protocol"
msgstr ""

#: ../../../c-api/buffer.rst:15
msgid ""
"Certain objects available in Python wrap access to an underlying memory "
"array or *buffer*.  Such objects include the built-in :class:`bytes` and :"
"class:`bytearray`, and some extension types like :class:`array.array`. Third-"
"party libraries may define their own types for special purposes, such as "
"image processing or numeric analysis."
msgstr ""

#: ../../../c-api/buffer.rst:21
msgid ""
"While each of these types have their own semantics, they share the common "
"characteristic of being backed by a possibly large memory buffer.  It is "
"then desireable, in some situations, to access that buffer directly and "
"without intermediate copying."
msgstr ""

#: ../../../c-api/buffer.rst:26
msgid ""
"Python provides such a facility at the C level in the form of the *buffer "
"protocol*.  This protocol has two sides:"
msgstr ""

#: ../../../c-api/buffer.rst:31
msgid ""
"on the producer side, a type can export a \"buffer interface\" which allows "
"objects of that type to expose information about their underlying buffer. "
"This interface is described in the section :ref:`buffer-structs`;"
msgstr ""

#: ../../../c-api/buffer.rst:35
msgid ""
"on the consumer side, several means are available to obtain a pointer to the "
"raw underlying data of an object (for example a method parameter)."
msgstr ""

#: ../../../c-api/buffer.rst:38
msgid ""
"Simple objects such as :class:`bytes` and :class:`bytearray` expose their "
"underlying buffer in byte-oriented form.  Other forms are possible; for "
"example, the elements exposed by a :class:`array.array` can be multi-byte "
"values."
msgstr ""

#: ../../../c-api/buffer.rst:42
msgid ""
"An example consumer of the buffer interface is the :meth:`~io.BufferedIOBase."
"write` method of file objects: any object that can export a series of bytes "
"through the buffer interface can be written to a file.  While :meth:`write` "
"only needs read-only access to the internal contents of the object passed to "
"it, other methods such as :meth:`~io.BufferedIOBase.readinto` need write "
"access to the contents of their argument.  The buffer interface allows "
"objects to selectively allow or reject exporting of read-write and read-only "
"buffers."
msgstr ""

#: ../../../c-api/buffer.rst:50
msgid ""
"There are two ways for a consumer of the buffer interface to acquire a "
"buffer over a target object:"
msgstr ""

#: ../../../c-api/buffer.rst:53
msgid "call :cfunc:`PyObject_GetBuffer` with the right parameters;"
msgstr ""

#: ../../../c-api/buffer.rst:55
msgid ""
"call :cfunc:`PyArg_ParseTuple` (or one of its siblings) with one of the "
"``y*``, ``w*`` or ``s*`` :ref:`format codes <arg-parsing>`."
msgstr ""

#: ../../../c-api/buffer.rst:58
msgid ""
"In both cases, :cfunc:`PyBuffer_Release` must be called when the buffer "
"isn't needed anymore.  Failure to do so could lead to various issues such as "
"resource leaks."
msgstr ""

#: ../../../c-api/buffer.rst:64
msgid "The buffer structure"
msgstr ""

#: ../../../c-api/buffer.rst:66
msgid ""
"Buffer structures (or simply \"buffers\") are useful as a way to expose the "
"binary data from another object to the Python programmer.  They can also be "
"used as a zero-copy slicing mechanism.  Using their ability to reference a "
"block of memory, it is possible to expose any data to the Python programmer "
"quite easily.  The memory could be a large, constant array in a C extension, "
"it could be a raw block of memory for manipulation before passing to an "
"operating system library, or it could be used to pass around structured data "
"in its native, in-memory format."
msgstr ""

#: ../../../c-api/buffer.rst:75
msgid ""
"Contrary to most data types exposed by the Python interpreter, buffers are "
"not :ctype:`PyObject` pointers but rather simple C structures.  This allows "
"them to be created and copied very simply.  When a generic wrapper around a "
"buffer is needed, a :ref:`memoryview <memoryview-objects>` object can be "
"created."
msgstr ""

#: ../../../c-api/buffer.rst:168
msgid "Buffer-related functions"
msgstr ""

#: ../../../c-api/buffer.rst:12
msgid "buffer interface"
msgstr ""

#: ../../../c-api/buffer.rst:29
msgid "PyBufferProcs"
msgstr ""
