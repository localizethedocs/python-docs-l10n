# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/subprocess.rst:2
msgid ":mod:`subprocess` --- Subprocess management"
msgstr ""

#: ../../../library/subprocess.rst:10
msgid ""
"The :mod:`subprocess` module allows you to spawn new processes, connect to "
"their input/output/error pipes, and obtain their return codes.  This module "
"intends to replace several other, older modules and functions, such as::"
msgstr ""

#: ../../../library/subprocess.rst:14
msgid ""
"os.system\n"
"os.spawn*"
msgstr ""

#: ../../../library/subprocess.rst:17
msgid ""
"Information about how the :mod:`subprocess` module can be used to replace "
"these modules and functions can be found in the following sections."
msgstr ""

#: ../../../library/subprocess.rst:22
msgid ":pep:`324` -- PEP proposing the subprocess module"
msgstr ""

#: ../../../library/subprocess.rst:26
msgid "Using the subprocess Module"
msgstr ""

#: ../../../library/subprocess.rst:28
msgid "This module defines one class called :class:`Popen`:"
msgstr ""

#: ../../../library/subprocess.rst:33
msgid "Arguments are:"
msgstr ""

#: ../../../library/subprocess.rst:35
msgid ""
"*args* should be a string, or a sequence of program arguments.  The program "
"to execute is normally the first item in the args sequence or the string if "
"a string is given, but can be explicitly set by using the *executable* "
"argument.  When *executable* is given, the first item in the args sequence "
"is still treated by most programs as the command name, which can then be "
"different from the actual executable name.  On Unix, it becomes the display "
"name for the executing program in utilities such as :program:`ps`."
msgstr ""

#: ../../../library/subprocess.rst:43
msgid ""
"On Unix, with *shell=False* (default): In this case, the Popen class uses :"
"meth:`os.execvp` to execute the child program. *args* should normally be a "
"sequence.  If a string is specified for *args*, it will be used as the name "
"or path of the program to execute; this will only work if the program is "
"being given no arguments."
msgstr ""

#: ../../../library/subprocess.rst:51
msgid ""
":meth:`shlex.split` can be useful when determining the correct tokenization "
"for *args*, especially in complex cases::"
msgstr ""

#: ../../../library/subprocess.rst:54
msgid ""
">>> import shlex, subprocess\n"
">>> command_line = input()\n"
"/bin/vikings -input eggs.txt -output \"spam spam.txt\" -cmd \"echo "
"'$MONEY'\"\n"
">>> args = shlex.split(command_line)\n"
">>> print(args)\n"
"['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "
"\"echo '$MONEY'\"]\n"
">>> p = subprocess.Popen(args) # Success!"
msgstr ""

#: ../../../library/subprocess.rst:62
msgid ""
"Note in particular that options (such as *-input*) and arguments (such as "
"*eggs.txt*) that are separated by whitespace in the shell go in separate "
"list elements, while arguments that need quoting or backslash escaping when "
"used in the shell (such as filenames containing spaces or the *echo* command "
"shown above) are single list elements."
msgstr ""

#: ../../../library/subprocess.rst:68
msgid ""
"On Unix, with *shell=True*: If args is a string, it specifies the command "
"string to execute through the shell.  This means that the string must be "
"formatted exactly as it would be when typed at the shell prompt.  This "
"includes, for example, quoting or backslash escaping filenames with spaces "
"in them.  If *args* is a sequence, the first item specifies the command "
"string, and any additional items will be treated as additional arguments to "
"the shell itself.  That is to say, *Popen* does the equivalent of::"
msgstr ""

#: ../../../library/subprocess.rst:76
msgid "Popen(['/bin/sh', '-c', args[0], args[1], ...])"
msgstr ""

#: ../../../library/subprocess.rst:80
msgid ""
"Executing shell commands that incorporate unsanitized input from an "
"untrusted source makes a program vulnerable to `shell injection <http://en."
"wikipedia.org/wiki/Shell_injection#Shell_injection>`_, a serious security "
"flaw which can result in arbitrary command execution. For this reason, the "
"use of *shell=True* is **strongly discouraged** in cases where the command "
"string is constructed from external input::"
msgstr ""

#: ../../../library/subprocess.rst:87
msgid ""
">>> from subprocess import call\n"
">>> filename = input(\"What file would you like to display?\\n\")\n"
"What file would you like to display?\n"
"non_existent; rm -rf / #\n"
">>> call(\"cat \" + filename, shell=True) # Uh-oh. This will end badly..."
msgstr ""

#: ../../../library/subprocess.rst:93
msgid ""
"*shell=False* does not suffer from this vulnerability; the above Note may be "
"helpful in getting code using *shell=False* to work."
msgstr ""

#: ../../../library/subprocess.rst:96
msgid ""
"On Windows: the :class:`Popen` class uses CreateProcess() to execute the "
"child program, which operates on strings.  If *args* is a sequence, it will "
"be converted to a string in a manner described in :ref:`converting-argument-"
"sequence`."
msgstr ""

#: ../../../library/subprocess.rst:101
msgid ""
"*bufsize*, if given, has the same meaning as the corresponding argument to "
"the built-in open() function: :const:`0` means unbuffered, :const:`1` means "
"line buffered, any other positive value means use a buffer of "
"(approximately) that size.  A negative *bufsize* means to use the system "
"default, which usually means fully buffered.  The default value for "
"*bufsize* is :const:`0` (unbuffered)."
msgstr ""

#: ../../../library/subprocess.rst:109
msgid ""
"If you experience performance issues, it is recommended that you try to "
"enable buffering by setting *bufsize* to either -1 or a large enough "
"positive value (such as 4096)."
msgstr ""

#: ../../../library/subprocess.rst:113
msgid ""
"The *executable* argument specifies the program to execute. It is very "
"seldom needed: Usually, the program to execute is defined by the *args* "
"argument. If ``shell=True``, the *executable* argument specifies which shell "
"to use. On Unix, the default shell is :file:`/bin/sh`.  On Windows, the "
"default shell is specified by the :envvar:`COMSPEC` environment variable. "
"The only reason you would need to specify ``shell=True`` on Windows is where "
"the command you wish to execute is actually built in to the shell, eg "
"``dir``, ``copy``. You don't need ``shell=True`` to run a batch file, nor to "
"run a console-based executable."
msgstr ""

#: ../../../library/subprocess.rst:123
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed programs' standard "
"input, standard output and standard error file handles, respectively.  Valid "
"values are :data:`PIPE`, an existing file descriptor (a positive integer), "
"an existing :term:`file object`, and ``None``.  :data:`PIPE` indicates that "
"a new pipe to the child should be created.  With ``None``, no redirection "
"will occur; the child's file handles will be inherited from the parent.  "
"Additionally, *stderr* can be :data:`STDOUT`, which indicates that the "
"stderr data from the applications should be captured into the same file "
"handle as for stdout."
msgstr ""

#: ../../../library/subprocess.rst:132
msgid ""
"If *preexec_fn* is set to a callable object, this object will be called in "
"the child process just before the child is executed. (Unix only)"
msgstr ""

#: ../../../library/subprocess.rst:135
msgid ""
"If *close_fds* is true, all file descriptors except :const:`0`, :const:`1` "
"and :const:`2` will be closed before the child process is executed. (Unix "
"only). Or, on Windows, if *close_fds* is true then no handles will be "
"inherited by the child process.  Note that on Windows, you cannot set "
"*close_fds* to true and also redirect the standard handles by setting "
"*stdin*, *stdout* or *stderr*."
msgstr ""

#: ../../../library/subprocess.rst:141
msgid ""
"If *shell* is :const:`True`, the specified command will be executed through "
"the shell."
msgstr ""

#: ../../../library/subprocess.rst:144
msgid ""
"If *cwd* is not ``None``, the child's current directory will be changed to "
"*cwd* before it is executed.  Note that this directory is not considered "
"when searching the executable, so you can't specify the program's path "
"relative to *cwd*."
msgstr ""

#: ../../../library/subprocess.rst:149
msgid ""
"If *env* is not ``None``, it must be a mapping that defines the environment "
"variables for the new process; these are used instead of inheriting the "
"current process' environment, which is the default behavior."
msgstr ""

#: ../../../library/subprocess.rst:155
msgid ""
"If specified, *env* must provide any variables required for the program to "
"execute.  On Windows, in order to run a `side-by-side assembly`_ the "
"specified *env* **must** include a valid :envvar:`SystemRoot`."
msgstr ""

#: ../../../library/subprocess.rst:161
msgid ""
"If *universal_newlines* is :const:`True`, the file objects stdout and stderr "
"are opened as text files, but lines may be terminated by any of ``'\\n'``, "
"the Unix end-of-line convention, ``'\\r'``, the old Macintosh convention or "
"``'\\r\\n'``, the Windows convention. All of these external representations "
"are seen as ``'\\n'`` by the Python program."
msgstr ""

#: ../../../library/subprocess.rst:169
msgid ""
"This feature is only available if Python is built with universal newline "
"support (the default).  Also, the newlines attribute of the file objects :"
"attr:`stdout`, :attr:`stdin` and :attr:`stderr` are not updated by the :meth:"
"`communicate` method."
msgstr ""

#: ../../../library/subprocess.rst:174
msgid ""
"If given, *startupinfo* will be a :class:`STARTUPINFO` object, which is "
"passed to the underlying ``CreateProcess`` function. *creationflags*, if "
"given, can be :data:`CREATE_NEW_CONSOLE`. (Windows only)"
msgstr ""

#: ../../../library/subprocess.rst:181
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :class:`Popen` and indicates that a pipe to the standard stream should be "
"opened."
msgstr ""

#: ../../../library/subprocess.rst:188
msgid ""
"Special value that can be used as the *stderr* argument to :class:`Popen` "
"and indicates that standard error should go into the same handle as standard "
"output."
msgstr ""

#: ../../../library/subprocess.rst:194
msgid "Convenience Functions"
msgstr ""

#: ../../../library/subprocess.rst:196
msgid "This module also defines the following shortcut functions:"
msgstr ""

#: ../../../library/subprocess.rst:201
msgid ""
"Run command with arguments.  Wait for command to complete, then return the :"
"attr:`returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:204 ../../../library/subprocess.rst:222
msgid "The arguments are the same as for the Popen constructor.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:206
msgid ">>> retcode = subprocess.call([\"ls\", \"-l\"])"
msgstr ""

#: ../../../library/subprocess.rst:210
msgid ""
"Like :meth:`Popen.wait`, this will deadlock if the child process generates "
"enough output to a stdout or stderr pipe such that it blocks waiting for the "
"OS pipe buffer to accept more data."
msgstr ""

#: ../../../library/subprocess.rst:217
msgid ""
"Run command with arguments.  Wait for command to complete. If the exit code "
"was zero then return, otherwise raise :exc:`CalledProcessError`. The :exc:"
"`CalledProcessError` object will have the return code in the :attr:"
"`returncode` attribute."
msgstr ""

#: ../../../library/subprocess.rst:224
msgid ""
">>> subprocess.check_call([\"ls\", \"-l\"])\n"
"0"
msgstr ""

#: ../../../library/subprocess.rst:229
msgid "See the warning for :func:`call`."
msgstr ""

#: ../../../library/subprocess.rst:234
msgid "Run command with arguments and return its output as a byte string."
msgstr ""

#: ../../../library/subprocess.rst:236
msgid ""
"If the exit code was non-zero it raises a :exc:`CalledProcessError`.  The :"
"exc:`CalledProcessError` object will have the return code in the :attr:"
"`returncode` attribute and output in the :attr:`output` attribute."
msgstr ""

#: ../../../library/subprocess.rst:241
msgid ""
"The arguments are the same as for the :class:`Popen` constructor.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:243
msgid ""
">>> subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"])\n"
"b'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'"
msgstr ""

#: ../../../library/subprocess.rst:246
msgid ""
"The stdout argument is not allowed as it is used internally. To capture "
"standard error in the result, use ``stderr=subprocess.STDOUT``::"
msgstr ""

#: ../../../library/subprocess.rst:249
msgid ""
">>> subprocess.check_output(\n"
"...     [\"/bin/sh\", \"-c\", \"ls non_existent_file; exit 0\"],\n"
"...     stderr=subprocess.STDOUT)\n"
"b'ls: non_existent_file: No such file or directory\\n'"
msgstr ""

#: ../../../library/subprocess.rst:259
msgid "Return ``(status, output)`` of executing *cmd* in a shell."
msgstr ""

#: ../../../library/subprocess.rst:261
msgid ""
"Execute the string *cmd* in a shell with :func:`os.popen` and return a 2-"
"tuple ``(status, output)``.  *cmd* is actually run as ``{ cmd ; } 2>&1``, so "
"that the returned output will contain output or error messages.  A trailing "
"newline is stripped from the output.  The exit status for the command can be "
"interpreted according to the rules for the C function :cfunc:`wait`.  "
"Example::"
msgstr ""

#: ../../../library/subprocess.rst:267
msgid ""
">>> subprocess.getstatusoutput('ls /bin/ls')\n"
"(0, '/bin/ls')\n"
">>> subprocess.getstatusoutput('cat /bin/junk')\n"
"(256, 'cat: /bin/junk: No such file or directory')\n"
">>> subprocess.getstatusoutput('/bin/junk')\n"
"(256, 'sh: /bin/junk: not found')"
msgstr ""

#: ../../../library/subprocess.rst:274 ../../../library/subprocess.rst:287
msgid "Availability: UNIX."
msgstr ""

#: ../../../library/subprocess.rst:279
msgid "Return output (stdout and stderr) of executing *cmd* in a shell."
msgstr ""

#: ../../../library/subprocess.rst:281
msgid ""
"Like :func:`getstatusoutput`, except the exit status is ignored and the "
"return value is a string containing the command's output.  Example::"
msgstr ""

#: ../../../library/subprocess.rst:284
msgid ""
">>> subprocess.getoutput('ls /bin/ls')\n"
"'/bin/ls'"
msgstr ""

#: ../../../library/subprocess.rst:291
msgid "Exceptions"
msgstr ""

#: ../../../library/subprocess.rst:293
msgid ""
"Exceptions raised in the child process, before the new program has started "
"to execute, will be re-raised in the parent.  Additionally, the exception "
"object will have one extra attribute called :attr:`child_traceback`, which "
"is a string containing traceback information from the child's point of view."
msgstr ""

#: ../../../library/subprocess.rst:298
msgid ""
"The most common exception raised is :exc:`OSError`.  This occurs, for "
"example, when trying to execute a non-existent file.  Applications should "
"prepare for :exc:`OSError` exceptions."
msgstr ""

#: ../../../library/subprocess.rst:302
msgid ""
"A :exc:`ValueError` will be raised if :class:`Popen` is called with invalid "
"arguments."
msgstr ""

#: ../../../library/subprocess.rst:305
msgid ""
"check_call() will raise :exc:`CalledProcessError`, if the called process "
"returns a non-zero return code."
msgstr ""

#: ../../../library/subprocess.rst:310
msgid "Security"
msgstr ""

#: ../../../library/subprocess.rst:312
msgid ""
"Unlike some other popen functions, this implementation will never call /bin/"
"sh implicitly.  This means that all characters, including shell "
"metacharacters, can safely be passed to child processes."
msgstr ""

#: ../../../library/subprocess.rst:318
msgid "Popen Objects"
msgstr ""

#: ../../../library/subprocess.rst:320
msgid "Instances of the :class:`Popen` class have the following methods:"
msgstr ""

#: ../../../library/subprocess.rst:325
msgid ""
"Check if child process has terminated.  Set and return :attr:`returncode` "
"attribute."
msgstr ""

#: ../../../library/subprocess.rst:331
msgid ""
"Wait for child process to terminate.  Set and return :attr:`returncode` "
"attribute."
msgstr ""

#: ../../../library/subprocess.rst:336
msgid ""
"This will deadlock if the child process generates enough output to a stdout "
"or stderr pipe such that it blocks waiting for the OS pipe buffer to accept "
"more data.  Use :meth:`communicate` to avoid that."
msgstr ""

#: ../../../library/subprocess.rst:343
msgid ""
"Interact with process: Send data to stdin.  Read data from stdout and "
"stderr, until end-of-file is reached.  Wait for process to terminate. The "
"optional *input* argument should be a byte string to be sent to the child "
"process, or ``None``, if no data should be sent to the child."
msgstr ""

#: ../../../library/subprocess.rst:348
msgid ":meth:`communicate` returns a tuple ``(stdoutdata, stderrdata)``."
msgstr ""

#: ../../../library/subprocess.rst:350
msgid ""
"Note that if you want to send data to the process's stdin, you need to "
"create the Popen object with ``stdin=PIPE``.  Similarly, to get anything "
"other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` "
"and/or ``stderr=PIPE`` too."
msgstr ""

#: ../../../library/subprocess.rst:357
msgid ""
"The data read is buffered in memory, so do not use this method if the data "
"size is large or unlimited."
msgstr ""

#: ../../../library/subprocess.rst:363
msgid "Sends the signal *signal* to the child."
msgstr ""

#: ../../../library/subprocess.rst:367
msgid ""
"On Windows only SIGTERM is supported so far. It's an alias for :meth:"
"`terminate`."
msgstr ""

#: ../../../library/subprocess.rst:373
msgid ""
"Stop the child. On Posix OSs the method sends SIGTERM to the child. On "
"Windows the Win32 API function :cfunc:`TerminateProcess` is called to stop "
"the child."
msgstr ""

#: ../../../library/subprocess.rst:380
msgid ""
"Kills the child. On Posix OSs the function sends SIGKILL to the child. On "
"Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""

#: ../../../library/subprocess.rst:384
msgid "The following attributes are also available:"
msgstr ""

#: ../../../library/subprocess.rst:388
msgid ""
"Use :meth:`communicate` rather than :attr:`.stdin.write <stdin>`, :attr:`."
"stdout.read <stdout>` or :attr:`.stderr.read <stderr>` to avoid deadlocks "
"due to any of the other OS pipe buffers filling up and blocking the child "
"process."
msgstr ""

#: ../../../library/subprocess.rst:396
msgid ""
"If the *stdin* argument was :data:`PIPE`, this attribute is a :term:`file "
"object` that provides input to the child process.  Otherwise, it is ``None``."
msgstr ""

#: ../../../library/subprocess.rst:402
msgid ""
"If the *stdout* argument was :data:`PIPE`, this attribute is a :term:`file "
"object` that provides output from the child process.  Otherwise, it is "
"``None``."
msgstr ""

#: ../../../library/subprocess.rst:408
msgid ""
"If the *stderr* argument was :data:`PIPE`, this attribute is a :term:`file "
"object` that provides error output from the child process.  Otherwise, it is "
"``None``."
msgstr ""

#: ../../../library/subprocess.rst:415
msgid "The process ID of the child process."
msgstr ""

#: ../../../library/subprocess.rst:417
msgid ""
"Note that if you set the *shell* argument to ``True``, this is the process "
"ID of the spawned shell."
msgstr ""

#: ../../../library/subprocess.rst:423
msgid ""
"The child return code, set by :meth:`poll` and :meth:`wait` (and indirectly "
"by :meth:`communicate`).  A ``None`` value indicates that the process hasn't "
"terminated yet."
msgstr ""

#: ../../../library/subprocess.rst:427
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (Unix only)."
msgstr ""

#: ../../../library/subprocess.rst:432
msgid "Windows Popen Helpers"
msgstr ""

#: ../../../library/subprocess.rst:434
msgid ""
"The :class:`STARTUPINFO` class and following constants are only available on "
"Windows."
msgstr ""

#: ../../../library/subprocess.rst:439
msgid ""
"Partial support of the Windows `STARTUPINFO <http://msdn.microsoft.com/en-us/"
"library/ms686331(v=vs.85).aspx>`__ structure is used for :class:`Popen` "
"creation."
msgstr ""

#: ../../../library/subprocess.rst:445
msgid ""
"A bit field that determines whether certain :class:`STARTUPINFO` members are "
"used when the process creates a window. ::"
msgstr ""

#: ../../../library/subprocess.rst:448
msgid ""
"si = subprocess.STARTUPINFO()\n"
"si.dwFlags = subprocess.STARTF_USESTDHANDLES | subprocess."
"STARTF_USESHOWWINDOW"
msgstr ""

#: ../../../library/subprocess.rst:453
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this member is "
"the standard input handle for the process. If :data:`STARTF_USESTDHANDLES` "
"is not specified, the default for standard input is the keyboard buffer."
msgstr ""

#: ../../../library/subprocess.rst:459
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this member is "
"the standard output handle for the process. Otherwise, this member is "
"ignored and the default for standard output is the console window's buffer."
msgstr ""

#: ../../../library/subprocess.rst:466
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this member is "
"the standard error handle for the process. Otherwise, this member is ignored "
"and the default for standard error is the console window's buffer."
msgstr ""

#: ../../../library/subprocess.rst:472
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESHOWWINDOW`, this member can "
"be any of the values that can be specified in the ``nCmdShow`` parameter for "
"the `ShowWindow <http://msdn.microsoft.com/en-us/library/ms633548(v=vs.85)."
"aspx>`__ function, except for ``SW_SHOWDEFAULT``. Otherwise, this member is "
"ignored."
msgstr ""

#: ../../../library/subprocess.rst:479
msgid ""
":data:`SW_HIDE` is provided for this attribute. It is used when :class:"
"`Popen` is called with ``shell=True``."
msgstr ""

#: ../../../library/subprocess.rst:484
msgid "Constants"
msgstr ""

#: ../../../library/subprocess.rst:486
msgid "The :mod:`subprocess` module exposes the following constants."
msgstr ""

#: ../../../library/subprocess.rst:490
msgid ""
"The standard input device. Initially, this is the console input buffer, "
"``CONIN$``."
msgstr ""

#: ../../../library/subprocess.rst:495
msgid ""
"The standard output device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""

#: ../../../library/subprocess.rst:500
msgid ""
"The standard error device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""

#: ../../../library/subprocess.rst:505
msgid "Hides the window. Another window will be activated."
msgstr ""

#: ../../../library/subprocess.rst:509
msgid ""
"Specifies that the :attr:`STARTUPINFO.hStdInput`, :attr:`STARTUPINFO."
"hStdOutput`, and :attr:`STARTUPINFO.hStdError` members contain additional "
"information."
msgstr ""

#: ../../../library/subprocess.rst:515
msgid ""
"Specifies that the :attr:`STARTUPINFO.wShowWindow` member contains "
"additional information."
msgstr ""

#: ../../../library/subprocess.rst:520
msgid ""
"The new process has a new console, instead of inheriting its parent's "
"console (the default)."
msgstr ""

#: ../../../library/subprocess.rst:523
msgid ""
"This flag is always set when :class:`Popen` is created with ``shell=True``."
msgstr ""

#: ../../../library/subprocess.rst:529
msgid "Replacing Older Functions with the subprocess Module"
msgstr ""

#: ../../../library/subprocess.rst:531
msgid ""
"In this section, \"a ==> b\" means that b can be used as a replacement for a."
msgstr ""

#: ../../../library/subprocess.rst:535
msgid ""
"All functions in this section fail (more or less) silently if the executed "
"program cannot be found; this module raises an :exc:`OSError` exception."
msgstr ""

#: ../../../library/subprocess.rst:538
msgid ""
"In the following examples, we assume that the subprocess module is imported "
"with \"from subprocess import \\*\"."
msgstr ""

#: ../../../library/subprocess.rst:543
msgid "Replacing /bin/sh shell backquote"
msgstr ""

#: ../../../library/subprocess.rst:547
msgid ""
"output=`mycmd myarg`\n"
"==>\n"
"output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]"
msgstr ""

#: ../../../library/subprocess.rst:553
msgid "Replacing shell pipeline"
msgstr ""

#: ../../../library/subprocess.rst:557
msgid ""
"output=`dmesg | grep hda`\n"
"==>\n"
"p1 = Popen([\"dmesg\"], stdout=PIPE)\n"
"p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\n"
"p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n"
"output = p2.communicate()[0]"
msgstr ""

#: ../../../library/subprocess.rst:564
msgid ""
"The p1.stdout.close() call after starting the p2 is important in order for "
"p1 to receive a SIGPIPE if p2 exits before p1."
msgstr ""

#: ../../../library/subprocess.rst:568
msgid "Replacing :func:`os.system`"
msgstr ""

#: ../../../library/subprocess.rst:572
msgid ""
"sts = os.system(\"mycmd\" + \" myarg\")\n"
"==>\n"
"p = Popen(\"mycmd\" + \" myarg\", shell=True)\n"
"sts = os.waitpid(p.pid, 0)[1]"
msgstr ""

#: ../../../library/subprocess.rst:577
msgid "Notes:"
msgstr ""

#: ../../../library/subprocess.rst:579
msgid "Calling the program through the shell is usually not required."
msgstr ""

#: ../../../library/subprocess.rst:581
msgid ""
"It's easier to look at the :attr:`returncode` attribute than the exit status."
msgstr ""

#: ../../../library/subprocess.rst:583
msgid "A more realistic example would look like this::"
msgstr ""

#: ../../../library/subprocess.rst:585
msgid ""
"try:\n"
"    retcode = call(\"mycmd\" + \" myarg\", shell=True)\n"
"    if retcode < 0:\n"
"        print(\"Child was terminated by signal\", -retcode, file=sys."
"stderr)\n"
"    else:\n"
"        print(\"Child returned\", retcode, file=sys.stderr)\n"
"except OSError as e:\n"
"    print(\"Execution failed:\", e, file=sys.stderr)"
msgstr ""

#: ../../../library/subprocess.rst:596
msgid "Replacing the :func:`os.spawn <os.spawnl>` family"
msgstr ""

#: ../../../library/subprocess.rst:598
msgid "P_NOWAIT example::"
msgstr ""

#: ../../../library/subprocess.rst:600
msgid ""
"pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n"
"==>\n"
"pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid"
msgstr ""

#: ../../../library/subprocess.rst:604
msgid "P_WAIT example::"
msgstr ""

#: ../../../library/subprocess.rst:606
msgid ""
"retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n"
"==>\n"
"retcode = call([\"/bin/mycmd\", \"myarg\"])"
msgstr ""

#: ../../../library/subprocess.rst:610
msgid "Vector example::"
msgstr ""

#: ../../../library/subprocess.rst:612
msgid ""
"os.spawnvp(os.P_NOWAIT, path, args)\n"
"==>\n"
"Popen([path] + args[1:])"
msgstr ""

#: ../../../library/subprocess.rst:616
msgid "Environment example::"
msgstr ""

#: ../../../library/subprocess.rst:618
msgid ""
"os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\n"
"==>\n"
"Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})"
msgstr ""

#: ../../../library/subprocess.rst:625
msgid "Replacing :func:`os.popen`, :func:`os.popen2`, :func:`os.popen3`"
msgstr ""

#: ../../../library/subprocess.rst:629
msgid ""
"(child_stdin, child_stdout) = os.popen2(cmd, mode, bufsize)\n"
"==>\n"
"p = Popen(cmd, shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, close_fds=True)\n"
"(child_stdin, child_stdout) = (p.stdin, p.stdout)"
msgstr ""

#: ../../../library/subprocess.rst:637
msgid ""
"(child_stdin,\n"
" child_stdout,\n"
" child_stderr) = os.popen3(cmd, mode, bufsize)\n"
"==>\n"
"p = Popen(cmd, shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n"
"(child_stdin,\n"
" child_stdout,\n"
" child_stderr) = (p.stdin, p.stdout, p.stderr)"
msgstr ""

#: ../../../library/subprocess.rst:649
msgid ""
"(child_stdin, child_stdout_and_stderr) = os.popen4(cmd, mode, bufsize)\n"
"==>\n"
"p = Popen(cmd, shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)\n"
"(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)"
msgstr ""

#: ../../../library/subprocess.rst:655
msgid "Return code handling translates as follows::"
msgstr ""

#: ../../../library/subprocess.rst:657
msgid ""
"pipe = os.popen(cmd, 'w')\n"
"...\n"
"rc = pipe.close()\n"
"if rc is not None and rc >> 8:\n"
"    print(\"There were some errors\")\n"
"==>\n"
"process = Popen(cmd, 'w', stdin=PIPE)\n"
"...\n"
"process.stdin.close()\n"
"if process.wait() != 0:\n"
"    print(\"There were some errors\")"
msgstr ""

#: ../../../library/subprocess.rst:671
msgid "Replacing functions from the :mod:`popen2` module"
msgstr ""

#: ../../../library/subprocess.rst:675
msgid ""
"If the cmd argument to popen2 functions is a string, the command is executed "
"through /bin/sh.  If it is a list, the command is directly executed."
msgstr ""

#: ../../../library/subprocess.rst:680
msgid ""
"(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)\n"
"==>\n"
"p = Popen([\"somestring\"], shell=True, bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, close_fds=True)\n"
"(child_stdout, child_stdin) = (p.stdout, p.stdin)"
msgstr ""

#: ../../../library/subprocess.rst:688
msgid ""
"(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize, "
"mode)\n"
"==>\n"
"p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,\n"
"          stdin=PIPE, stdout=PIPE, close_fds=True)\n"
"(child_stdout, child_stdin) = (p.stdout, p.stdin)"
msgstr ""

#: ../../../library/subprocess.rst:694
msgid ""
":class:`popen2.Popen3` and :class:`popen2.Popen4` basically work as :class:"
"`subprocess.Popen`, except that:"
msgstr ""

#: ../../../library/subprocess.rst:697
msgid ":class:`Popen` raises an exception if the execution fails."
msgstr ""

#: ../../../library/subprocess.rst:699
msgid "the *capturestderr* argument is replaced with the *stderr* argument."
msgstr ""

#: ../../../library/subprocess.rst:701
msgid "``stdin=PIPE`` and ``stdout=PIPE`` must be specified."
msgstr ""

#: ../../../library/subprocess.rst:703
msgid ""
"popen2 closes all file descriptors by default, but you have to specify "
"``close_fds=True`` with :class:`Popen`."
msgstr ""

#: ../../../library/subprocess.rst:707
msgid "Notes"
msgstr ""

#: ../../../library/subprocess.rst:712
msgid "Converting an argument sequence to a string on Windows"
msgstr ""

#: ../../../library/subprocess.rst:714
msgid ""
"On Windows, an *args* sequence is converted to a string that can be parsed "
"using the following rules (which correspond to the rules used by the MS C "
"runtime):"
msgstr ""

#: ../../../library/subprocess.rst:718
msgid ""
"Arguments are delimited by white space, which is either a space or a tab."
msgstr ""

#: ../../../library/subprocess.rst:721
msgid ""
"A string surrounded by double quotation marks is interpreted as a single "
"argument, regardless of white space contained within.  A quoted string can "
"be embedded in an argument."
msgstr ""

#: ../../../library/subprocess.rst:726
msgid ""
"A double quotation mark preceded by a backslash is interpreted as a literal "
"double quotation mark."
msgstr ""

#: ../../../library/subprocess.rst:729
msgid ""
"Backslashes are interpreted literally, unless they immediately precede a "
"double quotation mark."
msgstr ""

#: ../../../library/subprocess.rst:732
msgid ""
"If backslashes immediately precede a double quotation mark, every pair of "
"backslashes is interpreted as a literal backslash.  If the number of "
"backslashes is odd, the last backslash escapes the next double quotation "
"mark as described in rule 3."
msgstr ""
