# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ""

#: ../../../library/inspect.rst:10
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""

#: ../../../library/inspect.rst:17
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""

#: ../../../library/inspect.rst:25
msgid "Types and members"
msgstr ""

#: ../../../library/inspect.rst:27
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The sixteen functions whose names begin with \"is\" are "
"mainly provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes:"
msgstr ""

#: ../../../library/inspect.rst:34
msgid "Type"
msgstr ""

#: ../../../library/inspect.rst:34
msgid "Attribute"
msgstr ""

#: ../../../library/inspect.rst:34
msgid "Description"
msgstr ""

#: ../../../library/inspect.rst:36
msgid "module"
msgstr ""

#: ../../../library/inspect.rst:36 ../../../library/inspect.rst:41
#: ../../../library/inspect.rst:46 ../../../library/inspect.rst:59
#: ../../../library/inspect.rst:154
msgid "__doc__"
msgstr ""

#: ../../../library/inspect.rst:36 ../../../library/inspect.rst:41
#: ../../../library/inspect.rst:46 ../../../library/inspect.rst:59
#: ../../../library/inspect.rst:154
msgid "documentation string"
msgstr ""

#: ../../../library/inspect.rst:38
msgid "__file__"
msgstr ""

#: ../../../library/inspect.rst:38
msgid "filename (missing for built-in modules)"
msgstr ""

#: ../../../library/inspect.rst:41
msgid "class"
msgstr ""

#: ../../../library/inspect.rst:43
msgid "__module__"
msgstr ""

#: ../../../library/inspect.rst:43
msgid "name of module in which this class was defined"
msgstr ""

#: ../../../library/inspect.rst:46
msgid "method"
msgstr ""

#: ../../../library/inspect.rst:48 ../../../library/inspect.rst:61
#: ../../../library/inspect.rst:156
msgid "__name__"
msgstr ""

#: ../../../library/inspect.rst:48
msgid "name with which this method was defined"
msgstr ""

#: ../../../library/inspect.rst:51
msgid "__func__"
msgstr ""

#: ../../../library/inspect.rst:51
msgid "function object containing implementation of method"
msgstr ""

#: ../../../library/inspect.rst:55 ../../../library/inspect.rst:159
msgid "__self__"
msgstr ""

#: ../../../library/inspect.rst:55
msgid "instance to which this method is bound, or ``None``"
msgstr ""

#: ../../../library/inspect.rst:59
msgid "function"
msgstr ""

#: ../../../library/inspect.rst:61
msgid "name with which this function was defined"
msgstr ""

#: ../../../library/inspect.rst:64
msgid "__code__"
msgstr ""

#: ../../../library/inspect.rst:64
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""

#: ../../../library/inspect.rst:68
msgid "__defaults__"
msgstr ""

#: ../../../library/inspect.rst:68
msgid "tuple of any default values for arguments"
msgstr ""

#: ../../../library/inspect.rst:71
msgid "__globals__"
msgstr ""

#: ../../../library/inspect.rst:71
msgid "global namespace in which this function was defined"
msgstr ""

#: ../../../library/inspect.rst:74
msgid "traceback"
msgstr ""

#: ../../../library/inspect.rst:74
msgid "tb_frame"
msgstr ""

#: ../../../library/inspect.rst:74
msgid "frame object at this level"
msgstr ""

#: ../../../library/inspect.rst:77
msgid "tb_lasti"
msgstr ""

#: ../../../library/inspect.rst:77 ../../../library/inspect.rst:99
msgid "index of last attempted instruction in bytecode"
msgstr ""

#: ../../../library/inspect.rst:80
msgid "tb_lineno"
msgstr ""

#: ../../../library/inspect.rst:80 ../../../library/inspect.rst:102
msgid "current line number in Python source code"
msgstr ""

#: ../../../library/inspect.rst:83
msgid "tb_next"
msgstr ""

#: ../../../library/inspect.rst:83
msgid "next inner traceback object (called by this level)"
msgstr ""

#: ../../../library/inspect.rst:87
msgid "frame"
msgstr ""

#: ../../../library/inspect.rst:87
msgid "f_back"
msgstr ""

#: ../../../library/inspect.rst:87
msgid "next outer frame object (this frame's caller)"
msgstr ""

#: ../../../library/inspect.rst:90
msgid "f_builtins"
msgstr ""

#: ../../../library/inspect.rst:90
msgid "built-in namespace seen by this frame"
msgstr ""

#: ../../../library/inspect.rst:93
msgid "f_code"
msgstr ""

#: ../../../library/inspect.rst:93
msgid "code object being executed in this frame"
msgstr ""

#: ../../../library/inspect.rst:96
msgid "f_globals"
msgstr ""

#: ../../../library/inspect.rst:96
msgid "global namespace seen by this frame"
msgstr ""

#: ../../../library/inspect.rst:99
msgid "f_lasti"
msgstr ""

#: ../../../library/inspect.rst:102
msgid "f_lineno"
msgstr ""

#: ../../../library/inspect.rst:105
msgid "f_locals"
msgstr ""

#: ../../../library/inspect.rst:105
msgid "local namespace seen by this frame"
msgstr ""

#: ../../../library/inspect.rst:108
msgid "f_restricted"
msgstr ""

#: ../../../library/inspect.rst:108
msgid "0 or 1 if frame is in restricted execution mode"
msgstr ""

#: ../../../library/inspect.rst:111
msgid "f_trace"
msgstr ""

#: ../../../library/inspect.rst:111
msgid "tracing function for this frame, or ``None``"
msgstr ""

#: ../../../library/inspect.rst:114
msgid "code"
msgstr ""

#: ../../../library/inspect.rst:114
msgid "co_argcount"
msgstr ""

#: ../../../library/inspect.rst:114
msgid "number of arguments (not including \\* or \\*\\* args)"
msgstr ""

#: ../../../library/inspect.rst:118
msgid "co_code"
msgstr ""

#: ../../../library/inspect.rst:118
msgid "string of raw compiled bytecode"
msgstr ""

#: ../../../library/inspect.rst:121
msgid "co_consts"
msgstr ""

#: ../../../library/inspect.rst:121
msgid "tuple of constants used in the bytecode"
msgstr ""

#: ../../../library/inspect.rst:124
msgid "co_filename"
msgstr ""

#: ../../../library/inspect.rst:124
msgid "name of file in which this code object was created"
msgstr ""

#: ../../../library/inspect.rst:128
msgid "co_firstlineno"
msgstr ""

#: ../../../library/inspect.rst:128
msgid "number of first line in Python source code"
msgstr ""

#: ../../../library/inspect.rst:131
msgid "co_flags"
msgstr ""

#: ../../../library/inspect.rst:131
msgid "bitmap: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"
msgstr ""

#: ../../../library/inspect.rst:135
msgid "co_lnotab"
msgstr ""

#: ../../../library/inspect.rst:135
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""

#: ../../../library/inspect.rst:139
msgid "co_name"
msgstr ""

#: ../../../library/inspect.rst:139
msgid "name with which this code object was defined"
msgstr ""

#: ../../../library/inspect.rst:142
msgid "co_names"
msgstr ""

#: ../../../library/inspect.rst:142
msgid "tuple of names of local variables"
msgstr ""

#: ../../../library/inspect.rst:145
msgid "co_nlocals"
msgstr ""

#: ../../../library/inspect.rst:145
msgid "number of local variables"
msgstr ""

#: ../../../library/inspect.rst:147
msgid "co_stacksize"
msgstr ""

#: ../../../library/inspect.rst:147
msgid "virtual machine stack space required"
msgstr ""

#: ../../../library/inspect.rst:150
msgid "co_varnames"
msgstr ""

#: ../../../library/inspect.rst:150
msgid "tuple of names of arguments and local variables"
msgstr ""

#: ../../../library/inspect.rst:154
msgid "builtin"
msgstr ""

#: ../../../library/inspect.rst:156
msgid "original name of this function or method"
msgstr ""

#: ../../../library/inspect.rst:159
msgid "instance to which a method is bound, or ``None``"
msgstr ""

#: ../../../library/inspect.rst:167
msgid ""
"Return all the members of an object in a list of (name, value) pairs sorted "
"by name.  If the optional *predicate* argument is supplied, only members for "
"which the predicate returns a true value are included."
msgstr ""

#: ../../../library/inspect.rst:173
msgid ""
":func:`getmembers` does not return metaclass attributes when the argument is "
"a class (this behavior is inherited from the :func:`dir` function)."
msgstr ""

#: ../../../library/inspect.rst:179
msgid ""
"Returns a :term:`named tuple` ``ModuleInfo(name, suffix, mode, "
"module_type)`` of values that describe how Python will interpret the file "
"identified by *path* if it is a module, or ``None`` if it would not be "
"identified as a module.  In that tuple, *name* is the name of the module "
"without the name of any enclosing package, *suffix* is the trailing part of "
"the file name (which may not be a dot-delimited extension), *mode* is the :"
"func:`open` mode that would be used (``'r'`` or ``'rb'``), and *module_type* "
"is an integer giving the type of the module.  *module_type* will have a "
"value which can be compared to the constants defined in the :mod:`imp` "
"module; see the documentation for that module for more information on module "
"types."
msgstr ""

#: ../../../library/inspect.rst:193
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages.  This uses the same algorithm as the "
"interpreter uses when searching for modules.  If the name cannot be matched "
"according to the interpreter's rules, ``None`` is returned."
msgstr ""

#: ../../../library/inspect.rst:201
msgid "Return true if the object is a module."
msgstr ""

#: ../../../library/inspect.rst:206
msgid ""
"Return true if the object is a class, whether built-in or created in Python "
"code."
msgstr ""

#: ../../../library/inspect.rst:212
msgid "Return true if the object is a bound method written in Python."
msgstr ""

#: ../../../library/inspect.rst:217
msgid ""
"Return true if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""

#: ../../../library/inspect.rst:223
msgid "Return true if the object is a Python generator function."
msgstr ""

#: ../../../library/inspect.rst:228
msgid "Return true if the object is a generator."
msgstr ""

#: ../../../library/inspect.rst:233
msgid "Return true if the object is a traceback."
msgstr ""

#: ../../../library/inspect.rst:238
msgid "Return true if the object is a frame."
msgstr ""

#: ../../../library/inspect.rst:243
msgid "Return true if the object is a code."
msgstr ""

#: ../../../library/inspect.rst:248
msgid ""
"Return true if the object is a built-in function or a bound built-in method."
msgstr ""

#: ../../../library/inspect.rst:253
msgid ""
"Return true if the object is a user-defined or built-in function or method."
msgstr ""

#: ../../../library/inspect.rst:258
msgid "Return true if the object is an abstract base class."
msgstr ""

#: ../../../library/inspect.rst:263
msgid ""
"Return true if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""

#: ../../../library/inspect.rst:267
msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :attr:`__get__` attribute but not a :attr:`__set__` attribute, but "
"beyond that the set of attributes varies.  :attr:`__name__` is usually "
"sensible, and :attr:`__doc__` often is."
msgstr ""

#: ../../../library/inspect.rst:272
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return false from the :func:`ismethoddescriptor` test, simply because the "
"other tests promise more -- you can, e.g., count on having the :attr:"
"`__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""

#: ../../../library/inspect.rst:280
msgid "Return true if the object is a data descriptor."
msgstr ""

#: ../../../library/inspect.rst:282
msgid ""
"Data descriptors have both a :attr:`__get__` and a :attr:`__set__` "
"attribute. Examples are properties (defined in Python), getsets, and "
"members.  The latter two are defined in C and there are more specific tests "
"available for those types, which is robust across Python implementations.  "
"Typically, data descriptors will also have :attr:`__name__` and :attr:"
"`__doc__` attributes (properties, getsets, and members have both of these "
"attributes), but this is not guaranteed."
msgstr ""

#: ../../../library/inspect.rst:293
msgid "Return true if the object is a getset descriptor."
msgstr ""

#: ../../../library/inspect.rst:297
msgid ""
"getsets are attributes defined in extension modules via :ctype:`PyGetSetDef` "
"structures.  For Python implementations without such types, this method will "
"always return ``False``."
msgstr ""

#: ../../../library/inspect.rst:304
msgid "Return true if the object is a member descriptor."
msgstr ""

#: ../../../library/inspect.rst:308
msgid ""
"Member descriptors are attributes defined in extension modules via :ctype:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""

#: ../../../library/inspect.rst:316
msgid "Retrieving source code"
msgstr ""

#: ../../../library/inspect.rst:320
msgid ""
"Get the documentation string for an object, cleaned up with :func:`cleandoc`."
msgstr ""

#: ../../../library/inspect.rst:325
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module)."
msgstr ""

#: ../../../library/inspect.rst:332
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""

#: ../../../library/inspect.rst:339
msgid "Try to guess which module an object was defined in."
msgstr ""

#: ../../../library/inspect.rst:344
msgid ""
"Return the name of the Python source file in which an object was defined.  "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""

#: ../../../library/inspect.rst:351
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`IOError` is raised if the source "
"code cannot be retrieved."
msgstr ""

#: ../../../library/inspect.rst:361
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`IOError` is raised if "
"the source code cannot be retrieved."
msgstr ""

#: ../../../library/inspect.rst:369
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code.  Any whitespace that can be uniformly removed from the "
"second line onwards is removed.  Also, all tabs are expanded to spaces."
msgstr ""

#: ../../../library/inspect.rst:377
msgid "Classes and functions"
msgstr ""

#: ../../../library/inspect.rst:381
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""

#: ../../../library/inspect.rst:392
msgid ""
"Get the names and default values of a Python function's arguments. A :term:"
"`named tuple` ``ArgSpec(args, varargs, keywords, defaults)`` is returned. "
"*args* is a list of the argument names. *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``. *defaults* is a tuple "
"of default argument values or None if there are no default arguments; if "
"this tuple has *n* elements, they correspond to the last *n* elements listed "
"in *args*."
msgstr ""

#: ../../../library/inspect.rst:400
msgid ""
"Use :func:`getfullargspec` instead, which provides information about keyword-"
"only arguments and annotations."
msgstr ""

#: ../../../library/inspect.rst:407
msgid ""
"Get the names and default values of a Python function's arguments.  A :term:"
"`named tuple` is returned:"
msgstr ""

#: ../../../library/inspect.rst:410
msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""

#: ../../../library/inspect.rst:413
msgid ""
"*args* is a list of the argument names.  *varargs* and *varkw* are the names "
"of the ``*`` and ``**`` arguments or ``None``.  *defaults* is an n-tuple of "
"the default values of the last n arguments.  *kwonlyargs* is a list of "
"keyword-only argument names.  *kwonlydefaults* is a dictionary mapping names "
"from kwonlyargs to defaults.  *annotations* is a dictionary mapping argument "
"names to annotations."
msgstr ""

#: ../../../library/inspect.rst:420
msgid "The first four items in the tuple correspond to :func:`getargspec`."
msgstr ""

#: ../../../library/inspect.rst:425
msgid ""
"Get information about arguments passed into a particular frame.  A :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. "
"*args* is a list of the argument names.  *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``.  *locals* is the locals "
"dictionary of the given frame."
msgstr ""

#: ../../../library/inspect.rst:434
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargspec`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../../../library/inspect.rst:441
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""

#: ../../../library/inspect.rst:448
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""

#: ../../../library/inspect.rst:457
msgid "The interpreter stack"
msgstr ""

#: ../../../library/inspect.rst:459
msgid ""
"When the following functions return \"frame records,\" each record is a "
"tuple of six items: the frame object, the filename, the line number of the "
"current line, the function name, a list of lines of context from the source "
"code, and the index of the current line within that list."
msgstr ""

#: ../../../library/inspect.rst:466
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""

#: ../../../library/inspect.rst:474
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""

#: ../../../library/inspect.rst:479
msgid ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"
msgstr ""

#: ../../../library/inspect.rst:486
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""

#: ../../../library/inspect.rst:493
msgid ""
"Get information about a frame or traceback object.  A :term:`named tuple` "
"``Traceback(filename, lineno, function, code_context, index)`` is returned."
msgstr ""

#: ../../../library/inspect.rst:499
msgid ""
"Get a list of frame records for a frame and all outer frames.  These frames "
"represent the calls that lead to the creation of *frame*. The first entry in "
"the returned list represents *frame*; the last entry represents the "
"outermost call on *frame*'s stack."
msgstr ""

#: ../../../library/inspect.rst:507
msgid ""
"Get a list of frame records for a traceback's frame and all inner frames.  "
"These frames represent calls made as a consequence of *frame*.  The first "
"entry in the list represents *traceback*; the last entry represents where "
"the exception was raised."
msgstr ""

#: ../../../library/inspect.rst:515
msgid "Return the frame object for the caller's stack frame."
msgstr ""

#: ../../../library/inspect.rst:519
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""

#: ../../../library/inspect.rst:527
msgid ""
"Return a list of frame records for the caller's stack.  The first entry in "
"the returned list represents the caller; the last entry represents the "
"outermost call on the stack."
msgstr ""

#: ../../../library/inspect.rst:534
msgid ""
"Return a list of frame records for the stack between the current frame and "
"the frame in which an exception currently being handled was raised in.  The "
"first entry in the list represents the caller; the last entry represents "
"where the exception was raised."
msgstr ""
