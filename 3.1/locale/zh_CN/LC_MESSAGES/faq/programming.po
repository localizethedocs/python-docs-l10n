# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../faq/programming.rst:5
msgid "Programming FAQ"
msgstr ""

#: ../../../faq/programming.rst:7
msgid "Contents"
msgstr ""

#: ../../../faq/programming.rst:10
msgid "General Questions"
msgstr ""

#: ../../../faq/programming.rst:13
msgid ""
"Is there a source code level debugger with breakpoints, single-stepping, "
"etc.?"
msgstr ""

#: ../../../faq/programming.rst:15 ../../../faq/programming.rst:58
msgid "Yes."
msgstr ""

#: ../../../faq/programming.rst:17
msgid ""
"The pdb module is a simple but adequate console-mode debugger for Python. It "
"is part of the standard Python library, and is :mod:`documented in the "
"Library Reference Manual <pdb>`. You can also write your own debugger by "
"using the code for pdb as an example."
msgstr ""

#: ../../../faq/programming.rst:22
msgid ""
"The IDLE interactive development environment, which is part of the standard "
"Python distribution (normally available as Tools/scripts/idle), includes a "
"graphical debugger.  There is documentation for the IDLE debugger at http://"
"www.python.org/idle/doc/idle2.html#Debugger."
msgstr ""

#: ../../../faq/programming.rst:27
msgid ""
"PythonWin is a Python IDE that includes a GUI debugger based on pdb.  The "
"Pythonwin debugger colors breakpoints and has quite a few cool features such "
"as debugging non-Pythonwin programs.  Pythonwin is available as part of the "
"`Python for Windows Extensions <http://sourceforge.net/projects/pywin32/>`__ "
"project and as a part of the ActivePython distribution (see http://www."
"activestate.com/Products/ActivePython/index.html)."
msgstr ""

#: ../../../faq/programming.rst:34
msgid ""
"`Boa Constructor <http://boa-constructor.sourceforge.net/>`_ is an IDE and "
"GUI builder that uses wxWidgets.  It offers visual frame creation and "
"manipulation, an object inspector, many views on the source like object "
"browsers, inheritance hierarchies, doc string generated html documentation, "
"an advanced debugger, integrated help, and Zope support."
msgstr ""

#: ../../../faq/programming.rst:40
msgid ""
"`Eric <http://www.die-offenbachs.de/eric/index.html>`_ is an IDE built on "
"PyQt and the Scintilla editing component."
msgstr ""

#: ../../../faq/programming.rst:43
msgid ""
"Pydb is a version of the standard Python debugger pdb, modified for use with "
"DDD (Data Display Debugger), a popular graphical debugger front end.  Pydb "
"can be found at http://bashdb.sourceforge.net/pydb/ and DDD can be found at "
"http://www.gnu.org/software/ddd."
msgstr ""

#: ../../../faq/programming.rst:48
msgid ""
"There are a number of commercial Python IDEs that include graphical "
"debuggers. They include:"
msgstr ""

#: ../../../faq/programming.rst:51
msgid "Wing IDE (http://wingware.com/)"
msgstr ""

#: ../../../faq/programming.rst:52
msgid "Komodo IDE (http://www.activestate.com/Products/Komodo)"
msgstr ""

#: ../../../faq/programming.rst:56
msgid "Is there a tool to help find bugs or perform static analysis?"
msgstr ""

#: ../../../faq/programming.rst:60
msgid ""
"PyChecker is a static analysis tool that finds bugs in Python source code "
"and warns about code complexity and style.  You can get PyChecker from "
"http://pychecker.sf.net."
msgstr ""

#: ../../../faq/programming.rst:64
msgid ""
"`Pylint <http://www.logilab.org/projects/pylint>`_ is another tool that "
"checks if a module satisfies a coding standard, and also makes it possible "
"to write plug-ins to add a custom feature.  In addition to the bug checking "
"that PyChecker performs, Pylint offers some additional features such as "
"checking line length, whether variable names are well-formed according to "
"your coding standard, whether declared interfaces are fully implemented, and "
"more. http://www.logilab.org/card/pylint_manual provides a full list of "
"Pylint's features."
msgstr ""

#: ../../../faq/programming.rst:75
msgid "How can I create a stand-alone binary from a Python script?"
msgstr ""

#: ../../../faq/programming.rst:77
msgid ""
"You don't need the ability to compile Python to C code if all you want is a "
"stand-alone program that users can download and run without having to "
"install the Python distribution first.  There are a number of tools that "
"determine the set of modules required by a program and bind these modules "
"together with a Python binary to produce a single executable."
msgstr ""

#: ../../../faq/programming.rst:83
msgid ""
"One is to use the freeze tool, which is included in the Python source tree "
"as ``Tools/freeze``. It converts Python byte code to C arrays; a C compiler "
"you can embed all your modules into a new program, which is then linked with "
"the standard Python modules."
msgstr ""

#: ../../../faq/programming.rst:88
msgid ""
"It works by scanning your source recursively for import statements (in both "
"forms) and looking for the modules in the standard Python path as well as in "
"the source directory (for built-in modules).  It then turns the bytecode for "
"modules written in Python into C code (array initializers that can be turned "
"into code objects using the marshal module) and creates a custom-made config "
"file that only contains those built-in modules which are actually used in "
"the program.  It then compiles the generated C code and links it with the "
"rest of the Python interpreter to form a self-contained binary which acts "
"exactly like your script."
msgstr ""

#: ../../../faq/programming.rst:97
msgid ""
"Obviously, freeze requires a C compiler.  There are several other utilities "
"which don't. One is Thomas Heller's py2exe (Windows only) at"
msgstr ""

#: ../../../faq/programming.rst:100
msgid "http://www.py2exe.org/"
msgstr ""

#: ../../../faq/programming.rst:102
msgid ""
"Another is Christian Tismer's `SQFREEZE <http://starship.python.net/crew/"
"pirx>`_ which appends the byte code to a specially-prepared Python "
"interpreter that can find the byte code in the executable."
msgstr ""

#: ../../../faq/programming.rst:106
msgid ""
"Other tools include Fredrik Lundh's `Squeeze <http://www.pythonware.com/"
"products/python/squeeze>`_ and Anthony Tuininga's `cx_Freeze <http://"
"starship.python.net/crew/atuining/cx_Freeze/index.html>`_."
msgstr ""

#: ../../../faq/programming.rst:112
msgid "Are there coding standards or a style guide for Python programs?"
msgstr ""

#: ../../../faq/programming.rst:114
msgid ""
"Yes.  The coding style required for standard library modules is documented "
"as :pep:`8`."
msgstr ""

#: ../../../faq/programming.rst:119
msgid "My program is too slow. How do I speed it up?"
msgstr ""

#: ../../../faq/programming.rst:121
msgid ""
"That's a tough one, in general.  There are many tricks to speed up Python "
"code; consider rewriting parts in C as a last resort."
msgstr ""

#: ../../../faq/programming.rst:124
msgid ""
"In some cases it's possible to automatically translate Python to C or x86 "
"assembly language, meaning that you don't have to modify your code to gain "
"increased speed."
msgstr ""

#: ../../../faq/programming.rst:130
msgid ""
"`Pyrex <http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/>`_ can compile "
"a slightly modified version of Python code into a C extension, and can be "
"used on many different platforms."
msgstr ""

#: ../../../faq/programming.rst:134
msgid ""
"`Psyco <http://psyco.sourceforge.net>`_ is a just-in-time compiler that "
"translates Python code into x86 assembly language.  If you can use it, Psyco "
"can provide dramatic speedups for critical functions."
msgstr ""

#: ../../../faq/programming.rst:138
msgid ""
"The rest of this answer will discuss various tricks for squeezing a bit more "
"speed out of Python code.  *Never* apply any optimization tricks unless you "
"know you need them, after profiling has indicated that a particular function "
"is the heavily executed hot spot in the code.  Optimizations almost always "
"make the code less clear, and you shouldn't pay the costs of reduced clarity "
"(increased development time, greater likelihood of bugs) unless the "
"resulting performance benefit is worth it."
msgstr ""

#: ../../../faq/programming.rst:146
msgid ""
"There is a page on the wiki devoted to `performance tips <http://wiki.python."
"org/moin/PythonSpeed/PerformanceTips>`_."
msgstr ""

#: ../../../faq/programming.rst:149
msgid ""
"Guido van Rossum has written up an anecdote related to optimization at "
"http://www.python.org/doc/essays/list2str.html."
msgstr ""

#: ../../../faq/programming.rst:152
msgid ""
"One thing to notice is that function and (especially) method calls are "
"rather expensive; if you have designed a purely OO interface with lots of "
"tiny functions that don't do much more than get or set an instance variable "
"or call another method, you might consider using a more direct way such as "
"directly accessing instance variables.  Also see the standard module :mod:"
"`profile` which makes it possible to find out where your program is spending "
"most of its time (if you have some patience -- the profiling itself can slow "
"your program down by an order of magnitude)."
msgstr ""

#: ../../../faq/programming.rst:161
msgid ""
"Remember that many standard optimization heuristics you may know from other "
"programming experience may well apply to Python.  For example it may be "
"faster to send output to output devices using larger writes rather than "
"smaller ones in order to reduce the overhead of kernel system calls.  Thus "
"CGI scripts that write all output in \"one shot\" may be faster than those "
"that write lots of small pieces of output."
msgstr ""

#: ../../../faq/programming.rst:168
msgid ""
"Also, be sure to use Python's core features where appropriate.  For example, "
"slicing allows programs to chop up lists and other sequence objects in a "
"single tick of the interpreter's mainloop using highly optimized C "
"implementations. Thus to get the same effect as::"
msgstr ""

#: ../../../faq/programming.rst:173
msgid ""
"L2 = []\n"
"for i in range[3]:\n"
"    L2.append(L1[i])"
msgstr ""

#: ../../../faq/programming.rst:177
msgid "it is much shorter and far faster to use ::"
msgstr ""

#: ../../../faq/programming.rst:179
msgid "L2 = list(L1[:3])  # \"list\" is redundant if L1 is a list."
msgstr ""

#: ../../../faq/programming.rst:181
msgid ""
"Note that the functionally-oriented builtins such as :func:`map`, :func:"
"`zip`, and friends can be a convenient accelerator for loops that perform a "
"single task.  For example to pair the elements of two lists together::"
msgstr ""

#: ../../../faq/programming.rst:185
msgid ""
">>> list(zip([1, 2, 3], [4, 5, 6]))\n"
"[(1, 4), (2, 5), (3, 6)]"
msgstr ""

#: ../../../faq/programming.rst:188
msgid "or to compute a number of sines::"
msgstr ""

#: ../../../faq/programming.rst:190
msgid ""
">>> list(map(math.sin, (1, 2, 3, 4)))\n"
"[0.841470984808, 0.909297426826, 0.14112000806, -0.756802495308]"
msgstr ""

#: ../../../faq/programming.rst:193
msgid "The operation completes very quickly in such cases."
msgstr ""

#: ../../../faq/programming.rst:195
msgid ""
"Other examples include the ``join()`` and ``split()`` :ref:`methods of "
"string objects <string-methods>`."
msgstr ""

#: ../../../faq/programming.rst:198
msgid ""
"For example if s1..s7 are large (10K+) strings then ``\"\".join([s1,s2,s3,s4,"
"s5,s6,s7])`` may be far faster than the more obvious "
"``s1+s2+s3+s4+s5+s6+s7``, since the \"summation\" will compute many "
"subexpressions, whereas ``join()`` does all the copying in one pass.  For "
"manipulating strings, use the ``replace()`` and the ``format()`` :ref:"
"`methods on string objects <string-methods>`.  Use regular expressions only "
"when you're not dealing with constant string patterns."
msgstr ""

#: ../../../faq/programming.rst:206
msgid ""
"Be sure to use the :meth:`list.sort` builtin method to do sorting, and see "
"the `sorting mini-HOWTO <http://wiki.python.org/moin/HowTo/Sorting>`_ for "
"examples of moderately advanced usage.  :meth:`list.sort` beats other "
"techniques for sorting in all but the most extreme circumstances."
msgstr ""

#: ../../../faq/programming.rst:211
msgid ""
"Another common trick is to \"push loops into functions or methods.\"  For "
"example suppose you have a program that runs slowly and you use the profiler "
"to determine that a Python function ``ff()`` is being called lots of times.  "
"If you notice that ``ff()``::"
msgstr ""

#: ../../../faq/programming.rst:216
msgid ""
"def ff(x):\n"
"    ... # do something with x computing result...\n"
"    return result"
msgstr ""

#: ../../../faq/programming.rst:220
msgid "tends to be called in loops like::"
msgstr ""

#: ../../../faq/programming.rst:222
msgid "list = map(ff, oldlist)"
msgstr ""

#: ../../../faq/programming.rst:224
msgid "or::"
msgstr ""

#: ../../../faq/programming.rst:226
msgid ""
"for x in sequence:\n"
"    value = ff(x)\n"
"    ... # do something with value..."
msgstr ""

#: ../../../faq/programming.rst:230
msgid ""
"then you can often eliminate function call overhead by rewriting ``ff()`` "
"to::"
msgstr ""

#: ../../../faq/programming.rst:232
msgid ""
"def ffseq(seq):\n"
"    resultseq = []\n"
"    for x in seq:\n"
"        ... # do something with x computing result...\n"
"        resultseq.append(result)\n"
"    return resultseq"
msgstr ""

#: ../../../faq/programming.rst:239
msgid "and rewrite the two examples to ``list = ffseq(oldlist)`` and to::"
msgstr ""

#: ../../../faq/programming.rst:241
msgid ""
"for value in ffseq(sequence):\n"
"    ... # do something with value..."
msgstr ""

#: ../../../faq/programming.rst:244
msgid ""
"Single calls to ``ff(x)`` translate to ``ffseq([x])[0]`` with little "
"penalty. Of course this technique is not always appropriate and there are "
"other variants which you can figure out."
msgstr ""

#: ../../../faq/programming.rst:248
msgid ""
"You can gain some performance by explicitly storing the results of a "
"function or method lookup into a local variable.  A loop like::"
msgstr ""

#: ../../../faq/programming.rst:251
msgid ""
"for key in token:\n"
"    dict[key] = dict.get(key, 0) + 1"
msgstr ""

#: ../../../faq/programming.rst:254
msgid ""
"resolves ``dict.get`` every iteration.  If the method isn't going to change, "
"a slightly faster implementation is::"
msgstr ""

#: ../../../faq/programming.rst:257
msgid ""
"dict_get = dict.get  # look up the method once\n"
"for key in token:\n"
"    dict[key] = dict_get(key, 0) + 1"
msgstr ""

#: ../../../faq/programming.rst:261
msgid ""
"Default arguments can be used to determine values once, at compile time "
"instead of at run time.  This can only be done for functions or objects "
"which will not be changed during program execution, such as replacing ::"
msgstr ""

#: ../../../faq/programming.rst:265
msgid ""
"def degree_sin(deg):\n"
"    return math.sin(deg * math.pi / 180.0)"
msgstr ""

#: ../../../faq/programming.rst:268
msgid "with ::"
msgstr ""

#: ../../../faq/programming.rst:270
msgid ""
"def degree_sin(deg, factor=math.pi/180.0, sin=math.sin):\n"
"    return sin(deg * factor)"
msgstr ""

#: ../../../faq/programming.rst:273
msgid ""
"Because this trick uses default arguments for terms which should not be "
"changed, it should only be used when you are not concerned with presenting a "
"possibly confusing API to your users."
msgstr ""

#: ../../../faq/programming.rst:279
msgid "Core Language"
msgstr ""

#: ../../../faq/programming.rst:282
msgid "Why am I getting an UnboundLocalError when the variable has a value?"
msgstr ""

#: ../../../faq/programming.rst:284
msgid ""
"It can be a surprise to get the UnboundLocalError in previously working code "
"when it is modified by adding an assignment statement somewhere in the body "
"of a function."
msgstr ""

#: ../../../faq/programming.rst:288
msgid "This code:"
msgstr ""

#: ../../../faq/programming.rst:296
msgid "works, but this code:"
msgstr ""

#: ../../../faq/programming.rst:303
msgid "results in an UnboundLocalError:"
msgstr ""

#: ../../../faq/programming.rst:310
msgid ""
"This is because when you make an assignment to a variable in a scope, that "
"variable becomes local to that scope and shadows any similarly named "
"variable in the outer scope.  Since the last statement in foo assigns a new "
"value to ``x``, the compiler recognizes it as a local variable.  "
"Consequently when the earlier ``print(x)`` attempts to print the "
"uninitialized local variable and an error results."
msgstr ""

#: ../../../faq/programming.rst:317
msgid ""
"In the example above you can access the outer scope variable by declaring it "
"global:"
msgstr ""

#: ../../../faq/programming.rst:328
msgid ""
"This explicit declaration is required in order to remind you that (unlike "
"the superficially analogous situation with class and instance variables) you "
"are actually modifying the value of the variable in the outer scope:"
msgstr ""

#: ../../../faq/programming.rst:335
msgid ""
"You can do a similar thing in a nested scope using the :keyword:`nonlocal` "
"keyword:"
msgstr ""

#: ../../../faq/programming.rst:352
msgid "What are the rules for local and global variables in Python?"
msgstr ""

#: ../../../faq/programming.rst:354
msgid ""
"In Python, variables that are only referenced inside a function are "
"implicitly global.  If a variable is assigned a new value anywhere within "
"the function's body, it's assumed to be a local.  If a variable is ever "
"assigned a new value inside the function, the variable is implicitly local, "
"and you need to explicitly declare it as 'global'."
msgstr ""

#: ../../../faq/programming.rst:360
msgid ""
"Though a bit surprising at first, a moment's consideration explains this.  "
"On one hand, requiring :keyword:`global` for assigned variables provides a "
"bar against unintended side-effects.  On the other hand, if ``global`` was "
"required for all global references, you'd be using ``global`` all the time.  "
"You'd have to declare as global every reference to a builtin function or to "
"a component of an imported module.  This clutter would defeat the usefulness "
"of the ``global`` declaration for identifying side-effects."
msgstr ""

#: ../../../faq/programming.rst:370
msgid "How do I share global variables across modules?"
msgstr ""

#: ../../../faq/programming.rst:372
msgid ""
"The canonical way to share information across modules within a single "
"program is to create a special module (often called config or cfg).  Just "
"import the config module in all modules of your application; the module then "
"becomes available as a global name.  Because there is only one instance of "
"each module, any changes made to the module object get reflected "
"everywhere.  For example:"
msgstr ""

#: ../../../faq/programming.rst:378
msgid "config.py::"
msgstr ""

#: ../../../faq/programming.rst:380
msgid "x = 0   # Default value of the 'x' configuration setting"
msgstr ""

#: ../../../faq/programming.rst:382
msgid "mod.py::"
msgstr ""

#: ../../../faq/programming.rst:384
msgid ""
"import config\n"
"config.x = 1"
msgstr ""

#: ../../../faq/programming.rst:387
msgid "main.py::"
msgstr ""

#: ../../../faq/programming.rst:389
msgid ""
"import config\n"
"import mod\n"
"print(config.x)"
msgstr ""

#: ../../../faq/programming.rst:393
msgid ""
"Note that using a module is also the basis for implementing the Singleton "
"design pattern, for the same reason."
msgstr ""

#: ../../../faq/programming.rst:398
msgid "What are the \"best practices\" for using import in a module?"
msgstr ""

#: ../../../faq/programming.rst:400
msgid ""
"In general, don't use ``from modulename import *``.  Doing so clutters the "
"importer's namespace.  Some people avoid this idiom even with the few "
"modules that were designed to be imported in this manner.  Modules designed "
"in this manner include :mod:`tkinter`, and :mod:`threading`."
msgstr ""

#: ../../../faq/programming.rst:405
msgid ""
"Import modules at the top of a file.  Doing so makes it clear what other "
"modules your code requires and avoids questions of whether the module name "
"is in scope. Using one import per line makes it easy to add and delete "
"module imports, but using multiple imports per line uses less screen space."
msgstr ""

#: ../../../faq/programming.rst:410
msgid "It's good practice if you import modules in the following order:"
msgstr ""

#: ../../../faq/programming.rst:412
msgid "standard library modules -- e.g. ``sys``, ``os``, ``getopt``, ``re``"
msgstr ""

#: ../../../faq/programming.rst:413
msgid ""
"third-party library modules (anything installed in Python's site-packages "
"directory) -- e.g. mx.DateTime, ZODB, PIL.Image, etc."
msgstr ""

#: ../../../faq/programming.rst:415
msgid "locally-developed modules"
msgstr ""

#: ../../../faq/programming.rst:417
msgid ""
"Never use relative package imports.  If you're writing code that's in the "
"``package.sub.m1`` module and want to import ``package.sub.m2``, do not just "
"write ``from . import m2``, even though it's legal.  Write ``from package."
"sub import m2`` instead.  See :pep:`328` for details."
msgstr ""

#: ../../../faq/programming.rst:422
msgid ""
"It is sometimes necessary to move imports to a function or class to avoid "
"problems with circular imports.  Gordon McMillan says:"
msgstr ""

#: ../../../faq/programming.rst:425
msgid ""
"Circular imports are fine where both modules use the \"import <module>\" "
"form of import.  They fail when the 2nd module wants to grab a name out of "
"the first (\"from module import name\") and the import is at the top level.  "
"That's because names in the 1st are not yet available, because the first "
"module is busy importing the 2nd."
msgstr ""

#: ../../../faq/programming.rst:431
msgid ""
"In this case, if the second module is only used in one function, then the "
"import can easily be moved into that function.  By the time the import is "
"called, the first module will have finished initializing, and the second "
"module can do its import."
msgstr ""

#: ../../../faq/programming.rst:436
msgid ""
"It may also be necessary to move imports out of the top level of code if "
"some of the modules are platform-specific.  In that case, it may not even be "
"possible to import all of the modules at the top of the file.  In this case, "
"importing the correct modules in the corresponding platform-specific code is "
"a good option."
msgstr ""

#: ../../../faq/programming.rst:441
msgid ""
"Only move imports into a local scope, such as inside a function definition, "
"if it's necessary to solve a problem such as avoiding a circular import or "
"are trying to reduce the initialization time of a module.  This technique is "
"especially helpful if many of the imports are unnecessary depending on how "
"the program executes.  You may also want to move imports into a function if "
"the modules are only ever used in that function.  Note that loading a module "
"the first time may be expensive because of the one time initialization of "
"the module, but loading a module multiple times is virtually free, costing "
"only a couple of dictionary lookups.  Even if the module name has gone out "
"of scope, the module is probably available in :data:`sys.modules`."
msgstr ""

#: ../../../faq/programming.rst:452
msgid ""
"If only instances of a specific class use a module, then it is reasonable to "
"import the module in the class's ``__init__`` method and then assign the "
"module to an instance variable so that the module is always available (via "
"that instance variable) during the life of the object.  Note that to delay "
"an import until the class is instantiated, the import must be inside a "
"method.  Putting the import inside the class but outside of any method still "
"causes the import to occur when the module is initialized."
msgstr ""

#: ../../../faq/programming.rst:462
msgid ""
"How can I pass optional or keyword parameters from one function to another?"
msgstr ""

#: ../../../faq/programming.rst:464
msgid ""
"Collect the arguments using the ``*`` and ``**`` specifiers in the "
"function's parameter list; this gives you the positional arguments as a "
"tuple and the keyword arguments as a dictionary.  You can then pass these "
"arguments when calling another function by using ``*`` and ``**``::"
msgstr ""

#: ../../../faq/programming.rst:469
msgid ""
"def f(x, *args, **kwargs):\n"
"    ...\n"
"    kwargs['width'] = '14.3c'\n"
"    ...\n"
"    g(x, *args, **kwargs)"
msgstr ""

#: ../../../faq/programming.rst:475
msgid ""
"In the unlikely case that you care about Python versions older than 2.0, "
"use :func:`apply`::"
msgstr ""

#: ../../../faq/programming.rst:478
msgid ""
"def f(x, *args, **kwargs):\n"
"    ...\n"
"    kwargs['width'] = '14.3c'\n"
"    ...\n"
"    apply(g, (x,)+args, kwargs)"
msgstr ""

#: ../../../faq/programming.rst:486
msgid "How do I write a function with output parameters (call by reference)?"
msgstr ""

#: ../../../faq/programming.rst:488
msgid ""
"Remember that arguments are passed by assignment in Python.  Since "
"assignment just creates references to objects, there's no alias between an "
"argument name in the caller and callee, and so no call-by-reference per se.  "
"You can achieve the desired effect in a number of ways."
msgstr ""

#: ../../../faq/programming.rst:493
msgid "By returning a tuple of the results::"
msgstr ""

#: ../../../faq/programming.rst:495
msgid ""
"def func2(a, b):\n"
"    a = 'new-value'        # a and b are local names\n"
"    b = b + 1              # assigned to new objects\n"
"    return a, b            # return new values\n"
"\n"
"x, y = 'old-value', 99\n"
"x, y = func2(x, y)\n"
"print(x, y)                # output: new-value 100"
msgstr ""

#: ../../../faq/programming.rst:504
msgid "This is almost always the clearest solution."
msgstr ""

#: ../../../faq/programming.rst:506
msgid ""
"By using global variables.  This isn't thread-safe, and is not recommended."
msgstr ""

#: ../../../faq/programming.rst:508
msgid "By passing a mutable (changeable in-place) object::"
msgstr ""

#: ../../../faq/programming.rst:510
msgid ""
"def func1(a):\n"
"    a[0] = 'new-value'     # 'a' references a mutable list\n"
"    a[1] = a[1] + 1        # changes a shared object\n"
"\n"
"args = ['old-value', 99]\n"
"func1(args)\n"
"print(args[0], args[1])    # output: new-value 100"
msgstr ""

#: ../../../faq/programming.rst:518
msgid "By passing in a dictionary that gets mutated::"
msgstr ""

#: ../../../faq/programming.rst:520
msgid ""
"def func3(args):\n"
"    args['a'] = 'new-value'     # args is a mutable dictionary\n"
"    args['b'] = args['b'] + 1   # change it in-place\n"
"\n"
"args = {'a':' old-value', 'b': 99}\n"
"func3(args)\n"
"print(args['a'], args['b'])"
msgstr ""

#: ../../../faq/programming.rst:528
msgid "Or bundle up values in a class instance::"
msgstr ""

#: ../../../faq/programming.rst:530
msgid ""
"class callByRef:\n"
"    def __init__(self, **args):\n"
"        for (key, value) in args.items():\n"
"            setattr(self, key, value)\n"
"\n"
"def func4(args):\n"
"    args.a = 'new-value'        # args is a mutable callByRef\n"
"    args.b = args.b + 1         # change object in-place\n"
"\n"
"args = callByRef(a='old-value', b=99)\n"
"func4(args)\n"
"print(args.a, args.b)"
msgstr ""

#: ../../../faq/programming.rst:544
msgid "There's almost never a good reason to get this complicated."
msgstr ""

#: ../../../faq/programming.rst:546
msgid "Your best choice is to return a tuple containing the multiple results."
msgstr ""

#: ../../../faq/programming.rst:550
msgid "How do you make a higher order function in Python?"
msgstr ""

#: ../../../faq/programming.rst:552
msgid ""
"You have two choices: you can use nested scopes or you can use callable "
"objects. For example, suppose you wanted to define ``linear(a,b)`` which "
"returns a function ``f(x)`` that computes the value ``a*x+b``.  Using nested "
"scopes::"
msgstr ""

#: ../../../faq/programming.rst:556
msgid ""
"def linear(a, b):\n"
"    def result(x):\n"
"        return a * x + b\n"
"    return result"
msgstr ""

#: ../../../faq/programming.rst:561
msgid "Or using a callable object::"
msgstr ""

#: ../../../faq/programming.rst:563
msgid ""
"class linear:\n"
"\n"
"    def __init__(self, a, b):\n"
"        self.a, self.b = a, b\n"
"\n"
"    def __call__(self, x):\n"
"        return self.a * x + self.b"
msgstr ""

#: ../../../faq/programming.rst:571
msgid "In both cases, ::"
msgstr ""

#: ../../../faq/programming.rst:573
msgid "taxes = linear(0.3, 2)"
msgstr ""

#: ../../../faq/programming.rst:575
msgid "gives a callable object where ``taxes(10e6) == 0.3 * 10e6 + 2``."
msgstr ""

#: ../../../faq/programming.rst:577
msgid ""
"The callable object approach has the disadvantage that it is a bit slower "
"and results in slightly longer code.  However, note that a collection of "
"callables can share their signature via inheritance::"
msgstr ""

#: ../../../faq/programming.rst:581
msgid ""
"class exponential(linear):\n"
"    # __init__ inherited\n"
"    def __call__(self, x):\n"
"        return self.a * (x ** self.b)"
msgstr ""

#: ../../../faq/programming.rst:586
msgid "Object can encapsulate state for several methods::"
msgstr ""

#: ../../../faq/programming.rst:588
msgid ""
"class counter:\n"
"\n"
"    value = 0\n"
"\n"
"    def set(self, x):\n"
"        self.value = x\n"
"\n"
"    def up(self):\n"
"        self.value = self.value + 1\n"
"\n"
"    def down(self):\n"
"        self.value = self.value - 1\n"
"\n"
"count = counter()\n"
"inc, dec, reset = count.up, count.down, count.set"
msgstr ""

#: ../../../faq/programming.rst:604
msgid ""
"Here ``inc()``, ``dec()`` and ``reset()`` act like functions which share the "
"same counting variable."
msgstr ""

#: ../../../faq/programming.rst:609
msgid "How do I copy an object in Python?"
msgstr ""

#: ../../../faq/programming.rst:611
msgid ""
"In general, try :func:`copy.copy` or :func:`copy.deepcopy` for the general "
"case. Not all objects can be copied, but most can."
msgstr ""

#: ../../../faq/programming.rst:614
msgid ""
"Some objects can be copied more easily.  Dictionaries have a :meth:`~dict."
"copy` method::"
msgstr ""

#: ../../../faq/programming.rst:617
msgid "newdict = olddict.copy()"
msgstr ""

#: ../../../faq/programming.rst:619
msgid "Sequences can be copied by slicing::"
msgstr ""

#: ../../../faq/programming.rst:621
msgid "new_l = l[:]"
msgstr ""

#: ../../../faq/programming.rst:625
msgid "How can I find the methods or attributes of an object?"
msgstr ""

#: ../../../faq/programming.rst:627
msgid ""
"For an instance x of a user-defined class, ``dir(x)`` returns an "
"alphabetized list of the names containing the instance attributes and "
"methods and attributes defined by its class."
msgstr ""

#: ../../../faq/programming.rst:633
msgid "How can my code discover the name of an object?"
msgstr ""

#: ../../../faq/programming.rst:635
msgid ""
"Generally speaking, it can't, because objects don't really have names. "
"Essentially, assignment always binds a name to a value; The same is true of "
"``def`` and ``class`` statements, but in that case the value is a callable. "
"Consider the following code::"
msgstr ""

#: ../../../faq/programming.rst:640
msgid ""
"class A:\n"
"    pass\n"
"\n"
"B = A\n"
"\n"
"a = B()\n"
"b = a\n"
"print(b)\n"
"<__main__.A object at 0x16D07CC>\n"
"print(a)\n"
"<__main__.A object at 0x16D07CC>"
msgstr ""

#: ../../../faq/programming.rst:652
msgid ""
"Arguably the class has a name: even though it is bound to two names and "
"invoked through the name B the created instance is still reported as an "
"instance of class A.  However, it is impossible to say whether the "
"instance's name is a or b, since both names are bound to the same value."
msgstr ""

#: ../../../faq/programming.rst:657
msgid ""
"Generally speaking it should not be necessary for your code to \"know the "
"names\" of particular values. Unless you are deliberately writing "
"introspective programs, this is usually an indication that a change of "
"approach might be beneficial."
msgstr ""

#: ../../../faq/programming.rst:662
msgid ""
"In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer "
"to this question:"
msgstr ""

#: ../../../faq/programming.rst:665
msgid ""
"The same way as you get the name of that cat you found on your porch: the "
"cat (object) itself cannot tell you its name, and it doesn't really care -- "
"so the only way to find out what it's called is to ask all your neighbours "
"(namespaces) if it's their cat (object)..."
msgstr ""

#: ../../../faq/programming.rst:670
msgid ""
"....and don't be surprised if you'll find that it's known by many names, or "
"no name at all!"
msgstr ""

#: ../../../faq/programming.rst:675
msgid "What's up with the comma operator's precedence?"
msgstr ""

#: ../../../faq/programming.rst:677
msgid "Comma is not an operator in Python.  Consider this session::"
msgstr ""

#: ../../../faq/programming.rst:679
msgid ""
">>> \"a\" in \"b\", \"a\"\n"
"(False, 'a')"
msgstr ""

#: ../../../faq/programming.rst:682
msgid ""
"Since the comma is not an operator, but a separator between expressions the "
"above is evaluated as if you had entered::"
msgstr ""

#: ../../../faq/programming.rst:685
msgid ">>> (\"a\" in \"b\"), \"a\""
msgstr ""

#: ../../../faq/programming.rst:687
msgid "not::"
msgstr ""

#: ../../../faq/programming.rst:689
msgid ">>> \"a\" in (\"b\", \"a\")"
msgstr ""

#: ../../../faq/programming.rst:691
msgid ""
"The same is true of the various assignment operators (``=``, ``+=`` etc).  "
"They are not truly operators but syntactic delimiters in assignment "
"statements."
msgstr ""

#: ../../../faq/programming.rst:696
msgid "Is there an equivalent of C's \"?:\" ternary operator?"
msgstr ""

#: ../../../faq/programming.rst:698
msgid ""
"Yes, this feature was added in Python 2.5. The syntax would be as follows::"
msgstr ""

#: ../../../faq/programming.rst:700
msgid ""
"[on_true] if [expression] else [on_false]\n"
"\n"
"x, y = 50, 25\n"
"\n"
"small = x if x < y else y"
msgstr ""

#: ../../../faq/programming.rst:706
msgid "For versions previous to 2.5 the answer would be 'No'."
msgstr ""

#: ../../../faq/programming.rst:710
msgid ""
"In many cases you can mimic ``a ? b : c`` with ``a and b or c``, but there's "
"a flaw: if *b* is zero (or empty, or ``None`` -- anything that tests false) "
"then *c* will be selected instead.  In many cases you can prove by looking "
"at the code that this can't happen (e.g. because *b* is a constant or has a "
"type that can never be false), but in general this can be a problem."
msgstr ""

#: ../../../faq/programming.rst:716
msgid ""
"Tim Peters (who wishes it was Steve Majewski) suggested the following "
"solution: ``(a and [b] or [c])[0]``.  Because ``[b]`` is a singleton list it "
"is never false, so the wrong path is never taken; then applying ``[0]`` to "
"the whole thing gets the *b* or *c* that you really wanted.  Ugly, but it "
"gets you there in the rare cases where it is really inconvenient to rewrite "
"your code using 'if'."
msgstr ""

#: ../../../faq/programming.rst:723
msgid ""
"The best course is usually to write a simple ``if...else`` statement.  "
"Another solution is to implement the ``?:`` operator as a function::"
msgstr ""

#: ../../../faq/programming.rst:726
msgid ""
"def q(cond, on_true, on_false):\n"
"    if cond:\n"
"        if not isfunction(on_true):\n"
"            return on_true\n"
"        else:\n"
"            return on_true()\n"
"    else:\n"
"        if not isfunction(on_false):\n"
"            return on_false\n"
"        else:\n"
"            return on_false()"
msgstr ""

#: ../../../faq/programming.rst:738
msgid ""
"In most cases you'll pass b and c directly: ``q(a, b, c)``.  To avoid "
"evaluating b or c when they shouldn't be, encapsulate them within a lambda "
"function, e.g.: ``q(a, lambda: b, lambda: c)``."
msgstr ""

#: ../../../faq/programming.rst:742
msgid ""
"It has been asked *why* Python has no if-then-else expression.  There are "
"several answers: many languages do just fine without one; it can easily lead "
"to less readable code; no sufficiently \"Pythonic\" syntax has been "
"discovered; a search of the standard library found remarkably few places "
"where using an if-then-else expression would make the code more "
"understandable."
msgstr ""

#: ../../../faq/programming.rst:748
msgid ""
"In 2002, :pep:`308` was written proposing several possible syntaxes and the "
"community was asked to vote on the issue.  The vote was inconclusive.  Most "
"people liked one of the syntaxes, but also hated other syntaxes; many votes "
"implied that people preferred no ternary operator rather than having a "
"syntax they hated."
msgstr ""

#: ../../../faq/programming.rst:756
msgid "Is it possible to write obfuscated one-liners in Python?"
msgstr ""

#: ../../../faq/programming.rst:758
msgid ""
"Yes.  Usually this is done by nesting :keyword:`lambda` within :keyword:"
"`lambda`.  See the following three examples, due to Ulf Bartelt::"
msgstr ""

#: ../../../faq/programming.rst:761
msgid ""
"from functools import reduce\n"
"\n"
"# Primes < 1000\n"
"print(list(filter(None,map(lambda y:y*reduce(lambda x,y:x*y!=0,\n"
"map(lambda x,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000)))))\n"
"\n"
"# First 10 Fibonacci numbers\n"
"print(list(map(lambda x,f=lambda x,f:(f(x-1,f)+f(x-2,f)) if x>1 else 1:\n"
"f(x,f), range(10))))\n"
"\n"
"# Mandelbrot set\n"
"print((lambda Ru,Ro,Iu,Io,IM,Sx,Sy:reduce(lambda x,y:x+y,map(lambda y,\n"
"Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambda yc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM,\n"
"Sx=Sx,Sy=Sy:reduce(lambda x,y:x+y,map(lambda x,xc=Ru,yc=yc,Ru=Ru,Ro=Ro,\n"
"i=i,Sx=Sx,F=lambda xc,yc,x,y,k,f=lambda xc,yc,x,y,k,f:(k<=0)or (x*x+y*y\n"
">=4.0) or 1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr(\n"
"64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy\n"
"))))(-2.1, 0.7, -1.2, 1.2, 30, 80, 24))\n"
"#    \\___ ___/  \\___ ___/  |   |   |__ lines on screen\n"
"#        V          V      |   |______ columns on screen\n"
"#        |          |      |__________ maximum of \"iterations\"\n"
"#        |          |_________________ range on y axis\n"
"#        |____________________________ range on x axis"
msgstr ""

#: ../../../faq/programming.rst:785
msgid "Don't try this at home, kids!"
msgstr ""

#: ../../../faq/programming.rst:789
msgid "Numbers and strings"
msgstr ""

#: ../../../faq/programming.rst:792
msgid "How do I specify hexadecimal and octal integers?"
msgstr ""

#: ../../../faq/programming.rst:794
msgid ""
"To specify an octal digit, precede the octal value with a zero, and then a "
"lower or uppercase \"o\".  For example, to set the variable \"a\" to the "
"octal value \"10\" (8 in decimal), type::"
msgstr ""

#: ../../../faq/programming.rst:798
msgid ""
">>> a = 0o10\n"
">>> a\n"
"8"
msgstr ""

#: ../../../faq/programming.rst:802
msgid ""
"Hexadecimal is just as easy.  Simply precede the hexadecimal number with a "
"zero, and then a lower or uppercase \"x\".  Hexadecimal digits can be "
"specified in lower or uppercase.  For example, in the Python interpreter::"
msgstr ""

#: ../../../faq/programming.rst:806
msgid ""
">>> a = 0xa5\n"
">>> a\n"
"165\n"
">>> b = 0XB2\n"
">>> b\n"
"178"
msgstr ""

#: ../../../faq/programming.rst:815
msgid "Why does -22 // 10 return -3?"
msgstr ""

#: ../../../faq/programming.rst:817
msgid ""
"It's primarily driven by the desire that ``i % j`` have the same sign as "
"``j``. If you want that, and also want::"
msgstr ""

#: ../../../faq/programming.rst:820
msgid "i == (i // j) * j + (i % j)"
msgstr ""

#: ../../../faq/programming.rst:822
msgid ""
"then integer division has to return the floor.  C also requires that "
"identity to hold, and then compilers that truncate ``i // j`` need to make "
"``i % j`` have the same sign as ``i``."
msgstr ""

#: ../../../faq/programming.rst:826
msgid ""
"There are few real use cases for ``i % j`` when ``j`` is negative.  When "
"``j`` is positive, there are many, and in virtually all of them it's more "
"useful for ``i % j`` to be ``>= 0``.  If the clock says 10 now, what did it "
"say 200 hours ago?  ``-190 % 12 == 2`` is useful; ``-190 % 12 == -10`` is a "
"bug waiting to bite."
msgstr ""

#: ../../../faq/programming.rst:834
msgid "How do I convert a string to a number?"
msgstr ""

#: ../../../faq/programming.rst:836
msgid ""
"For integers, use the built-in :func:`int` type constructor, e.g. "
"``int('144') == 144``.  Similarly, :func:`float` converts to floating-point, "
"e.g. ``float('144') == 144.0``."
msgstr ""

#: ../../../faq/programming.rst:840
msgid ""
"By default, these interpret the number as decimal, so that ``int('0144') == "
"144`` and ``int('0x144')`` raises :exc:`ValueError`. ``int(string, base)`` "
"takes the base to convert from as a second optional argument, so "
"``int('0x144', 16) == 324``.  If the base is specified as 0, the number is "
"interpreted using Python's rules: a leading '0' indicates octal, and '0x' "
"indicates a hex number."
msgstr ""

#: ../../../faq/programming.rst:846
msgid ""
"Do not use the built-in function :func:`eval` if all you need is to convert "
"strings to numbers.  :func:`eval` will be significantly slower and it "
"presents a security risk: someone could pass you a Python expression that "
"might have unwanted side effects.  For example, someone could pass "
"``__import__('os').system(\"rm -rf $HOME\")`` which would erase your home "
"directory."
msgstr ""

#: ../../../faq/programming.rst:853
msgid ""
":func:`eval` also has the effect of interpreting numbers as Python "
"expressions, so that e.g. ``eval('09')`` gives a syntax error because Python "
"does not allow leading '0' in a decimal number (except '0')."
msgstr ""

#: ../../../faq/programming.rst:859
msgid "How do I convert a number to a string?"
msgstr ""

#: ../../../faq/programming.rst:861
msgid ""
"To convert, e.g., the number 144 to the string '144', use the built-in type "
"constructor :func:`str`.  If you want a hexadecimal or octal representation, "
"use the built-in functions :func:`hex` or :func:`oct`.  For fancy "
"formatting, see the :ref:`string-formatting` section, e.g. ``\"{:04d}\"."
"format(144)`` yields ``'0144'`` and ``\"{:.3f}\".format(1/3)`` yields "
"``'0.333'``."
msgstr ""

#: ../../../faq/programming.rst:869
msgid "How do I modify a string in place?"
msgstr ""

#: ../../../faq/programming.rst:871
msgid ""
"You can't, because strings are immutable.  If you need an object with this "
"ability, try converting the string to a list or use the array module::"
msgstr ""

#: ../../../faq/programming.rst:874
msgid ""
">>> s = \"Hello, world\"\n"
">>> a = list(s)\n"
">>> print(a)\n"
"['H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd']\n"
">>> a[7:] = list(\"there!\")\n"
">>> ''.join(a)\n"
"'Hello, there!'\n"
"\n"
">>> import array\n"
">>> a = array.array('u', s)\n"
">>> print(a)\n"
"array('u', 'Hello, world')\n"
">>> a[0] = 'y'\n"
">>> print(a)\n"
"array('u', 'yello world')\n"
">>> a.tounicode()\n"
"'yello, world'"
msgstr ""

#: ../../../faq/programming.rst:894
msgid "How do I use strings to call functions/methods?"
msgstr ""

#: ../../../faq/programming.rst:896
msgid "There are various techniques."
msgstr ""

#: ../../../faq/programming.rst:898
msgid ""
"The best is to use a dictionary that maps strings to functions.  The primary "
"advantage of this technique is that the strings do not need to match the "
"names of the functions.  This is also the primary technique used to emulate "
"a case construct::"
msgstr ""

#: ../../../faq/programming.rst:903
msgid ""
"def a():\n"
"    pass\n"
"\n"
"def b():\n"
"    pass\n"
"\n"
"dispatch = {'go': a, 'stop': b}  # Note lack of parens for funcs\n"
"\n"
"dispatch[get_input()]()  # Note trailing parens to call function"
msgstr ""

#: ../../../faq/programming.rst:913
msgid "Use the built-in function :func:`getattr`::"
msgstr ""

#: ../../../faq/programming.rst:915
msgid ""
"import foo\n"
"getattr(foo, 'bar')()"
msgstr ""

#: ../../../faq/programming.rst:918
msgid ""
"Note that :func:`getattr` works on any object, including classes, class "
"instances, modules, and so on."
msgstr ""

#: ../../../faq/programming.rst:921
msgid "This is used in several places in the standard library, like this::"
msgstr ""

#: ../../../faq/programming.rst:923
msgid ""
"class Foo:\n"
"    def do_foo(self):\n"
"        ...\n"
"\n"
"    def do_bar(self):\n"
"        ...\n"
"\n"
"f = getattr(foo_instance, 'do_' + opname)\n"
"f()"
msgstr ""

#: ../../../faq/programming.rst:934
msgid "Use :func:`locals` or :func:`eval` to resolve the function name::"
msgstr ""

#: ../../../faq/programming.rst:936
msgid ""
"def myFunc():\n"
"    print(\"hello\")\n"
"\n"
"fname = \"myFunc\"\n"
"\n"
"f = locals()[fname]\n"
"f()\n"
"\n"
"f = eval(fname)\n"
"f()"
msgstr ""

#: ../../../faq/programming.rst:947
msgid ""
"Note: Using :func:`eval` is slow and dangerous.  If you don't have absolute "
"control over the contents of the string, someone could pass a string that "
"resulted in an arbitrary function being executed."
msgstr ""

#: ../../../faq/programming.rst:952
msgid ""
"Is there an equivalent to Perl's chomp() for removing trailing newlines from "
"strings?"
msgstr ""

#: ../../../faq/programming.rst:954
msgid ""
"Starting with Python 2.2, you can use ``S.rstrip(\"\\r\\n\")`` to remove all "
"occurrences of any line terminator from the end of the string ``S`` without "
"removing other trailing whitespace.  If the string ``S`` represents more "
"than one line, with several empty lines at the end, the line terminators for "
"all the blank lines will be removed::"
msgstr ""

#: ../../../faq/programming.rst:960
msgid ""
">>> lines = (\"line 1 \\r\\n\"\n"
"...          \"\\r\\n\"\n"
"...          \"\\r\\n\")\n"
">>> lines.rstrip(\"\\n\\r\")\n"
"'line 1 '"
msgstr ""

#: ../../../faq/programming.rst:966
msgid ""
"Since this is typically only desired when reading text one line at a time, "
"using ``S.rstrip()`` this way works well."
msgstr ""

#: ../../../faq/programming.rst:969
msgid "For older versions of Python, there are two partial substitutes:"
msgstr ""

#: ../../../faq/programming.rst:971
msgid ""
"If you want to remove all trailing whitespace, use the ``rstrip()`` method "
"of string objects.  This removes all trailing whitespace, not just a single "
"newline."
msgstr ""

#: ../../../faq/programming.rst:975
msgid ""
"Otherwise, if there is only one line in the string ``S``, use ``S."
"splitlines()[0]``."
msgstr ""

#: ../../../faq/programming.rst:980
msgid "Is there a scanf() or sscanf() equivalent?"
msgstr ""

#: ../../../faq/programming.rst:982
msgid "Not as such."
msgstr ""

#: ../../../faq/programming.rst:984
msgid ""
"For simple input parsing, the easiest approach is usually to split the line "
"into whitespace-delimited words using the :meth:`~str.split` method of "
"string objects and then convert decimal strings to numeric values using :"
"func:`int` or :func:`float`.  ``split()`` supports an optional \"sep\" "
"parameter which is useful if the line uses something other than whitespace "
"as a separator."
msgstr ""

#: ../../../faq/programming.rst:990
msgid ""
"For more complicated input parsing, regular expressions more powerful than "
"C's :cfunc:`sscanf` and better suited for the task."
msgstr ""

#: ../../../faq/programming.rst:995
msgid "What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error  mean?"
msgstr ""

#: ../../../faq/programming.rst:997
msgid "See the :ref:`unicode-howto`."
msgstr ""

#: ../../../faq/programming.rst:1001
msgid "Sequences (Tuples/Lists)"
msgstr ""

#: ../../../faq/programming.rst:1004
msgid "How do I convert between tuples and lists?"
msgstr ""

#: ../../../faq/programming.rst:1006
msgid ""
"The type constructor ``tuple(seq)`` converts any sequence (actually, any "
"iterable) into a tuple with the same items in the same order."
msgstr ""

#: ../../../faq/programming.rst:1009
msgid ""
"For example, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` and ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  If the argument is a tuple, it does not make a "
"copy but returns the same object, so it is cheap to call :func:`tuple` when "
"you aren't sure that an object is already a tuple."
msgstr ""

#: ../../../faq/programming.rst:1014
msgid ""
"The type constructor ``list(seq)`` converts any sequence or iterable into a "
"list with the same items in the same order.  For example, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` and ``list('abc')`` yields ``['a', 'b', 'c']``.  "
"If the argument is a list, it makes a copy just like ``seq[:]`` would."
msgstr ""

#: ../../../faq/programming.rst:1021
msgid "What's a negative index?"
msgstr ""

#: ../../../faq/programming.rst:1023
msgid ""
"Python sequences are indexed with positive numbers and negative numbers.  "
"For positive numbers 0 is the first index 1 is the second index and so "
"forth.  For negative indices -1 is the last index and -2 is the penultimate "
"(next to last) index and so forth.  Think of ``seq[-n]`` as the same as "
"``seq[len(seq)-n]``."
msgstr ""

#: ../../../faq/programming.rst:1028
msgid ""
"Using negative indices can be very convenient.  For example ``S[:-1]`` is "
"all of the string except for its last character, which is useful for "
"removing the trailing newline from a string."
msgstr ""

#: ../../../faq/programming.rst:1034
msgid "How do I iterate over a sequence in reverse order?"
msgstr ""

#: ../../../faq/programming.rst:1036
msgid "Use the :func:`reversed` builtin function, which is new in Python 2.4::"
msgstr ""

#: ../../../faq/programming.rst:1038
msgid ""
"for x in reversed(sequence):\n"
"    ... # do something with x..."
msgstr ""

#: ../../../faq/programming.rst:1041
msgid ""
"This won't touch your original sequence, but build a new copy with reversed "
"order to iterate over."
msgstr ""

#: ../../../faq/programming.rst:1044
msgid "With Python 2.3, you can use an extended slice syntax::"
msgstr ""

#: ../../../faq/programming.rst:1046
msgid ""
"for x in sequence[::-1]:\n"
"    ... # do something with x..."
msgstr ""

#: ../../../faq/programming.rst:1051
msgid "How do you remove duplicates from a list?"
msgstr ""

#: ../../../faq/programming.rst:1053
msgid "See the Python Cookbook for a long discussion of many ways to do this:"
msgstr ""

#: ../../../faq/programming.rst:1055
msgid "http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560"
msgstr ""

#: ../../../faq/programming.rst:1057
msgid ""
"If you don't mind reordering the list, sort it and then scan from the end of "
"the list, deleting duplicates as you go::"
msgstr ""

#: ../../../faq/programming.rst:1060
msgid ""
"if mylist:\n"
"    mylist.sort()\n"
"    last = mylist[-1]\n"
"    for i in range(len(mylist)-2, -1, -1):\n"
"        if last == mylist[i]:\n"
"            del mylist[i]\n"
"        else:\n"
"            last = mylist[i]"
msgstr ""

#: ../../../faq/programming.rst:1069
msgid ""
"If all elements of the list may be used as dictionary keys (i.e. they are "
"all hashable) this is often faster ::"
msgstr ""

#: ../../../faq/programming.rst:1072
msgid ""
"d = {}\n"
"for x in mylist:\n"
"    d[x] = 1\n"
"mylist = list(d.keys())"
msgstr ""

#: ../../../faq/programming.rst:1077
msgid "In Python 2.5 and later, the following is possible instead::"
msgstr ""

#: ../../../faq/programming.rst:1079
msgid "mylist = list(set(mylist))"
msgstr ""

#: ../../../faq/programming.rst:1081
msgid ""
"This converts the list into a set, thereby removing duplicates, and then "
"back into a list."
msgstr ""

#: ../../../faq/programming.rst:1086
msgid "How do you make an array in Python?"
msgstr ""

#: ../../../faq/programming.rst:1088
msgid "Use a list::"
msgstr ""

#: ../../../faq/programming.rst:1090
msgid "[\"this\", 1, \"is\", \"an\", \"array\"]"
msgstr ""

#: ../../../faq/programming.rst:1092
msgid ""
"Lists are equivalent to C or Pascal arrays in their time complexity; the "
"primary difference is that a Python list can contain objects of many "
"different types."
msgstr ""

#: ../../../faq/programming.rst:1095
msgid ""
"The ``array`` module also provides methods for creating arrays of fixed "
"types with compact representations, but they are slower to index than "
"lists.  Also note that the Numeric extensions and others define array-like "
"structures with various characteristics as well."
msgstr ""

#: ../../../faq/programming.rst:1100
msgid ""
"To get Lisp-style linked lists, you can emulate cons cells using tuples::"
msgstr ""

#: ../../../faq/programming.rst:1102
msgid "lisp_list = (\"like\",  (\"this\",  (\"example\", None) ) )"
msgstr ""

#: ../../../faq/programming.rst:1104
msgid ""
"If mutability is desired, you could use lists instead of tuples.  Here the "
"analogue of lisp car is ``lisp_list[0]`` and the analogue of cdr is "
"``lisp_list[1]``.  Only do this if you're sure you really need to, because "
"it's usually a lot slower than using Python lists."
msgstr ""

#: ../../../faq/programming.rst:1111
msgid "How do I create a multidimensional list?"
msgstr ""

#: ../../../faq/programming.rst:1113
msgid "You probably tried to make a multidimensional array like this::"
msgstr ""

#: ../../../faq/programming.rst:1115
msgid "A = [[None] * 2] * 3"
msgstr ""

#: ../../../faq/programming.rst:1117
msgid "This looks correct if you print it::"
msgstr ""

#: ../../../faq/programming.rst:1119
msgid ""
">>> A\n"
"[[None, None], [None, None], [None, None]]"
msgstr ""

#: ../../../faq/programming.rst:1122
msgid "But when you assign a value, it shows up in multiple places:"
msgstr ""

#: ../../../faq/programming.rst:1128
msgid ""
"The reason is that replicating a list with ``*`` doesn't create copies, it "
"only creates references to the existing objects.  The ``*3`` creates a list "
"containing 3 references to the same list of length two.  Changes to one row "
"will show in all rows, which is almost certainly not what you want."
msgstr ""

#: ../../../faq/programming.rst:1133
msgid ""
"The suggested approach is to create a list of the desired length first and "
"then fill in each element with a newly created list::"
msgstr ""

#: ../../../faq/programming.rst:1136
msgid ""
"A = [None] * 3\n"
"for i in range(3):\n"
"    A[i] = [None] * 2"
msgstr ""

#: ../../../faq/programming.rst:1140
msgid ""
"This generates a list containing 3 different lists of length two.  You can "
"also use a list comprehension::"
msgstr ""

#: ../../../faq/programming.rst:1143
msgid ""
"w, h = 2, 3\n"
"A = [[None] * w for i in range(h)]"
msgstr ""

#: ../../../faq/programming.rst:1146
msgid ""
"Or, you can use an extension that provides a matrix datatype; `Numeric "
"Python <http://numpy.scipy.org/>`_ is the best known."
msgstr ""

#: ../../../faq/programming.rst:1151
msgid "How do I apply a method to a sequence of objects?"
msgstr ""

#: ../../../faq/programming.rst:1153
msgid "Use a list comprehension::"
msgstr ""

#: ../../../faq/programming.rst:1155
msgid "result = [obj.method() for obj in mylist]"
msgstr ""

#: ../../../faq/programming.rst:1159
msgid "Dictionaries"
msgstr ""

#: ../../../faq/programming.rst:1162
msgid "How can I get a dictionary to display its keys in a consistent order?"
msgstr ""

#: ../../../faq/programming.rst:1164
msgid ""
"You can't.  Dictionaries store their keys in an unpredictable order, so the "
"display order of a dictionary's elements will be similarly unpredictable."
msgstr ""

#: ../../../faq/programming.rst:1167
msgid ""
"This can be frustrating if you want to save a printable version to a file, "
"make some changes and then compare it with some other printed dictionary.  "
"In this case, use the ``pprint`` module to pretty-print the dictionary; the "
"items will be presented in order sorted by the key."
msgstr ""

#: ../../../faq/programming.rst:1172
msgid ""
"A more complicated solution is to subclass ``dict`` to create a "
"``SortedDict`` class that prints itself in a predictable order.  Here's one "
"simpleminded implementation of such a class::"
msgstr ""

#: ../../../faq/programming.rst:1176
msgid ""
"class SortedDict(dict):\n"
"    def __repr__(self):\n"
"        keys = sorted(self.keys())\n"
"        result = (\"{!r}: {!r}\".format(k, self[k]) for k in keys)\n"
"        return \"{{{}}}\".format(\", \".join(result))\n"
"\n"
"    __str__ = __repr__"
msgstr ""

#: ../../../faq/programming.rst:1184
msgid ""
"This will work for many common situations you might encounter, though it's "
"far from a perfect solution. The largest flaw is that if some values in the "
"dictionary are also dictionaries, their values won't be presented in any "
"particular order."
msgstr ""

#: ../../../faq/programming.rst:1191
msgid ""
"I want to do a complicated sort: can you do a Schwartzian Transform in "
"Python?"
msgstr ""

#: ../../../faq/programming.rst:1193
msgid ""
"The technique, attributed to Randal Schwartz of the Perl community, sorts "
"the elements of a list by a metric which maps each element to its \"sort "
"value\". In Python, just use the ``key`` argument for the ``sort()`` method::"
msgstr ""

#: ../../../faq/programming.rst:1197
msgid ""
"Isorted = L[:]\n"
"Isorted.sort(key=lambda s: int(s[10:15]))"
msgstr ""

#: ../../../faq/programming.rst:1200
msgid ""
"The ``key`` argument is new in Python 2.4, for older versions this kind of "
"sorting is quite simple to do with list comprehensions.  To sort a list of "
"strings by their uppercase values::"
msgstr ""

#: ../../../faq/programming.rst:1204
msgid ""
"tmp1 = [(x.upper(), x) for x in L]  # Schwartzian transform\n"
"tmp1.sort()\n"
"Usorted = [x[1] for x in tmp1]"
msgstr ""

#: ../../../faq/programming.rst:1208
msgid ""
"To sort by the integer value of a subfield extending from positions 10-15 in "
"each string::"
msgstr ""

#: ../../../faq/programming.rst:1211
msgid ""
"tmp2 = [(int(s[10:15]), s) for s in L]  # Schwartzian transform\n"
"tmp2.sort()\n"
"Isorted = [x[1] for x in tmp2]"
msgstr ""

#: ../../../faq/programming.rst:1215
msgid "For versions prior to 3.0, Isorted may also be computed by ::"
msgstr ""

#: ../../../faq/programming.rst:1217
msgid ""
"def intfield(s):\n"
"    return int(s[10:15])\n"
"\n"
"def Icmp(s1, s2):\n"
"    return cmp(intfield(s1), intfield(s2))\n"
"\n"
"Isorted = L[:]\n"
"Isorted.sort(Icmp)"
msgstr ""

#: ../../../faq/programming.rst:1226
msgid ""
"but since this method calls ``intfield()`` many times for each element of L, "
"it is slower than the Schwartzian Transform."
msgstr ""

#: ../../../faq/programming.rst:1231
msgid "How can I sort one list by values from another list?"
msgstr ""

#: ../../../faq/programming.rst:1233
msgid ""
"Merge them into an iterator of tuples, sort the resulting list, and then "
"pick out the element you want. ::"
msgstr ""

#: ../../../faq/programming.rst:1236
msgid ""
">>> list1 = [\"what\", \"I'm\", \"sorting\", \"by\"]\n"
">>> list2 = [\"something\", \"else\", \"to\", \"sort\"]\n"
">>> pairs = zip(list1, list2)\n"
">>> pairs = sorted(pairs)\n"
">>> pairs\n"
"[(\"I'm\", 'else'), ('by', 'sort'), ('sorting', 'to'), ('what', "
"'something')]\n"
">>> result = [x[1] for x in pairs]\n"
">>> result\n"
"['else', 'sort', 'to', 'something']"
msgstr ""

#: ../../../faq/programming.rst:1247
msgid "An alternative for the last step is::"
msgstr ""

#: ../../../faq/programming.rst:1249
msgid ""
">>> result = []\n"
">>> for p in pairs: result.append(p[1])"
msgstr ""

#: ../../../faq/programming.rst:1252
msgid ""
"If you find this more legible, you might prefer to use this instead of the "
"final list comprehension.  However, it is almost twice as slow for long "
"lists.  Why? First, the ``append()`` operation has to reallocate memory, and "
"while it uses some tricks to avoid doing that each time, it still has to do "
"it occasionally, and that costs quite a bit.  Second, the expression "
"\"result.append\" requires an extra attribute lookup, and third, there's a "
"speed reduction from having to make all those function calls."
msgstr ""

#: ../../../faq/programming.rst:1262
msgid "Objects"
msgstr ""

#: ../../../faq/programming.rst:1265
msgid "What is a class?"
msgstr ""

#: ../../../faq/programming.rst:1267
msgid ""
"A class is the particular object type created by executing a class "
"statement. Class objects are used as templates to create instance objects, "
"which embody both the data (attributes) and code (methods) specific to a "
"datatype."
msgstr ""

#: ../../../faq/programming.rst:1271
msgid ""
"A class can be based on one or more other classes, called its base "
"class(es). It then inherits the attributes and methods of its base classes. "
"This allows an object model to be successively refined by inheritance.  You "
"might have a generic ``Mailbox`` class that provides basic accessor methods "
"for a mailbox, and subclasses such as ``MboxMailbox``, ``MaildirMailbox``, "
"``OutlookMailbox`` that handle various specific mailbox formats."
msgstr ""

#: ../../../faq/programming.rst:1280
msgid "What is a method?"
msgstr ""

#: ../../../faq/programming.rst:1282
msgid ""
"A method is a function on some object ``x`` that you normally call as ``x."
"name(arguments...)``.  Methods are defined as functions inside the class "
"definition::"
msgstr ""

#: ../../../faq/programming.rst:1286
msgid ""
"class C:\n"
"    def meth (self, arg):\n"
"        return arg * 2 + self.attribute"
msgstr ""

#: ../../../faq/programming.rst:1292
msgid "What is self?"
msgstr ""

#: ../../../faq/programming.rst:1294
msgid ""
"Self is merely a conventional name for the first argument of a method.  A "
"method defined as ``meth(self, a, b, c)`` should be called as ``x.meth(a, b, "
"c)`` for some instance ``x`` of the class in which the definition occurs; "
"the called method will think it is called as ``meth(x, a, b, c)``."
msgstr ""

#: ../../../faq/programming.rst:1299
msgid "See also :ref:`why-self`."
msgstr ""

#: ../../../faq/programming.rst:1303
msgid ""
"How do I check if an object is an instance of a given class or of a subclass "
"of it?"
msgstr ""

#: ../../../faq/programming.rst:1305
msgid ""
"Use the built-in function ``isinstance(obj, cls)``.  You can check if an "
"object is an instance of any of a number of classes by providing a tuple "
"instead of a single class, e.g. ``isinstance(obj, (class1, class2, ...))``, "
"and can also check whether an object is one of Python's built-in types, e.g. "
"``isinstance(obj, str)`` or ``isinstance(obj, (int, float, complex))``."
msgstr ""

#: ../../../faq/programming.rst:1311
msgid ""
"Note that most programs do not use :func:`isinstance` on user-defined "
"classes very often.  If you are developing the classes yourself, a more "
"proper object-oriented style is to define methods on the classes that "
"encapsulate a particular behaviour, instead of checking the object's class "
"and doing a different thing based on what class it is.  For example, if you "
"have a function that does something::"
msgstr ""

#: ../../../faq/programming.rst:1318
msgid ""
"def search(obj):\n"
"    if isinstance(obj, Mailbox):\n"
"        # ... code to search a mailbox\n"
"    elif isinstance(obj, Document):\n"
"        # ... code to search a document\n"
"    elif ..."
msgstr ""

#: ../../../faq/programming.rst:1325
msgid ""
"A better approach is to define a ``search()`` method on all the classes and "
"just call it::"
msgstr ""

#: ../../../faq/programming.rst:1328
msgid ""
"class Mailbox:\n"
"    def search(self):\n"
"        # ... code to search a mailbox\n"
"\n"
"class Document:\n"
"    def search(self):\n"
"        # ... code to search a document\n"
"\n"
"obj.search()"
msgstr ""

#: ../../../faq/programming.rst:1340
msgid "What is delegation?"
msgstr ""

#: ../../../faq/programming.rst:1342
msgid ""
"Delegation is an object oriented technique (also called a design pattern). "
"Let's say you have an object ``x`` and want to change the behaviour of just "
"one of its methods.  You can create a new class that provides a new "
"implementation of the method you're interested in changing and delegates all "
"other methods to the corresponding method of ``x``."
msgstr ""

#: ../../../faq/programming.rst:1348
msgid ""
"Python programmers can easily implement delegation.  For example, the "
"following class implements a class that behaves like a file but converts all "
"written data to uppercase::"
msgstr ""

#: ../../../faq/programming.rst:1352
msgid ""
"class UpperOut:\n"
"\n"
"    def __init__(self, outfile):\n"
"        self._outfile = outfile\n"
"\n"
"    def write(self, s):\n"
"        self._outfile.write(s.upper())\n"
"\n"
"    def __getattr__(self, name):\n"
"        return getattr(self._outfile, name)"
msgstr ""

#: ../../../faq/programming.rst:1363
msgid ""
"Here the ``UpperOut`` class redefines the ``write()`` method to convert the "
"argument string to uppercase before calling the underlying ``self.__outfile."
"write()`` method.  All other methods are delegated to the underlying ``self."
"__outfile`` object.  The delegation is accomplished via the ``__getattr__`` "
"method; consult :ref:`the language reference <attribute-access>` for more "
"information about controlling attribute access."
msgstr ""

#: ../../../faq/programming.rst:1370
msgid ""
"Note that for more general cases delegation can get trickier. When "
"attributes must be set as well as retrieved, the class must define a :meth:"
"`__setattr__` method too, and it must do so carefully.  The basic "
"implementation of :meth:`__setattr__` is roughly equivalent to the "
"following::"
msgstr ""

#: ../../../faq/programming.rst:1375
msgid ""
"class X:\n"
"    ...\n"
"    def __setattr__(self, name, value):\n"
"        self.__dict__[name] = value\n"
"    ..."
msgstr ""

#: ../../../faq/programming.rst:1381
msgid ""
"Most :meth:`__setattr__` implementations must modify ``self.__dict__`` to "
"store local state for self without causing an infinite recursion."
msgstr ""

#: ../../../faq/programming.rst:1386
msgid ""
"How do I call a method defined in a base class from a derived class that "
"overrides it?"
msgstr ""

#: ../../../faq/programming.rst:1388
msgid "Use the built-in :func:`super` function::"
msgstr ""

#: ../../../faq/programming.rst:1390
msgid ""
"class Derived(Base):\n"
"    def meth (self):\n"
"        super(Derived, self).meth()"
msgstr ""

#: ../../../faq/programming.rst:1394
msgid ""
"For version prior to 3.0, you may be using classic classes: For a class "
"definition such as ``class Derived(Base): ...`` you can call method "
"``meth()`` defined in ``Base`` (or one of ``Base``'s base classes) as ``Base."
"meth(self, arguments...)``.  Here, ``Base.meth`` is an unbound method, so "
"you need to provide the ``self`` argument."
msgstr ""

#: ../../../faq/programming.rst:1402
msgid "How can I organize my code to make it easier to change the base class?"
msgstr ""

#: ../../../faq/programming.rst:1404
msgid ""
"You could define an alias for the base class, assign the real base class to "
"it before your class definition, and use the alias throughout your class.  "
"Then all you have to change is the value assigned to the alias.  "
"Incidentally, this trick is also handy if you want to decide dynamically (e."
"g. depending on availability of resources) which base class to use.  "
"Example::"
msgstr ""

#: ../../../faq/programming.rst:1410
msgid ""
"BaseAlias = <real base class>\n"
"\n"
"class Derived(BaseAlias):\n"
"    def meth(self):\n"
"        BaseAlias.meth(self)\n"
"        ..."
msgstr ""

#: ../../../faq/programming.rst:1419
msgid "How do I create static class data and static class methods?"
msgstr ""

#: ../../../faq/programming.rst:1421
msgid ""
"Both static data and static methods (in the sense of C++ or Java) are "
"supported in Python."
msgstr ""

#: ../../../faq/programming.rst:1424
msgid ""
"For static data, simply define a class attribute.  To assign a new value to "
"the attribute, you have to explicitly use the class name in the assignment::"
msgstr ""

#: ../../../faq/programming.rst:1427
msgid ""
"class C:\n"
"    count = 0   # number of times C.__init__ called\n"
"\n"
"    def __init__(self):\n"
"        C.count = C.count + 1\n"
"\n"
"    def getcount(self):\n"
"        return C.count  # or return self.count"
msgstr ""

#: ../../../faq/programming.rst:1436
msgid ""
"``c.count`` also refers to ``C.count`` for any ``c`` such that "
"``isinstance(c, C)`` holds, unless overridden by ``c`` itself or by some "
"class on the base-class search path from ``c.__class__`` back to ``C``."
msgstr ""

#: ../../../faq/programming.rst:1440
msgid ""
"Caution: within a method of C, an assignment like ``self.count = 42`` "
"creates a new and unrelated instance named \"count\" in ``self``'s own "
"dict.  Rebinding of a class-static data name must always specify the class "
"whether inside a method or not::"
msgstr ""

#: ../../../faq/programming.rst:1445
msgid "C.count = 314"
msgstr ""

#: ../../../faq/programming.rst:1447
msgid "Static methods are possible since Python 2.2::"
msgstr ""

#: ../../../faq/programming.rst:1449
msgid ""
"class C:\n"
"    def static(arg1, arg2, arg3):\n"
"        # No 'self' parameter!\n"
"        ...\n"
"    static = staticmethod(static)"
msgstr ""

#: ../../../faq/programming.rst:1455
msgid "With Python 2.4's decorators, this can also be written as ::"
msgstr ""

#: ../../../faq/programming.rst:1457
msgid ""
"class C:\n"
"    @staticmethod\n"
"    def static(arg1, arg2, arg3):\n"
"        # No 'self' parameter!\n"
"        ..."
msgstr ""

#: ../../../faq/programming.rst:1463
msgid ""
"However, a far more straightforward way to get the effect of a static method "
"is via a simple module-level function::"
msgstr ""

#: ../../../faq/programming.rst:1466
msgid ""
"def getcount():\n"
"    return C.count"
msgstr ""

#: ../../../faq/programming.rst:1469
msgid ""
"If your code is structured so as to define one class (or tightly related "
"class hierarchy) per module, this supplies the desired encapsulation."
msgstr ""

#: ../../../faq/programming.rst:1474
msgid "How can I overload constructors (or methods) in Python?"
msgstr ""

#: ../../../faq/programming.rst:1476
msgid ""
"This answer actually applies to all methods, but the question usually comes "
"up first in the context of constructors."
msgstr ""

#: ../../../faq/programming.rst:1479
msgid "In C++ you'd write"
msgstr ""

#: ../../../faq/programming.rst:1481
msgid ""
"class C {\n"
"    C() { cout << \"No arguments\\n\"; }\n"
"    C(int i) { cout << \"Argument is \" << i << \"\\n\"; }\n"
"}"
msgstr ""

#: ../../../faq/programming.rst:1488
msgid ""
"In Python you have to write a single constructor that catches all cases "
"using default arguments.  For example::"
msgstr ""

#: ../../../faq/programming.rst:1491
msgid ""
"class C:\n"
"    def __init__(self, i=None):\n"
"        if i is None:\n"
"            print(\"No arguments\")\n"
"        else:\n"
"            print(\"Argument is\", i)"
msgstr ""

#: ../../../faq/programming.rst:1498
msgid "This is not entirely equivalent, but close enough in practice."
msgstr ""

#: ../../../faq/programming.rst:1500
msgid "You could also try a variable-length argument list, e.g. ::"
msgstr ""

#: ../../../faq/programming.rst:1502
msgid ""
"def __init__(self, *args):\n"
"    ..."
msgstr ""

#: ../../../faq/programming.rst:1505
msgid "The same approach works for all method definitions."
msgstr ""

#: ../../../faq/programming.rst:1509
msgid "I try to use __spam and I get an error about _SomeClassName__spam."
msgstr ""

#: ../../../faq/programming.rst:1511
msgid ""
"Variable names with double leading underscores are \"mangled\" to provide a "
"simple but effective way to define class private variables.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with any leading underscores "
"stripped."
msgstr ""

#: ../../../faq/programming.rst:1517
msgid ""
"This doesn't guarantee privacy: an outside user can still deliberately "
"access the \"_classname__spam\" attribute, and private values are visible in "
"the object's ``__dict__``.  Many Python programmers never bother to use "
"private variable names at all."
msgstr ""

#: ../../../faq/programming.rst:1524
msgid "My class defines __del__ but it is not called when I delete the object."
msgstr ""

#: ../../../faq/programming.rst:1526
msgid "There are several possible reasons for this."
msgstr ""

#: ../../../faq/programming.rst:1528
msgid ""
"The del statement does not necessarily call :meth:`__del__` -- it simply "
"decrements the object's reference count, and if this reaches zero :meth:"
"`__del__` is called."
msgstr ""

#: ../../../faq/programming.rst:1532
msgid ""
"If your data structures contain circular links (e.g. a tree where each child "
"has a parent reference and each parent has a list of children) the reference "
"counts will never go back to zero.  Once in a while Python runs an algorithm "
"to detect such cycles, but the garbage collector might run some time after "
"the last reference to your data structure vanishes, so your :meth:`__del__` "
"method may be called at an inconvenient and random time. This is "
"inconvenient if you're trying to reproduce a problem. Worse, the order in "
"which object's :meth:`__del__` methods are executed is arbitrary.  You can "
"run :func:`gc.collect` to force a collection, but there *are* pathological "
"cases where objects will never be collected."
msgstr ""

#: ../../../faq/programming.rst:1543
msgid ""
"Despite the cycle collector, it's still a good idea to define an explicit "
"``close()`` method on objects to be called whenever you're done with them.  "
"The ``close()`` method can then remove attributes that refer to subobjecs.  "
"Don't call :meth:`__del__` directly -- :meth:`__del__` should call "
"``close()`` and ``close()`` should make sure that it can be called more than "
"once for the same object."
msgstr ""

#: ../../../faq/programming.rst:1550
msgid ""
"Another way to avoid cyclical references is to use the :mod:`weakref` "
"module, which allows you to point to objects without incrementing their "
"reference count. Tree data structures, for instance, should use weak "
"references for their parent and sibling references (if they need them!)."
msgstr ""

#: ../../../faq/programming.rst:1563
msgid ""
"Finally, if your :meth:`__del__` method raises an exception, a warning "
"message is printed to :data:`sys.stderr`."
msgstr ""

#: ../../../faq/programming.rst:1568
msgid "How do I get a list of all instances of a given class?"
msgstr ""

#: ../../../faq/programming.rst:1570
msgid ""
"Python does not keep track of all instances of a class (or of a built-in "
"type). You can program the class's constructor to keep track of all "
"instances by keeping a list of weak references to each instance."
msgstr ""

#: ../../../faq/programming.rst:1576
msgid "Modules"
msgstr ""

#: ../../../faq/programming.rst:1579
msgid "How do I create a .pyc file?"
msgstr ""

#: ../../../faq/programming.rst:1581
msgid ""
"When a module is imported for the first time (or when the source is more "
"recent than the current compiled file) a ``.pyc`` file containing the "
"compiled code should be created in the same directory as the ``.py`` file."
msgstr ""

#: ../../../faq/programming.rst:1585
msgid ""
"One reason that a ``.pyc`` file may not be created is permissions problems "
"with the directory. This can happen, for example, if you develop as one user "
"but run as another, such as if you are testing with a web server.  Creation "
"of a .pyc file is automatic if you're importing a module and Python has the "
"ability (permissions, free space, etc...) to write the compiled module back "
"to the directory."
msgstr ""

#: ../../../faq/programming.rst:1592
msgid ""
"Running Python on a top level script is not considered an import and no ``."
"pyc`` will be created.  For example, if you have a top-level module ``abc."
"py`` that imports another module ``xyz.py``, when you run abc, ``xyz.pyc`` "
"will be created since xyz is imported, but no ``abc.pyc`` file will be "
"created since ``abc.py`` isn't being imported."
msgstr ""

#: ../../../faq/programming.rst:1598
msgid ""
"If you need to create abc.pyc -- that is, to create a .pyc file for a module "
"that is not imported -- you can, using the :mod:`py_compile` and :mod:"
"`compileall` modules."
msgstr ""

#: ../../../faq/programming.rst:1602
msgid ""
"The :mod:`py_compile` module can manually compile any module.  One way is to "
"use the ``compile()`` function in that module interactively::"
msgstr ""

#: ../../../faq/programming.rst:1605
msgid ""
">>> import py_compile\n"
">>> py_compile.compile('abc.py')"
msgstr ""

#: ../../../faq/programming.rst:1608
msgid ""
"This will write the ``.pyc`` to the same location as ``abc.py`` (or you can "
"override that with the optional parameter ``cfile``)."
msgstr ""

#: ../../../faq/programming.rst:1611
msgid ""
"You can also automatically compile all files in a directory or directories "
"using the :mod:`compileall` module.  You can do it from the shell prompt by "
"running ``compileall.py`` and providing the path of a directory containing "
"Python files to compile::"
msgstr ""

#: ../../../faq/programming.rst:1616
msgid "python -m compileall ."
msgstr ""

#: ../../../faq/programming.rst:1620
msgid "How do I find the current module name?"
msgstr ""

#: ../../../faq/programming.rst:1622
msgid ""
"A module can find out its own module name by looking at the predefined "
"global variable ``__name__``.  If this has the value ``'__main__'``, the "
"program is running as a script.  Many modules that are usually used by "
"importing them also provide a command-line interface or a self-test, and "
"only execute this code after checking ``__name__``::"
msgstr ""

#: ../../../faq/programming.rst:1628
msgid ""
"def main():\n"
"    print('Running test...')\n"
"    ...\n"
"\n"
"if __name__ == '__main__':\n"
"    main()"
msgstr ""

#: ../../../faq/programming.rst:1637
msgid "How can I have modules that mutually import each other?"
msgstr ""

#: ../../../faq/programming.rst:1639
msgid "Suppose you have the following modules:"
msgstr ""

#: ../../../faq/programming.rst:1641
msgid "foo.py::"
msgstr ""

#: ../../../faq/programming.rst:1643
msgid ""
"from bar import bar_var\n"
"foo_var = 1"
msgstr ""

#: ../../../faq/programming.rst:1646
msgid "bar.py::"
msgstr ""

#: ../../../faq/programming.rst:1648
msgid ""
"from foo import foo_var\n"
"bar_var = 2"
msgstr ""

#: ../../../faq/programming.rst:1651
msgid "The problem is that the interpreter will perform the following steps:"
msgstr ""

#: ../../../faq/programming.rst:1653
msgid "main imports foo"
msgstr ""

#: ../../../faq/programming.rst:1654
msgid "Empty globals for foo are created"
msgstr ""

#: ../../../faq/programming.rst:1655
msgid "foo is compiled and starts executing"
msgstr ""

#: ../../../faq/programming.rst:1656
msgid "foo imports bar"
msgstr ""

#: ../../../faq/programming.rst:1657
msgid "Empty globals for bar are created"
msgstr ""

#: ../../../faq/programming.rst:1658
msgid "bar is compiled and starts executing"
msgstr ""

#: ../../../faq/programming.rst:1659
msgid ""
"bar imports foo (which is a no-op since there already is a module named foo)"
msgstr ""

#: ../../../faq/programming.rst:1660
msgid "bar.foo_var = foo.foo_var"
msgstr ""

#: ../../../faq/programming.rst:1662
msgid ""
"The last step fails, because Python isn't done with interpreting ``foo`` yet "
"and the global symbol dictionary for ``foo`` is still empty."
msgstr ""

#: ../../../faq/programming.rst:1665
msgid ""
"The same thing happens when you use ``import foo``, and then try to access "
"``foo.foo_var`` in global code."
msgstr ""

#: ../../../faq/programming.rst:1668
msgid "There are (at least) three possible workarounds for this problem."
msgstr ""

#: ../../../faq/programming.rst:1670
msgid ""
"Guido van Rossum recommends avoiding all uses of ``from <module> import ..."
"``, and placing all code inside functions.  Initializations of global "
"variables and class variables should use constants or built-in functions "
"only.  This means everything from an imported module is referenced as "
"``<module>.<name>``."
msgstr ""

#: ../../../faq/programming.rst:1675
msgid ""
"Jim Roskind suggests performing steps in the following order in each module:"
msgstr ""

#: ../../../faq/programming.rst:1677
msgid ""
"exports (globals, functions, and classes that don't need imported base "
"classes)"
msgstr ""

#: ../../../faq/programming.rst:1679
msgid "``import`` statements"
msgstr ""

#: ../../../faq/programming.rst:1680
msgid ""
"active code (including globals that are initialized from imported values)."
msgstr ""

#: ../../../faq/programming.rst:1682
msgid ""
"van Rossum doesn't like this approach much because the imports appear in a "
"strange place, but it does work."
msgstr ""

#: ../../../faq/programming.rst:1685
msgid ""
"Matthias Urlichs recommends restructuring your code so that the recursive "
"import is not necessary in the first place."
msgstr ""

#: ../../../faq/programming.rst:1688
msgid "These solutions are not mutually exclusive."
msgstr ""

#: ../../../faq/programming.rst:1692
msgid "__import__('x.y.z') returns <module 'x'>; how do I get z?"
msgstr ""

#: ../../../faq/programming.rst:1694
msgid "Try::"
msgstr ""

#: ../../../faq/programming.rst:1696
msgid "__import__('x.y.z').y.z"
msgstr ""

#: ../../../faq/programming.rst:1698
msgid "For more realistic situations, you may have to do something like ::"
msgstr ""

#: ../../../faq/programming.rst:1700
msgid ""
"m = __import__(s)\n"
"for i in s.split(\".\")[1:]:\n"
"    m = getattr(m, i)"
msgstr ""

#: ../../../faq/programming.rst:1704
msgid ""
"See :mod:`importlib` for a convenience function called :func:`~importlib."
"import_module`."
msgstr ""

#: ../../../faq/programming.rst:1710
msgid ""
"When I edit an imported module and reimport it, the changes don't show up.  "
"Why does this happen?"
msgstr ""

#: ../../../faq/programming.rst:1712
msgid ""
"For reasons of efficiency as well as consistency, Python only reads the "
"module file on the first time a module is imported.  If it didn't, in a "
"program consisting of many modules where each one imports the same basic "
"module, the basic module would be parsed and re-parsed many times.  To force "
"rereading of a changed module, do this::"
msgstr ""

#: ../../../faq/programming.rst:1718
msgid ""
"import imp\n"
"import modname\n"
"imp.reload(modname)"
msgstr ""

#: ../../../faq/programming.rst:1722
msgid ""
"Warning: this technique is not 100% fool-proof.  In particular, modules "
"containing statements like ::"
msgstr ""

#: ../../../faq/programming.rst:1725
msgid "from modname import some_objects"
msgstr ""

#: ../../../faq/programming.rst:1727
msgid ""
"will continue to work with the old version of the imported objects.  If the "
"module contains class definitions, existing class instances will *not* be "
"updated to use the new class definition.  This can result in the following "
"paradoxical behaviour:"
msgstr ""

#: ../../../faq/programming.rst:1740
msgid ""
"The nature of the problem is made clear if you print out the \"identity\" of "
"the class objects:"
msgstr ""
