# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/urllib.parse.rst:2
msgid ":mod:`urllib.parse` --- Parse URLs into components"
msgstr ""

#: ../../../library/urllib.parse.rst:15
msgid ""
"This module defines a standard interface to break Uniform Resource Locator "
"(URL) strings up in components (addressing scheme, network location, path "
"etc.), to combine the components back into a URL string, and to convert a "
"\"relative URL\" to an absolute URL given a \"base URL.\""
msgstr ""

#: ../../../library/urllib.parse.rst:20
msgid ""
"The module has been designed to match the Internet RFC on Relative Uniform "
"Resource Locators (and discovered a bug in an earlier draft!). It supports "
"the following URL schemes: ``file``, ``ftp``, ``gopher``, ``hdl``, ``http``, "
"``https``, ``imap``, ``mailto``, ``mms``, ``news``, ``nntp``, ``prospero``, "
"``rsync``, ``rtsp``, ``rtspu``, ``sftp``, ``shttp``, ``sip``, ``sips``, "
"``snews``, ``svn``, ``svn+ssh``, ``telnet``, ``wais``."
msgstr ""

#: ../../../library/urllib.parse.rst:27
msgid "The :mod:`urllib.parse` module defines the following functions:"
msgstr ""

#: ../../../library/urllib.parse.rst:31
msgid ""
"Parse a URL into six components, returning a 6-tuple.  This corresponds to "
"the general structure of a URL: ``scheme://netloc/path;parameters?"
"query#fragment``. Each tuple item is a string, possibly empty. The "
"components are not broken up in smaller parts (for example, the network "
"location is a single string), and % escapes are not expanded. The delimiters "
"as shown above are not part of the result, except for a leading slash in the "
"*path* component, which is retained if present.  For example:"
msgstr ""

#: ../../../library/urllib.parse.rst:51
msgid ""
"Following the syntax specifications in :rfc:`1808`, urlparse recognizes a "
"netloc only if it is properly introduced by '//'.  Otherwise the input is "
"presumed to be a relative URL and thus to start with a path component."
msgstr ""

#: ../../../library/urllib.parse.rst:67
msgid ""
"If the *scheme* argument is specified, it gives the default addressing "
"scheme, to be used only if the URL does not specify one.  The default value "
"for this argument is the empty string."
msgstr ""

#: ../../../library/urllib.parse.rst:71
msgid ""
"If the *allow_fragments* argument is false, fragment identifiers are not "
"allowed, even if the URL's addressing scheme normally does support them.  "
"The default value for this argument is :const:`True`."
msgstr ""

#: ../../../library/urllib.parse.rst:75 ../../../library/urllib.parse.rst:167
msgid ""
"The return value is actually an instance of a subclass of :class:`tuple`.  "
"This class has the following additional read-only convenience attributes:"
msgstr ""

#: ../../../library/urllib.parse.rst:79 ../../../library/urllib.parse.rst:171
msgid "Attribute"
msgstr ""

#: ../../../library/urllib.parse.rst:79 ../../../library/urllib.parse.rst:171
msgid "Index"
msgstr ""

#: ../../../library/urllib.parse.rst:79 ../../../library/urllib.parse.rst:171
msgid "Value"
msgstr ""

#: ../../../library/urllib.parse.rst:79 ../../../library/urllib.parse.rst:171
msgid "Value if not present"
msgstr ""

#: ../../../library/urllib.parse.rst:81 ../../../library/urllib.parse.rst:173
msgid ":attr:`scheme`"
msgstr ""

#: ../../../library/urllib.parse.rst:81 ../../../library/urllib.parse.rst:173
msgid "0"
msgstr ""

#: ../../../library/urllib.parse.rst:81 ../../../library/urllib.parse.rst:173
msgid "URL scheme specifier"
msgstr ""

#: ../../../library/urllib.parse.rst:81 ../../../library/urllib.parse.rst:83
#: ../../../library/urllib.parse.rst:85 ../../../library/urllib.parse.rst:87
#: ../../../library/urllib.parse.rst:90 ../../../library/urllib.parse.rst:92
#: ../../../library/urllib.parse.rst:173 ../../../library/urllib.parse.rst:175
#: ../../../library/urllib.parse.rst:177 ../../../library/urllib.parse.rst:179
#: ../../../library/urllib.parse.rst:181
msgid "empty string"
msgstr ""

#: ../../../library/urllib.parse.rst:83 ../../../library/urllib.parse.rst:175
msgid ":attr:`netloc`"
msgstr ""

#: ../../../library/urllib.parse.rst:83 ../../../library/urllib.parse.rst:175
msgid "1"
msgstr ""

#: ../../../library/urllib.parse.rst:83 ../../../library/urllib.parse.rst:175
msgid "Network location part"
msgstr ""

#: ../../../library/urllib.parse.rst:85 ../../../library/urllib.parse.rst:177
msgid ":attr:`path`"
msgstr ""

#: ../../../library/urllib.parse.rst:85 ../../../library/urllib.parse.rst:177
msgid "2"
msgstr ""

#: ../../../library/urllib.parse.rst:85 ../../../library/urllib.parse.rst:177
msgid "Hierarchical path"
msgstr ""

#: ../../../library/urllib.parse.rst:87
msgid ":attr:`params`"
msgstr ""

#: ../../../library/urllib.parse.rst:87 ../../../library/urllib.parse.rst:179
msgid "3"
msgstr ""

#: ../../../library/urllib.parse.rst:87
msgid "Parameters for last path element"
msgstr ""

#: ../../../library/urllib.parse.rst:90 ../../../library/urllib.parse.rst:179
msgid ":attr:`query`"
msgstr ""

#: ../../../library/urllib.parse.rst:90 ../../../library/urllib.parse.rst:181
msgid "4"
msgstr ""

#: ../../../library/urllib.parse.rst:90 ../../../library/urllib.parse.rst:179
msgid "Query component"
msgstr ""

#: ../../../library/urllib.parse.rst:92 ../../../library/urllib.parse.rst:181
msgid ":attr:`fragment`"
msgstr ""

#: ../../../library/urllib.parse.rst:92
msgid "5"
msgstr ""

#: ../../../library/urllib.parse.rst:92 ../../../library/urllib.parse.rst:181
msgid "Fragment identifier"
msgstr ""

#: ../../../library/urllib.parse.rst:94 ../../../library/urllib.parse.rst:183
msgid ":attr:`username`"
msgstr ""

#: ../../../library/urllib.parse.rst:94 ../../../library/urllib.parse.rst:183
msgid "User name"
msgstr ""

#: ../../../library/urllib.parse.rst:94 ../../../library/urllib.parse.rst:96
#: ../../../library/urllib.parse.rst:98 ../../../library/urllib.parse.rst:100
#: ../../../library/urllib.parse.rst:183 ../../../library/urllib.parse.rst:185
#: ../../../library/urllib.parse.rst:187 ../../../library/urllib.parse.rst:189
msgid ":const:`None`"
msgstr ""

#: ../../../library/urllib.parse.rst:96 ../../../library/urllib.parse.rst:185
msgid ":attr:`password`"
msgstr ""

#: ../../../library/urllib.parse.rst:96 ../../../library/urllib.parse.rst:185
msgid "Password"
msgstr ""

#: ../../../library/urllib.parse.rst:98 ../../../library/urllib.parse.rst:187
msgid ":attr:`hostname`"
msgstr ""

#: ../../../library/urllib.parse.rst:98 ../../../library/urllib.parse.rst:187
msgid "Host name (lower case)"
msgstr ""

#: ../../../library/urllib.parse.rst:100 ../../../library/urllib.parse.rst:189
msgid ":attr:`port`"
msgstr ""

#: ../../../library/urllib.parse.rst:100 ../../../library/urllib.parse.rst:189
msgid "Port number as integer, if present"
msgstr ""

#: ../../../library/urllib.parse.rst:104 ../../../library/urllib.parse.rst:193
msgid ""
"See section :ref:`urlparse-result-object` for more information on the result "
"object."
msgstr ""

#: ../../../library/urllib.parse.rst:110
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a dictionary.  "
"The dictionary keys are the unique query variable names and the values are "
"lists of values for each name."
msgstr ""

#: ../../../library/urllib.parse.rst:115 ../../../library/urllib.parse.rst:135
msgid ""
"The optional argument *keep_blank_values* is a flag indicating whether blank "
"values in percent-encoded queries should be treated as blank strings. A true "
"value indicates that blanks should be retained as  blank strings.  The "
"default false value indicates that blank values are to be ignored and "
"treated as if they were not included."
msgstr ""

#: ../../../library/urllib.parse.rst:121 ../../../library/urllib.parse.rst:141
msgid ""
"The optional argument *strict_parsing* is a flag indicating what to do with "
"parsing errors.  If false (the default), errors are silently ignored.  If "
"true, errors raise a :exc:`ValueError` exception."
msgstr ""

#: ../../../library/urllib.parse.rst:125
msgid ""
"Use the :func:`urllib.parse.urlencode` function to convert such dictionaries "
"into query strings."
msgstr ""

#: ../../../library/urllib.parse.rst:131
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a list of name, "
"value pairs."
msgstr ""

#: ../../../library/urllib.parse.rst:145
msgid ""
"Use the :func:`urllib.parse.urlencode` function to convert such lists of "
"pairs into query strings."
msgstr ""

#: ../../../library/urllib.parse.rst:151
msgid ""
"Construct a URL from a tuple as returned by ``urlparse()``. The *parts* "
"argument can be any six-item iterable. This may result in a slightly "
"different, but equivalent URL, if the URL that was parsed originally had "
"unnecessary delimiters (for example, a ``?`` with an empty query; the RFC "
"states that these are equivalent)."
msgstr ""

#: ../../../library/urllib.parse.rst:160
msgid ""
"This is similar to :func:`urlparse`, but does not split the params from the "
"URL. This should generally be used instead of :func:`urlparse` if the more "
"recent URL syntax allowing parameters to be applied to each segment of the "
"*path* portion of the URL (see :rfc:`2396`) is wanted.  A separate function "
"is needed to separate the path segments and parameters.  This function "
"returns a 5-tuple: (addressing scheme, network location, path, query, "
"fragment identifier)."
msgstr ""

#: ../../../library/urllib.parse.rst:199
msgid ""
"Combine the elements of a tuple as returned by :func:`urlsplit` into a "
"complete URL as a string. The *parts* argument can be any five-item "
"iterable. This may result in a slightly different, but equivalent URL, if "
"the URL that was parsed originally had unnecessary delimiters (for example, "
"a ? with an empty query; the RFC states that these are equivalent)."
msgstr ""

#: ../../../library/urllib.parse.rst:208
msgid ""
"Construct a full (\"absolute\") URL by combining a \"base URL\" (*base*) "
"with another URL (*url*).  Informally, this uses components of the base URL, "
"in particular the addressing scheme, the network location and (part of) the "
"path, to provide missing components in the relative URL.  For example:"
msgstr ""

#: ../../../library/urllib.parse.rst:217
msgid ""
"The *allow_fragments* argument has the same meaning and default as for :func:"
"`urlparse`."
msgstr ""

#: ../../../library/urllib.parse.rst:222
msgid ""
"If *url* is an absolute URL (that is, starting with ``//`` or ``scheme://"
"``), the *url*'s host name and/or scheme will be present in the result.  For "
"example:"
msgstr ""

#: ../../../library/urllib.parse.rst:225
msgid ""
">>> urljoin('http://www.cwi.nl/%7Eguido/Python.html',\n"
"...         '//www.python.org/%7Eguido')\n"
"'http://www.python.org/%7Eguido'"
msgstr ""

#: ../../../library/urllib.parse.rst:231
msgid ""
"If you do not want that behavior, preprocess the *url* with :func:`urlsplit` "
"and :func:`urlunsplit`, removing possible *scheme* and *netloc* parts."
msgstr ""

#: ../../../library/urllib.parse.rst:237
msgid ""
"If *url* contains a fragment identifier, return a modified version of *url* "
"with no fragment identifier, and the fragment identifier as a separate "
"string.  If there is no fragment identifier in *url*, return *url* "
"unmodified and an empty string."
msgstr ""

#: ../../../library/urllib.parse.rst:245
msgid ""
"Replace special characters in *string* using the ``%xx`` escape. Letters, "
"digits, and the characters ``'_.-'`` are never quoted. By default, this "
"function is intended for quoting the path section of URL. The optional "
"*safe* parameter specifies additional ASCII characters that should not be "
"quoted --- its default value is ``'/'``."
msgstr ""

#: ../../../library/urllib.parse.rst:251 ../../../library/urllib.parse.rst:317
msgid "*string* may be either a :class:`str` or a :class:`bytes`."
msgstr ""

#: ../../../library/urllib.parse.rst:253
msgid ""
"The optional *encoding* and *errors* parameters specify how to deal with non-"
"ASCII characters, as accepted by the :meth:`str.encode` method. *encoding* "
"defaults to ``'utf-8'``. *errors* defaults to ``'strict'``, meaning "
"unsupported characters raise a :class:`UnicodeEncodeError`. *encoding* and "
"*errors* must not be supplied if *string* is a :class:`bytes`, or a :class:"
"`TypeError` is raised."
msgstr ""

#: ../../../library/urllib.parse.rst:261
msgid ""
"Note that ``quote(string, safe, encoding, errors)`` is equivalent to "
"``quote_from_bytes(string.encode(encoding, errors), safe)``."
msgstr ""

#: ../../../library/urllib.parse.rst:264
msgid "Example: ``quote('/El Niño/')`` yields ``'/El%20Ni%C3%B1o/'``."
msgstr ""

#: ../../../library/urllib.parse.rst:269
msgid ""
"Like :func:`quote`, but also replace spaces by plus signs, as required for "
"quoting HTML form values when building up a query string to go into a URL. "
"Plus signs in the original string are escaped unless they are included in "
"*safe*.  It also does not have *safe* default to ``'/'``."
msgstr ""

#: ../../../library/urllib.parse.rst:274
msgid "Example: ``quote_plus('/El Niño/')`` yields ``'%2FEl+Ni%C3%B1o%2F'``."
msgstr ""

#: ../../../library/urllib.parse.rst:279
msgid ""
"Like :func:`quote`, but accepts a :class:`bytes` object rather than a :class:"
"`str`, and does not perform string-to-bytes encoding."
msgstr ""

#: ../../../library/urllib.parse.rst:282
msgid "Example: ``quote_from_bytes(b'a&\\xef')`` yields ``'a%26%EF'``."
msgstr ""

#: ../../../library/urllib.parse.rst:288
msgid ""
"Replace ``%xx`` escapes by their single-character equivalent. The optional "
"*encoding* and *errors* parameters specify how to decode percent-encoded "
"sequences into Unicode characters, as accepted by the :meth:`bytes.decode` "
"method."
msgstr ""

#: ../../../library/urllib.parse.rst:293 ../../../library/urllib.parse.rst:307
msgid "*string* must be a :class:`str`."
msgstr ""

#: ../../../library/urllib.parse.rst:295
msgid ""
"*encoding* defaults to ``'utf-8'``. *errors* defaults to ``'replace'``, "
"meaning invalid sequences are replaced by a placeholder character."
msgstr ""

#: ../../../library/urllib.parse.rst:299
msgid "Example: ``unquote('/El%20Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr ""

#: ../../../library/urllib.parse.rst:304
msgid ""
"Like :func:`unquote`, but also replace plus signs by spaces, as required for "
"unquoting HTML form values."
msgstr ""

#: ../../../library/urllib.parse.rst:309
msgid "Example: ``unquote_plus('/El+Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr ""

#: ../../../library/urllib.parse.rst:314
msgid ""
"Replace ``%xx`` escapes by their single-octet equivalent, and return a :"
"class:`bytes` object."
msgstr ""

#: ../../../library/urllib.parse.rst:319
msgid ""
"If it is a :class:`str`, unescaped non-ASCII characters in *string* are "
"encoded into UTF-8 bytes."
msgstr ""

#: ../../../library/urllib.parse.rst:322
msgid "Example: ``unquote_to_bytes('a%26%EF')`` yields ``b'a&\\xef'``."
msgstr ""

#: ../../../library/urllib.parse.rst:328
msgid ""
"Convert a mapping object or a sequence of two-element tuples, which may "
"either be a :class:`str` or a :class:`bytes`,  to a \"percent-encoded\" "
"string, suitable to pass to :func:`urlopen` above as the optional *data* "
"argument. This is useful to pass a dictionary of form fields to a ``POST`` "
"request. The resulting string is a series of ``key=value`` pairs separated "
"by ``'&'`` characters, where both *key* and *value* are quoted using :func:"
"`quote_plus` above. When a sequence of two-element tuples is used as the "
"*query* argument, the first element of each tuple is a key and the second is "
"a value. The value element in itself can be a sequence and in that case, if "
"the optional parameter *doseq* is evaluates to *True*, individual "
"``key=value`` pairs separated by ``'&'`` are generated for each element of "
"the value sequence for the key.  The order of parameters in the encoded "
"string will match the order of parameter tuples in the sequence. This module "
"provides the functions :func:`parse_qs` and :func:`parse_qsl` which are used "
"to parse query strings into Python data structures."
msgstr ""

#: ../../../library/urllib.parse.rst:344
msgid ""
"When *query* parameter is a :class:`str`, the *safe*, *encoding* and *error* "
"parameters are sent the :func:`quote_plus` for encoding."
msgstr ""

#: ../../../library/urllib.parse.rst:347
msgid "Query parameter supports bytes and string objects."
msgstr ""

#: ../../../library/urllib.parse.rst:357
msgid ":rfc:`3986` - Uniform Resource Identifiers"
msgstr ""

#: ../../../library/urllib.parse.rst:354
msgid ""
"This is the current standard (STD66). Any changes to urllib.parse module "
"should conform to this. Certain deviations could be observed, which are "
"mostly for backward compatibility purposes and for certain de-facto parsing "
"requirements as commonly observed in major browsers."
msgstr ""

#: ../../../library/urllib.parse.rst:361
msgid ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"
msgstr ""

#: ../../../library/urllib.parse.rst:360
msgid ""
"Document describing the generic syntactic requirements for both Uniform "
"Resource Names (URNs) and Uniform Resource Locators (URLs)."
msgstr ""

#: ../../../library/urllib.parse.rst:364
msgid ":rfc:`2368` - The mailto URL scheme."
msgstr ""

#: ../../../library/urllib.parse.rst:364
msgid "Parsing requirements for mailto url schemes."
msgstr ""

#: ../../../library/urllib.parse.rst:369
msgid ":rfc:`1808` - Relative Uniform Resource Locators"
msgstr ""

#: ../../../library/urllib.parse.rst:367
msgid ""
"This Request For Comments includes the rules for joining an absolute and a "
"relative URL, including a fair number of \"Abnormal Examples\" which govern "
"the treatment of border cases."
msgstr ""

#: ../../../library/urllib.parse.rst:371
msgid ":rfc:`1738` - Uniform Resource Locators (URL)"
msgstr ""

#: ../../../library/urllib.parse.rst:372
msgid "This specifies the formal syntax and semantics of absolute URLs."
msgstr ""

#: ../../../library/urllib.parse.rst:378
msgid "Results of :func:`urlparse` and :func:`urlsplit`"
msgstr ""

#: ../../../library/urllib.parse.rst:380
msgid ""
"The result objects from the :func:`urlparse` and :func:`urlsplit` functions "
"are subclasses of the :class:`tuple` type.  These subclasses add the "
"attributes described in those functions, as well as provide an additional "
"method:"
msgstr ""

#: ../../../library/urllib.parse.rst:386
msgid ""
"Return the re-combined version of the original URL as a string. This may "
"differ from the original URL in that the scheme will always be normalized to "
"lower case and empty components may be dropped. Specifically, empty "
"parameters, queries, and fragment identifiers will be removed."
msgstr ""

#: ../../../library/urllib.parse.rst:391
msgid ""
"The result of this method is a fixpoint if passed back through the original "
"parsing function:"
msgstr ""

#: ../../../library/urllib.parse.rst:406
msgid "The following classes provide the implementations of the parse results:"
msgstr ""

#: ../../../library/urllib.parse.rst:410
msgid ""
"Base class for the concrete result classes.  This provides most of the "
"attribute definitions.  It does not provide a :meth:`geturl` method.  It is "
"derived from :class:`tuple`, but does not override the :meth:`__init__` or :"
"meth:`__new__` methods."
msgstr ""

#: ../../../library/urllib.parse.rst:418
msgid ""
"Concrete class for :func:`urlparse` results.  The :meth:`__new__` method is "
"overridden to support checking that the right number of arguments are passed."
msgstr ""

#: ../../../library/urllib.parse.rst:424
msgid ""
"Concrete class for :func:`urlsplit` results.  The :meth:`__new__` method is "
"overridden to support checking that the right number of arguments are passed."
msgstr ""

#: ../../../library/urllib.parse.rst:8
msgid "WWW"
msgstr ""

#: ../../../library/urllib.parse.rst:8
msgid "World Wide Web"
msgstr ""

#: ../../../library/urllib.parse.rst:8
msgid "URL"
msgstr ""

#: ../../../library/urllib.parse.rst:8
msgid "parsing"
msgstr ""

#: ../../../library/urllib.parse.rst:8
msgid "relative"
msgstr ""
