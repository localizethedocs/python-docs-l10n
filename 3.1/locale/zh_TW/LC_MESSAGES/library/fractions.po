# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ""

#: ../../../library/fractions.rst:10
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ""

#: ../../../library/fractions.rst:13
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""

#: ../../../library/fractions.rst:20
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns an :"
"class:`Fraction` instance with the same value.  The last version of the "
"constructor expects a string instance.  The usual form for this string is::"
msgstr ""

#: ../../../library/fractions.rst:30
msgid "[sign] numerator ['/' denominator]"
msgstr ""

#: ../../../library/fractions.rst:32
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits.  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""

#: ../../../library/fractions.rst:40
msgid ""
">>> from fractions import Fraction\n"
">>> Fraction(16, -10)\n"
"Fraction(-8, 5)\n"
">>> Fraction(123)\n"
"Fraction(123, 1)\n"
">>> Fraction()\n"
"Fraction(0, 1)\n"
">>> Fraction('3/7')\n"
"Fraction(3, 7)\n"
"[40794 refs]\n"
">>> Fraction(' -3/7 ')\n"
"Fraction(-3, 7)\n"
">>> Fraction('1.414213 \\t\\n')\n"
"Fraction(1414213, 1000000)\n"
">>> Fraction('-.125')\n"
"Fraction(-1, 8)\n"
">>> Fraction('7e-6')\n"
"Fraction(7, 1000000)"
msgstr ""

#: ../../../library/fractions.rst:60
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are hashable, and should be treated "
"as immutable.  In addition, :class:`Fraction` has the following methods:"
msgstr ""

#: ../../../library/fractions.rst:69
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *flt*, which must be a :class:`float`. Beware that ``Fraction."
"from_float(0.3)`` is not the same value as ``Fraction(3, 10)``"
msgstr ""

#: ../../../library/fractions.rst:76
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *dec*, which must be a :class:`decimal.Decimal` instance."
msgstr ""

#: ../../../library/fractions.rst:82
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""

#: ../../../library/fractions.rst:90
msgid "or for recovering a rational number that's represented as a float:"
msgstr ""

#: ../../../library/fractions.rst:101
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""

#: ../../../library/fractions.rst:111
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""

#: ../../../library/fractions.rst:118
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""

#: ../../../library/fractions.rst:127
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is the "
"largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the same "
"sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*.  ``gcd(0, "
"0)`` returns ``0``."
msgstr ""

#: ../../../library/fractions.rst:136
msgid "Module :mod:`numbers`"
msgstr ""

#: ../../../library/fractions.rst:137
msgid "The abstract base classes making up the numeric tower."
msgstr ""
