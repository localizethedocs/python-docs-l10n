# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:7
msgid "Streams (coroutine based API)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:10
msgid "Stream functions"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:14
msgid ""
"The top-level functions in this module are meant as convenience wrappers "
"only; there's really nothing special there, and if they don't do exactly "
"what you want, feel free to copy their code."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:21
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_connection()` returning a "
"(reader, writer) pair."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:24
msgid ""
"The reader returned is a :class:`StreamReader` instance; the writer is a :"
"class:`StreamWriter` instance."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:27
msgid ""
"The arguments are all the usual arguments to :meth:`AbstractEventLoop."
"create_connection` except *protocol_factory*; most common are positional "
"host and port, with various optional keyword arguments following."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:32
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:56
msgid ""
"Additional optional keyword arguments are *loop* (to set the event loop "
"instance to use) and *limit* (to set the buffer limit passed to the :class:"
"`StreamReader`)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:36
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:60
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:70
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:81
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:40
msgid ""
"Start a socket server, with a callback for each client connected. The return "
"value is the same as :meth:`~AbstractEventLoop.create_server()`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:43
msgid ""
"The *client_connected_cb* parameter is called with two parameters: "
"*client_reader*, *client_writer*.  *client_reader* is a :class:"
"`StreamReader` object, while *client_writer* is a :class:`StreamWriter` "
"object.  The *client_connected_cb* parameter can either be a plain callback "
"function or a :ref:`coroutine function <coroutine>`; if it is a coroutine "
"function, it will be automatically converted into a :class:`Task`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:51
msgid ""
"The rest of the arguments are all the usual arguments to :meth:"
"`~AbstractEventLoop.create_server()` except *protocol_factory*; most common "
"are positional *host* and *port*, with various optional keyword arguments "
"following."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:64
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_unix_connection()` returning "
"a (reader, writer) pair."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:67
msgid ""
"See :func:`open_connection` for information about return value and other "
"details."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:72
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:83
msgid "Availability: UNIX."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:76
msgid ""
"Start a UNIX Domain Socket server, with a callback for each client connected."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:78
msgid ""
"See :func:`start_server` for information about return value and other "
"details."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:87
msgid "StreamReader"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:91
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:187
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:95
msgid "Get the exception."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:99
msgid "Acknowledge the EOF."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:103
msgid ""
"Feed *data* bytes in the internal buffer.  Any operations waiting for the "
"data will be resumed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:108
msgid "Set the exception."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:112
msgid "Set the transport."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:116
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:119
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:131
msgid ""
"If the EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:122
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:134
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:143
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:221
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:126
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:128
msgid ""
"If EOF is received, and ``\\n`` was not found, the method will return the "
"partial read bytes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:138
msgid ""
"Read exactly *n* bytes. Raise an :exc:`IncompleteReadError` if the end of "
"the stream is reached before *n* can be read, the :attr:`IncompleteReadError."
"partial` attribute of the exception contains the partial read bytes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:147
msgid "Read data from the stream until ``separator`` is found."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:149
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:153
msgid ""
"Configured stream limit is used to check result. Limit sets the maximal "
"length of data that can be returned, not counting the separator."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:157
msgid ""
"If an EOF occurs and the complete separator is still not found, an :exc:"
"`IncompleteReadError` exception will be raised, and the internal buffer will "
"be reset.  The :attr:`IncompleteReadError.partial` attribute may contain the "
"separator partially."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:163
msgid ""
"If the data cannot be read because of over limit, a :exc:`LimitOverrunError` "
"exception  will be raised, and the data will be left in the internal buffer, "
"so it can be read again."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:171
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:175
msgid "StreamWriter"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:179
msgid "Wraps a Transport."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:181
msgid ""
"This exposes :meth:`write`, :meth:`writelines`, :meth:`can_write_eof()`, :"
"meth:`write_eof`, :meth:`get_extra_info` and :meth:`close`.  It adds :meth:"
"`drain` which returns an optional :class:`Future` on which you can wait for "
"flow control.  It also adds a transport attribute which references the :"
"class:`Transport` directly."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:191
msgid "Transport."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:195
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, :const:"
"`False` if not. See :meth:`WriteTransport.can_write_eof`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:200
msgid "Close the transport: see :meth:`BaseTransport.close`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:204
msgid ""
"Let the write buffer of the underlying transport a chance to be flushed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:206
msgid "The intended use is to write::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:211
msgid ""
"When the size of the transport buffer reaches the high-water limit (the "
"protocol is paused), block until the size of the buffer is drained down to "
"the low-water limit and the protocol is resumed. When there is nothing to "
"wait for, the yield-from continues immediately."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:216
msgid ""
"Yielding from :meth:`drain` gives the opportunity for the loop to schedule "
"the write operation and flush the buffer. It should especially be used when "
"a possibly large amount of data is written to the transport, and the "
"coroutine does not yield-from between calls to :meth:`write`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:225
msgid ""
"Return optional transport information: see :meth:`BaseTransport."
"get_extra_info`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:230
msgid ""
"Write some *data* bytes to the transport: see :meth:`WriteTransport.write`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:235
msgid ""
"Write a list (or any iterable) of data bytes to the transport: see :meth:"
"`WriteTransport.writelines`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:240
msgid ""
"Close the write end of the transport after flushing buffered data: see :meth:"
"`WriteTransport.write_eof`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:245
msgid "StreamReaderProtocol"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:249
msgid ""
"Trivial helper class to adapt between :class:`Protocol` and :class:"
"`StreamReader`. Subclass of :class:`Protocol`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:252
msgid ""
"*stream_reader* is a :class:`StreamReader` instance, *client_connected_cb* "
"is an optional function called with (stream_reader, stream_writer) when a "
"connection is made, *loop* is the event loop instance to use."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:256
msgid ""
"(This is a helper class instead of making :class:`StreamReader` itself a :"
"class:`Protocol` subclass, because the :class:`StreamReader` has other "
"potential uses, and to prevent the user of the :class:`StreamReader` from "
"accidentally calling inappropriate methods of the protocol.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:263
msgid "IncompleteReadError"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:267
msgid "Incomplete read error, subclass of :exc:`EOFError`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:271
msgid "Total number of expected bytes (:class:`int`)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:275
msgid ""
"Read bytes string before the end of stream was reached (:class:`bytes`)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:279
msgid "LimitOverrunError"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:283
msgid "Reached the buffer limit while looking for a separator."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:287
msgid "Total number of to be consumed bytes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:291
msgid "Stream examples"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:296
msgid "TCP echo client using streams"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:298
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:323
msgid ""
"The :ref:`TCP echo client protocol <asyncio-tcp-echo-client-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:330
msgid "TCP echo server using streams"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:332
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:368
msgid ""
"The :ref:`TCP echo server protocol <asyncio-tcp-echo-server-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_server` method."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:373
msgid "Get HTTP headers"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:375
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:410
msgid "Usage::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:414
msgid "or with HTTPS::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:421
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:423
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:459
msgid ""
"The :ref:`register an open socket to wait for data using a protocol <asyncio-"
"register-socket>` example uses a low-level protocol created by the :meth:"
"`AbstractEventLoop.create_connection` method."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/asyncio-stream.rst:463
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""
