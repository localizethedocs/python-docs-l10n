# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/time.rst:3
msgid ":mod:`time` --- Time access and conversions"
msgstr ""

#: ../../../library/time.rst:9
msgid ""
"This module provides various time-related functions. For related "
"functionality, see also the :mod:`datetime` and :mod:`calendar` modules."
msgstr ""

#: ../../../library/time.rst:12
msgid ""
"Although this module is always available, not all functions are available on "
"all platforms.  Most of the functions defined in this module call platform C "
"library functions with the same name.  It may sometimes be helpful to "
"consult the platform documentation, because the semantics of these functions "
"varies among platforms."
msgstr ""

#: ../../../library/time.rst:18
msgid "An explanation of some terminology and conventions is in order."
msgstr ""

#: ../../../library/time.rst:22
msgid ""
"The :dfn:`epoch` is the point where the time starts.  On January 1st of that "
"year, at 0 hours, the \"time since the epoch\" is zero.  For Unix, the epoch "
"is 1970.  To find out what the epoch is, look at ``gmtime(0)``."
msgstr ""

#: ../../../library/time.rst:28
msgid ""
"The functions in this module do not handle dates and times before the epoch "
"or far in the future.  The cut-off point in the future is determined by the "
"C library; for Unix, it is typically in 2038."
msgstr ""

#: ../../../library/time.rst:36
msgid ""
"**Year 2000 (Y2K) issues**:  Python depends on the platform's C library, "
"which generally doesn't have year 2000 issues, since all dates and times are "
"represented internally as seconds since the epoch.  Functions accepting a :"
"class:`struct_time` (see below) generally require a 4-digit year.  For "
"backward compatibility, 2-digit years are supported if the module variable "
"``accept2dyear`` is a non-zero integer; this variable is initialized to "
"``1`` unless the environment variable :envvar:`PYTHONY2K` is set to a non-"
"empty string, in which case it is initialized to ``0``.  Thus, you can set :"
"envvar:`PYTHONY2K` to a non-empty string in the environment to require 4-"
"digit years for all year input.  When 2-digit years are accepted, they are "
"converted according to the POSIX or X/Open standard: values 69-99 are mapped "
"to 1969-1999, and values 0--68 are mapped to 2000--2068. Values 100--1899 "
"are always illegal. Note that this is new as of Python 1.5.2(a2); earlier "
"versions, up to Python 1.5.1 and 1.5.2a1, would add 1900 to year values "
"below 1900."
msgstr ""

#: ../../../library/time.rst:56
msgid ""
"UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or "
"GMT).  The acronym UTC is not a mistake but a compromise between English and "
"French."
msgstr ""

#: ../../../library/time.rst:62
msgid ""
"DST is Daylight Saving Time, an adjustment of the timezone by (usually) one "
"hour during part of the year.  DST rules are magic (determined by local law) "
"and can change from year to year.  The C library has a table containing the "
"local rules (often it is read from a system file for flexibility) and is the "
"only source of True Wisdom in this respect."
msgstr ""

#: ../../../library/time.rst:68
msgid ""
"The precision of the various real-time functions may be less than suggested "
"by the units in which their value or argument is expressed. E.g. on most "
"Unix systems, the clock \"ticks\" only 50 or 100 times a second."
msgstr ""

#: ../../../library/time.rst:72
msgid ""
"On the other hand, the precision of :func:`time` and :func:`sleep` is better "
"than their Unix equivalents: times are expressed as floating point numbers, :"
"func:`time` returns the most accurate time available (using Unix :cfunc:"
"`gettimeofday` where available), and :func:`sleep` will accept a time with a "
"nonzero fraction (Unix :cfunc:`select` is used to implement this, where "
"available)."
msgstr ""

#: ../../../library/time.rst:79
msgid ""
"The time value as returned by :func:`gmtime`, :func:`localtime`, and :func:"
"`strptime`, and accepted by :func:`asctime`, :func:`mktime` and :func:"
"`strftime`, may be considered as a sequence of 9 integers.  The return "
"values of :func:`gmtime`, :func:`localtime`, and :func:`strptime` also offer "
"attribute names for individual fields."
msgstr ""

#: ../../../library/time.rst:86
msgid "Index"
msgstr ""

#: ../../../library/time.rst:86
msgid "Attribute"
msgstr ""

#: ../../../library/time.rst:86
msgid "Values"
msgstr ""

#: ../../../library/time.rst:88
msgid "0"
msgstr ""

#: ../../../library/time.rst:88
msgid ":attr:`tm_year`"
msgstr ""

#: ../../../library/time.rst:88
msgid "(for example, 1993)"
msgstr ""

#: ../../../library/time.rst:90
msgid "1"
msgstr ""

#: ../../../library/time.rst:90
msgid ":attr:`tm_mon`"
msgstr ""

#: ../../../library/time.rst:90
msgid "range [1,12]"
msgstr ""

#: ../../../library/time.rst:92
msgid "2"
msgstr ""

#: ../../../library/time.rst:92
msgid ":attr:`tm_mday`"
msgstr ""

#: ../../../library/time.rst:92
msgid "range [1,31]"
msgstr ""

#: ../../../library/time.rst:94
msgid "3"
msgstr ""

#: ../../../library/time.rst:94
msgid ":attr:`tm_hour`"
msgstr ""

#: ../../../library/time.rst:94
msgid "range [0,23]"
msgstr ""

#: ../../../library/time.rst:96
msgid "4"
msgstr ""

#: ../../../library/time.rst:96
msgid ":attr:`tm_min`"
msgstr ""

#: ../../../library/time.rst:96
msgid "range [0,59]"
msgstr ""

#: ../../../library/time.rst:98
msgid "5"
msgstr ""

#: ../../../library/time.rst:98
msgid ":attr:`tm_sec`"
msgstr ""

#: ../../../library/time.rst:98
msgid "range [0,61]; see **(1)** in :func:`strftime` description"
msgstr ""

#: ../../../library/time.rst:101
msgid "6"
msgstr ""

#: ../../../library/time.rst:101
msgid ":attr:`tm_wday`"
msgstr ""

#: ../../../library/time.rst:101
msgid "range [0,6], Monday is 0"
msgstr ""

#: ../../../library/time.rst:103
msgid "7"
msgstr ""

#: ../../../library/time.rst:103
msgid ":attr:`tm_yday`"
msgstr ""

#: ../../../library/time.rst:103
msgid "range [1,366]"
msgstr ""

#: ../../../library/time.rst:105
msgid "8"
msgstr ""

#: ../../../library/time.rst:105
msgid ":attr:`tm_isdst`"
msgstr ""

#: ../../../library/time.rst:105
msgid "0, 1 or -1; see below"
msgstr ""

#: ../../../library/time.rst:108
msgid ""
"Note that unlike the C structure, the month value is a range of 1-12, not "
"0-11. A year value will be handled as described under \"Year 2000 (Y2K) "
"issues\" above. A ``-1`` argument as the daylight savings flag, passed to :"
"func:`mktime` will usually result in the correct daylight savings state to "
"be filled in."
msgstr ""

#: ../../../library/time.rst:113
msgid ""
"When a tuple with an incorrect length is passed to a function expecting a :"
"class:`struct_time`, or having elements of the wrong type, a :exc:"
"`TypeError` is raised."
msgstr ""

#: ../../../library/time.rst:117
msgid ""
"The time value sequence was changed from a tuple to a :class:`struct_time`, "
"with the addition of attribute names for the fields."
msgstr ""

#: ../../../library/time.rst:121
msgid "Use the following functions to convert between time representations:"
msgstr ""

#: ../../../library/time.rst:124
msgid "From"
msgstr ""

#: ../../../library/time.rst:124
msgid "To"
msgstr ""

#: ../../../library/time.rst:124
msgid "Use"
msgstr ""

#: ../../../library/time.rst:126 ../../../library/time.rst:129
#: ../../../library/time.rst:132 ../../../library/time.rst:135
msgid "seconds since the epoch"
msgstr ""

#: ../../../library/time.rst:126 ../../../library/time.rst:132
msgid ":class:`struct_time` in UTC"
msgstr ""

#: ../../../library/time.rst:126
msgid ":func:`gmtime`"
msgstr ""

#: ../../../library/time.rst:129 ../../../library/time.rst:135
msgid ":class:`struct_time` in local time"
msgstr ""

#: ../../../library/time.rst:129
msgid ":func:`localtime`"
msgstr ""

#: ../../../library/time.rst:132
msgid ":func:`calendar.timegm`"
msgstr ""

#: ../../../library/time.rst:135
msgid ":func:`mktime`"
msgstr ""

#: ../../../library/time.rst:140
msgid "The module defines the following functions and data items:"
msgstr ""

#: ../../../library/time.rst:144
msgid ""
"Boolean value indicating whether two-digit year values will be accepted.  "
"This is true by default, but will be set to false if the environment "
"variable :envvar:`PYTHONY2K` has been set to a non-empty string.  It may "
"also be modified at run time."
msgstr ""

#: ../../../library/time.rst:152
msgid ""
"The offset of the local DST timezone, in seconds west of UTC, if one is "
"defined. This is negative if the local DST timezone is east of UTC (as in "
"Western Europe, including the UK).  Only use this if ``daylight`` is nonzero."
msgstr ""

#: ../../../library/time.rst:159
msgid ""
"Convert a tuple or :class:`struct_time` representing a time as returned by :"
"func:`gmtime` or :func:`localtime` to a 24-character string of the following "
"form: ``'Sun Jun 20 23:21:05 1993'``.  If *t* is not provided, the current "
"time as returned by :func:`localtime` is used. Locale information is not "
"used by :func:`asctime`."
msgstr ""

#: ../../../library/time.rst:167
msgid "Unlike the C function of the same name, there is no trailing newline."
msgstr ""

#: ../../../library/time.rst:169 ../../../library/time.rst:269
msgid "Allowed *t* to be omitted."
msgstr ""

#: ../../../library/time.rst:180
msgid ""
"On Unix, return the current processor time as a floating point number "
"expressed in seconds.  The precision, and in fact the very definition of the "
"meaning of \"processor time\", depends on that of the C function of the same "
"name, but in any case, this is the function to use for benchmarking Python "
"or timing algorithms."
msgstr ""

#: ../../../library/time.rst:185
msgid ""
"On Windows, this function returns wall-clock seconds elapsed since the first "
"call to this function, as a floating point number, based on the Win32 "
"function :cfunc:`QueryPerformanceCounter`. The resolution is typically "
"better than one microsecond."
msgstr ""

#: ../../../library/time.rst:193
msgid ""
"Convert a time expressed in seconds since the epoch to a string representing "
"local time. If *secs* is not provided or :const:`None`, the current time as "
"returned by :func:`time` is used.  ``ctime(secs)`` is equivalent to "
"``asctime(localtime(secs))``. Locale information is not used by :func:"
"`ctime`."
msgstr ""

#: ../../../library/time.rst:198 ../../../library/time.rst:219
#: ../../../library/time.rst:232
msgid "Allowed *secs* to be omitted."
msgstr ""

#: ../../../library/time.rst:201 ../../../library/time.rst:222
#: ../../../library/time.rst:235
msgid "If *secs* is :const:`None`, the current time is used."
msgstr ""

#: ../../../library/time.rst:207
msgid "Nonzero if a DST timezone is defined."
msgstr ""

#: ../../../library/time.rst:212
msgid ""
"Convert a time expressed in seconds since the epoch to a :class:"
"`struct_time` in UTC in which the dst flag is always zero.  If *secs* is not "
"provided or :const:`None`, the current time as returned by :func:`time` is "
"used.  Fractions of a second are ignored.  See above for a description of "
"the :class:`struct_time` object. See :func:`calendar.timegm` for the inverse "
"of this function."
msgstr ""

#: ../../../library/time.rst:228
msgid ""
"Like :func:`gmtime` but converts to local time.  If *secs* is not provided "
"or :const:`None`, the current time as returned by :func:`time` is used.  The "
"dst flag is set to ``1`` when DST applies to the given time."
msgstr ""

#: ../../../library/time.rst:241
msgid ""
"This is the inverse function of :func:`localtime`.  Its argument is the :"
"class:`struct_time` or full 9-tuple (since the dst flag is needed; use "
"``-1`` as the dst flag if it is unknown) which expresses the time in *local* "
"time, not UTC.  It returns a floating point number, for compatibility with :"
"func:`time`. If the input value cannot be represented as a valid time, "
"either :exc:`OverflowError` or :exc:`ValueError` will be raised (which "
"depends on whether the invalid value is caught by Python or the underlying C "
"libraries). The earliest date for which it can generate a time is platform-"
"dependent."
msgstr ""

#: ../../../library/time.rst:253
msgid ""
"Suspend execution for the given number of seconds.  The argument may be a "
"floating point number to indicate a more precise sleep time. The actual "
"suspension time may be less than that requested because any caught signal "
"will terminate the :func:`sleep` following execution of that signal's "
"catching routine.  Also, the suspension time may be longer than requested by "
"an arbitrary amount because of the scheduling of other activity in the "
"system."
msgstr ""

#: ../../../library/time.rst:263
msgid ""
"Convert a tuple or :class:`struct_time` representing a time as returned by :"
"func:`gmtime` or :func:`localtime` to a string as specified by the *format* "
"argument.  If *t* is not provided, the current time as returned by :func:"
"`localtime` is used.  *format* must be a string.  :exc:`ValueError` is "
"raised if any field in *t* is outside of the allowed range."
msgstr ""

#: ../../../library/time.rst:272
msgid ":exc:`ValueError` raised if a field in *t* is out of range."
msgstr ""

#: ../../../library/time.rst:275
msgid ""
"0 is now a legal argument for any position in the time tuple; if it is "
"normally illegal the value is forced to a correct one.."
msgstr ""

#: ../../../library/time.rst:279
msgid ""
"The following directives can be embedded in the *format* string. They are "
"shown without the optional field width and precision specification, and are "
"replaced by the indicated characters in the :func:`strftime` result:"
msgstr ""

#: ../../../library/time.rst:284
msgid "Directive"
msgstr ""

#: ../../../library/time.rst:284
msgid "Meaning"
msgstr ""

#: ../../../library/time.rst:284
msgid "Notes"
msgstr ""

#: ../../../library/time.rst:286
msgid "``%a``"
msgstr ""

#: ../../../library/time.rst:286
msgid "Locale's abbreviated weekday name."
msgstr ""

#: ../../../library/time.rst:289
msgid "``%A``"
msgstr ""

#: ../../../library/time.rst:289
msgid "Locale's full weekday name."
msgstr ""

#: ../../../library/time.rst:291
msgid "``%b``"
msgstr ""

#: ../../../library/time.rst:291
msgid "Locale's abbreviated month name."
msgstr ""

#: ../../../library/time.rst:294
msgid "``%B``"
msgstr ""

#: ../../../library/time.rst:294
msgid "Locale's full month name."
msgstr ""

#: ../../../library/time.rst:296
msgid "``%c``"
msgstr ""

#: ../../../library/time.rst:296
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../../../library/time.rst:299
msgid "``%d``"
msgstr ""

#: ../../../library/time.rst:299
msgid "Day of the month as a decimal number [01,31]."
msgstr ""

#: ../../../library/time.rst:302
msgid "``%H``"
msgstr ""

#: ../../../library/time.rst:302
msgid "Hour (24-hour clock) as a decimal number [00,23]."
msgstr ""

#: ../../../library/time.rst:305
msgid "``%I``"
msgstr ""

#: ../../../library/time.rst:305
msgid "Hour (12-hour clock) as a decimal number [01,12]."
msgstr ""

#: ../../../library/time.rst:308
msgid "``%j``"
msgstr ""

#: ../../../library/time.rst:308
msgid "Day of the year as a decimal number [001,366]."
msgstr ""

#: ../../../library/time.rst:311
msgid "``%m``"
msgstr ""

#: ../../../library/time.rst:311
msgid "Month as a decimal number [01,12]."
msgstr ""

#: ../../../library/time.rst:314
msgid "``%M``"
msgstr ""

#: ../../../library/time.rst:314
msgid "Minute as a decimal number [00,59]."
msgstr ""

#: ../../../library/time.rst:317
msgid "``%p``"
msgstr ""

#: ../../../library/time.rst:317
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../../../library/time.rst:317
msgid "\\(1)"
msgstr ""

#: ../../../library/time.rst:320
msgid "``%S``"
msgstr ""

#: ../../../library/time.rst:320
msgid "Second as a decimal number [00,61]."
msgstr ""

#: ../../../library/time.rst:320
msgid "\\(2)"
msgstr ""

#: ../../../library/time.rst:323
msgid "``%U``"
msgstr ""

#: ../../../library/time.rst:323
msgid ""
"Week number of the year (Sunday as the first day of the week) as a decimal "
"number [00,53].  All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../../../library/time.rst:323 ../../../library/time.rst:334
msgid "\\(3)"
msgstr ""

#: ../../../library/time.rst:331
msgid "``%w``"
msgstr ""

#: ../../../library/time.rst:331
msgid "Weekday as a decimal number [0(Sunday),6]."
msgstr ""

#: ../../../library/time.rst:334
msgid "``%W``"
msgstr ""

#: ../../../library/time.rst:334
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number [00,53].  All days in a new year preceding the first Monday are "
"considered to be in week 0."
msgstr ""

#: ../../../library/time.rst:342
msgid "``%x``"
msgstr ""

#: ../../../library/time.rst:342
msgid "Locale's appropriate date representation."
msgstr ""

#: ../../../library/time.rst:345
msgid "``%X``"
msgstr ""

#: ../../../library/time.rst:345
msgid "Locale's appropriate time representation."
msgstr ""

#: ../../../library/time.rst:348
msgid "``%y``"
msgstr ""

#: ../../../library/time.rst:348
msgid "Year without century as a decimal number [00,99]."
msgstr ""

#: ../../../library/time.rst:351
msgid "``%Y``"
msgstr ""

#: ../../../library/time.rst:351
msgid "Year with century as a decimal number."
msgstr ""

#: ../../../library/time.rst:354
msgid "``%Z``"
msgstr ""

#: ../../../library/time.rst:354
msgid "Time zone name (no characters if no time zone exists)."
msgstr ""

#: ../../../library/time.rst:357
msgid "``%%``"
msgstr ""

#: ../../../library/time.rst:357
msgid "A literal ``'%'`` character."
msgstr ""

#: ../../../library/time.rst:360
msgid "Notes:"
msgstr ""

#: ../../../library/time.rst:363
msgid ""
"When used with the :func:`strptime` function, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../../../library/time.rst:367
msgid ""
"The range really is ``0`` to ``61``; this accounts for leap seconds and the "
"(very rare) double leap seconds."
msgstr ""

#: ../../../library/time.rst:371
msgid ""
"When used with the :func:`strptime` function, ``%U`` and ``%W`` are only "
"used in calculations when the day of the week and the year are specified."
msgstr ""

#: ../../../library/time.rst:374
msgid ""
"Here is an example, a format for dates compatible with that specified  in "
"the :rfc:`2822` Internet email standard.  [#]_ ::"
msgstr ""

#: ../../../library/time.rst:377
msgid ""
">>> from time import gmtime, strftime\n"
">>> strftime(\"%a, %d %b %Y %H:%M:%S +0000\", gmtime())\n"
"'Thu, 28 Jun 2001 14:17:15 +0000'"
msgstr ""

#: ../../../library/time.rst:381
msgid ""
"Additional directives may be supported on certain platforms, but only the "
"ones listed here have a meaning standardized by ANSI C."
msgstr ""

#: ../../../library/time.rst:384
msgid ""
"On some platforms, an optional field width and precision specification can "
"immediately follow the initial ``'%'`` of a directive in the following "
"order; this is also not portable. The field width is normally 2 except for "
"``%j`` where it is 3."
msgstr ""

#: ../../../library/time.rst:392
msgid ""
"Parse a string representing a time according to a format.  The return  value "
"is a :class:`struct_time` as returned by :func:`gmtime` or :func:`localtime`."
msgstr ""

#: ../../../library/time.rst:395
msgid ""
"The *format* parameter uses the same directives as those used by :func:"
"`strftime`; it defaults to ``\"%a %b %d %H:%M:%S %Y\"`` which matches the "
"formatting returned by :func:`ctime`. If *string* cannot be parsed according "
"to *format*, or if it has excess data after parsing, :exc:`ValueError` is "
"raised. The default values used to fill in any missing data when more "
"accurate values cannot be inferred are ``(1900, 1, 1, 0, 0, 0, 0, 1, -1)``."
msgstr ""

#: ../../../library/time.rst:402
msgid "For example:"
msgstr ""

#: ../../../library/time.rst:409
msgid ""
"Support for the ``%Z`` directive is based on the values contained in "
"``tzname`` and whether ``daylight`` is true.  Because of this, it is "
"platform-specific except for recognizing UTC and GMT which are always known "
"(and are considered to be non-daylight savings timezones)."
msgstr ""

#: ../../../library/time.rst:414
msgid ""
"Only the directives specified in the documentation are supported.  Because "
"``strftime()`` is implemented per platform it can sometimes offer more "
"directives than those listed.  But ``strptime()`` is independent of any "
"platform and thus does not necessarily support all directives available that "
"are not documented as supported."
msgstr ""

#: ../../../library/time.rst:423
msgid ""
"The type of the time value sequence returned by :func:`gmtime`, :func:"
"`localtime`, and :func:`strptime`."
msgstr ""

#: ../../../library/time.rst:431
msgid ""
"Return the time as a floating point number expressed in seconds since the "
"epoch, in UTC.  Note that even though the time is always returned as a "
"floating point number, not all systems provide time with a better precision "
"than 1 second. While this function normally returns non-decreasing values, "
"it can return a lower value than a previous call if the system clock has "
"been set back between the two calls."
msgstr ""

#: ../../../library/time.rst:441
msgid ""
"The offset of the local (non-DST) timezone, in seconds west of UTC (negative "
"in most of Western Europe, positive in the US, zero in the UK)."
msgstr ""

#: ../../../library/time.rst:447
msgid ""
"A tuple of two strings: the first is the name of the local non-DST timezone, "
"the second is the name of the local DST timezone.  If no DST timezone is "
"defined, the second string should not be used."
msgstr ""

#: ../../../library/time.rst:454
msgid ""
"Resets the time conversion rules used by the library routines. The "
"environment variable :envvar:`TZ` specifies how this is done."
msgstr ""

#: ../../../library/time.rst:459
msgid "Availability: Unix."
msgstr ""

#: ../../../library/time.rst:463
msgid ""
"Although in many cases, changing the :envvar:`TZ` environment variable may "
"affect the output of functions like :func:`localtime` without calling :func:"
"`tzset`, this behavior should not be relied on."
msgstr ""

#: ../../../library/time.rst:467
msgid "The :envvar:`TZ` environment variable should contain no whitespace."
msgstr ""

#: ../../../library/time.rst:469
msgid ""
"The standard format of the :envvar:`TZ` environment variable is (whitespace "
"added for clarity)::"
msgstr ""

#: ../../../library/time.rst:472
msgid "std offset [dst [offset [,start[/time], end[/time]]]]"
msgstr ""

#: ../../../library/time.rst:474
msgid "Where the components are:"
msgstr ""

#: ../../../library/time.rst:478
msgid "``std`` and ``dst``"
msgstr ""

#: ../../../library/time.rst:477
msgid ""
"Three or more alphanumerics giving the timezone abbreviations. These will be "
"propagated into time.tzname"
msgstr ""

#: ../../../library/time.rst:484
msgid "``offset``"
msgstr ""

#: ../../../library/time.rst:481
msgid ""
"The offset has the form: ``± hh[:mm[:ss]]``. This indicates the value added "
"the local time to arrive at UTC.  If preceded by a '-', the timezone is east "
"of the Prime Meridian; otherwise, it is west. If no offset follows dst, "
"summer time is assumed to be one hour ahead of standard time."
msgstr ""

#: ../../../library/time.rst:506
msgid "``start[/time], end[/time]``"
msgstr ""

#: ../../../library/time.rst:487
msgid ""
"Indicates when to change to and back from DST. The format of the start and "
"end dates are one of the following:"
msgstr ""

#: ../../../library/time.rst:492
msgid ":samp:`J{n}`"
msgstr ""

#: ../../../library/time.rst:491
msgid ""
"The Julian day *n* (1 <= *n* <= 365). Leap days are not counted, so in all "
"years February 28 is day 59 and March 1 is day 60."
msgstr ""

#: ../../../library/time.rst:496
msgid ":samp:`{n}`"
msgstr ""

#: ../../../library/time.rst:495
msgid ""
"The zero-based Julian day (0 <= *n* <= 365). Leap days are counted, and it "
"is possible to refer to February 29."
msgstr ""

#: ../../../library/time.rst:503
msgid ":samp:`M{m}.{n}.{d}`"
msgstr ""

#: ../../../library/time.rst:499
msgid ""
"The *d*'th day (0 <= *d* <= 6) or week *n* of month *m* of the year (1 <= "
"*n* <= 5, 1 <= *m* <= 12, where week 5 means \"the last *d* day in month "
"*m*\" which may occur in either the fourth or the fifth week). Week 1 is the "
"first week in which the *d*'th day occurs. Day zero is Sunday."
msgstr ""

#: ../../../library/time.rst:505
msgid ""
"``time`` has the same format as ``offset`` except that no leading sign ('-' "
"or '+') is allowed. The default, if time is not given, is 02:00:00."
msgstr ""

#: ../../../library/time.rst:510
msgid ""
">>> os.environ['TZ'] = 'EST+05EDT,M4.1.0,M10.5.0'\n"
">>> time.tzset()\n"
">>> time.strftime('%X %x %Z')\n"
"'02:07:36 05/08/03 EDT'\n"
">>> os.environ['TZ'] = 'AEST-10AEDT-11,M10.5.0,M3.5.0'\n"
">>> time.tzset()\n"
">>> time.strftime('%X %x %Z')\n"
"'16:08:12 05/08/03 AEST'"
msgstr ""

#: ../../../library/time.rst:519
msgid ""
"On many Unix systems (including \\*BSD, Linux, Solaris, and Darwin), it is "
"more convenient to use the system's zoneinfo (:manpage:`tzfile(5)`)  "
"database to specify the timezone rules. To do this, set the  :envvar:`TZ` "
"environment variable to the path of the required timezone  datafile, "
"relative to the root of the systems 'zoneinfo' timezone database, usually "
"located at :file:`/usr/share/zoneinfo`. For example,  ``'US/Eastern'``, "
"``'Australia/Melbourne'``, ``'Egypt'`` or  ``'Europe/Amsterdam'``. ::"
msgstr ""

#: ../../../library/time.rst:527
msgid ""
">>> os.environ['TZ'] = 'US/Eastern'\n"
">>> time.tzset()\n"
">>> time.tzname\n"
"('EST', 'EDT')\n"
">>> os.environ['TZ'] = 'Egypt'\n"
">>> time.tzset()\n"
">>> time.tzname\n"
"('EET', 'EEST')"
msgstr ""

#: ../../../library/time.rst:540
msgid "Module :mod:`datetime`"
msgstr ""

#: ../../../library/time.rst:540
msgid "More object-oriented interface to dates and times."
msgstr ""

#: ../../../library/time.rst:544
msgid "Module :mod:`locale`"
msgstr ""

#: ../../../library/time.rst:543
msgid ""
"Internationalization services.  The locale settings can affect the return "
"values for some of  the functions in the :mod:`time` module."
msgstr ""

#: ../../../library/time.rst:547
msgid "Module :mod:`calendar`"
msgstr ""

#: ../../../library/time.rst:547
msgid ""
"General calendar-related functions.   :func:`timegm` is the inverse of :func:"
"`gmtime` from this module."
msgstr ""

#: ../../../library/time.rst:551
msgid "Footnotes"
msgstr ""

#: ../../../library/time.rst:552
msgid ""
"The use of ``%Z`` is now deprecated, but the ``%z`` escape that expands to "
"the preferred  hour/minute offset is not supported by all ANSI C libraries. "
"Also, a strict reading of the original 1982 :rfc:`822` standard calls for a "
"two-digit year (%y rather than %Y), but practice moved to 4-digit years long "
"before the year 2000.  The 4-digit year has been mandated by :rfc:`2822`, "
"which obsoletes :rfc:`822`."
msgstr ""

#: ../../../library/time.rst:20
msgid "epoch"
msgstr ""

#: ../../../library/time.rst:26
msgid "Year 2038"
msgstr ""

#: ../../../library/time.rst:32
msgid "Year 2000"
msgstr ""

#: ../../../library/time.rst:32
msgid "Y2K"
msgstr ""

#: ../../../library/time.rst:51
msgid "UTC"
msgstr ""

#: ../../../library/time.rst:51
msgid "Coordinated Universal Time"
msgstr ""

#: ../../../library/time.rst:51
msgid "Greenwich Mean Time"
msgstr ""

#: ../../../library/time.rst:60
msgid "Daylight Saving Time"
msgstr ""

#: ../../../library/time.rst:175
msgid "CPU time"
msgstr ""

#: ../../../library/time.rst:175
msgid "processor time"
msgstr ""

#: ../../../library/time.rst:175
msgid "benchmarking"
msgstr ""
