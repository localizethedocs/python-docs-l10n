# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/basehttpserver.rst:2
msgid ":mod:`BaseHTTPServer` --- Basic HTTP server"
msgstr ""

#: ../../../library/basehttpserver.rst:8
msgid ""
"The :mod:`BaseHTTPServer` module has been merged into :mod:`http.server` in "
"Python 3.0.  The :term:`2to3` tool will automatically adapt imports when "
"converting your sources to 3.0."
msgstr ""

#: ../../../library/basehttpserver.rst:21
msgid ""
"This module defines two classes for implementing HTTP servers (Web servers). "
"Usually, this module isn't used directly, but is used as a basis for "
"building functioning Web servers. See the :mod:`SimpleHTTPServer` and :mod:"
"`CGIHTTPServer` modules."
msgstr ""

#: ../../../library/basehttpserver.rst:26
msgid ""
"The first class, :class:`HTTPServer`, is a :class:`SocketServer.TCPServer` "
"subclass, and therefore implements the :class:`SocketServer.BaseServer` "
"interface.  It creates and listens at the HTTP socket, dispatching the "
"requests to a handler.  Code to create and run the server looks like this::"
msgstr ""

#: ../../../library/basehttpserver.rst:31
msgid ""
"def run(server_class=BaseHTTPServer.HTTPServer,\n"
"        handler_class=BaseHTTPServer.BaseHTTPRequestHandler):\n"
"    server_address = ('', 8000)\n"
"    httpd = server_class(server_address, handler_class)\n"
"    httpd.serve_forever()"
msgstr ""

#: ../../../library/basehttpserver.rst:40
msgid ""
"This class builds on the :class:`TCPServer` class by storing the server "
"address as instance variables named :attr:`server_name` and :attr:"
"`server_port`. The server is accessible by the handler, typically through "
"the handler's :attr:`server` instance variable."
msgstr ""

#: ../../../library/basehttpserver.rst:48
msgid ""
"This class is used to handle the HTTP requests that arrive at the server. By "
"itself, it cannot respond to any actual HTTP requests; it must be subclassed "
"to handle each request method (e.g. GET or POST). :class:"
"`BaseHTTPRequestHandler` provides a number of class and instance variables, "
"and methods for use by subclasses."
msgstr ""

#: ../../../library/basehttpserver.rst:54
msgid ""
"The handler will parse the request and the headers, then call a method "
"specific to the request type. The method name is constructed from the "
"request. For example, for the request method ``SPAM``, the :meth:`do_SPAM` "
"method will be called with no arguments. All of the relevant information is "
"stored in instance variables of the handler.  Subclasses should not need to "
"override or extend the :meth:`__init__` method."
msgstr ""

#: ../../../library/basehttpserver.rst:61
msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ""

#: ../../../library/basehttpserver.rst:66
msgid ""
"Contains a tuple of the form ``(host, port)`` referring to the client's "
"address."
msgstr ""

#: ../../../library/basehttpserver.rst:72
msgid "Contains the server instance."
msgstr ""

#: ../../../library/basehttpserver.rst:77
msgid "Contains the command (request type). For example, ``'GET'``."
msgstr ""

#: ../../../library/basehttpserver.rst:82
msgid "Contains the request path."
msgstr ""

#: ../../../library/basehttpserver.rst:87
msgid ""
"Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr ""

#: ../../../library/basehttpserver.rst:92
msgid ""
"Holds an instance of the class specified by the :attr:`MessageClass` class "
"variable. This instance parses and manages the headers in the HTTP request."
msgstr ""

#: ../../../library/basehttpserver.rst:99
msgid ""
"Contains an input stream, positioned at the start of the optional input data."
msgstr ""

#: ../../../library/basehttpserver.rst:105
msgid ""
"Contains the output stream for writing a response back to the client. Proper "
"adherence to the HTTP protocol must be used when writing to this stream."
msgstr ""

#: ../../../library/basehttpserver.rst:110
msgid ":class:`BaseHTTPRequestHandler` has the following class variables:"
msgstr ""

#: ../../../library/basehttpserver.rst:115
msgid ""
"Specifies the server software version.  You may want to override this. The "
"format is multiple whitespace-separated strings, where each string is of the "
"form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""

#: ../../../library/basehttpserver.rst:122
msgid ""
"Contains the Python system version, in a form usable by the :attr:"
"`version_string` method and the :attr:`server_version` class variable. For "
"example, ``'Python/1.4'``."
msgstr ""

#: ../../../library/basehttpserver.rst:129
msgid ""
"Specifies a format string for building an error response to the client. It "
"uses parenthesized, keyed format specifiers, so the format operand must be a "
"dictionary. The *code* key should be an integer, specifying the numeric HTTP "
"error code value. *message* should be a string containing a (detailed) error "
"message of what occurred, and *explain* should be an explanation of the "
"error code number. Default *message* and *explain* values can found in the "
"*responses* class variable."
msgstr ""

#: ../../../library/basehttpserver.rst:140
msgid ""
"Specifies the Content-Type HTTP header of error responses sent to the "
"client.  The default value is ``'text/html'``."
msgstr ""

#: ../../../library/basehttpserver.rst:143
msgid "Previously, the content type was always ``'text/html'``."
msgstr ""

#: ../../../library/basehttpserver.rst:149
msgid ""
"This specifies the HTTP protocol version used in responses.  If set to "
"``'HTTP/1.1'``, the server will permit HTTP persistent connections; however, "
"your server *must* then include an accurate ``Content-Length`` header "
"(using :meth:`send_header`) in all of its responses to clients. For "
"backwards compatibility, the setting defaults to ``'HTTP/1.0'``."
msgstr ""

#: ../../../library/basehttpserver.rst:160
msgid ""
"Specifies a :class:`rfc822.Message`\\ -like class to parse HTTP headers. "
"Typically, this is not overridden, and it defaults to :class:`mimetools."
"Message`."
msgstr ""

#: ../../../library/basehttpserver.rst:167
msgid ""
"This variable contains a mapping of error code integers to two-element "
"tuples containing a short and long message. For example, ``{code: "
"(shortmessage, longmessage)}``. The *shortmessage* is usually used as the "
"*message* key in an error response, and *longmessage* as the *explain* key "
"(see the :attr:`error_message_format` class variable)."
msgstr ""

#: ../../../library/basehttpserver.rst:174
msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr ""

#: ../../../library/basehttpserver.rst:179
msgid ""
"Calls :meth:`handle_one_request` once (or, if persistent connections are "
"enabled, multiple times) to handle incoming HTTP requests. You should never "
"need to override it; instead, implement appropriate :meth:`do_\\*` methods."
msgstr ""

#: ../../../library/basehttpserver.rst:187
msgid ""
"This method will parse and dispatch the request to the appropriate :meth:"
"`do_\\*` method.  You should never need to override it."
msgstr ""

#: ../../../library/basehttpserver.rst:193
msgid ""
"Sends and logs a complete error reply to the client. The numeric *code* "
"specifies the HTTP error code, with *message* as optional, more specific "
"text. A complete set of headers is sent, followed by text composed using "
"the :attr:`error_message_format` class variable."
msgstr ""

#: ../../../library/basehttpserver.rst:201
msgid ""
"Sends a response header and logs the accepted request. The HTTP response "
"line is sent, followed by *Server* and *Date* headers. The values for these "
"two headers are picked up from the :meth:`version_string` and :meth:"
"`date_time_string` methods, respectively."
msgstr ""

#: ../../../library/basehttpserver.rst:209
msgid ""
"Writes a specific HTTP header to the output stream. *keyword* should specify "
"the header keyword, with *value* specifying its value."
msgstr ""

#: ../../../library/basehttpserver.rst:215
msgid ""
"Sends a blank line, indicating the end of the HTTP headers in the response."
msgstr ""

#: ../../../library/basehttpserver.rst:221
msgid ""
"Logs an accepted (successful) request. *code* should specify the numeric "
"HTTP code associated with the response. If a size of the response is "
"available, then it should be passed as the *size* parameter."
msgstr ""

#: ../../../library/basehttpserver.rst:228
msgid ""
"Logs an error when a request cannot be fulfilled. By default, it passes the "
"message to :meth:`log_message`, so it takes the same arguments (*format* and "
"additional values)."
msgstr ""

#: ../../../library/basehttpserver.rst:235
msgid ""
"Logs an arbitrary message to ``sys.stderr``. This is typically overridden to "
"create custom error logging mechanisms. The *format* argument is a standard "
"printf-style format string, where the additional arguments to :meth:"
"`log_message` are applied as inputs to the formatting. The client address "
"and current date and time are prefixed to every message logged."
msgstr ""

#: ../../../library/basehttpserver.rst:244
msgid ""
"Returns the server software's version string. This is a combination of the :"
"attr:`server_version` and :attr:`sys_version` class variables."
msgstr ""

#: ../../../library/basehttpserver.rst:250
msgid ""
"Returns the date and time given by *timestamp* (which must be in the format "
"returned by :func:`time.time`), formatted for a message header. If "
"*timestamp* is omitted, it uses the current date and time."
msgstr ""

#: ../../../library/basehttpserver.rst:254
msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr ""

#: ../../../library/basehttpserver.rst:256
msgid "The *timestamp* parameter."
msgstr ""

#: ../../../library/basehttpserver.rst:262
msgid "Returns the current date and time, formatted for logging."
msgstr ""

#: ../../../library/basehttpserver.rst:267
msgid ""
"Returns the client address, formatted for logging. A name lookup is "
"performed on the client's IP address."
msgstr ""

#: ../../../library/basehttpserver.rst:272
msgid "More examples"
msgstr ""

#: ../../../library/basehttpserver.rst:274
msgid ""
"To create a server that doesn't run forever, but until some condition is "
"fulfilled::"
msgstr ""

#: ../../../library/basehttpserver.rst:277
msgid ""
"def run_while_true(server_class=BaseHTTPServer.HTTPServer,\n"
"                   handler_class=BaseHTTPServer.BaseHTTPRequestHandler):\n"
"    \"\"\"\n"
"    This assumes that keep_running() is a function of no arguments which\n"
"    is tested initially and after each request.  If its return value\n"
"    is true, the server continues.\n"
"    \"\"\"\n"
"    server_address = ('', 8000)\n"
"    httpd = server_class(server_address, handler_class)\n"
"    while keep_running():\n"
"        httpd.handle_request()"
msgstr ""

#: ../../../library/basehttpserver.rst:293
msgid "Module :mod:`CGIHTTPServer`"
msgstr ""

#: ../../../library/basehttpserver.rst:293
msgid "Extended request handler that supports CGI scripts."
msgstr ""

#: ../../../library/basehttpserver.rst:296
msgid "Module :mod:`SimpleHTTPServer`"
msgstr ""

#: ../../../library/basehttpserver.rst:296
msgid ""
"Basic request handler that limits response to files actually under the "
"document root."
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "WWW"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "server"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "HTTP"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "protocol"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "URL"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "httpd"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "SimpleHTTPServer"
msgstr ""

#: ../../../library/basehttpserver.rst:13
msgid "CGIHTTPServer"
msgstr ""

#: ../../../library/basehttpserver.rst:158
msgid "Message (in module mimetools)"
msgstr ""
