# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/weakref.rst:2
msgid ":mod:`weakref` --- Weak references"
msgstr ""

#: ../../../library/weakref.rst:14
msgid ""
"The :mod:`weakref` module allows the Python programmer to create :dfn:`weak "
"references` to objects."
msgstr ""

#: ../../../library/weakref.rst:20
msgid ""
"In the following, the term :dfn:`referent` means the object which is "
"referred to by a weak reference."
msgstr ""

#: ../../../library/weakref.rst:23
msgid ""
"A weak reference to an object is not enough to keep the object alive: when "
"the only remaining references to a referent are weak references, :term:"
"`garbage collection` is free to destroy the referent and reuse its memory "
"for something else.  A primary use for weak references is to implement "
"caches or mappings holding large objects, where it's desired that a large "
"object not be kept alive solely because it appears in a cache or mapping."
msgstr ""

#: ../../../library/weakref.rst:30
msgid ""
"For example, if you have a number of large binary image objects, you may "
"wish to associate a name with each.  If you used a Python dictionary to map "
"names to images, or images to names, the image objects would remain alive "
"just because they appeared as values or keys in the dictionaries.  The :"
"class:`WeakKeyDictionary` and :class:`WeakValueDictionary` classes supplied "
"by the :mod:`weakref` module are an alternative, using weak references to "
"construct mappings that don't keep objects alive solely because they appear "
"in the mapping objects.  If, for example, an image object is a value in a :"
"class:`WeakValueDictionary`, then when the last remaining references to that "
"image object are the weak references held by weak mappings, garbage "
"collection can reclaim the object, and its corresponding entries in weak "
"mappings are simply deleted."
msgstr ""

#: ../../../library/weakref.rst:43
msgid ""
":class:`WeakKeyDictionary` and :class:`WeakValueDictionary` use weak "
"references in their implementation, setting up callback functions on the "
"weak references that notify the weak dictionaries when a key or value has "
"been reclaimed by garbage collection.  Most programs should find that using "
"one of these weak dictionary types is all they need -- it's not usually "
"necessary to create your own weak references directly.  The low-level "
"machinery used by the weak dictionary implementations is exposed by the :mod:"
"`weakref` module for the benefit of advanced uses."
msgstr ""

#: ../../../library/weakref.rst:54
msgid ""
"Weak references to an object are cleared before the object's :meth:`__del__` "
"is called, to ensure that the weak reference callback (if any) finds the "
"object still alive."
msgstr ""

#: ../../../library/weakref.rst:58
msgid ""
"Not all objects can be weakly referenced; those objects which can include "
"class instances, functions written in Python (but not in C), methods (both "
"bound and unbound), sets, frozensets, file objects, :term:`generator`\\s, "
"type objects, :class:`DBcursor` objects from the :mod:`bsddb` module, "
"sockets, arrays, deques, and regular expression pattern objects."
msgstr ""

#: ../../../library/weakref.rst:64
msgid "Added support for files, sockets, arrays, and patterns."
msgstr ""

#: ../../../library/weakref.rst:67
msgid ""
"Several built-in types such as :class:`list` and :class:`dict` do not "
"directly support weak references but can add support through subclassing::"
msgstr ""

#: ../../../library/weakref.rst:70
msgid ""
"class Dict(dict):\n"
"    pass\n"
"\n"
"obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable"
msgstr ""

#: ../../../library/weakref.rst:77
msgid ""
"Other built-in types such as :class:`tuple` and :class:`long` do not support "
"weak references even when subclassed."
msgstr ""

#: ../../../library/weakref.rst:80
msgid ""
"Extension types can easily be made to support weak references; see :ref:"
"`weakref-support`."
msgstr ""

#: ../../../library/weakref.rst:86
msgid ""
"Return a weak reference to *object*.  The original object can be retrieved "
"by calling the reference object if the referent is still alive; if the "
"referent is no longer alive, calling the reference object will cause :const:"
"`None` to be returned.  If *callback* is provided and not :const:`None`, and "
"the returned weakref object is still alive, the callback will be called when "
"the object is about to be finalized; the weak reference object will be "
"passed as the only parameter to the callback; the referent will no longer be "
"available."
msgstr ""

#: ../../../library/weakref.rst:94
msgid ""
"It is allowable for many weak references to be constructed for the same "
"object. Callbacks registered for each weak reference will be called from the "
"most recently registered callback to the oldest registered callback."
msgstr ""

#: ../../../library/weakref.rst:98
msgid ""
"Exceptions raised by the callback will be noted on the standard error "
"output, but cannot be propagated; they are handled in exactly the same way "
"as exceptions raised from an object's :meth:`__del__` method."
msgstr ""

#: ../../../library/weakref.rst:102
msgid ""
"Weak references are :term:`hashable` if the *object* is hashable.  They will "
"maintain their hash value even after the *object* was deleted.  If :func:"
"`hash` is called the first time only after the *object* was deleted, the "
"call will raise :exc:`TypeError`."
msgstr ""

#: ../../../library/weakref.rst:107
msgid ""
"Weak references support tests for equality, but not ordering.  If the "
"referents are still alive, two references have the same equality "
"relationship as their referents (regardless of the *callback*).  If either "
"referent has been deleted, the references are equal only if the reference "
"objects are the same object."
msgstr ""

#: ../../../library/weakref.rst:112
msgid ""
"This is now a subclassable type rather than a factory function; it derives "
"from :class:`object`."
msgstr ""

#: ../../../library/weakref.rst:119
msgid ""
"Return a proxy to *object* which uses a weak reference.  This supports use "
"of the proxy in most contexts instead of requiring the explicit "
"dereferencing used with weak reference objects.  The returned object will "
"have a type of either ``ProxyType`` or ``CallableProxyType``, depending on "
"whether *object* is callable.  Proxy objects are not :term:`hashable` "
"regardless of the referent; this avoids a number of problems related to "
"their fundamentally mutable nature, and prevent their use as dictionary "
"keys.  *callback* is the same as the parameter of the same name to the :func:"
"`ref` function."
msgstr ""

#: ../../../library/weakref.rst:131
msgid ""
"Return the number of weak references and proxies which refer to *object*."
msgstr ""

#: ../../../library/weakref.rst:136
msgid ""
"Return a list of all weak reference and proxy objects which refer to "
"*object*."
msgstr ""

#: ../../../library/weakref.rst:141
msgid ""
"Mapping class that references keys weakly.  Entries in the dictionary will "
"be discarded when there is no longer a strong reference to the key.  This "
"can be used to associate additional data with an object owned by other parts "
"of an application without adding attributes to those objects.  This can be "
"especially useful with objects that override attribute accesses."
msgstr ""

#: ../../../library/weakref.rst:149
msgid ""
"Caution: Because a :class:`WeakKeyDictionary` is built on top of a Python "
"dictionary, it must not change size when iterating over it.  This can be "
"difficult to ensure for a :class:`WeakKeyDictionary` because actions "
"performed by the program during iteration may cause items in the dictionary "
"to vanish \"by magic\" (as a side effect of garbage collection)."
msgstr ""

#: ../../../library/weakref.rst:155
msgid ""
":class:`WeakKeyDictionary` objects have the following additional methods.  "
"These expose the internal references directly.  The references are not "
"guaranteed to be \"live\" at the time they are used, so the result of "
"calling the references needs to be checked before being used.  This can be "
"used to avoid creating references that will cause the garbage collector to "
"keep the keys around longer than needed."
msgstr ""

#: ../../../library/weakref.rst:165
msgid "Return an :term:`iterator` that yields the weak references to the keys."
msgstr ""

#: ../../../library/weakref.rst:172
msgid "Return a list of weak references to the keys."
msgstr ""

#: ../../../library/weakref.rst:179
msgid ""
"Mapping class that references values weakly.  Entries in the dictionary will "
"be discarded when no strong reference to the value exists any more."
msgstr ""

#: ../../../library/weakref.rst:184
msgid ""
"Caution:  Because a :class:`WeakValueDictionary` is built on top of a Python "
"dictionary, it must not change size when iterating over it.  This can be "
"difficult to ensure for a :class:`WeakValueDictionary` because actions "
"performed by the program during iteration may cause items in the dictionary "
"to vanish \"by magic\" (as a side effect of garbage collection)."
msgstr ""

#: ../../../library/weakref.rst:190
msgid ""
":class:`WeakValueDictionary` objects have the following additional methods. "
"These method have the same issues as the :meth:`iterkeyrefs` and :meth:"
"`keyrefs` methods of :class:`WeakKeyDictionary` objects."
msgstr ""

#: ../../../library/weakref.rst:197
msgid ""
"Return an :term:`iterator` that yields the weak references to the values."
msgstr ""

#: ../../../library/weakref.rst:204
msgid "Return a list of weak references to the values."
msgstr ""

#: ../../../library/weakref.rst:211
msgid "The type object for weak references objects."
msgstr ""

#: ../../../library/weakref.rst:216
msgid "The type object for proxies of objects which are not callable."
msgstr ""

#: ../../../library/weakref.rst:221
msgid "The type object for proxies of callable objects."
msgstr ""

#: ../../../library/weakref.rst:226
msgid ""
"Sequence containing all the type objects for proxies.  This can make it "
"simpler to test if an object is a proxy without being dependent on naming "
"both proxy types."
msgstr ""

#: ../../../library/weakref.rst:233
msgid ""
"Exception raised when a proxy object is used but the underlying object has "
"been collected.  This is the same as the standard :exc:`ReferenceError` "
"exception."
msgstr ""

#: ../../../library/weakref.rst:240
msgid ":pep:`0205` - Weak References"
msgstr ""

#: ../../../library/weakref.rst:240
msgid ""
"The proposal and rationale for this feature, including links to earlier "
"implementations and information about similar features in other languages."
msgstr ""

#: ../../../library/weakref.rst:247
msgid "Weak Reference Objects"
msgstr ""

#: ../../../library/weakref.rst:249
msgid ""
"Weak reference objects have no attributes or methods, but do allow the "
"referent to be obtained, if it still exists, by calling it:"
msgstr ""

#: ../../../library/weakref.rst:262
msgid ""
"If the referent no longer exists, calling the reference object returns :"
"const:`None`:"
msgstr ""

#: ../../../library/weakref.rst:269
msgid ""
"Testing that a weak reference object is still live should be done using the "
"expression ``ref() is not None``.  Normally, application code that needs to "
"use a reference object should follow this pattern::"
msgstr ""

#: ../../../library/weakref.rst:273
msgid ""
"# r is a weak reference object\n"
"o = r()\n"
"if o is None:\n"
"    # referent has been garbage collected\n"
"    print \"Object has been deallocated; can't frobnicate.\"\n"
"else:\n"
"    print \"Object is still live!\"\n"
"    o.do_something_useful()"
msgstr ""

#: ../../../library/weakref.rst:282
msgid ""
"Using a separate test for \"liveness\" creates race conditions in threaded "
"applications; another thread can cause a weak reference to become "
"invalidated before the weak reference is called; the idiom shown above is "
"safe in threaded applications as well as single-threaded applications."
msgstr ""

#: ../../../library/weakref.rst:287
msgid ""
"Specialized versions of :class:`ref` objects can be created through "
"subclassing. This is used in the implementation of the :class:"
"`WeakValueDictionary` to reduce the memory overhead for each entry in the "
"mapping.  This may be most useful to associate additional information with a "
"reference, but could also be used to insert additional processing on calls "
"to retrieve the referent."
msgstr ""

#: ../../../library/weakref.rst:293
msgid ""
"This example shows how a subclass of :class:`ref` can be used to store "
"additional information about an object and affect the value that's returned "
"when the referent is accessed::"
msgstr ""

#: ../../../library/weakref.rst:297
msgid ""
"import weakref\n"
"\n"
"class ExtendedRef(weakref.ref):\n"
"    def __init__(self, ob, callback=None, **annotations):\n"
"        super(ExtendedRef, self).__init__(ob, callback)\n"
"        self.__counter = 0\n"
"        for k, v in annotations.iteritems():\n"
"            setattr(self, k, v)\n"
"\n"
"    def __call__(self):\n"
"        \"\"\"Return a pair containing the referent and the number of\n"
"        times the reference has been called.\n"
"        \"\"\"\n"
"        ob = super(ExtendedRef, self).__call__()\n"
"        if ob is not None:\n"
"            self.__counter += 1\n"
"            ob = (ob, self.__counter)\n"
"        return ob"
msgstr ""

#: ../../../library/weakref.rst:320
msgid "Example"
msgstr ""

#: ../../../library/weakref.rst:322
msgid ""
"This simple example shows how an application can use objects IDs to retrieve "
"objects that it has seen before.  The IDs of the objects can then be used in "
"other data structures without forcing the objects to remain alive, but the "
"objects can still be retrieved by ID if they do."
msgstr ""

#: ../../../library/weakref.rst:331
msgid ""
"import weakref\n"
"\n"
"_id2obj_dict = weakref.WeakValueDictionary()\n"
"\n"
"def remember(obj):\n"
"    oid = id(obj)\n"
"    _id2obj_dict[oid] = obj\n"
"    return oid\n"
"\n"
"def id2obj(oid):\n"
"    return _id2obj_dict[oid]"
msgstr ""
