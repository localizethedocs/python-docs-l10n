# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/queue.rst:2
msgid ":mod:`queue` --- A synchronized queue class"
msgstr ""

#: ../../../library/queue.rst:8
msgid ""
"The :mod:`Queue` module has been renamed to :mod:`queue` in Python 3.0.  "
"The :term:`2to3` tool will automatically adapt imports when converting your "
"sources to 3.0."
msgstr ""

#: ../../../library/queue.rst:13
msgid ""
"The :mod:`Queue` module implements multi-producer, multi-consumer queues. It "
"is especially useful in threaded programming when information must be "
"exchanged safely between multiple threads.  The :class:`Queue` class in this "
"module implements all the required locking semantics.  It depends on the "
"availability of thread support in Python; see the :mod:`threading` module."
msgstr ""

#: ../../../library/queue.rst:20
msgid ""
"Implements three types of queue whose only difference is the order that the "
"entries are retrieved.  In a FIFO queue, the first tasks added are the first "
"retrieved. In a LIFO queue, the most recently added entry is the first "
"retrieved (operating like a stack).  With a priority queue, the entries are "
"kept sorted (using the :mod:`heapq` module) and the lowest valued entry is "
"retrieved first."
msgstr ""

#: ../../../library/queue.rst:27
msgid "The :mod:`Queue` module defines the following classes and exceptions:"
msgstr ""

#: ../../../library/queue.rst:31
msgid ""
"Constructor for a FIFO queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue.  "
"Insertion will block once this size has been reached, until queue items are "
"consumed.  If *maxsize* is less than or equal to zero, the queue size is "
"infinite."
msgstr ""

#: ../../../library/queue.rst:38
msgid ""
"Constructor for a LIFO queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue.  "
"Insertion will block once this size has been reached, until queue items are "
"consumed.  If *maxsize* is less than or equal to zero, the queue size is "
"infinite."
msgstr ""

#: ../../../library/queue.rst:47
msgid ""
"Constructor for a priority queue.  *maxsize* is an integer that sets the "
"upperbound limit on the number of items that can be placed in the queue.  "
"Insertion will block once this size has been reached, until queue items are "
"consumed.  If *maxsize* is less than or equal to zero, the queue size is "
"infinite."
msgstr ""

#: ../../../library/queue.rst:52
msgid ""
"The lowest valued entries are retrieved first (the lowest valued entry is "
"the one returned by ``sorted(list(entries))[0]``).  A typical pattern for "
"entries is a tuple in the form: ``(priority_number, data)``."
msgstr ""

#: ../../../library/queue.rst:60
msgid ""
"Exception raised when non-blocking :meth:`get` (or :meth:`get_nowait`) is "
"called on a :class:`Queue` object which is empty."
msgstr ""

#: ../../../library/queue.rst:66
msgid ""
"Exception raised when non-blocking :meth:`put` (or :meth:`put_nowait`) is "
"called on a :class:`Queue` object which is full."
msgstr ""

#: ../../../library/queue.rst:71
msgid ""
":class:`collections.deque` is an alternative implementation of unbounded "
"queues with fast atomic :func:`append` and :func:`popleft` operations that "
"do not require locking."
msgstr ""

#: ../../../library/queue.rst:79
msgid "Queue Objects"
msgstr ""

#: ../../../library/queue.rst:81
msgid ""
"Queue objects (:class:`Queue`, :class:`LifoQueue`, or :class:"
"`PriorityQueue`) provide the public methods described below."
msgstr ""

#: ../../../library/queue.rst:87
msgid ""
"Return the approximate size of the queue.  Note, qsize() > 0 doesn't "
"guarantee that a subsequent get() will not block, nor will qsize() < maxsize "
"guarantee that put() will not block."
msgstr ""

#: ../../../library/queue.rst:94
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  If empty() "
"returns ``True`` it doesn't guarantee that a subsequent call to put() will "
"not block.  Similarly, if empty() returns ``False`` it doesn't guarantee "
"that a subsequent call to get() will not block."
msgstr ""

#: ../../../library/queue.rst:102
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  If full() "
"returns ``True`` it doesn't guarantee that a subsequent call to get() will "
"not block.  Similarly, if full() returns ``False`` it doesn't guarantee that "
"a subsequent call to put() will not block."
msgstr ""

#: ../../../library/queue.rst:110
msgid ""
"Put *item* into the queue. If optional args *block* is true and *timeout* is "
"None (the default), block if necessary until a free slot is available. If "
"*timeout* is a positive number, it blocks at most *timeout* seconds and "
"raises the :exc:`Full` exception if no free slot was available within that "
"time. Otherwise (*block* is false), put an item on the queue if a free slot "
"is immediately available, else raise the :exc:`Full` exception (*timeout* is "
"ignored in that case)."
msgstr ""

#: ../../../library/queue.rst:118 ../../../library/queue.rst:136
msgid "The *timeout* parameter."
msgstr ""

#: ../../../library/queue.rst:124
msgid "Equivalent to ``put(item, False)``."
msgstr ""

#: ../../../library/queue.rst:129
msgid ""
"Remove and return an item from the queue. If optional args *block* is true "
"and *timeout* is None (the default), block if necessary until an item is "
"available. If *timeout* is a positive number, it blocks at most *timeout* "
"seconds and raises the :exc:`Empty` exception if no item was available "
"within that time. Otherwise (*block* is false), return an item if one is "
"immediately available, else raise the :exc:`Empty` exception (*timeout* is "
"ignored in that case)."
msgstr ""

#: ../../../library/queue.rst:142
msgid "Equivalent to ``get(False)``."
msgstr ""

#: ../../../library/queue.rst:144
msgid ""
"Two methods are offered to support tracking whether enqueued tasks have been "
"fully processed by daemon consumer threads."
msgstr ""

#: ../../../library/queue.rst:150
msgid ""
"Indicate that a formerly enqueued task is complete.  Used by queue consumer "
"threads.  For each :meth:`get` used to fetch a task, a subsequent call to :"
"meth:`task_done` tells the queue that the processing on the task is complete."
msgstr ""

#: ../../../library/queue.rst:154
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`put` into the queue)."
msgstr ""

#: ../../../library/queue.rst:158
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

#: ../../../library/queue.rst:166
msgid "Blocks until all items in the queue have been gotten and processed."
msgstr ""

#: ../../../library/queue.rst:168
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete. When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""

#: ../../../library/queue.rst:175
msgid "Example of how to wait for enqueued tasks to be completed::"
msgstr ""

#: ../../../library/queue.rst:177
msgid ""
"def worker():\n"
"    while True:\n"
"        item = q.get()\n"
"        do_work(item)\n"
"        q.task_done()\n"
"\n"
"q = Queue()\n"
"for i in range(num_worker_threads):\n"
"     t = Thread(target=worker)\n"
"     t.setDaemon(True)\n"
"     t.start()\n"
"\n"
"for item in source():\n"
"    q.put(item)\n"
"\n"
"q.join()       # block until all tasks are done"
msgstr ""
