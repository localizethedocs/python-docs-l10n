# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorial/inputoutput.rst:5
msgid "Input and Output"
msgstr ""

#: ../../../tutorial/inputoutput.rst:7
msgid ""
"There are several ways to present the output of a program; data can be "
"printed in a human-readable form, or written to a file for future use. This "
"chapter will discuss some of the possibilities."
msgstr ""

#: ../../../tutorial/inputoutput.rst:15
msgid "Fancier Output Formatting"
msgstr ""

#: ../../../tutorial/inputoutput.rst:17
msgid ""
"So far we've encountered two ways of writing values: *expression statements* "
"and the :keyword:`print` statement.  (A third way is using the :meth:`write` "
"method of file objects; the standard output file can be referenced as ``sys."
"stdout``. See the Library Reference for more information on this.)"
msgstr ""

#: ../../../tutorial/inputoutput.rst:24
msgid ""
"Often you'll want more control over the formatting of your output than "
"simply printing space-separated values.  There are two ways to format your "
"output; the first way is to do all the string handling yourself; using "
"string slicing and concatenation operations you can create any layout you "
"can imagine.  The standard module :mod:`string` contains some useful "
"operations for padding strings to a given column width; these will be "
"discussed shortly.  The second way is to use the :meth:`str.format` method."
msgstr ""

#: ../../../tutorial/inputoutput.rst:32
msgid ""
"One question remains, of course: how do you convert values to strings? "
"Luckily, Python has ways to convert any value to a string: pass it to the :"
"func:`repr` or :func:`str` functions."
msgstr ""

#: ../../../tutorial/inputoutput.rst:36
msgid ""
"The :func:`str` function is meant to return representations of values which "
"are fairly human-readable, while :func:`repr` is meant to generate "
"representations which can be read by the interpreter (or will force a :exc:"
"`SyntaxError` if there is not equivalent syntax).  For objects which don't "
"have a particular representation for human consumption, :func:`str` will "
"return the same value as :func:`repr`.  Many values, such as numbers or "
"structures like lists and dictionaries, have the same representation using "
"either function.  Strings and floating point numbers, in particular, have "
"two distinct representations."
msgstr ""

#: ../../../tutorial/inputoutput.rst:45
msgid "Some examples::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:70
msgid "Here are two ways to write a table of squares and cubes::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:102
msgid ""
"(Note that in the first example, one space between each column was added by "
"the way :keyword:`print` works: it always adds spaces between its arguments.)"
msgstr ""

#: ../../../tutorial/inputoutput.rst:105
msgid ""
"This example demonstrates the :meth:`rjust` method of string objects, which "
"right-justifies a string in a field of a given width by padding it with "
"spaces on the left.  There are similar methods :meth:`ljust` and :meth:"
"`center`.  These methods do not write anything, they just return a new "
"string.  If the input string is too long, they don't truncate it, but return "
"it unchanged; this will mess up your column lay-out but that's usually "
"better than the alternative, which would be lying about a value.  (If you "
"really want truncation you can always add a slice operation, as in ``x."
"ljust(n)[:n]``.)"
msgstr ""

#: ../../../tutorial/inputoutput.rst:114
msgid ""
"There is another method, :meth:`zfill`, which pads a numeric string on the "
"left with zeros.  It understands about plus and minus signs::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:124
msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:129
msgid ""
"The brackets and characters within them (called format fields) are replaced "
"with the objects passed into the :meth:`~str.format` method.  A number in "
"the brackets refers to the position of the object passed into the :meth:"
"`~str.format` method. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:139
msgid ""
"If keyword arguments are used in the :meth:`~str.format` method, their "
"values are referred to by using the name of the argument. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:146
msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:152
msgid ""
"``'!s'`` (apply :func:`str`) and ``'!r'`` (apply :func:`repr`) can be used "
"to convert the value before it is formatted. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:161
msgid ""
"An optional ``':'`` and format specifier can follow the field name. This "
"allows greater control over how the value is formatted.  The following "
"example truncates Pi to three places after the decimal."
msgstr ""

#: ../../../tutorial/inputoutput.rst:169
msgid ""
"Passing an integer after the ``':'`` will cause that field to be a minimum "
"number of characters wide.  This is useful for making tables pretty. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:180
msgid ""
"If you have a really long format string that you don't want to split up, it "
"would be nice if you could reference the variables to be formatted by name "
"instead of by position.  This can be done by simply passing the dict and "
"using square brackets ``'[]'`` to access the keys ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:190
msgid ""
"This could also be done by passing the table as keyword arguments with the "
"'**' notation. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:197
msgid ""
"This is particularly useful in combination with the new built-in :func:"
"`vars` function, which returns a dictionary containing all local variables."
msgstr ""

#: ../../../tutorial/inputoutput.rst:200
msgid ""
"For a complete overview of string formatting with :meth:`str.format`, see :"
"ref:`formatstrings`."
msgstr ""

#: ../../../tutorial/inputoutput.rst:205
msgid "Old string formatting"
msgstr ""

#: ../../../tutorial/inputoutput.rst:207
msgid ""
"The ``%`` operator can also be used for string formatting. It interprets the "
"left argument much like a :cfunc:`sprintf`\\ -style format string to be "
"applied to the right argument, and returns the string resulting from this "
"formatting operation. For example::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:216
msgid ""
"Since :meth:`str.format` is quite new, a lot of Python code still uses the "
"``%`` operator. However, because this old style of formatting will "
"eventually be removed from the language, :meth:`str.format` should generally "
"be used."
msgstr ""

#: ../../../tutorial/inputoutput.rst:220
msgid "More information can be found in the :ref:`string-formatting` section."
msgstr ""

#: ../../../tutorial/inputoutput.rst:226
msgid "Reading and Writing Files"
msgstr ""

#: ../../../tutorial/inputoutput.rst:232
msgid ""
":func:`open` returns a file object, and is most commonly used with two "
"arguments: ``open(filename, mode)``."
msgstr ""

#: ../../../tutorial/inputoutput.rst:241
msgid ""
"The first argument is a string containing the filename.  The second argument "
"is another string containing a few characters describing the way in which "
"the file will be used.  *mode* can be ``'r'`` when the file will only be "
"read, ``'w'`` for only writing (an existing file with the same name will be "
"erased), and ``'a'`` opens the file for appending; any data written to the "
"file is automatically added to the end.  ``'r+'`` opens the file for both "
"reading and writing. The *mode* argument is optional; ``'r'`` will be "
"assumed if it's omitted."
msgstr ""

#: ../../../tutorial/inputoutput.rst:250
msgid ""
"On Windows, ``'b'`` appended to the mode opens the file in binary mode, so "
"there are also modes like ``'rb'``, ``'wb'``, and ``'r+b'``.  Python on "
"Windows makes a distinction between text and binary files; the end-of-line "
"characters in text files are automatically altered slightly when data is "
"read or written.  This behind-the-scenes modification to file data is fine "
"for ASCII text files, but it'll corrupt binary data like that in :file:"
"`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when "
"reading and writing such files.  On Unix, it doesn't hurt to append a "
"``'b'`` to the mode, so you can use it platform-independently for all binary "
"files."
msgstr ""

#: ../../../tutorial/inputoutput.rst:264
msgid "Methods of File Objects"
msgstr ""

#: ../../../tutorial/inputoutput.rst:266
msgid ""
"The rest of the examples in this section will assume that a file object "
"called ``f`` has already been created."
msgstr ""

#: ../../../tutorial/inputoutput.rst:269
msgid ""
"To read a file's contents, call ``f.read(size)``, which reads some quantity "
"of data and returns it as a string.  *size* is an optional numeric "
"argument.  When *size* is omitted or negative, the entire contents of the "
"file will be read and returned; it's your problem if the file is twice as "
"large as your machine's memory. Otherwise, at most *size* bytes are read and "
"returned.  If the end of the file has been reached, ``f.read()`` will return "
"an empty string (``\"\"``). ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:282
msgid ""
"``f.readline()`` reads a single line from the file; a newline character "
"(``\\n``) is left at the end of the string, and is only omitted on the last "
"line of the file if the file doesn't end in a newline.  This makes the "
"return value unambiguous; if ``f.readline()`` returns an empty string, the "
"end of the file has been reached, while a blank line is represented by "
"``'\\n'``, a string containing only a single newline.   ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:296
msgid ""
"``f.readlines()`` returns a list containing all the lines of data in the "
"file. If given an optional parameter *sizehint*, it reads that many bytes "
"from the file and enough more to complete a line, and returns the lines from "
"that.  This is often used to allow efficient reading of a large file by "
"lines, but without having to load the entire file in memory.  Only complete "
"lines will be returned. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:306
msgid ""
"An alternative approach to reading lines is to loop over the file object. "
"This is memory efficient, fast, and leads to simpler code::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:315
msgid ""
"The alternative approach is simpler but does not provide as fine-grained "
"control.  Since the two approaches manage line buffering differently, they "
"should not be mixed."
msgstr ""

#: ../../../tutorial/inputoutput.rst:319
msgid ""
"``f.write(string)`` writes the contents of *string* to the file, returning "
"``None``.   ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:324
msgid ""
"To write something other than a string, it needs to be converted to a string "
"first::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:331
msgid ""
"``f.tell()`` returns an integer giving the file object's current position in "
"the file, measured in bytes from the beginning of the file.  To change the "
"file object's position, use ``f.seek(offset, from_what)``.  The position is "
"computed from adding *offset* to a reference point; the reference point is "
"selected by the *from_what* argument.  A *from_what* value of 0 measures "
"from the beginning of the file, 1 uses the current file position, and 2 uses "
"the end of the file as the reference point.  *from_what* can be omitted and "
"defaults to 0, using the beginning of the file as the reference point. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:349
msgid ""
"When you're done with a file, call ``f.close()`` to close it and free up any "
"system resources taken up by the open file.  After calling ``f.close()``, "
"attempts to use the file object will automatically fail. ::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:359
msgid ""
"It is good practice to use the :keyword:`with` keyword when dealing with "
"file objects.  This has the advantage that the file is properly closed after "
"its suite finishes, even if an exception is raised on the way.  It is also "
"much shorter than writing equivalent :keyword:`try`\\ -\\ :keyword:`finally` "
"blocks::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:369
msgid ""
"File objects have some additional methods, such as :meth:`~file.isatty` and :"
"meth:`~file.truncate` which are less frequently used; consult the Library "
"Reference for a complete guide to file objects."
msgstr ""

#: ../../../tutorial/inputoutput.rst:377
msgid "The :mod:`pickle` Module"
msgstr ""

#: ../../../tutorial/inputoutput.rst:381
msgid ""
"Strings can easily be written to and read from a file. Numbers take a bit "
"more effort, since the :meth:`read` method only returns strings, which will "
"have to be passed to a function like :func:`int`, which takes a string like "
"``'123'`` and returns its numeric value 123.  However, when you want to save "
"more complex data types like lists, dictionaries, or class instances, things "
"get a lot more complicated."
msgstr ""

#: ../../../tutorial/inputoutput.rst:388
msgid ""
"Rather than have users be constantly writing and debugging code to save "
"complicated data types, Python provides a standard module called :mod:"
"`pickle`. This is an amazing module that can take almost any Python object "
"(even some forms of Python code!), and convert it to a string "
"representation; this process is called :dfn:`pickling`.  Reconstructing the "
"object from the string representation is called :dfn:`unpickling`.  Between "
"pickling and unpickling, the string representing the object may have been "
"stored in a file or data, or sent over a network connection to some distant "
"machine."
msgstr ""

#: ../../../tutorial/inputoutput.rst:397
msgid ""
"If you have an object ``x``, and a file object ``f`` that's been opened for "
"writing, the simplest way to pickle the object takes only one line of code::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:402
msgid ""
"To unpickle the object again, if ``f`` is a file object which has been "
"opened for reading::"
msgstr ""

#: ../../../tutorial/inputoutput.rst:407
msgid ""
"(There are other variants of this, used when pickling many objects or when "
"you don't want to write the pickled data to a file; consult the complete "
"documentation for :mod:`pickle` in the Python Library Reference.)"
msgstr ""

#: ../../../tutorial/inputoutput.rst:411
msgid ""
":mod:`pickle` is the standard way to make Python objects which can be stored "
"and reused by other programs or by a future invocation of the same program; "
"the technical term for this is a :dfn:`persistent` object.  Because :mod:"
"`pickle` is so widely used, many authors who write Python extensions take "
"care to ensure that new data types such as matrices can be properly pickled "
"and unpickled."
msgstr ""

#: ../../../tutorial/inputoutput.rst:22
msgid "string"
msgstr ""

#: ../../../tutorial/inputoutput.rst:228
msgid "open"
msgstr ""

#: ../../../tutorial/inputoutput.rst:228
msgid "file"
msgstr ""

#: ../../../tutorial/inputoutput.rst:379
msgid "pickle"
msgstr ""
