# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/trace.rst:2
msgid ":mod:`trace` --- Trace or track Python statement execution"
msgstr ""

#: ../../../library/trace.rst:8
msgid ""
"The :mod:`trace` module allows you to trace program execution, generate "
"annotated statement coverage listings, print caller/callee relationships and "
"list functions executed during a program run.  It can be used in another "
"program or from the command line."
msgstr ""

#: ../../../library/trace.rst:17
msgid "Command Line Usage"
msgstr ""

#: ../../../library/trace.rst:19
msgid ""
"The :mod:`trace` module can be invoked from the command line.  It can be as "
"simple as ::"
msgstr ""

#: ../../../library/trace.rst:22
msgid "python -m trace --count -C . somefile.py ..."
msgstr ""

#: ../../../library/trace.rst:24
msgid ""
"The above will execute :file:`somefile.py` and generate annotated listings "
"of all Python modules imported during the execution into the current "
"directory."
msgstr ""

#: ../../../library/trace.rst:28
msgid "Meta-options"
msgstr ""

#: ../../../library/trace.rst:30
msgid "``--help``"
msgstr ""

#: ../../../library/trace.rst:32
msgid "Display usage and exit."
msgstr ""

#: ../../../library/trace.rst:34
msgid "``--version``"
msgstr ""

#: ../../../library/trace.rst:36
msgid "Display the version of the module and exit."
msgstr ""

#: ../../../library/trace.rst:39
msgid "Main options"
msgstr ""

#: ../../../library/trace.rst:41
msgid ""
"The ``--listfuncs`` option is mutually exclusive with the ``--trace`` and "
"``--count`` options . When ``--listfuncs`` is provided, neither ``--counts`` "
"nor ``--trace`` are accepted, and vice versa."
msgstr ""

#: ../../../library/trace.rst:45
msgid "``--count, -c``"
msgstr ""

#: ../../../library/trace.rst:47
msgid ""
"Produce a set of annotated listing files upon program completion that shows "
"how many times each statement was executed. See also ``--coverdir``, ``--"
"file``, ``--no-report`` below."
msgstr ""

#: ../../../library/trace.rst:51
msgid "``--trace, -t``"
msgstr ""

#: ../../../library/trace.rst:53
msgid "Display lines as they are executed."
msgstr ""

#: ../../../library/trace.rst:55
msgid "``--listfuncs, -l``"
msgstr ""

#: ../../../library/trace.rst:57
msgid "Display the functions executed by running the program."
msgstr ""

#: ../../../library/trace.rst:59
msgid "``--report, -r``"
msgstr ""

#: ../../../library/trace.rst:61
msgid ""
"Produce an annotated list from an earlier program run that used the ``--"
"count`` and ``--file`` option. Do not execute any code."
msgstr ""

#: ../../../library/trace.rst:64
msgid "``--trackcalls, -T``"
msgstr ""

#: ../../../library/trace.rst:66
msgid "Display the calling relationships exposed by running the program."
msgstr ""

#: ../../../library/trace.rst:69
msgid "Modifiers"
msgstr ""

#: ../../../library/trace.rst:71
msgid "``--file=<file>, -f``"
msgstr ""

#: ../../../library/trace.rst:73
msgid ""
"Name of a file to accumulate counts over several tracing runs. Should be "
"used with the ``--count`` option."
msgstr ""

#: ../../../library/trace.rst:76
msgid "``--coverdir=<dir>, -C``"
msgstr ""

#: ../../../library/trace.rst:78
msgid ""
"Directory where the report files go. The coverage report for ``package."
"module`` is written to file ``dir/package/module.cover``."
msgstr ""

#: ../../../library/trace.rst:81
msgid "``--missing, -m``"
msgstr ""

#: ../../../library/trace.rst:83
msgid ""
"When generating annotated listings, mark lines which were not executed with "
"'``>>>>>>``'."
msgstr ""

#: ../../../library/trace.rst:86
msgid "``--summary, -s``"
msgstr ""

#: ../../../library/trace.rst:88
msgid ""
"When using ``--count`` or ``--report``, write a brief summary to stdout for "
"each file processed."
msgstr ""

#: ../../../library/trace.rst:91
msgid "``--no-report, -R``"
msgstr ""

#: ../../../library/trace.rst:93
msgid ""
"Do not generate annotated listings.  This is useful if you intend to make "
"several runs with ``--count`` then produce a single set of annotated "
"listings at the end."
msgstr ""

#: ../../../library/trace.rst:97
msgid "``--timing, -g``"
msgstr ""

#: ../../../library/trace.rst:99
msgid ""
"Prefix each line with the time since the program started. Only used while "
"tracing."
msgstr ""

#: ../../../library/trace.rst:103
msgid "Filters"
msgstr ""

#: ../../../library/trace.rst:105
msgid "These options may be repeated multiple times."
msgstr ""

#: ../../../library/trace.rst:107
msgid "``--ignore-module=<mod>``"
msgstr ""

#: ../../../library/trace.rst:109
msgid ""
"Accepts comma separated list of module names. Ignore each of the named "
"modules and its submodules (if it is a package)."
msgstr ""

#: ../../../library/trace.rst:112
msgid "``--ignore-dir=<dir>``"
msgstr ""

#: ../../../library/trace.rst:114
msgid ""
"Ignore all modules and packages in the named directory and subdirectories "
"(multiple directories can be joined by ``os.pathsep``)."
msgstr ""

#: ../../../library/trace.rst:120
msgid "Programming Interface"
msgstr ""

#: ../../../library/trace.rst:125
msgid ""
"Create an object to trace execution of a single statement or expression. All "
"parameters are optional.  *count* enables counting of line numbers. *trace* "
"enables line execution tracing.  *countfuncs* enables listing of the "
"functions called during the run.  *countcallers* enables call relationship "
"tracking. *ignoremods* is a list of modules or packages to ignore.  "
"*ignoredirs* is a list of directories whose modules or packages should be "
"ignored.  *infile* is the name of the file from which to read stored count "
"information.  *outfile* is the name of the file in which to write updated "
"count information. *timing* enables a timestamp relative to when tracing was "
"started to be displayed."
msgstr ""

#: ../../../library/trace.rst:138
msgid ""
"Run *cmd* under control of the :class:`Trace` object with the current "
"tracing parameters. *cmd* must be a string or code object, suitable for "
"passing into :func:`exec`."
msgstr ""

#: ../../../library/trace.rst:144
msgid ""
"Run *cmd* under control of the :class:`Trace` object with the current "
"tracing parameters in the defined global and local environments.  If not "
"defined, *globals* and *locals* default to empty dictionaries."
msgstr ""

#: ../../../library/trace.rst:151
msgid ""
"Call *func* with the given arguments under control of the :class:`Trace` "
"object with the current tracing parameters."
msgstr ""

#: ../../../library/trace.rst:156
msgid ""
"Return a :class:`CoverageResults` object that contains the cumulative "
"results of all previous calls to ``run``, ``runctx`` and ``runfunc`` for the "
"given :class:`Trace` instance. Does not reset the accumulated trace results."
msgstr ""

#: ../../../library/trace.rst:162
msgid ""
"A container for coverage results, created by :meth:`Trace.results`. Should "
"not be created directly by the user."
msgstr ""

#: ../../../library/trace.rst:167
msgid "Merge in data from another :class:`CoverageResults` object."
msgstr ""

#: ../../../library/trace.rst:171
msgid ""
"Write coverage results. Set *show_missing* to show lines that had no hits. "
"Set *summary* to include in the output the coverage summary per module. "
"*coverdir* specifies the directory into which the coverage result files will "
"be output. If ``None``, the results for each source file are placed in its "
"directory."
msgstr ""

#: ../../../library/trace.rst:178
msgid "A simple example demonstrating the use of the programming interface::"
msgstr ""

#: ../../../library/trace.rst:180
msgid ""
"import sys\n"
"import trace\n"
"\n"
"# create a Trace object, telling it what to ignore, and whether to\n"
"# do tracing or line-counting or both.\n"
"tracer = trace.Trace(\n"
"    ignoredirs=[sys.prefix, sys.exec_prefix],\n"
"    trace=0,\n"
"    count=1)\n"
"\n"
"# run the new command using the given tracer\n"
"tracer.run('main()')\n"
"\n"
"# make a report, placing output in /tmp\n"
"r = tracer.results()\n"
"r.write_results(show_missing=True, coverdir=\"/tmp\")"
msgstr ""
