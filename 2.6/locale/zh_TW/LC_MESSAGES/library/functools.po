# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher order functions and operations on callable "
"objects"
msgstr ""

#: ../../../library/functools.rst:14
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""

#: ../../../library/functools.rst:18
msgid "The :mod:`functools` module defines the following functions:"
msgstr ""

#: ../../../library/functools.rst:23
msgid ""
"This is the same function as :func:`reduce`.  It is made available in this "
"module to allow writing code more forward-compatible with Python 3."
msgstr ""

#: ../../../library/functools.rst:31
msgid ""
"Return a new :class:`partial` object which when called will behave like "
"*func* called with the positional arguments *args* and keyword arguments "
"*keywords*. If more arguments are supplied to the call, they are appended to "
"*args*. If additional keyword arguments are supplied, they extend and "
"override *keywords*. Roughly equivalent to::"
msgstr ""

#: ../../../library/functools.rst:37
msgid ""
"def partial(func, *args, **keywords):\n"
"    def newfunc(*fargs, **fkeywords):\n"
"        newkeywords = keywords.copy()\n"
"        newkeywords.update(fkeywords)\n"
"        return func(*(args + fargs), **newkeywords)\n"
"    newfunc.func = func\n"
"    newfunc.args = args\n"
"    newfunc.keywords = keywords\n"
"    return newfunc"
msgstr ""

#: ../../../library/functools.rst:47
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting "
"in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""

#: ../../../library/functools.rst:62
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants *WRAPPER_ASSIGNMENTS* (which "
"assigns to the wrapper function's *__name__*, *__module__* and *__doc__*, "
"the documentation string) and *WRAPPER_UPDATES* (which updates the wrapper "
"function's *__dict__*, i.e. the instance dictionary)."
msgstr ""

#: ../../../library/functools.rst:72
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""

#: ../../../library/functools.rst:81
msgid ""
"This is a convenience function for invoking ``partial(update_wrapper, "
"wrapped=wrapped, assigned=assigned, updated=updated)`` as a function "
"decorator when defining a wrapper function. For example:"
msgstr ""

#: ../../../library/functools.rst:106
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original :func:"
"`example` would have been lost."
msgstr ""

#: ../../../library/functools.rst:114
msgid ":class:`partial` Objects"
msgstr ""

#: ../../../library/functools.rst:116
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""

#: ../../../library/functools.rst:122
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be "
"forwarded to :attr:`func` with new arguments and keywords."
msgstr ""

#: ../../../library/functools.rst:128
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr ""

#: ../../../library/functools.rst:134
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object "
"is called."
msgstr ""

#: ../../../library/functools.rst:137
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are "
"callable, weak referencable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`__name__` and :attr:"
"`__doc__` attributes are not created automatically.  Also, :class:`partial` "
"objects defined in classes behave like static methods and do not transform "
"into bound methods during instance attribute look-up."
msgstr ""
