# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/textwrap.rst:3
msgid ":mod:`textwrap` --- Text wrapping and filling"
msgstr ""

#: ../../../library/textwrap.rst:13
msgid ""
"The :mod:`textwrap` module provides two convenience functions, :func:`wrap` "
"and :func:`fill`, as well as :class:`TextWrapper`, the class that does all "
"the work, and a utility function  :func:`dedent`.  If you're just wrapping "
"or filling one or two  text strings, the convenience functions should be "
"good enough; otherwise,  you should use an instance of :class:`TextWrapper` "
"for efficiency."
msgstr ""

#: ../../../library/textwrap.rst:22
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most "
"*width* characters long.  Returns a list of output lines, without final "
"newlines."
msgstr ""

#: ../../../library/textwrap.rst:25
msgid ""
"Optional keyword arguments correspond to the instance attributes of :class:"
"`TextWrapper`, documented below.  *width* defaults to ``70``."
msgstr ""

#: ../../../library/textwrap.rst:31
msgid ""
"Wraps the single paragraph in *text*, and returns a single string containing "
"the wrapped paragraph.  :func:`fill` is shorthand for  ::"
msgstr ""

#: ../../../library/textwrap.rst:34
msgid "\"\\n\".join(wrap(text, ...))"
msgstr ""

#: ../../../library/textwrap.rst:36
msgid ""
"In particular, :func:`fill` accepts exactly the same keyword arguments as :"
"func:`wrap`."
msgstr ""

#: ../../../library/textwrap.rst:39
msgid ""
"Both :func:`wrap` and :func:`fill` work by creating a :class:`TextWrapper` "
"instance and calling a single method on it.  That instance is not reused, so "
"for applications that wrap/fill many text strings, it will be more efficient "
"for you to create your own :class:`TextWrapper` object."
msgstr ""

#: ../../../library/textwrap.rst:44
msgid ""
"Text is preferably wrapped on whitespaces and right after the hyphens in "
"hyphenated words; only then will long words be broken if necessary, unless :"
"attr:`TextWrapper.break_long_words` is set to false."
msgstr ""

#: ../../../library/textwrap.rst:48
msgid ""
"An additional utility function, :func:`dedent`, is provided to remove "
"indentation from strings that have unwanted whitespace to the left of the "
"text."
msgstr ""

#: ../../../library/textwrap.rst:54
msgid "Remove any common leading whitespace from every line in *text*."
msgstr ""

#: ../../../library/textwrap.rst:56
msgid ""
"This can be used to make triple-quoted strings line up with the left edge of "
"the display, while still presenting them in the source code in indented form."
msgstr ""

#: ../../../library/textwrap.rst:59
msgid ""
"Note that tabs and spaces are both treated as whitespace, but they are not "
"equal: the lines ``\"  hello\"`` and ``\"\\thello\"`` are considered to have "
"no common leading whitespace.  (This behaviour is new in Python 2.5; older "
"versions of this module incorrectly expanded tabs before searching for "
"common leading whitespace.)"
msgstr ""

#: ../../../library/textwrap.rst:65
msgid "For example::"
msgstr ""

#: ../../../library/textwrap.rst:67
msgid ""
"def test():\n"
"    # end first line with \\ to avoid the empty line!\n"
"    s = '''\\\n"
"    hello\n"
"      world\n"
"    '''\n"
"    print repr(s)          # prints '    hello\\n      world\\n    '\n"
"    print repr(dedent(s))  # prints 'hello\\n  world\\n'"
msgstr ""

#: ../../../library/textwrap.rst:79
msgid ""
"The :class:`TextWrapper` constructor accepts a number of optional keyword "
"arguments.  Each argument corresponds to one instance attribute, so for "
"example ::"
msgstr ""

#: ../../../library/textwrap.rst:83
msgid "wrapper = TextWrapper(initial_indent=\"* \")"
msgstr ""

#: ../../../library/textwrap.rst:85
msgid "is the same as  ::"
msgstr ""

#: ../../../library/textwrap.rst:87
msgid ""
"wrapper = TextWrapper()\n"
"wrapper.initial_indent = \"* \""
msgstr ""

#: ../../../library/textwrap.rst:90
msgid ""
"You can re-use the same :class:`TextWrapper` object many times, and you can "
"change any of its options through direct assignment to instance attributes "
"between uses."
msgstr ""

#: ../../../library/textwrap.rst:94
msgid ""
"The :class:`TextWrapper` instance attributes (and keyword arguments to the "
"constructor) are as follows:"
msgstr ""

#: ../../../library/textwrap.rst:100
msgid ""
"(default: ``70``) The maximum length of wrapped lines.  As long as there are "
"no individual words in the input text longer than :attr:`width`, :class:"
"`TextWrapper` guarantees that no output line will be longer than :attr:"
"`width` characters."
msgstr ""

#: ../../../library/textwrap.rst:108
msgid ""
"(default: ``True``) If true, then all tab characters in *text* will be "
"expanded to spaces using the :meth:`expandtabs` method of *text*."
msgstr ""

#: ../../../library/textwrap.rst:114
msgid ""
"(default: ``True``) If true, each whitespace character (as defined by "
"``string.whitespace``) remaining after tab expansion will be replaced by a "
"single space."
msgstr ""

#: ../../../library/textwrap.rst:120
msgid ""
"If :attr:`expand_tabs` is false and :attr:`replace_whitespace` is true, each "
"tab character will be replaced by a single space, which is *not* the same as "
"tab expansion."
msgstr ""

#: ../../../library/textwrap.rst:127
msgid ""
"(default: ``True``) If true, whitespace that, after wrapping, happens to end "
"up at the beginning or end of a line is dropped (leading whitespace in the "
"first line is always preserved, though)."
msgstr ""

#: ../../../library/textwrap.rst:131
msgid "Whitespace was always dropped in earlier versions."
msgstr ""

#: ../../../library/textwrap.rst:137
msgid ""
"(default: ``''``) String that will be prepended to the first line of wrapped "
"output.  Counts towards the length of the first line."
msgstr ""

#: ../../../library/textwrap.rst:143
msgid ""
"(default: ``''``) String that will be prepended to all lines of wrapped "
"output except the first.  Counts towards the length of each line except the "
"first."
msgstr ""

#: ../../../library/textwrap.rst:150
msgid ""
"(default: ``False``) If true, :class:`TextWrapper` attempts to detect "
"sentence endings and ensure that sentences are always separated by exactly "
"two spaces.  This is generally desired for text in a monospaced font. "
"However, the sentence detection algorithm is imperfect: it assumes that a "
"sentence ending consists of a lowercase letter followed by one of ``'.'``, "
"``'!'``, or ``'?'``, possibly followed by one of ``'\"'`` or ``\"'\"``, "
"followed by a space.  One problem with this is algorithm is that it is "
"unable to detect the difference between \"Dr.\" in ::"
msgstr ""

#: ../../../library/textwrap.rst:159
msgid "[...] Dr. Frankenstein's monster [...]"
msgstr ""

#: ../../../library/textwrap.rst:161
msgid "and \"Spot.\" in ::"
msgstr ""

#: ../../../library/textwrap.rst:163
msgid "[...] See Spot. See Spot run [...]"
msgstr ""

#: ../../../library/textwrap.rst:165
msgid ":attr:`fix_sentence_endings` is false by default."
msgstr ""

#: ../../../library/textwrap.rst:167
msgid ""
"Since the sentence detection algorithm relies on ``string.lowercase`` for "
"the definition of \"lowercase letter,\" and a convention of using two spaces "
"after a period to separate sentences on the same line, it is specific to "
"English-language texts."
msgstr ""

#: ../../../library/textwrap.rst:175
msgid ""
"(default: ``True``) If true, then words longer than :attr:`width` will be "
"broken in order to ensure that no lines are longer than :attr:`width`.  If "
"it is false, long words will not be broken, and some lines may be longer "
"than :attr:`width`.  (Long words will be put on a line by themselves, in "
"order to minimize the amount by which :attr:`width` is exceeded.)"
msgstr ""

#: ../../../library/textwrap.rst:184
msgid ""
"(default: ``True``) If true, wrapping will occur preferably on whitespaces "
"and right after hyphens in compound words, as it is customary in English. If "
"false, only whitespaces will be considered as potentially good places for "
"line breaks, but you need to set :attr:`break_long_words` to false if you "
"want truly insecable words.  Default behaviour in previous versions was to "
"always allow breaking hyphenated words."
msgstr ""

#: ../../../library/textwrap.rst:194
msgid ""
":class:`TextWrapper` also provides two public methods, analogous to the "
"module-level convenience functions:"
msgstr ""

#: ../../../library/textwrap.rst:199
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most :"
"attr:`width` characters long.  All wrapping options are taken from instance "
"attributes of the :class:`TextWrapper` instance. Returns a list of output "
"lines, without final newlines."
msgstr ""

#: ../../../library/textwrap.rst:207
msgid ""
"Wraps the single paragraph in *text*, and returns a single string containing "
"the wrapped paragraph."
msgstr ""
