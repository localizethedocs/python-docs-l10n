# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/tarfile.rst:4
msgid ":mod:`tarfile` --- Read and write tar archive files"
msgstr ""

#: ../../../library/tarfile.rst:16
msgid ""
"The :mod:`tarfile` module makes it possible to read and write tar archives, "
"including those using gzip or bz2 compression. (:file:`.zip` files can be "
"read and written using the :mod:`zipfile` module.)"
msgstr ""

#: ../../../library/tarfile.rst:20
msgid "Some facts and figures:"
msgstr ""

#: ../../../library/tarfile.rst:22
msgid "reads and writes :mod:`gzip` and :mod:`bz2` compressed archives."
msgstr ""

#: ../../../library/tarfile.rst:24
msgid "read/write support for the POSIX.1-1988 (ustar) format."
msgstr ""

#: ../../../library/tarfile.rst:26
msgid ""
"read/write support for the GNU tar format including *longname* and "
"*longlink* extensions, read-only support for the *sparse* extension."
msgstr ""

#: ../../../library/tarfile.rst:29
msgid "read/write support for the POSIX.1-2001 (pax) format."
msgstr ""

#: ../../../library/tarfile.rst:33
msgid ""
"handles directories, regular files, hardlinks, symbolic links, fifos, "
"character devices and block devices and is able to acquire and restore file "
"information like timestamp, access permissions and owner."
msgstr ""

#: ../../../library/tarfile.rst:40
msgid ""
"Return a :class:`TarFile` object for the pathname *name*. For detailed "
"information on :class:`TarFile` objects and the keyword arguments that are "
"allowed, see :ref:`tarfile-objects`."
msgstr ""

#: ../../../library/tarfile.rst:44
msgid ""
"*mode* has to be a string of the form ``'filemode[:compression]'``, it "
"defaults to ``'r'``. Here is a full list of mode combinations:"
msgstr ""

#: ../../../library/tarfile.rst:48
msgid "mode"
msgstr ""

#: ../../../library/tarfile.rst:48
msgid "action"
msgstr ""

#: ../../../library/tarfile.rst:50
msgid "``'r' or 'r:*'``"
msgstr ""

#: ../../../library/tarfile.rst:50
msgid "Open for reading with transparent compression (recommended)."
msgstr ""

#: ../../../library/tarfile.rst:53
msgid "``'r:'``"
msgstr ""

#: ../../../library/tarfile.rst:53
msgid "Open for reading exclusively without compression."
msgstr ""

#: ../../../library/tarfile.rst:56
msgid "``'r:gz'``"
msgstr ""

#: ../../../library/tarfile.rst:56
msgid "Open for reading with gzip compression."
msgstr ""

#: ../../../library/tarfile.rst:58
msgid "``'r:bz2'``"
msgstr ""

#: ../../../library/tarfile.rst:58
msgid "Open for reading with bzip2 compression."
msgstr ""

#: ../../../library/tarfile.rst:60
msgid "``'a' or 'a:'``"
msgstr ""

#: ../../../library/tarfile.rst:60
msgid ""
"Open for appending with no compression. The file is created if it does not "
"exist."
msgstr ""

#: ../../../library/tarfile.rst:63
msgid "``'w' or 'w:'``"
msgstr ""

#: ../../../library/tarfile.rst:63
msgid "Open for uncompressed writing."
msgstr ""

#: ../../../library/tarfile.rst:65
msgid "``'w:gz'``"
msgstr ""

#: ../../../library/tarfile.rst:65
msgid "Open for gzip compressed writing."
msgstr ""

#: ../../../library/tarfile.rst:67
msgid "``'w:bz2'``"
msgstr ""

#: ../../../library/tarfile.rst:67
msgid "Open for bzip2 compressed writing."
msgstr ""

#: ../../../library/tarfile.rst:70
msgid ""
"Note that ``'a:gz'`` or ``'a:bz2'`` is not possible. If *mode* is not "
"suitable to open a certain (compressed) file for reading, :exc:`ReadError` "
"is raised. Use *mode* ``'r'`` to avoid this.  If a compression method is not "
"supported, :exc:`CompressionError` is raised."
msgstr ""

#: ../../../library/tarfile.rst:75
msgid ""
"If *fileobj* is specified, it is used as an alternative to a file object "
"opened for *name*. It is supposed to be at position 0."
msgstr ""

#: ../../../library/tarfile.rst:78
msgid ""
"For special purposes, there is a second format for *mode*: ``'filemode|"
"[compression]'``.  :func:`tarfile.open` will return a :class:`TarFile` "
"object that processes its data as a stream of blocks.  No random seeking "
"will be done on the file. If given, *fileobj* may be any object that has a :"
"meth:`read` or :meth:`write` method (depending on the *mode*). *bufsize* "
"specifies the blocksize and defaults to ``20 * 512`` bytes. Use this variant "
"in combination with e.g. ``sys.stdin``, a socket file object or a tape "
"device. However, such a :class:`TarFile` object is limited in that it does "
"not allow to be accessed randomly, see :ref:`tar-examples`.  The currently "
"possible modes:"
msgstr ""

#: ../../../library/tarfile.rst:90
msgid "Mode"
msgstr ""

#: ../../../library/tarfile.rst:90
msgid "Action"
msgstr ""

#: ../../../library/tarfile.rst:92
msgid "``'r|*'``"
msgstr ""

#: ../../../library/tarfile.rst:92
msgid "Open a *stream* of tar blocks for reading with transparent compression."
msgstr ""

#: ../../../library/tarfile.rst:95
msgid "``'r|'``"
msgstr ""

#: ../../../library/tarfile.rst:95
msgid "Open a *stream* of uncompressed tar blocks for reading."
msgstr ""

#: ../../../library/tarfile.rst:98
msgid "``'r|gz'``"
msgstr ""

#: ../../../library/tarfile.rst:98
msgid "Open a gzip compressed *stream* for reading."
msgstr ""

#: ../../../library/tarfile.rst:101
msgid "``'r|bz2'``"
msgstr ""

#: ../../../library/tarfile.rst:101
msgid "Open a bzip2 compressed *stream* for reading."
msgstr ""

#: ../../../library/tarfile.rst:104
msgid "``'w|'``"
msgstr ""

#: ../../../library/tarfile.rst:104
msgid "Open an uncompressed *stream* for writing."
msgstr ""

#: ../../../library/tarfile.rst:106
msgid "``'w|gz'``"
msgstr ""

#: ../../../library/tarfile.rst:106
msgid "Open an gzip compressed *stream* for writing."
msgstr ""

#: ../../../library/tarfile.rst:109
msgid "``'w|bz2'``"
msgstr ""

#: ../../../library/tarfile.rst:109
msgid "Open an bzip2 compressed *stream* for writing."
msgstr ""

#: ../../../library/tarfile.rst:116
msgid ""
"Class for reading and writing tar archives. Do not use this class directly, "
"better use :func:`tarfile.open` instead. See :ref:`tarfile-objects`."
msgstr ""

#: ../../../library/tarfile.rst:122
msgid ""
"Return :const:`True` if *name* is a tar archive file, that the :mod:"
"`tarfile` module can read."
msgstr ""

#: ../../../library/tarfile.rst:128
msgid ""
"Class for limited access to tar archives with a :mod:`zipfile`\\ -like "
"interface. Please consult the documentation of the :mod:`zipfile` module for "
"more details. *compression* must be one of the following constants:"
msgstr ""

#: ../../../library/tarfile.rst:135
msgid "Constant for an uncompressed tar archive."
msgstr ""

#: ../../../library/tarfile.rst:140
msgid "Constant for a :mod:`gzip` compressed tar archive."
msgstr ""

#: ../../../library/tarfile.rst:143
msgid ""
"The :class:`TarFileCompat` class has been deprecated for removal in Python "
"3.0."
msgstr ""

#: ../../../library/tarfile.rst:149
msgid "Base class for all :mod:`tarfile` exceptions."
msgstr ""

#: ../../../library/tarfile.rst:154
msgid ""
"Is raised when a tar archive is opened, that either cannot be handled by "
"the :mod:`tarfile` module or is somehow invalid."
msgstr ""

#: ../../../library/tarfile.rst:160
msgid ""
"Is raised when a compression method is not supported or when the data cannot "
"be decoded properly."
msgstr ""

#: ../../../library/tarfile.rst:166
msgid ""
"Is raised for the limitations that are typical for stream-like :class:"
"`TarFile` objects."
msgstr ""

#: ../../../library/tarfile.rst:172
msgid ""
"Is raised for *non-fatal* errors when using :meth:`TarFile.extract`, but "
"only if :attr:`TarFile.errorlevel`\\ ``== 2``."
msgstr ""

#: ../../../library/tarfile.rst:178
msgid "Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid."
msgstr ""

#: ../../../library/tarfile.rst:183
msgid ""
"Each of the following constants defines a tar archive format that the :mod:"
"`tarfile` module is able to create. See section :ref:`tar-formats` for "
"details."
msgstr ""

#: ../../../library/tarfile.rst:190
msgid "POSIX.1-1988 (ustar) format."
msgstr ""

#: ../../../library/tarfile.rst:195
msgid "GNU tar format."
msgstr ""

#: ../../../library/tarfile.rst:200
msgid "POSIX.1-2001 (pax) format."
msgstr ""

#: ../../../library/tarfile.rst:205
msgid ""
"The default format for creating archives. This is currently :const:"
"`GNU_FORMAT`."
msgstr ""

#: ../../../library/tarfile.rst:208
msgid "The following variables are available on module level:"
msgstr ""

#: ../../../library/tarfile.rst:213
msgid ""
"The default character encoding i.e. the value from either :func:`sys."
"getfilesystemencoding` or :func:`sys.getdefaultencoding`."
msgstr ""

#: ../../../library/tarfile.rst:220
msgid "Module :mod:`zipfile`"
msgstr ""

#: ../../../library/tarfile.rst:220
msgid "Documentation of the :mod:`zipfile` standard module."
msgstr ""

#: ../../../library/tarfile.rst:222
msgid ""
"`GNU tar manual, Basic Tar Format <http://www.gnu.org/software/tar/manual/"
"html_node/Standard.html>`_"
msgstr ""

#: ../../../library/tarfile.rst:223
msgid "Documentation for tar archive files, including GNU tar extensions."
msgstr ""

#: ../../../library/tarfile.rst:229
msgid "TarFile Objects"
msgstr ""

#: ../../../library/tarfile.rst:231
msgid ""
"The :class:`TarFile` object provides an interface to a tar archive. A tar "
"archive is a sequence of blocks. An archive member (a stored file) is made "
"up of a header block followed by data blocks. It is possible to store a file "
"in a tar archive several times. Each archive member is represented by a :"
"class:`TarInfo` object, see :ref:`tarinfo-objects` for details."
msgstr ""

#: ../../../library/tarfile.rst:240
msgid ""
"All following arguments are optional and can be accessed as instance "
"attributes as well."
msgstr ""

#: ../../../library/tarfile.rst:243
msgid ""
"*name* is the pathname of the archive. It can be omitted if *fileobj* is "
"given. In this case, the file object's :attr:`name` attribute is used if it "
"exists."
msgstr ""

#: ../../../library/tarfile.rst:246
msgid ""
"*mode* is either ``'r'`` to read from an existing archive, ``'a'`` to append "
"data to an existing file or ``'w'`` to create a new file overwriting an "
"existing one."
msgstr ""

#: ../../../library/tarfile.rst:250
msgid ""
"If *fileobj* is given, it is used for reading or writing data. If it can be "
"determined, *mode* is overridden by *fileobj*'s mode. *fileobj* will be used "
"from position 0."
msgstr ""

#: ../../../library/tarfile.rst:256
msgid "*fileobj* is not closed, when :class:`TarFile` is closed."
msgstr ""

#: ../../../library/tarfile.rst:258
msgid ""
"*format* controls the archive format. It must be one of the constants :const:"
"`USTAR_FORMAT`, :const:`GNU_FORMAT` or :const:`PAX_FORMAT` that are defined "
"at module level."
msgstr ""

#: ../../../library/tarfile.rst:264
msgid ""
"The *tarinfo* argument can be used to replace the default :class:`TarInfo` "
"class with a different one."
msgstr ""

#: ../../../library/tarfile.rst:269
msgid ""
"If *dereference* is :const:`False`, add symbolic and hard links to the "
"archive. If it is :const:`True`, add the content of the target files to the "
"archive. This has no effect on systems that do not support symbolic links."
msgstr ""

#: ../../../library/tarfile.rst:273
msgid ""
"If *ignore_zeros* is :const:`False`, treat an empty block as the end of the "
"archive. If it is :const:`True`, skip empty (and invalid) blocks and try to "
"get as many members as possible. This is only useful for reading "
"concatenated or damaged archives."
msgstr ""

#: ../../../library/tarfile.rst:277
msgid ""
"*debug* can be set from ``0`` (no debug messages) up to ``3`` (all debug "
"messages). The messages are written to ``sys.stderr``."
msgstr ""

#: ../../../library/tarfile.rst:280
msgid ""
"If *errorlevel* is ``0``, all errors are ignored when using :meth:`TarFile."
"extract`. Nevertheless, they appear as error messages in the debug output, "
"when debugging is enabled.  If ``1``, all *fatal* errors are raised as :exc:"
"`OSError` or :exc:`IOError` exceptions. If ``2``, all *non-fatal* errors are "
"raised as :exc:`TarError` exceptions as well."
msgstr ""

#: ../../../library/tarfile.rst:286
msgid ""
"The *encoding* and *errors* arguments control the way strings are converted "
"to unicode objects and vice versa. The default settings will work for most "
"users. See section :ref:`tar-unicode` for in-depth information."
msgstr ""

#: ../../../library/tarfile.rst:292
msgid ""
"The *pax_headers* argument is an optional dictionary of unicode strings "
"which will be added as a pax global header if *format* is :const:"
"`PAX_FORMAT`."
msgstr ""

#: ../../../library/tarfile.rst:300
msgid ""
"Alternative constructor. The :func:`tarfile.open` function is actually a "
"shortcut to this classmethod."
msgstr ""

#: ../../../library/tarfile.rst:306
msgid ""
"Return a :class:`TarInfo` object for member *name*. If *name* can not be "
"found in the archive, :exc:`KeyError` is raised."
msgstr ""

#: ../../../library/tarfile.rst:311
msgid ""
"If a member occurs more than once in the archive, its last occurrence is "
"assumed to be the most up-to-date version."
msgstr ""

#: ../../../library/tarfile.rst:317
msgid ""
"Return the members of the archive as a list of :class:`TarInfo` objects. The "
"list has the same order as the members in the archive."
msgstr ""

#: ../../../library/tarfile.rst:323
msgid ""
"Return the members as a list of their names. It has the same order as the "
"list returned by :meth:`getmembers`."
msgstr ""

#: ../../../library/tarfile.rst:329
msgid ""
"Print a table of contents to ``sys.stdout``. If *verbose* is :const:`False`, "
"only the names of the members are printed. If it is :const:`True`, output "
"similar to that of :program:`ls -l` is produced."
msgstr ""

#: ../../../library/tarfile.rst:336
msgid ""
"Return the next member of the archive as a :class:`TarInfo` object, when :"
"class:`TarFile` is opened for reading. Return :const:`None` if there is no "
"more available."
msgstr ""

#: ../../../library/tarfile.rst:343
msgid ""
"Extract all members from the archive to the current working directory or "
"directory *path*. If optional *members* is given, it must be a subset of the "
"list returned by :meth:`getmembers`. Directory information like owner, "
"modification time and permissions are set after all members have been "
"extracted. This is done to work around two problems: A directory's "
"modification time is reset each time a file is created in it. And, if a "
"directory's permissions do not allow writing, extracting files to it will "
"fail."
msgstr ""

#: ../../../library/tarfile.rst:353
msgid ""
"Never extract archives from untrusted sources without prior inspection. It "
"is possible that files are created outside of *path*, e.g. members that have "
"absolute filenames starting with ``\"/\"`` or filenames with two dots ``\".."
"\"``."
msgstr ""

#: ../../../library/tarfile.rst:363
msgid ""
"Extract a member from the archive to the current working directory, using "
"its full name. Its file information is extracted as accurately as possible. "
"*member* may be a filename or a :class:`TarInfo` object. You can specify a "
"different directory using *path*."
msgstr ""

#: ../../../library/tarfile.rst:370
msgid ""
"The :meth:`extract` method does not take care of several extraction issues. "
"In most cases you should consider using the :meth:`extractall` method."
msgstr ""

#: ../../../library/tarfile.rst:375
msgid "See the warning for :meth:`extractall`."
msgstr ""

#: ../../../library/tarfile.rst:380
msgid ""
"Extract a member from the archive as a file object. *member* may be a "
"filename or a :class:`TarInfo` object. If *member* is a regular file, a file-"
"like object is returned. If *member* is a link, a file-like object is "
"constructed from the link's target. If *member* is none of the above, :const:"
"`None` is returned."
msgstr ""

#: ../../../library/tarfile.rst:387
msgid ""
"The file-like object is read-only.  It provides the methods :meth:`read`, :"
"meth:`readline`, :meth:`readlines`, :meth:`seek`, :meth:`tell`, and :meth:"
"`close`, and also supports iteration over its lines."
msgstr ""

#: ../../../library/tarfile.rst:394
msgid ""
"Add the file *name* to the archive. *name* may be any type of file "
"(directory, fifo, symbolic link, etc.). If given, *arcname* specifies an "
"alternative name for the file in the archive. Directories are added "
"recursively by default. This can be avoided by setting *recursive* to :const:"
"`False`. If *exclude* is given it must be a function that takes one filename "
"argument and returns a boolean value. Depending on this value the respective "
"file is either excluded (:const:`True`) or added (:const:`False`)."
msgstr ""

#: ../../../library/tarfile.rst:402
msgid "Added the *exclude* parameter."
msgstr ""

#: ../../../library/tarfile.rst:408
msgid ""
"Add the :class:`TarInfo` object *tarinfo* to the archive. If *fileobj* is "
"given, ``tarinfo.size`` bytes are read from it and added to the archive.  "
"You can create :class:`TarInfo` objects using :meth:`gettarinfo`."
msgstr ""

#: ../../../library/tarfile.rst:414
msgid ""
"On Windows platforms, *fileobj* should always be opened with mode ``'rb'`` "
"to avoid irritation about the file size."
msgstr ""

#: ../../../library/tarfile.rst:420
msgid ""
"Create a :class:`TarInfo` object for either the file *name* or the file "
"object *fileobj* (using :func:`os.fstat` on its file descriptor).  You can "
"modify some of the :class:`TarInfo`'s attributes before you add it using :"
"meth:`addfile`. If given, *arcname* specifies an alternative name for the "
"file in the archive."
msgstr ""

#: ../../../library/tarfile.rst:428
msgid ""
"Close the :class:`TarFile`. In write mode, two finishing zero blocks are "
"appended to the archive."
msgstr ""

#: ../../../library/tarfile.rst:434
msgid ""
"Setting this to :const:`True` is equivalent to setting the :attr:`format` "
"attribute to :const:`USTAR_FORMAT`, :const:`False` is equivalent to :const:"
"`GNU_FORMAT`."
msgstr ""

#: ../../../library/tarfile.rst:438
msgid "*posix* defaults to :const:`False`."
msgstr ""

#: ../../../library/tarfile.rst:441
msgid "Use the :attr:`format` attribute instead."
msgstr ""

#: ../../../library/tarfile.rst:447
msgid "A dictionary containing key-value pairs of pax global headers."
msgstr ""

#: ../../../library/tarfile.rst:455
msgid "TarInfo Objects"
msgstr ""

#: ../../../library/tarfile.rst:457
msgid ""
"A :class:`TarInfo` object represents one member in a :class:`TarFile`. Aside "
"from storing all required attributes of a file (like file type, size, time, "
"permissions, owner etc.), it provides some useful methods to determine its "
"type. It does *not* contain the file's data itself."
msgstr ""

#: ../../../library/tarfile.rst:462
msgid ""
":class:`TarInfo` objects are returned by :class:`TarFile`'s methods :meth:"
"`getmember`, :meth:`getmembers` and :meth:`gettarinfo`."
msgstr ""

#: ../../../library/tarfile.rst:468
msgid "Create a :class:`TarInfo` object."
msgstr ""

#: ../../../library/tarfile.rst:473
msgid "Create and return a :class:`TarInfo` object from string buffer *buf*."
msgstr ""

#: ../../../library/tarfile.rst:475
msgid "Raises :exc:`HeaderError` if the buffer is invalid.."
msgstr ""

#: ../../../library/tarfile.rst:481
msgid ""
"Read the next member from the :class:`TarFile` object *tarfile* and return "
"it as a :class:`TarInfo` object."
msgstr ""

#: ../../../library/tarfile.rst:489
msgid ""
"Create a string buffer from a :class:`TarInfo` object. For information on "
"the arguments see the constructor of the :class:`TarFile` class."
msgstr ""

#: ../../../library/tarfile.rst:492
msgid "The arguments were added."
msgstr ""

#: ../../../library/tarfile.rst:495
msgid "A ``TarInfo`` object has the following public data attributes:"
msgstr ""

#: ../../../library/tarfile.rst:500
msgid "Name of the archive member."
msgstr ""

#: ../../../library/tarfile.rst:505
msgid "Size in bytes."
msgstr ""

#: ../../../library/tarfile.rst:510
msgid "Time of last modification."
msgstr ""

#: ../../../library/tarfile.rst:515
msgid "Permission bits."
msgstr ""

#: ../../../library/tarfile.rst:520
msgid ""
"File type.  *type* is usually one of these constants: :const:`REGTYPE`, :"
"const:`AREGTYPE`, :const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, :"
"const:`FIFOTYPE`, :const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, :"
"const:`GNUTYPE_SPARSE`.  To determine the type of a :class:`TarInfo` object "
"more conveniently, use the ``is_*()`` methods below."
msgstr ""

#: ../../../library/tarfile.rst:529
msgid ""
"Name of the target file name, which is only present in :class:`TarInfo` "
"objects of type :const:`LNKTYPE` and :const:`SYMTYPE`."
msgstr ""

#: ../../../library/tarfile.rst:535
msgid "User ID of the user who originally stored this member."
msgstr ""

#: ../../../library/tarfile.rst:540
msgid "Group ID of the user who originally stored this member."
msgstr ""

#: ../../../library/tarfile.rst:545
msgid "User name."
msgstr ""

#: ../../../library/tarfile.rst:550
msgid "Group name."
msgstr ""

#: ../../../library/tarfile.rst:555
msgid ""
"A dictionary containing key-value pairs of an associated pax extended header."
msgstr ""

#: ../../../library/tarfile.rst:559
msgid "A :class:`TarInfo` object also provides some convenient query methods:"
msgstr ""

#: ../../../library/tarfile.rst:564
msgid "Return :const:`True` if the :class:`Tarinfo` object is a regular file."
msgstr ""

#: ../../../library/tarfile.rst:569
msgid "Same as :meth:`isfile`."
msgstr ""

#: ../../../library/tarfile.rst:574
msgid "Return :const:`True` if it is a directory."
msgstr ""

#: ../../../library/tarfile.rst:579
msgid "Return :const:`True` if it is a symbolic link."
msgstr ""

#: ../../../library/tarfile.rst:584
msgid "Return :const:`True` if it is a hard link."
msgstr ""

#: ../../../library/tarfile.rst:589
msgid "Return :const:`True` if it is a character device."
msgstr ""

#: ../../../library/tarfile.rst:594
msgid "Return :const:`True` if it is a block device."
msgstr ""

#: ../../../library/tarfile.rst:599
msgid "Return :const:`True` if it is a FIFO."
msgstr ""

#: ../../../library/tarfile.rst:604
msgid ""
"Return :const:`True` if it is one of character device, block device or FIFO."
msgstr ""

#: ../../../library/tarfile.rst:610
msgid "Examples"
msgstr ""

#: ../../../library/tarfile.rst:612
msgid "How to extract an entire tar archive to the current working directory::"
msgstr ""

#: ../../../library/tarfile.rst:619
msgid ""
"How to extract a subset of a tar archive with :meth:`TarFile.extractall` "
"using a generator function instead of a list::"
msgstr ""

#: ../../../library/tarfile.rst:634
msgid "How to create an uncompressed tar archive from a list of filenames::"
msgstr ""

#: ../../../library/tarfile.rst:642
msgid ""
"How to read a gzip compressed tar archive and display some member "
"information::"
msgstr ""

#: ../../../library/tarfile.rst:660
msgid "Supported tar formats"
msgstr ""

#: ../../../library/tarfile.rst:662
msgid ""
"There are three tar formats that can be created with the :mod:`tarfile` "
"module:"
msgstr ""

#: ../../../library/tarfile.rst:664
msgid ""
"The POSIX.1-1988 ustar format (:const:`USTAR_FORMAT`). It supports filenames "
"up to a length of at best 256 characters and linknames up to 100 characters. "
"The maximum file size is 8 gigabytes. This is an old and limited but widely "
"supported format."
msgstr ""

#: ../../../library/tarfile.rst:669
msgid ""
"The GNU tar format (:const:`GNU_FORMAT`). It supports long filenames and "
"linknames, files bigger than 8 gigabytes and sparse files. It is the de "
"facto standard on GNU/Linux systems. :mod:`tarfile` fully supports the GNU "
"tar extensions for long names, sparse file support is read-only."
msgstr ""

#: ../../../library/tarfile.rst:674
msgid ""
"The POSIX.1-2001 pax format (:const:`PAX_FORMAT`). It is the most flexible "
"format with virtually no limits. It supports long filenames and linknames, "
"large files and stores pathnames in a portable way. However, not all tar "
"implementations today are able to handle pax archives properly."
msgstr ""

#: ../../../library/tarfile.rst:679
msgid ""
"The *pax* format is an extension to the existing *ustar* format. It uses "
"extra headers for information that cannot be stored otherwise. There are two "
"flavours of pax headers: Extended headers only affect the subsequent file "
"header, global headers are valid for the complete archive and affect all "
"following files. All the data in a pax header is encoded in *UTF-8* for "
"portability reasons."
msgstr ""

#: ../../../library/tarfile.rst:685
msgid ""
"There are some more variants of the tar format which can be read, but not "
"created:"
msgstr ""

#: ../../../library/tarfile.rst:688
msgid ""
"The ancient V7 format. This is the first tar format from Unix Seventh "
"Edition, storing only regular files and directories. Names must not be "
"longer than 100 characters, there is no user/group name information. Some "
"archives have miscalculated header checksums in case of fields with non-"
"ASCII characters."
msgstr ""

#: ../../../library/tarfile.rst:693
msgid ""
"The SunOS tar extended format. This format is a variant of the POSIX.1-2001 "
"pax format, but is not compatible."
msgstr ""

#: ../../../library/tarfile.rst:699
msgid "Unicode issues"
msgstr ""

#: ../../../library/tarfile.rst:701
msgid ""
"The tar format was originally conceived to make backups on tape drives with "
"the main focus on preserving file system information. Nowadays tar archives "
"are commonly used for file distribution and exchanging archives over "
"networks. One problem of the original format (that all other formats are "
"merely variants of) is that there is no concept of supporting different "
"character encodings. For example, an ordinary tar archive created on a "
"*UTF-8* system cannot be read correctly on a *Latin-1* system if it contains "
"non-ASCII characters. Names (i.e. filenames, linknames, user/group names) "
"containing these characters will appear damaged.  Unfortunately, there is no "
"way to autodetect the encoding of an archive."
msgstr ""

#: ../../../library/tarfile.rst:712
msgid ""
"The pax format was designed to solve this problem. It stores non-ASCII names "
"using the universal character encoding *UTF-8*. When a pax archive is read, "
"these *UTF-8* names are converted to the encoding of the local file system."
msgstr ""

#: ../../../library/tarfile.rst:716
msgid ""
"The details of unicode conversion are controlled by the *encoding* and "
"*errors* keyword arguments of the :class:`TarFile` class."
msgstr ""

#: ../../../library/tarfile.rst:719
msgid ""
"The default value for *encoding* is the local character encoding. It is "
"deduced from :func:`sys.getfilesystemencoding` and :func:`sys."
"getdefaultencoding`. In read mode, *encoding* is used exclusively to convert "
"unicode names from a pax archive to strings in the local character encoding. "
"In write mode, the use of *encoding* depends on the chosen archive format. "
"In case of :const:`PAX_FORMAT`, input names that contain non-ASCII "
"characters need to be decoded before being stored as *UTF-8* strings. The "
"other formats do not make use of *encoding* unless unicode objects are used "
"as input names. These are converted to 8-bit character strings before they "
"are added to the archive."
msgstr ""

#: ../../../library/tarfile.rst:729
msgid ""
"The *errors* argument defines how characters are treated that cannot be "
"converted to or from *encoding*. Possible values are listed in section :ref:"
"`codec-base-classes`. In read mode, there is an additional scheme "
"``'utf-8'`` which means that bad characters are replaced by their *UTF-8* "
"representation. This is the default scheme. In write mode the default value "
"for *errors* is ``'strict'`` to ensure that name information is not altered "
"unnoticed."
msgstr ""
