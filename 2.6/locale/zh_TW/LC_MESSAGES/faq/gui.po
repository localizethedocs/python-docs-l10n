# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr ""

#: ../../../faq/gui.rst:7
msgid "Contents"
msgstr ""

#: ../../../faq/gui.rst:10
msgid "General GUI Questions"
msgstr ""

#: ../../../faq/gui.rst:13
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr ""

#: ../../../faq/gui.rst:15
msgid "Depending on what platform(s) you are aiming at, there are several."
msgstr ""

#: ../../../faq/gui.rst:20
msgid "Tkinter"
msgstr ""

#: ../../../faq/gui.rst:22
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk "
"widget set, called Tkinter.  This is probably the easiest to install and "
"use. For more info about Tk, including pointers to the source, see the Tcl/"
"Tk home page at http://www.tcl.tk.  Tcl/Tk is fully portable to the MacOS, "
"Windows, and Unix platforms."
msgstr ""

#: ../../../faq/gui.rst:29
msgid "wxWidgets"
msgstr ""

#: ../../../faq/gui.rst:31
msgid ""
"wxWidgets is a GUI class library written in C++ that's a portable interface "
"to various platform-specific libraries, and that has a Python interface "
"called `wxPython <http://www.wxpython.org>`__."
msgstr ""

#: ../../../faq/gui.rst:35
msgid ""
"wxWidgets preserves the look and feel of the underlying graphics toolkit, "
"and has a large set of widgets and collection of GDI classes.  See `the "
"wxWidgets page <http://www.wxwidgets.org>`_ for more details."
msgstr ""

#: ../../../faq/gui.rst:40
msgid ""
"wxWidgets supports Windows and MacOS; on Unix variants, it supports both "
"GTk+ and Motif toolkits."
msgstr ""

#: ../../../faq/gui.rst:44
msgid "Qt"
msgstr ""

#: ../../../faq/gui.rst:46
msgid ""
"There are bindings available for the Qt toolkit (`PyQt <http://www."
"riverbankcomputing.co.uk/software/pyqt/>`_) and for KDE (`PyKDE <http://www."
"riverbankcomputing.co.uk/software/pykde/intro>`__).  If you're writing open "
"source software, you don't need to pay for PyQt, but if you want to write "
"proprietary applications, you must buy a PyQt license from `Riverbank "
"Computing <http://www.riverbankcomputing.co.uk>`_ and (up to Qt 4.4; Qt 4.5 "
"upwards is licensed under the LGPL license) a Qt license from `Trolltech "
"<http://www.trolltech.com>`_."
msgstr ""

#: ../../../faq/gui.rst:55
msgid "Gtk+"
msgstr ""

#: ../../../faq/gui.rst:57
msgid ""
"PyGtk bindings for the `Gtk+ toolkit <http://www.gtk.org>`_ have been "
"implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""

#: ../../../faq/gui.rst:61
msgid "FLTK"
msgstr ""

#: ../../../faq/gui.rst:63
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the "
"PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""

#: ../../../faq/gui.rst:69
msgid "FOX"
msgstr ""

#: ../../../faq/gui.rst:71
msgid ""
"A wrapper for `the FOX toolkit <http://www.fox-toolkit.org/>`_ called `FXpy "
"<http://fxpy.sourceforge.net/>`_ is available.  FOX supports both Unix "
"variants and Windows."
msgstr ""

#: ../../../faq/gui.rst:77
msgid "OpenGL"
msgstr ""

#: ../../../faq/gui.rst:79
msgid "For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr ""

#: ../../../faq/gui.rst:83
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr ""

#: ../../../faq/gui.rst:85
msgid ""
"`The Mac port <http://python.org/download/mac>`_ by Jack Jansen has a rich "
"and ever-growing set of modules that support the native Mac toolbox calls.  "
"The port supports MacOS X's Carbon libraries."
msgstr ""

#: ../../../faq/gui.rst:89
msgid ""
"By installing the `PyObjc Objective-C bridge <http://pyobjc.sourceforge."
"net>`_, Python programs can use MacOS X's Cocoa libraries. See the "
"documentation that comes with the Mac port."
msgstr ""

#: ../../../faq/gui.rst:93
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""

#: ../../../faq/gui.rst:99
msgid "Tkinter questions"
msgstr ""

#: ../../../faq/gui.rst:102
msgid "How do I freeze Tkinter applications?"
msgstr ""

#: ../../../faq/gui.rst:104
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""

#: ../../../faq/gui.rst:108
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and :envvar:"
"`TK_LIBRARY` environment variables."
msgstr ""

#: ../../../faq/gui.rst:112
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library "
"have to be integrated into the application as well. One tool supporting that "
"is SAM (stand-alone modules), which is part of the Tix distribution (http://"
"tix.sourceforge.net/)."
msgstr ""

#: ../../../faq/gui.rst:117
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to :cfunc:"
"`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and link "
"with libtclsam and libtksam (you might include the Tix libraries as well)."
msgstr ""

#: ../../../faq/gui.rst:124
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr ""

#: ../../../faq/gui.rst:126
msgid ""
"Yes, and you don't even need threads!  But you'll have to restructure your I/"
"O code a bit.  Tk has the equivalent of Xt's :cfunc:`XtAddInput()` call, "
"which allows you to register a callback function which will be called from "
"the Tk mainloop when I/O is possible on a file descriptor.  Here's what you "
"need::"
msgstr ""

#: ../../../faq/gui.rst:131
msgid ""
"from Tkinter import tkinter\n"
"tkinter.createfilehandler(file, mask, callback)"
msgstr ""

#: ../../../faq/gui.rst:134
msgid ""
"The file may be a Python file or socket object (actually, anything with a "
"fileno() method), or an integer file descriptor.  The mask is one of the "
"constants tkinter.READABLE or tkinter.WRITABLE.  The callback is called as "
"follows::"
msgstr ""

#: ../../../faq/gui.rst:139
msgid "callback(file, mask)"
msgstr ""

#: ../../../faq/gui.rst:141
msgid "You must unregister the callback when you're done, using ::"
msgstr ""

#: ../../../faq/gui.rst:143
msgid "tkinter.deletefilehandler(file)"
msgstr ""

#: ../../../faq/gui.rst:145
msgid ""
"Note: since you don't know *how many bytes* are available for reading, you "
"can't use the Python file object's read or readline methods, since these "
"will insist on reading a predefined number of bytes.  For sockets, the :meth:"
"`recv` or :meth:`recvfrom` methods will work fine; for other files, use ``os."
"read(file.fileno(), maxbytecount)``."
msgstr ""

#: ../../../faq/gui.rst:153
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr ""

#: ../../../faq/gui.rst:155
msgid ""
"An often-heard complaint is that event handlers bound to events with the :"
"meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""

#: ../../../faq/gui.rst:158
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
