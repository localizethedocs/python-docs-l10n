# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/turtle.rst:3
msgid ":mod:`turtle` --- Turtle graphics for Tk"
msgstr ""

#: ../../../library/turtle.rst:15
msgid "Introduction"
msgstr ""

#: ../../../library/turtle.rst:17
msgid ""
"Turtle graphics is a popular way for introducing programming to kids.  It "
"was part of the original Logo programming language developed by Wally "
"Feurzig and Seymour Papert in 1966."
msgstr ""

#: ../../../library/turtle.rst:21
msgid ""
"Imagine a robotic turtle starting at (0, 0) in the x-y plane.  Give it the "
"command ``turtle.forward(15)``, and it moves (on-screen!) 15 pixels in the "
"direction it is facing, drawing a line as it moves.  Give it the command "
"``turtle.left(25)``, and it rotates in-place 25 degrees clockwise."
msgstr ""

#: ../../../library/turtle.rst:26
msgid ""
"By combining together these and similar commands, intricate shapes and "
"pictures can easily be drawn."
msgstr ""

#: ../../../library/turtle.rst:29
msgid ""
"The :mod:`turtle` module is an extended reimplementation of the same-named "
"module from the Python standard distribution up to version Python 2.5."
msgstr ""

#: ../../../library/turtle.rst:32
msgid ""
"It tries to keep the merits of the old turtle module and to be (nearly) 100% "
"compatible with it.  This means in the first place to enable the learning "
"programmer to use all the commands, classes and methods interactively when "
"using the module from within IDLE run with the ``-n`` switch."
msgstr ""

#: ../../../library/turtle.rst:37
msgid ""
"The turtle module provides turtle graphics primitives, in both object-"
"oriented and procedure-oriented ways.  Because it uses :mod:`Tkinter` for "
"the underlying graphics, it needs a version of Python installed with Tk "
"support."
msgstr ""

#: ../../../library/turtle.rst:41
msgid "The object-oriented interface uses essentially two+two classes:"
msgstr ""

#: ../../../library/turtle.rst:43
msgid ""
"The :class:`TurtleScreen` class defines graphics windows as a playground for "
"the drawing turtles.  Its constructor needs a :class:`Tkinter.Canvas` or a :"
"class:`ScrolledCanvas` as argument.  It should be used when :mod:`turtle` is "
"used as part of some application."
msgstr ""

#: ../../../library/turtle.rst:48
msgid ""
"The function :func:`Screen` returns a singleton object of a :class:"
"`TurtleScreen` subclass. This function should be used when :mod:`turtle` is "
"used as a standalone tool for doing graphics. As a singleton object, "
"inheriting from its class is not possible."
msgstr ""

#: ../../../library/turtle.rst:53
msgid ""
"All methods of TurtleScreen/Screen also exist as functions, i.e. as part of "
"the procedure-oriented interface."
msgstr ""

#: ../../../library/turtle.rst:56
msgid ""
":class:`RawTurtle` (alias: :class:`RawPen`) defines Turtle objects which "
"draw on a :class:`TurtleScreen`.  Its constructor needs a Canvas, "
"ScrolledCanvas or TurtleScreen as argument, so the RawTurtle objects know "
"where to draw."
msgstr ""

#: ../../../library/turtle.rst:60
msgid ""
"Derived from RawTurtle is the subclass :class:`Turtle` (alias: :class:"
"`Pen`), which draws on \"the\" :class:`Screen` - instance which is "
"automatically created, if not already present."
msgstr ""

#: ../../../library/turtle.rst:64
msgid ""
"All methods of RawTurtle/Turtle also exist as functions, i.e. part of the "
"procedure-oriented interface."
msgstr ""

#: ../../../library/turtle.rst:67
msgid ""
"The procedural interface provides functions which are derived from the "
"methods of the classes :class:`Screen` and :class:`Turtle`.  They have the "
"same names as the corresponding methods.  A screen object is automatically "
"created whenever a function derived from a Screen method is called.  An "
"(unnamed) turtle object is automatically created whenever any of the "
"functions derived from a Turtle method is called."
msgstr ""

#: ../../../library/turtle.rst:74
msgid ""
"To use multiple turtles an a screen one has to use the object-oriented "
"interface."
msgstr ""

#: ../../../library/turtle.rst:77
msgid ""
"In the following documentation the argument list for functions is given. "
"Methods, of course, have the additional first argument *self* which is "
"omitted here."
msgstr ""

#: ../../../library/turtle.rst:83
msgid "Overview over available Turtle and Screen methods"
msgstr ""

#: ../../../library/turtle.rst:86
msgid "Turtle methods"
msgstr ""

#: ../../../library/turtle.rst:117 ../../../library/turtle.rst:221
msgid "Turtle motion"
msgstr ""

#: ../../../library/turtle.rst:105
msgid "Move and draw"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`forward` | :func:`fd`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`right` | :func:`rt`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`left` | :func:`lt`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`setx`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`sety`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`setheading` | :func:`seth`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`home`"
msgstr ""

#: ../../../library/turtle.rst:0 ../../../library/turtle.rst:2204
msgid ":func:`circle`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`dot`"
msgstr ""

#: ../../../library/turtle.rst:0 ../../../library/turtle.rst:2192
msgid ":func:`stamp`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`clearstamp`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`clearstamps`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`undo`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`speed`"
msgstr ""

#: ../../../library/turtle.rst:113 ../../../library/turtle.rst:602
msgid "Tell Turtle's state"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`position` | :func:`pos`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`towards`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`xcor`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`ycor`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`heading`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`distance`"
msgstr ""

#: ../../../library/turtle.rst:117
msgid "Setting and measurement"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`degrees`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`radians`"
msgstr ""

#: ../../../library/turtle.rst:140 ../../../library/turtle.rst:741
msgid "Pen control"
msgstr ""

#: ../../../library/turtle.rst:125 ../../../library/turtle.rst:744
msgid "Drawing state"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`pensize` | :func:`width`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`pen`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`isdown`"
msgstr ""

#: ../../../library/turtle.rst:130 ../../../library/turtle.rst:837
msgid "Color control"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`color`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`pencolor`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`fillcolor`"
msgstr ""

#: ../../../library/turtle.rst:135 ../../../library/turtle.rst:967
msgid "Filling"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`fill`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`begin_fill`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`end_fill`"
msgstr ""

#: ../../../library/turtle.rst:140 ../../../library/turtle.rst:1011
msgid "More drawing control"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`reset`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`clear`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`write`"
msgstr ""

#: ../../../library/turtle.rst:154 ../../../library/turtle.rst:1056
msgid "Turtle state"
msgstr ""

#: ../../../library/turtle.rst:146 ../../../library/turtle.rst:1059
msgid "Visibility"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`showturtle` | :func:`st`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`hideturtle` | :func:`ht`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`isvisible`"
msgstr ""

#: ../../../library/turtle.rst:154 ../../../library/turtle.rst:1096
msgid "Appearance"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`shape`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`resizemode`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`settiltangle`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`tiltangle`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`tilt`"
msgstr ""

#: ../../../library/turtle.rst:159 ../../../library/turtle.rst:1222
msgid "Using events"
msgstr ""

#: ../../../library/turtle.rst:0 ../../../library/turtle.rst:2186
msgid ":func:`onclick`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`onrelease`"
msgstr ""

#: ../../../library/turtle.rst:0 ../../../library/turtle.rst:2175
msgid ":func:`ondrag`"
msgstr ""

#: ../../../library/turtle.rst:173 ../../../library/turtle.rst:1292
msgid "Special Turtle methods"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`begin_poly`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`end_poly`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`get_poly`"
msgstr ""

#: ../../../library/turtle.rst:0 ../../../library/turtle.rst:2198
msgid ":func:`clone`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`getturtle` | :func:`getpen`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`getscreen`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`setundobuffer`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`undobufferentries`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`tracer`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`window_width`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`window_height`"
msgstr ""

#: ../../../library/turtle.rst:176
msgid "Methods of TurtleScreen/Screen"
msgstr ""

#: ../../../library/turtle.rst:184 ../../../library/turtle.rst:1451
msgid "Window control"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`bgcolor`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`bgpic`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`clear` | :func:`clearscreen`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`reset` | :func:`resetscreen`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`screensize`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`setworldcoordinates`"
msgstr ""

#: ../../../library/turtle.rst:189 ../../../library/turtle.rst:1564
msgid "Animation control"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`delay`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`update`"
msgstr ""

#: ../../../library/turtle.rst:195 ../../../library/turtle.rst:1613
msgid "Using screen events"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`listen`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`onkey`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`ontimer`"
msgstr ""

#: ../../../library/turtle.rst:205 ../../../library/turtle.rst:1687
msgid "Settings and special methods"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`mode`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`colormode`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`getcanvas`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`getshapes`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`register_shape` | :func:`addshape`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`turtles`"
msgstr ""

#: ../../../library/turtle.rst:212
msgid "Methods specific to Screen"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`bye`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`exitonclick`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`setup`"
msgstr ""

#: ../../../library/turtle.rst:0
msgid ":func:`title`"
msgstr ""

#: ../../../library/turtle.rst:215
msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr ""

#: ../../../library/turtle.rst:217
msgid ""
"Most of the examples in this section refer to a Turtle instance called "
"``turtle``."
msgstr ""

#: ../../../library/turtle.rst:0
msgid "Parameters"
msgstr ""

#: ../../../library/turtle.rst:226 ../../../library/turtle.rst:269
#: ../../../library/turtle.rst:292 ../../../library/turtle.rst:348
#: ../../../library/turtle.rst:369 ../../../library/turtle.rst:390
msgid "a number (integer or float)"
msgstr ""

#: ../../../library/turtle.rst:228
msgid ""
"Move the turtle forward by the specified *distance*, in the direction the "
"turtle is headed."
msgstr ""

#: ../../../library/turtle.rst:231
msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.forward(25)\n"
">>> turtle.position()\n"
"(25.00,0.00)\n"
">>> turtle.forward(-75)\n"
">>> turtle.position()\n"
"(-50.00,0.00)"
msgstr ""

#: ../../../library/turtle.rst:247 ../../../library/turtle.rst:437
#: ../../../library/turtle.rst:700 ../../../library/turtle.rst:1171
#: ../../../library/turtle.rst:1189
msgid "a number"
msgstr ""

#: ../../../library/turtle.rst:249
msgid ""
"Move the turtle backward by *distance*, opposite to the direction the turtle "
"is headed.  Do not change the turtle's heading."
msgstr ""

#: ../../../library/turtle.rst:257
msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.backward(30)\n"
">>> turtle.position()\n"
"(-30.00,0.00)"
msgstr ""

#: ../../../library/turtle.rst:271
msgid ""
"Turn turtle right by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../../../library/turtle.rst:280
msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.right(45)\n"
">>> turtle.heading()\n"
"337.0"
msgstr ""

#: ../../../library/turtle.rst:294
msgid ""
"Turn turtle left by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../../../library/turtle.rst:303
msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.left(45)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""

#: ../../../library/turtle.rst:316
msgid "a number or a pair/vector of numbers"
msgstr ""

#: ../../../library/turtle.rst:317
msgid "a number or ``None``"
msgstr ""

#: ../../../library/turtle.rst:319
msgid ""
"If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` (e."
"g. as returned by :func:`pos`)."
msgstr ""

#: ../../../library/turtle.rst:322
msgid ""
"Move turtle to an absolute position.  If the pen is down, draw line.  Do not "
"change the turtle's orientation."
msgstr ""

#: ../../../library/turtle.rst:330
msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.setpos(60,30)\n"
">>> turtle.pos()\n"
"(60.00,30.00)\n"
">>> turtle.setpos((20,80))\n"
">>> turtle.pos()\n"
"(20.00,80.00)\n"
">>> turtle.setpos(tp)\n"
">>> turtle.pos()\n"
"(0.00,0.00)"
msgstr ""

#: ../../../library/turtle.rst:350
msgid ""
"Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr ""

#: ../../../library/turtle.rst:358
msgid ""
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.setx(10)\n"
">>> turtle.position()\n"
"(10.00,240.00)"
msgstr ""

#: ../../../library/turtle.rst:371
msgid ""
"Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr ""

#: ../../../library/turtle.rst:378
msgid ""
">>> turtle.position()\n"
"(0.00,40.00)\n"
">>> turtle.sety(-10)\n"
">>> turtle.position()\n"
"(0.00,-10.00)"
msgstr ""

#: ../../../library/turtle.rst:392
msgid ""
"Set the orientation of the turtle to *to_angle*.  Here are some common "
"directions in degrees:"
msgstr ""

#: ../../../library/turtle.rst:396
msgid "standard mode"
msgstr ""

#: ../../../library/turtle.rst:396
msgid "logo mode"
msgstr ""

#: ../../../library/turtle.rst:398
msgid "0 - east"
msgstr ""

#: ../../../library/turtle.rst:398
msgid "0 - north"
msgstr ""

#: ../../../library/turtle.rst:399
msgid "90 - north"
msgstr ""

#: ../../../library/turtle.rst:399
msgid "90 - east"
msgstr ""

#: ../../../library/turtle.rst:400
msgid "180 - west"
msgstr ""

#: ../../../library/turtle.rst:400
msgid "180 - south"
msgstr ""

#: ../../../library/turtle.rst:401
msgid "270 - south"
msgstr ""

#: ../../../library/turtle.rst:401
msgid "270 - west"
msgstr ""

#: ../../../library/turtle.rst:404
msgid ""
">>> turtle.setheading(90)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""

#: ../../../library/turtle.rst:413
msgid ""
"Move turtle to the origin -- coordinates (0,0) -- and set its heading to its "
"start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""

#: ../../../library/turtle.rst:422
msgid ""
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.position()\n"
"(0.00,-10.00)\n"
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

#: ../../../library/turtle.rst:438
msgid "a number (or ``None``)"
msgstr ""

#: ../../../library/turtle.rst:439 ../../../library/turtle.rst:529
msgid "an integer (or ``None``)"
msgstr ""

#: ../../../library/turtle.rst:441
msgid ""
"Draw a circle with given *radius*.  The center is *radius* units left of the "
"turtle; *extent* -- an angle -- determines which part of the circle is "
"drawn.  If *extent* is not given, draw the entire circle.  If *extent* is "
"not a full circle, one endpoint of the arc is the current pen position.  "
"Draw the arc in counterclockwise direction if *radius* is positive, "
"otherwise in clockwise direction.  Finally the direction of the turtle is "
"changed by the amount of *extent*."
msgstr ""

#: ../../../library/turtle.rst:449
msgid ""
"As the circle is approximated by an inscribed regular polygon, *steps* "
"determines the number of steps to use.  If not given, it will be calculated "
"automatically.  May be used to draw regular polygons."
msgstr ""

#: ../../../library/turtle.rst:453
msgid ""
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(50)\n"
">>> turtle.position()\n"
"(-0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(120, 180)  # draw a semicircle\n"
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.heading()\n"
"180.0"
msgstr ""

#: ../../../library/turtle.rst:474
msgid "an integer >= 1 (if given)"
msgstr ""

#: ../../../library/turtle.rst:475
msgid "a colorstring or a numeric color tuple"
msgstr ""

#: ../../../library/turtle.rst:477
msgid ""
"Draw a circular dot with diameter *size*, using *color*.  If *size* is not "
"given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""

#: ../../../library/turtle.rst:481
msgid ""
">>> turtle.home()\n"
">>> turtle.dot()\n"
">>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n"
">>> turtle.position()\n"
"(100.00,-0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

#: ../../../library/turtle.rst:494
msgid ""
"Stamp a copy of the turtle shape onto the canvas at the current turtle "
"position.  Return a stamp_id for that stamp, which can be used to delete it "
"by calling ``clearstamp(stamp_id)``."
msgstr ""

#: ../../../library/turtle.rst:498
msgid ""
">>> turtle.color(\"blue\")\n"
">>> turtle.stamp()\n"
"11\n"
">>> turtle.fd(50)"
msgstr ""

#: ../../../library/turtle.rst:508
msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr ""

#: ../../../library/turtle.rst:511
msgid "Delete stamp with given *stampid*."
msgstr ""

#: ../../../library/turtle.rst:513
msgid ""
">>> turtle.position()\n"
"(150.00,-0.00)\n"
">>> turtle.color(\"blue\")\n"
">>> astamp = turtle.stamp()\n"
">>> turtle.fd(50)\n"
">>> turtle.position()\n"
"(200.00,-0.00)\n"
">>> turtle.clearstamp(astamp)\n"
">>> turtle.position()\n"
"(200.00,-0.00)"
msgstr ""

#: ../../../library/turtle.rst:531
msgid ""
"Delete all or first/last *n* of turtle's stamps.  If *n* is None, delete all "
"stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last *n* "
"stamps."
msgstr ""

#: ../../../library/turtle.rst:535
msgid ""
">>> for i in range(8):\n"
"...     turtle.stamp(); turtle.fd(30)\n"
"13\n"
"14\n"
"15\n"
"16\n"
"17\n"
"18\n"
"19\n"
"20\n"
">>> turtle.clearstamps(2)\n"
">>> turtle.clearstamps(-2)\n"
">>> turtle.clearstamps()"
msgstr ""

#: ../../../library/turtle.rst:554
msgid ""
"Undo (repeatedly) the last turtle action(s).  Number of available undo "
"actions is determined by the size of the undobuffer."
msgstr ""

#: ../../../library/turtle.rst:557
msgid ""
">>> for i in range(4):\n"
"...     turtle.fd(50); turtle.lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     turtle.undo()"
msgstr ""

#: ../../../library/turtle.rst:568
msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr ""

#: ../../../library/turtle.rst:570
msgid ""
"Set the turtle's speed to an integer value in the range 0..10.  If no "
"argument is given, return current speed."
msgstr ""

#: ../../../library/turtle.rst:573
msgid ""
"If input is a number greater than 10 or smaller than 0.5, speed is set to "
"0.  Speedstrings are mapped to speedvalues as follows:"
msgstr ""

#: ../../../library/turtle.rst:576
msgid "\"fastest\":  0"
msgstr ""

#: ../../../library/turtle.rst:577
msgid "\"fast\":  10"
msgstr ""

#: ../../../library/turtle.rst:578
msgid "\"normal\":  6"
msgstr ""

#: ../../../library/turtle.rst:579
msgid "\"slow\":  3"
msgstr ""

#: ../../../library/turtle.rst:580
msgid "\"slowest\":  1"
msgstr ""

#: ../../../library/turtle.rst:582
msgid ""
"Speeds from 1 to 10 enforce increasingly faster animation of line drawing "
"and turtle turning."
msgstr ""

#: ../../../library/turtle.rst:585
msgid ""
"Attention: *speed* = 0 means that *no* animation takes place. forward/back "
"makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""

#: ../../../library/turtle.rst:589
msgid ""
">>> turtle.speed()\n"
"3\n"
">>> turtle.speed('normal')\n"
">>> turtle.speed()\n"
"6\n"
">>> turtle.speed(9)\n"
">>> turtle.speed()\n"
"9"
msgstr ""

#: ../../../library/turtle.rst:607
msgid ""
"Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr ""

#: ../../../library/turtle.rst:609
msgid ""
">>> turtle.pos()\n"
"(440.00,-0.00)"
msgstr ""

#: ../../../library/turtle.rst:617 ../../../library/turtle.rst:676
msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr ""

#: ../../../library/turtle.rst:618 ../../../library/turtle.rst:677
msgid "a number if *x* is a number, else ``None``"
msgstr ""

#: ../../../library/turtle.rst:620
msgid ""
"Return the angle between the line from turtle position to position specified "
"by (x,y), the vector or the other turtle.  This depends on the turtle's "
"start orientation which depends on the mode - \"standard\"/\"world\" or "
"\"logo\")."
msgstr ""

#: ../../../library/turtle.rst:624
msgid ""
">>> turtle.goto(10, 10)\n"
">>> turtle.towards(0,0)\n"
"225.0"
msgstr ""

#: ../../../library/turtle.rst:633
msgid "Return the turtle's x coordinate."
msgstr ""

#: ../../../library/turtle.rst:635
msgid ""
">>> turtle.home()\n"
">>> turtle.left(50)\n"
">>> turtle.forward(100)\n"
">>> turtle.pos()\n"
"(64.28,76.60)\n"
">>> print turtle.xcor()\n"
"64.2787609687"
msgstr ""

#: ../../../library/turtle.rst:648
msgid "Return the turtle's y coordinate."
msgstr ""

#: ../../../library/turtle.rst:650
msgid ""
">>> turtle.home()\n"
">>> turtle.left(60)\n"
">>> turtle.forward(100)\n"
">>> print turtle.pos()\n"
"(50.00,86.60)\n"
">>> print turtle.ycor()\n"
"86.6025403784"
msgstr ""

#: ../../../library/turtle.rst:663
msgid ""
"Return the turtle's current heading (value depends on the turtle mode, see :"
"func:`mode`)."
msgstr ""

#: ../../../library/turtle.rst:666
msgid ""
">>> turtle.home()\n"
">>> turtle.left(67)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""

#: ../../../library/turtle.rst:679
msgid ""
"Return the distance from the turtle to (x,y), the given vector, or the given "
"other turtle, in turtle step units."
msgstr ""

#: ../../../library/turtle.rst:682
msgid ""
">>> turtle.home()\n"
">>> turtle.distance(30,40)\n"
"50.0\n"
">>> turtle.distance((30,40))\n"
"50.0\n"
">>> joe = Turtle()\n"
">>> joe.forward(77)\n"
">>> turtle.distance(joe)\n"
"77.0"
msgstr ""

#: ../../../library/turtle.rst:696
msgid "Settings for measurement"
msgstr ""

#: ../../../library/turtle.rst:702
msgid ""
"Set angle measurement units, i.e. set number of \"degrees\" for a full "
"circle. Default value is 360 degrees."
msgstr ""

#: ../../../library/turtle.rst:705
msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.degrees(400.0)  # angle measurement in gon\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.degrees(360)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""

#: ../../../library/turtle.rst:721
msgid ""
"Set the angle measurement units to radians.  Equivalent to ``degrees(2*math."
"pi)``."
msgstr ""

#: ../../../library/turtle.rst:724
msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.radians()\n"
">>> turtle.heading()\n"
"1.5707963267948966"
msgstr ""

#: ../../../library/turtle.rst:750
msgid "Pull the pen down -- drawing when moving."
msgstr ""

#: ../../../library/turtle.rst:757
msgid "Pull the pen up -- no drawing when moving."
msgstr ""

#: ../../../library/turtle.rst:763
msgid "a positive number"
msgstr ""

#: ../../../library/turtle.rst:765
msgid ""
"Set the line thickness to *width* or return it.  If resizemode is set to "
"\"auto\" and turtleshape is a polygon, that polygon is drawn with the same "
"line thickness.  If no argument is given, the current pensize is returned."
msgstr ""

#: ../../../library/turtle.rst:769
msgid ""
">>> turtle.pensize()\n"
"1\n"
">>> turtle.pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

#: ../../../library/turtle.rst:778
msgid "a dictionary with some or all of the below listed keys"
msgstr ""

#: ../../../library/turtle.rst:779
msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr ""

#: ../../../library/turtle.rst:781
msgid ""
"Return or set the pen's attributes in a \"pen-dictionary\" with the "
"following key/value pairs:"
msgstr ""

#: ../../../library/turtle.rst:784
msgid "\"shown\": True/False"
msgstr ""

#: ../../../library/turtle.rst:785
msgid "\"pendown\": True/False"
msgstr ""

#: ../../../library/turtle.rst:786
msgid "\"pencolor\": color-string or color-tuple"
msgstr ""

#: ../../../library/turtle.rst:787
msgid "\"fillcolor\": color-string or color-tuple"
msgstr ""

#: ../../../library/turtle.rst:788
msgid "\"pensize\": positive number"
msgstr ""

#: ../../../library/turtle.rst:789
msgid "\"speed\": number in range 0..10"
msgstr ""

#: ../../../library/turtle.rst:790
msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr ""

#: ../../../library/turtle.rst:791
msgid "\"stretchfactor\": (positive number, positive number)"
msgstr ""

#: ../../../library/turtle.rst:792
msgid "\"outline\": positive number"
msgstr ""

#: ../../../library/turtle.rst:793
msgid "\"tilt\": number"
msgstr ""

#: ../../../library/turtle.rst:795
msgid ""
"This dictionary can be used as argument for a subsequent call to :func:`pen` "
"to restore the former pen-state.  Moreover one or more of these attributes "
"can be provided as keyword-arguments.  This can be used to set several pen "
"attributes in one statement."
msgstr ""

#: ../../../library/turtle.rst:800
msgid ""
">>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n"
" ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]\n"
">>> penstate=turtle.pen()\n"
">>> turtle.color(\"yellow\", \"\")\n"
">>> turtle.penup()\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow'),\n"
" ('pendown', False), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]\n"
">>> turtle.pen(penstate, fillcolor=\"green\")\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red'),\n"
" ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]"
msgstr ""

#: ../../../library/turtle.rst:824
msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr ""

#: ../../../library/turtle.rst:826
msgid ""
">>> turtle.penup()\n"
">>> turtle.isdown()\n"
"False\n"
">>> turtle.pendown()\n"
">>> turtle.isdown()\n"
"True"
msgstr ""

#: ../../../library/turtle.rst:841
msgid "Return or set the pencolor."
msgstr ""

#: ../../../library/turtle.rst:843 ../../../library/turtle.rst:891
msgid "Four input formats are allowed:"
msgstr ""

#: ../../../library/turtle.rst:848
msgid "``pencolor()``"
msgstr ""

#: ../../../library/turtle.rst:846
msgid ""
"Return the current pencolor as color specification string or as a tuple (see "
"example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

#: ../../../library/turtle.rst:852
msgid "``pencolor(colorstring)``"
msgstr ""

#: ../../../library/turtle.rst:851
msgid ""
"Set pencolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../../../library/turtle.rst:857
msgid "``pencolor((r, g, b))``"
msgstr ""

#: ../../../library/turtle.rst:855
msgid ""
"Set pencolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../../../library/turtle.rst:864
msgid "``pencolor(r, g, b)``"
msgstr ""

#: ../../../library/turtle.rst:860
msgid ""
"Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../../../library/turtle.rst:863
msgid ""
"If turtleshape is a polygon, the outline of that polygon is drawn with the "
"newly set pencolor."
msgstr ""

#: ../../../library/turtle.rst:866
msgid ""
">>> colormode()\n"
"1.0\n"
">>> turtle.pencolor()\n"
"'red'\n"
">>> turtle.pencolor(\"brown\")\n"
">>> turtle.pencolor()\n"
"'brown'\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> turtle.pencolor(tup)\n"
">>> turtle.pencolor()\n"
"(0.20000000000000001, 0.80000000000000004, 0.5490196078431373)\n"
">>> colormode(255)\n"
">>> turtle.pencolor()\n"
"(51, 204, 140)\n"
">>> turtle.pencolor('#32c18f')\n"
">>> turtle.pencolor()\n"
"(50, 193, 143)"
msgstr ""

#: ../../../library/turtle.rst:889
msgid "Return or set the fillcolor."
msgstr ""

#: ../../../library/turtle.rst:896
msgid "``fillcolor()``"
msgstr ""

#: ../../../library/turtle.rst:894
msgid ""
"Return the current fillcolor as color specification string, possibly in "
"tuple format (see example).  May be used as input to another color/pencolor/"
"fillcolor call."
msgstr ""

#: ../../../library/turtle.rst:900
msgid "``fillcolor(colorstring)``"
msgstr ""

#: ../../../library/turtle.rst:899
msgid ""
"Set fillcolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../../../library/turtle.rst:905
msgid "``fillcolor((r, g, b))``"
msgstr ""

#: ../../../library/turtle.rst:903
msgid ""
"Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../../../library/turtle.rst:912
msgid "``fillcolor(r, g, b)``"
msgstr ""

#: ../../../library/turtle.rst:908
msgid ""
"Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../../../library/turtle.rst:911
msgid ""
"If turtleshape is a polygon, the interior of that polygon is drawn with the "
"newly set fillcolor."
msgstr ""

#: ../../../library/turtle.rst:914
msgid ""
">>> turtle.fillcolor(\"violet\")\n"
">>> turtle.fillcolor()\n"
"'violet'\n"
">>> col = turtle.pencolor()\n"
">>> col\n"
"(50, 193, 143)\n"
">>> turtle.fillcolor(col)\n"
">>> turtle.fillcolor()\n"
"(50, 193, 143)\n"
">>> turtle.fillcolor('#ffffff')\n"
">>> turtle.fillcolor()\n"
"(255, 255, 255)"
msgstr ""

#: ../../../library/turtle.rst:932
msgid "Return or set pencolor and fillcolor."
msgstr ""

#: ../../../library/turtle.rst:934
msgid ""
"Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr ""

#: ../../../library/turtle.rst:940
msgid "``color()``"
msgstr ""

#: ../../../library/turtle.rst:938
msgid ""
"Return the current pencolor and the current fillcolor as a pair of color "
"specification strings or tuples as returned by :func:`pencolor` and :func:"
"`fillcolor`."
msgstr ""

#: ../../../library/turtle.rst:944
msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr ""

#: ../../../library/turtle.rst:943
msgid ""
"Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the "
"given value."
msgstr ""

#: ../../../library/turtle.rst:951
msgid ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr ""

#: ../../../library/turtle.rst:947
msgid ""
"Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and "
"analogously if the other input format is used."
msgstr ""

#: ../../../library/turtle.rst:950
msgid ""
"If turtleshape is a polygon, outline and interior of that polygon is drawn "
"with the newly set colors."
msgstr ""

#: ../../../library/turtle.rst:953
msgid ""
">>> turtle.color(\"red\", \"green\")\n"
">>> turtle.color()\n"
"('red', 'green')\n"
">>> color(\"#285078\", \"#a0c8f0\")\n"
">>> color()\n"
"((40, 80, 120), (160, 200, 240))"
msgstr ""

#: ../../../library/turtle.rst:963
msgid "See also: Screen method :func:`colormode`."
msgstr ""

#: ../../../library/turtle.rst:976
msgid "True/False (or 1/0 respectively)"
msgstr ""

#: ../../../library/turtle.rst:978
msgid ""
"Call ``fill(True)`` before drawing the shape you want to fill, and "
"``fill(False)`` when done.  When used without argument: return fillstate "
"(``True`` if filling, ``False`` else)."
msgstr ""

#: ../../../library/turtle.rst:982
msgid ""
">>> turtle.fill(True)\n"
">>> for _ in range(3):\n"
"...    turtle.forward(100)\n"
"...    turtle.left(120)\n"
"...\n"
">>> turtle.fill(False)"
msgstr ""

#: ../../../library/turtle.rst:994
msgid ""
"Call just before drawing a shape to be filled.  Equivalent to ``fill(True)``."
msgstr ""

#: ../../../library/turtle.rst:999
msgid ""
"Fill the shape drawn after the last call to :func:`begin_fill`.  Equivalent "
"to ``fill(False)``."
msgstr ""

#: ../../../library/turtle.rst:1002
msgid ""
">>> turtle.color(\"black\", \"red\")\n"
">>> turtle.begin_fill()\n"
">>> turtle.circle(80)\n"
">>> turtle.end_fill()"
msgstr ""

#: ../../../library/turtle.rst:1015
msgid ""
"Delete the turtle's drawings from the screen, re-center the turtle and set "
"variables to the default values."
msgstr ""

#: ../../../library/turtle.rst:1018
msgid ""
">>> turtle.goto(0,-22)\n"
">>> turtle.left(100)\n"
">>> turtle.position()\n"
"(0.00,-22.00)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.reset()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

#: ../../../library/turtle.rst:1035
msgid ""
"Delete the turtle's drawings from the screen.  Do not move turtle.  State "
"and position of the turtle as well as drawings of other turtles are not "
"affected."
msgstr ""

#: ../../../library/turtle.rst:1041
msgid "object to be written to the TurtleScreen"
msgstr ""

#: ../../../library/turtle.rst:1042
msgid "True/False"
msgstr ""

#: ../../../library/turtle.rst:1043
msgid "one of the strings \"left\", \"center\" or right\""
msgstr ""

#: ../../../library/turtle.rst:1044
msgid "a triple (fontname, fontsize, fonttype)"
msgstr ""

#: ../../../library/turtle.rst:1046
msgid ""
"Write text - the string representation of *arg* - at the current turtle "
"position according to *align* (\"left\", \"center\" or right\") and with the "
"given font.  If *move* is True, the pen is moved to the bottom-right corner "
"of the text.  By default, *move* is False."
msgstr ""

#: ../../../library/turtle.rst:1064
msgid ""
"Make the turtle invisible.  It's a good idea to do this while you're in the "
"middle of doing some complex drawing, because hiding the turtle speeds up "
"the drawing observably."
msgstr ""

#: ../../../library/turtle.rst:1068
msgid ">>> turtle.hideturtle()"
msgstr ""

#: ../../../library/turtle.rst:1076
msgid "Make the turtle visible."
msgstr ""

#: ../../../library/turtle.rst:1078
msgid ">>> turtle.showturtle()"
msgstr ""

#: ../../../library/turtle.rst:1085
msgid "Return True if the Turtle is shown, False if it's hidden."
msgstr ""

#: ../../../library/turtle.rst:1100
msgid "a string which is a valid shapename"
msgstr ""

#: ../../../library/turtle.rst:1102
msgid ""
"Set turtle shape to shape with given *name* or, if name is not given, return "
"name of current shape.  Shape with *name* must exist in the TurtleScreen's "
"shape dictionary.  Initially there are the following polygon shapes: "
"\"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  "
"To learn about how to deal with shapes see Screen method :func:"
"`register_shape`."
msgstr ""

#: ../../../library/turtle.rst:1108
msgid ""
">>> turtle.shape()\n"
"'classic'\n"
">>> turtle.shape(\"turtle\")\n"
">>> turtle.shape()\n"
"'turtle'"
msgstr ""

#: ../../../library/turtle.rst:1119
msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr ""

#: ../../../library/turtle.rst:1121
msgid ""
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If "
"*rmode* is not given, return current resizemode.  Different resizemodes have "
"the following effects:"
msgstr ""

#: ../../../library/turtle.rst:1125
msgid ""
"\"auto\": adapts the appearance of the turtle corresponding to the value of "
"pensize."
msgstr ""

#: ../../../library/turtle.rst:1126
msgid ""
"\"user\": adapts the appearance of the turtle according to the values of "
"stretchfactor and outlinewidth (outline), which are set by :func:`shapesize`."
msgstr ""

#: ../../../library/turtle.rst:1129
msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr ""

#: ../../../library/turtle.rst:1131
msgid ""
"resizemode(\"user\") is called by :func:`shapesize` when used with arguments."
msgstr ""

#: ../../../library/turtle.rst:1133
msgid ""
">>> turtle.resizemode()\n"
"'noresize'\n"
">>> turtle.resizemode(\"auto\")\n"
">>> turtle.resizemode()\n"
"'auto'"
msgstr ""

#: ../../../library/turtle.rst:1145 ../../../library/turtle.rst:1146
#: ../../../library/turtle.rst:1147
msgid "positive number"
msgstr ""

#: ../../../library/turtle.rst:1149
msgid ""
"Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set "
"resizemode to \"user\".  If and only if resizemode is set to \"user\", the "
"turtle will be displayed stretched according to its stretchfactors: "
"*stretch_wid* is stretchfactor perpendicular to its orientation, "
"*stretch_len* is stretchfactor in direction of its orientation, *outline* "
"determines the width of the shapes's outline."
msgstr ""

#: ../../../library/turtle.rst:1156
msgid ""
">>> turtle.shapesize()\n"
"(1, 1, 1)\n"
">>> turtle.resizemode(\"user\")\n"
">>> turtle.shapesize(5, 5, 12)\n"
">>> turtle.shapesize()\n"
"(5, 5, 12)\n"
">>> turtle.shapesize(outline=8)\n"
">>> turtle.shapesize()\n"
"(5, 5, 8)"
msgstr ""

#: ../../../library/turtle.rst:1173
msgid ""
"Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* "
"change the turtle's heading (direction of movement)."
msgstr ""

#: ../../../library/turtle.rst:1176
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)"
msgstr ""

#: ../../../library/turtle.rst:1191
msgid ""
"Rotate the turtleshape to point in the direction specified by *angle*, "
"regardless of its current tilt-angle.  *Do not* change the turtle's heading "
"(direction of movement)."
msgstr ""

#: ../../../library/turtle.rst:1195
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.settiltangle(45)\n"
">>> turtle.fd(50)\n"
">>> turtle.settiltangle(-45)\n"
">>> turtle.fd(50)"
msgstr ""

#: ../../../library/turtle.rst:1208
msgid ""
"Return the current tilt-angle, i.e. the angle between the orientation of the "
"turtleshape and the heading of the turtle (its direction of movement)."
msgstr ""

#: ../../../library/turtle.rst:1211
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(45)\n"
">>> turtle.tiltangle()\n"
"45.0"
msgstr ""

#: ../../../library/turtle.rst:1226 ../../../library/turtle.rst:1247
#: ../../../library/turtle.rst:1271 ../../../library/turtle.rst:1643
msgid ""
"a function with two arguments which will be called with the coordinates of "
"the clicked point on the canvas"
msgstr ""

#: ../../../library/turtle.rst:1228 ../../../library/turtle.rst:1249
#: ../../../library/turtle.rst:1273 ../../../library/turtle.rst:1645
msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr ""

#: ../../../library/turtle.rst:1229 ../../../library/turtle.rst:1250
#: ../../../library/turtle.rst:1274 ../../../library/turtle.rst:1646
msgid ""
"``True`` or ``False`` -- if ``True``, a new binding will be added, otherwise "
"it will replace a former binding"
msgstr ""

#: ../../../library/turtle.rst:1232
msgid ""
"Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed.  Example for the anonymous turtle, i.e. the "
"procedural way:"
msgstr ""

#: ../../../library/turtle.rst:1236
msgid ""
">>> def turn(x, y):\n"
"...     left(180)\n"
"...\n"
">>> onclick(turn)  # Now clicking into the turtle will turn it.\n"
">>> onclick(None)  # event-binding will be removed"
msgstr ""

#: ../../../library/turtle.rst:1253
msgid ""
"Bind *fun* to mouse-button-release events on this turtle.  If *fun* is "
"``None``, existing bindings are removed."
msgstr ""

#: ../../../library/turtle.rst:1256
msgid ""
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...         self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...         self.fillcolor(\"\")\n"
"...\n"
">>> turtle = MyTurtle()\n"
">>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor "
"red,\n"
">>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent."
msgstr ""

#: ../../../library/turtle.rst:1277
msgid ""
"Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

#: ../../../library/turtle.rst:1280
msgid ""
"Remark: Every sequence of mouse-move-events on a turtle is preceded by a "
"mouse-click event on that turtle."
msgstr ""

#: ../../../library/turtle.rst:1283
msgid ">>> turtle.ondrag(turtle.goto)"
msgstr ""

#: ../../../library/turtle.rst:1287
msgid ""
"Subsequently, clicking and dragging the Turtle will move it across the "
"screen thereby producing handdrawings (if pen is down)."
msgstr ""

#: ../../../library/turtle.rst:1296
msgid ""
"Start recording the vertices of a polygon.  Current turtle position is first "
"vertex of polygon."
msgstr ""

#: ../../../library/turtle.rst:1302
msgid ""
"Stop recording the vertices of a polygon.  Current turtle position is last "
"vertex of polygon.  This will be connected with the first vertex."
msgstr ""

#: ../../../library/turtle.rst:1308
msgid "Return the last recorded polygon."
msgstr ""

#: ../../../library/turtle.rst:1310
msgid ""
">>> turtle.home()\n"
">>> turtle.begin_poly()\n"
">>> turtle.fd(100)\n"
">>> turtle.left(20)\n"
">>> turtle.fd(30)\n"
">>> turtle.left(60)\n"
">>> turtle.fd(50)\n"
">>> turtle.end_poly()\n"
">>> p = turtle.get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"
msgstr ""

#: ../../../library/turtle.rst:1326
msgid ""
"Create and return a clone of the turtle with same position, heading and "
"turtle properties."
msgstr ""

#: ../../../library/turtle.rst:1329
msgid ""
">>> mick = Turtle()\n"
">>> joe = mick.clone()"
msgstr ""

#: ../../../library/turtle.rst:1338
msgid ""
"Return the Turtle object itself.  Only reasonable use: as a function to "
"return the \"anonymous turtle\":"
msgstr ""

#: ../../../library/turtle.rst:1341
msgid ""
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<turtle.Turtle object at 0x...>"
msgstr ""

#: ../../../library/turtle.rst:1351
msgid ""
"Return the :class:`TurtleScreen` object the turtle is drawing on. "
"TurtleScreen methods can then be called for that object."
msgstr ""

#: ../../../library/turtle.rst:1354
msgid ""
">>> ts = turtle.getscreen()\n"
">>> ts\n"
"<turtle._Screen object at 0x...>\n"
">>> ts.bgcolor(\"pink\")"
msgstr ""

#: ../../../library/turtle.rst:1364
msgid "an integer or ``None``"
msgstr ""

#: ../../../library/turtle.rst:1366
msgid ""
"Set or disable undobuffer.  If *size* is an integer an empty undobuffer of "
"given size is installed.  *size* gives the maximum number of turtle actions "
"that can be undone by the :func:`undo` method/function.  If *size* is "
"``None``, the undobuffer is disabled."
msgstr ""

#: ../../../library/turtle.rst:1371
msgid ">>> turtle.setundobuffer(42)"
msgstr ""

#: ../../../library/turtle.rst:1378
msgid "Return number of entries in the undobuffer."
msgstr ""

#: ../../../library/turtle.rst:1380
msgid ""
">>> while undobufferentries():\n"
"...     undo()"
msgstr ""

#: ../../../library/turtle.rst:1388
msgid "A replica of the corresponding TurtleScreen method."
msgstr ""

#: ../../../library/turtle.rst:1396
msgid "Both are replicas of the corresponding TurtleScreen methods."
msgstr ""

#: ../../../library/turtle.rst:1404
msgid "Excursus about the use of compound shapes"
msgstr ""

#: ../../../library/turtle.rst:1406
msgid ""
"To use compound turtle shapes, which consist of several polygons of "
"different color, you must use the helper class :class:`Shape` explicitly as "
"described below:"
msgstr ""

#: ../../../library/turtle.rst:1410
msgid "Create an empty Shape object of type \"compound\"."
msgstr ""

#: ../../../library/turtle.rst:1411
msgid ""
"Add as many components to this object as desired, using the :meth:"
"`addcomponent` method."
msgstr ""

#: ../../../library/turtle.rst:1414
msgid "For example:"
msgstr ""

#: ../../../library/turtle.rst:1416
msgid ""
">>> s = Shape(\"compound\")\n"
">>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s.addcomponent(poly1, \"red\", \"blue\")\n"
">>> poly2 = ((0,0),(10,-5),(-10,-5))\n"
">>> s.addcomponent(poly2, \"blue\", \"red\")"
msgstr ""

#: ../../../library/turtle.rst:1424
msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr ""

#: ../../../library/turtle.rst:1426
msgid ""
">>> register_shape(\"myshape\", s)\n"
">>> shape(\"myshape\")"
msgstr ""

#: ../../../library/turtle.rst:1434
msgid ""
"The :class:`Shape` class is used internally by the :func:`register_shape` "
"method in different ways.  The application programmer has to deal with the "
"Shape class *only* when using compound shapes like shown above!"
msgstr ""

#: ../../../library/turtle.rst:1440
msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr ""

#: ../../../library/turtle.rst:1442
msgid ""
"Most of the examples in this section refer to a TurtleScreen instance called "
"``screen``."
msgstr ""

#: ../../../library/turtle.rst:1455
msgid ""
"a color string or three numbers in the range 0..colormode or a 3-tuple of "
"such numbers"
msgstr ""

#: ../../../library/turtle.rst:1458
msgid "Set or return background color of the TurtleScreen."
msgstr ""

#: ../../../library/turtle.rst:1460
msgid ""
">>> screen.bgcolor(\"orange\")\n"
">>> screen.bgcolor()\n"
"'orange'\n"
">>> screen.bgcolor(\"#800080\")\n"
">>> screen.bgcolor()\n"
"(128, 0, 128)"
msgstr ""

#: ../../../library/turtle.rst:1472
msgid "a string, name of a gif-file or ``\"nopic\"``, or ``None``"
msgstr ""

#: ../../../library/turtle.rst:1474
msgid ""
"Set background image or return name of current backgroundimage.  If "
"*picname* is a filename, set the corresponding image as background.  If "
"*picname* is ``\"nopic\"``, delete background image, if present.  If "
"*picname* is ``None``, return the filename of the current backgroundimage. ::"
msgstr ""

#: ../../../library/turtle.rst:1479
msgid ""
">>> screen.bgpic()\n"
"'nopic'\n"
">>> screen.bgpic(\"landscape.gif\")\n"
">>> screen.bgpic()\n"
"\"landscape.gif\""
msgstr ""

#: ../../../library/turtle.rst:1489
msgid ""
"Delete all drawings and all turtles from the TurtleScreen.  Reset the now "
"empty TurtleScreen to its initial state: white background, no background "
"image, no event bindings and tracing on."
msgstr ""

#: ../../../library/turtle.rst:1494
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``clearscreen``.  The global function ``clear`` is another one derived "
"from the Turtle method ``clear``."
msgstr ""

#: ../../../library/turtle.rst:1502
msgid "Reset all Turtles on the Screen to their initial state."
msgstr ""

#: ../../../library/turtle.rst:1505
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``resetscreen``.  The global function ``reset`` is another one derived "
"from the Turtle method ``reset``."
msgstr ""

#: ../../../library/turtle.rst:1512
msgid "positive integer, new width of canvas in pixels"
msgstr ""

#: ../../../library/turtle.rst:1513
msgid "positive integer, new height of canvas in pixels"
msgstr ""

#: ../../../library/turtle.rst:1514
msgid "colorstring or color-tuple, new background color"
msgstr ""

#: ../../../library/turtle.rst:1516
msgid ""
"If no arguments are given, return current (canvaswidth, canvasheight).  Else "
"resize the canvas the turtles are drawing on.  Do not alter the drawing "
"window.  To observe hidden parts of the canvas, use the scrollbars. With "
"this method, one can make visible those parts of a drawing which were "
"outside the canvas before."
msgstr ""

#: ../../../library/turtle.rst:1528
msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

#: ../../../library/turtle.rst:1533
msgid "a number, x-coordinate of lower left corner of canvas"
msgstr ""

#: ../../../library/turtle.rst:1534
msgid "a number, y-coordinate of lower left corner of canvas"
msgstr ""

#: ../../../library/turtle.rst:1535
msgid "a number, x-coordinate of upper right corner of canvas"
msgstr ""

#: ../../../library/turtle.rst:1536
msgid "a number, y-coordinate of upper right corner of canvas"
msgstr ""

#: ../../../library/turtle.rst:1538
msgid ""
"Set up user-defined coordinate system and switch to mode \"world\" if "
"necessary.  This performs a ``screen.reset()``.  If mode \"world\" is "
"already active, all drawings are redrawn according to the new coordinates."
msgstr ""

#: ../../../library/turtle.rst:1542
msgid ""
"**ATTENTION**: in user-defined coordinate systems angles may appear "
"distorted."
msgstr ""

#: ../../../library/turtle.rst:1545
msgid ""
">>> screen.reset()\n"
">>> screen.setworldcoordinates(-50,-7.5,50,7.5)\n"
">>> for _ in range(72):\n"
"...     left(10)\n"
"...\n"
">>> for _ in range(8):\n"
"...     left(45); fd(2)   # a regular octagon"
msgstr ""

#: ../../../library/turtle.rst:1568
msgid "positive integer"
msgstr ""

#: ../../../library/turtle.rst:1570
msgid ""
"Set or return the drawing *delay* in milliseconds.  (This is approximately "
"the time interval between two consecutive canvas updates.)  The longer the "
"drawing delay, the slower the animation."
msgstr ""

#: ../../../library/turtle.rst:1574
msgid "Optional argument:"
msgstr ""

#: ../../../library/turtle.rst:1576
msgid ""
">>> screen.delay()\n"
"10\n"
">>> screen.delay(5)\n"
">>> screen.delay()\n"
"5"
msgstr ""

#: ../../../library/turtle.rst:1587 ../../../library/turtle.rst:1588
msgid "nonnegative integer"
msgstr ""

#: ../../../library/turtle.rst:1590
msgid ""
"Turn turtle animation on/off and set delay for update drawings.  If *n* is "
"given, only each n-th regular screen update is really performed.  (Can be "
"used to accelerate the drawing of complex graphics.)  Second argument sets "
"delay value (see :func:`delay`)."
msgstr ""

#: ../../../library/turtle.rst:1595
msgid ""
">>> screen.tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"
msgstr ""

#: ../../../library/turtle.rst:1607
msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr ""

#: ../../../library/turtle.rst:1609
msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr ""

#: ../../../library/turtle.rst:1617
msgid ""
"Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments "
"are provided in order to be able to pass :func:`listen` to the onclick "
"method."
msgstr ""

#: ../../../library/turtle.rst:1623
msgid "a function with no arguments or ``None``"
msgstr ""

#: ../../../library/turtle.rst:1624
msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr ""

#: ../../../library/turtle.rst:1626
msgid ""
"Bind *fun* to key-release event of key.  If *fun* is ``None``, event "
"bindings are removed. Remark: in order to be able to register key-events, "
"TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""

#: ../../../library/turtle.rst:1630
msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""

#: ../../../library/turtle.rst:1649
msgid ""
"Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

#: ../../../library/turtle.rst:1652
msgid ""
"Example for a TurtleScreen instance named ``screen`` and a Turtle instance "
"named turtle:"
msgstr ""

#: ../../../library/turtle.rst:1655
msgid ""
">>> screen.onclick(turtle.goto) # Subsequently clicking into the "
"TurtleScreen will\n"
">>>                             # make the turtle move to the clicked "
"point.\n"
">>> screen.onclick(None)        # remove event binding again"
msgstr ""

#: ../../../library/turtle.rst:1662
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``onscreenclick``.  The global function ``onclick`` is another one "
"derived from the Turtle method ``onclick``."
msgstr ""

#: ../../../library/turtle.rst:1669
msgid "a function with no arguments"
msgstr ""

#: ../../../library/turtle.rst:1670
msgid "a number >= 0"
msgstr ""

#: ../../../library/turtle.rst:1672
msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr ""

#: ../../../library/turtle.rst:1674
msgid ""
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...         fd(50)\n"
"...         lt(60)\n"
"...         screen.ontimer(f, 250)\n"
">>> f()   ### makes the turtle march around\n"
">>> running = False"
msgstr ""

#: ../../../library/turtle.rst:1691
msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr ""

#: ../../../library/turtle.rst:1693
msgid ""
"Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If "
"mode is not given, current mode is returned."
msgstr ""

#: ../../../library/turtle.rst:1696
msgid ""
"Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is "
"compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined "
"\"world coordinates\". **Attention**: in this mode angles appear distorted "
"if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""

#: ../../../library/turtle.rst:1702
msgid "Mode"
msgstr ""

#: ../../../library/turtle.rst:1702
msgid "Initial turtle heading"
msgstr ""

#: ../../../library/turtle.rst:1702
msgid "positive angles"
msgstr ""

#: ../../../library/turtle.rst:1704
msgid "\"standard\""
msgstr ""

#: ../../../library/turtle.rst:1704
msgid "to the right (east)"
msgstr ""

#: ../../../library/turtle.rst:1704
msgid "counterclockwise"
msgstr ""

#: ../../../library/turtle.rst:1705
msgid "\"logo\""
msgstr ""

#: ../../../library/turtle.rst:1705
msgid "upward    (north)"
msgstr ""

#: ../../../library/turtle.rst:1705
msgid "clockwise"
msgstr ""

#: ../../../library/turtle.rst:1708
msgid ""
">>> mode(\"logo\")   # resets turtle heading to north\n"
">>> mode()\n"
"'logo'"
msgstr ""

#: ../../../library/turtle.rst:1717
msgid "one of the values 1.0 or 255"
msgstr ""

#: ../../../library/turtle.rst:1719
msgid ""
"Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* "
"values of color triples have to be in the range 0..\\ *cmode*."
msgstr ""

#: ../../../library/turtle.rst:1722
msgid ""
">>> screen.colormode(1)\n"
">>> turtle.pencolor(240, 160, 80)\n"
"Traceback (most recent call last):\n"
"     ...\n"
"TurtleGraphicsError: bad color sequence: (240, 160, 80)\n"
">>> screen.colormode()\n"
"1.0\n"
">>> screen.colormode(255)\n"
">>> screen.colormode()\n"
"255\n"
">>> turtle.pencolor(240,160,80)"
msgstr ""

#: ../../../library/turtle.rst:1739
msgid ""
"Return the Canvas of this TurtleScreen.  Useful for insiders who know what "
"to do with a Tkinter Canvas."
msgstr ""

#: ../../../library/turtle.rst:1742
msgid ""
">>> cv = screen.getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas instance at 0x...>"
msgstr ""

#: ../../../library/turtle.rst:1751
msgid "Return a list of names of all currently available turtle shapes."
msgstr ""

#: ../../../library/turtle.rst:1753
msgid ""
">>> screen.getshapes()\n"
"['arrow', 'blank', 'circle', ..., 'turtle']"
msgstr ""

#: ../../../library/turtle.rst:1762
msgid "There are three different ways to call this function:"
msgstr ""

#: ../../../library/turtle.rst:1764
msgid ""
"*name* is the name of a gif-file and *shape* is ``None``: Install the "
"corresponding image shape. ::"
msgstr ""

#: ../../../library/turtle.rst:1767
msgid ">>> screen.register_shape(\"turtle.gif\")"
msgstr ""

#: ../../../library/turtle.rst:1770
msgid ""
"Image shapes *do not* rotate when turning the turtle, so they do not display "
"the heading of the turtle!"
msgstr ""

#: ../../../library/turtle.rst:1773
msgid ""
"*name* is an arbitrary string and *shape* is a tuple of pairs of "
"coordinates: Install the corresponding polygon shape."
msgstr ""

#: ../../../library/turtle.rst:1776
msgid ">>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))"
msgstr ""

#: ../../../library/turtle.rst:1780
msgid ""
"*name* is an arbitrary string and shape is a (compound) :class:`Shape` "
"object: Install the corresponding compound shape."
msgstr ""

#: ../../../library/turtle.rst:1783
msgid ""
"Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered "
"shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""

#: ../../../library/turtle.rst:1789
msgid "Return the list of turtles on the screen."
msgstr ""

#: ../../../library/turtle.rst:1791
msgid ""
">>> for turtle in screen.turtles():\n"
"...     turtle.color(\"red\")"
msgstr ""

#: ../../../library/turtle.rst:1799
msgid "Return the height of the turtle window. ::"
msgstr ""

#: ../../../library/turtle.rst:1801
msgid ""
">>> screen.window_height()\n"
"480"
msgstr ""

#: ../../../library/turtle.rst:1807
msgid "Return the width of the turtle window. ::"
msgstr ""

#: ../../../library/turtle.rst:1809
msgid ""
">>> screen.window_width()\n"
"640"
msgstr ""

#: ../../../library/turtle.rst:1816
msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr ""

#: ../../../library/turtle.rst:1820
msgid "Shut the turtlegraphics window."
msgstr ""

#: ../../../library/turtle.rst:1825
msgid "Bind bye() method to mouse clicks on the Screen."
msgstr ""

#: ../../../library/turtle.rst:1828
msgid ""
"If the value \"using_IDLE\" in the configuration dictionary is ``False`` "
"(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` "
"switch (no subprocess) is used, this value should be set to ``True`` in :"
"file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the "
"client script."
msgstr ""

#: ../../../library/turtle.rst:1837
msgid ""
"Set the size and position of the main window.  Default values of arguments "
"are stored in the configuration dicionary and can be changed via a :file:"
"`turtle.cfg` file."
msgstr ""

#: ../../../library/turtle.rst:1841
msgid ""
"if an integer, a size in pixels, if a float, a fraction of the screen; "
"default is 50% of screen"
msgstr ""

#: ../../../library/turtle.rst:1843
msgid ""
"if an integer, the height in pixels, if a float, a fraction of the screen; "
"default is 75% of screen"
msgstr ""

#: ../../../library/turtle.rst:1845
msgid ""
"if positive, starting position in pixels from the left edge of the screen, "
"if negative from the right edge, if None, center window horizontally"
msgstr ""

#: ../../../library/turtle.rst:1848
msgid ""
"if positive, starting position in pixels from the top edge of the screen, if "
"negative from the bottom edge, if None, center window vertically"
msgstr ""

#: ../../../library/turtle.rst:1852
msgid ""
">>> screen.setup (width=200, height=200, startx=0, starty=0)\n"
">>>              # sets window to 200x200 pixels, in upper left of screen\n"
">>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n"
">>>              # sets window to 75% of screen by 50% of screen and centers"
msgstr ""

#: ../../../library/turtle.rst:1862
msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr ""

#: ../../../library/turtle.rst:1865
msgid "Set title of turtle window to *titlestring*."
msgstr ""

#: ../../../library/turtle.rst:1867
msgid ">>> screen.title(\"Welcome to the turtle zoo!\")"
msgstr ""

#: ../../../library/turtle.rst:1873
msgid "The public classes of the module :mod:`turtle`"
msgstr ""

#: ../../../library/turtle.rst:1879
msgid ""
"a :class:`Tkinter.Canvas`, a :class:`ScrolledCanvas` or a :class:"
"`TurtleScreen`"
msgstr ""

#: ../../../library/turtle.rst:1882
msgid ""
"Create a turtle.  The turtle has all methods described above as \"methods of "
"Turtle/RawTurtle\"."
msgstr ""

#: ../../../library/turtle.rst:1888
msgid ""
"Subclass of RawTurtle, has the same interface but draws on a default :class:"
"`Screen` object created automatically when needed for the first time."
msgstr ""

#: ../../../library/turtle.rst:1894
msgid "a :class:`Tkinter.Canvas`"
msgstr ""

#: ../../../library/turtle.rst:1896
msgid ""
"Provides screen oriented methods like :func:`setbg` etc. that are described "
"above."
msgstr ""

#: ../../../library/turtle.rst:1901
msgid ""
"Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr ""

#: ../../../library/turtle.rst:1906
msgid ""
"some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas "
"with scrollbars added"
msgstr ""

#: ../../../library/turtle.rst:1909
msgid ""
"Used by class Screen, which thus automatically provides a ScrolledCanvas as "
"playground for the turtles."
msgstr ""

#: ../../../library/turtle.rst:1914
msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr ""

#: ../../../library/turtle.rst:1916
msgid ""
"Data structure modeling shapes.  The pair ``(type_, data)`` must follow this "
"specification:"
msgstr ""

#: ../../../library/turtle.rst:1921
msgid "*type_*"
msgstr ""

#: ../../../library/turtle.rst:1921
msgid "*data*"
msgstr ""

#: ../../../library/turtle.rst:1923
msgid "\"polygon\""
msgstr ""

#: ../../../library/turtle.rst:1923
msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr ""

#: ../../../library/turtle.rst:1924
msgid "\"image\""
msgstr ""

#: ../../../library/turtle.rst:1924
msgid "an image  (in this form only used internally!)"
msgstr ""

#: ../../../library/turtle.rst:1925
msgid "\"compound\""
msgstr ""

#: ../../../library/turtle.rst:1925
msgid ""
"``None`` (a compound shape has to be constructed using the :meth:"
"`addcomponent` method)"
msgstr ""

#: ../../../library/turtle.rst:1931
msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr ""

#: ../../../library/turtle.rst:1932
msgid "a color the *poly* will be filled with"
msgstr ""

#: ../../../library/turtle.rst:1933
msgid "a color for the poly's outline (if given)"
msgstr ""

#: ../../../library/turtle.rst:1935
msgid "Example:"
msgstr ""

#: ../../../library/turtle.rst:1937
msgid ""
">>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s = Shape(\"compound\")\n"
">>> s.addcomponent(poly, \"red\", \"blue\")\n"
">>> # ... add more components and then use register_shape()"
msgstr ""

#: ../../../library/turtle.rst:1944
msgid "See :ref:`compoundshapes`."
msgstr ""

#: ../../../library/turtle.rst:1949
msgid ""
"A two-dimensional vector class, used as a helper class for implementing "
"turtle graphics.  May be useful for turtle graphics programs too.  Derived "
"from tuple, so a vector is a tuple!"
msgstr ""

#: ../../../library/turtle.rst:1953
msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr ""

#: ../../../library/turtle.rst:1955
msgid "``a + b`` vector addition"
msgstr ""

#: ../../../library/turtle.rst:1956
msgid "``a - b`` vector subtraction"
msgstr ""

#: ../../../library/turtle.rst:1957
msgid "``a * b`` inner product"
msgstr ""

#: ../../../library/turtle.rst:1958
msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr ""

#: ../../../library/turtle.rst:1959
msgid "``abs(a)`` absolute value of a"
msgstr ""

#: ../../../library/turtle.rst:1960
msgid "``a.rotate(angle)`` rotation"
msgstr ""

#: ../../../library/turtle.rst:1964
msgid "Help and configuration"
msgstr ""

#: ../../../library/turtle.rst:1967
msgid "How to use help"
msgstr ""

#: ../../../library/turtle.rst:1969
msgid ""
"The public methods of the Screen and Turtle classes are documented "
"extensively via docstrings.  So these can be used as online-help via the "
"Python help facilities:"
msgstr ""

#: ../../../library/turtle.rst:1973
msgid ""
"When using IDLE, tooltips show the signatures and first lines of the "
"docstrings of typed in function-/method calls."
msgstr ""

#: ../../../library/turtle.rst:1976
msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr ""

#: ../../../library/turtle.rst:1978
msgid ""
">>> help(Screen.bgcolor)\n"
"Help on method bgcolor in module turtle:\n"
"\n"
"bgcolor(self, *args) unbound turtle.Screen method\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"\n"
"      >>> screen.bgcolor(\"orange\")\n"
"      >>> screen.bgcolor()\n"
"      \"orange\"\n"
"      >>> screen.bgcolor(0.5,0,0.5)\n"
"      >>> screen.bgcolor()\n"
"      \"#800080\"\n"
"\n"
">>> help(Turtle.penup)\n"
"Help on method penup in module turtle:\n"
"\n"
"penup(self) unbound turtle.Turtle method\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    >>> turtle.penup()"
msgstr ""

#: ../../../library/turtle.rst:2007
msgid ""
"The docstrings of the functions which are derived from methods have a "
"modified form::"
msgstr ""

#: ../../../library/turtle.rst:2010
msgid ""
">>> help(bgcolor)\n"
"Help on function bgcolor in module turtle:\n"
"\n"
"bgcolor(*args)\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"    Example::\n"
"\n"
"      >>> bgcolor(\"orange\")\n"
"      >>> bgcolor()\n"
"      \"orange\"\n"
"      >>> bgcolor(0.5,0,0.5)\n"
"      >>> bgcolor()\n"
"      \"#800080\"\n"
"\n"
">>> help(penup)\n"
"Help on function penup in module turtle:\n"
"\n"
"penup()\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    Example:\n"
"    >>> penup()"
msgstr ""

#: ../../../library/turtle.rst:2041
msgid ""
"These modified docstrings are created automatically together with the "
"function definitions that are derived from the methods at import time."
msgstr ""

#: ../../../library/turtle.rst:2046
msgid "Translation of docstrings into different languages"
msgstr ""

#: ../../../library/turtle.rst:2048
msgid ""
"There is a utility to create a dictionary the keys of which are the method "
"names and the values of which are the docstrings of the public methods of "
"the classes Screen and Turtle."
msgstr ""

#: ../../../library/turtle.rst:2054
msgid "a string, used as filename"
msgstr ""

#: ../../../library/turtle.rst:2056
msgid ""
"Create and write docstring-dictionary to a Python script with the given "
"filename.  This function has to be called explicitly (it is not used by the "
"turtle graphics classes).  The docstring dictionary will be written to the "
"Python script :file:`{filename}.py`.  It is intended to serve as a template "
"for translation of the docstrings into different languages."
msgstr ""

#: ../../../library/turtle.rst:2062
msgid ""
"If you (or your students) want to use :mod:`turtle` with online help in your "
"native language, you have to translate the docstrings and save the resulting "
"file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""

#: ../../../library/turtle.rst:2066
msgid ""
"If you have an appropriate entry in your :file:`turtle.cfg` file this "
"dictionary will be read in at import time and will replace the original "
"English docstrings."
msgstr ""

#: ../../../library/turtle.rst:2069
msgid ""
"At the time of this writing there are docstring dictionaries in German and "
"in Italian.  (Requests please to glingl@aon.at.)"
msgstr ""

#: ../../../library/turtle.rst:2075
msgid "How to configure Screen and Turtles"
msgstr ""

#: ../../../library/turtle.rst:2077
msgid ""
"The built-in default configuration mimics the appearance and behaviour of "
"the old turtle module in order to retain best possible compatibility with it."
msgstr ""

#: ../../../library/turtle.rst:2080
msgid ""
"If you want to use a different configuration which better reflects the "
"features of this module or which better fits to your needs, e.g. for use in "
"a classroom, you can prepare a configuration file ``turtle.cfg`` which will "
"be read at import time and modify the configuration according to its "
"settings."
msgstr ""

#: ../../../library/turtle.rst:2085
msgid ""
"The built in configuration would correspond to the following turtle.cfg::"
msgstr ""

#: ../../../library/turtle.rst:2087
msgid ""
"width = 0.5\n"
"height = 0.75\n"
"leftright = None\n"
"topbottom = None\n"
"canvwidth = 400\n"
"canvheight = 300\n"
"mode = standard\n"
"colormode = 1.0\n"
"delay = 10\n"
"undobuffersize = 1000\n"
"shape = classic\n"
"pencolor = black\n"
"fillcolor = black\n"
"resizemode = noresize\n"
"visible = True\n"
"language = english\n"
"exampleturtle = turtle\n"
"examplescreen = screen\n"
"title = Python Turtle Graphics\n"
"using_IDLE = False"
msgstr ""

#: ../../../library/turtle.rst:2108
msgid "Short explanation of selected entries:"
msgstr ""

#: ../../../library/turtle.rst:2110
msgid ""
"The first four lines correspond to the arguments of the :meth:`Screen.setup` "
"method."
msgstr ""

#: ../../../library/turtle.rst:2112
msgid ""
"Line 5 and 6 correspond to the arguments of the method :meth:`Screen."
"screensize`."
msgstr ""

#: ../../../library/turtle.rst:2114
msgid ""
"*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For "
"more info try ``help(shape)``."
msgstr ""

#: ../../../library/turtle.rst:2116
msgid ""
"If you want to use no fillcolor (i.e. make the turtle transparent), you have "
"to write ``fillcolor = \"\"`` (but all nonempty strings must not have quotes "
"in the cfg-file)."
msgstr ""

#: ../../../library/turtle.rst:2119
msgid ""
"If you want to reflect the turtle its state, you have to use ``resizemode = "
"auto``."
msgstr ""

#: ../../../library/turtle.rst:2121
msgid ""
"If you set e.g. ``language = italian`` the docstringdict :file:"
"`turtle_docstringdict_italian.py` will be loaded at import time (if present "
"on the import path, e.g. in the same directory as :mod:`turtle`."
msgstr ""

#: ../../../library/turtle.rst:2124
msgid ""
"The entries *exampleturtle* and *examplescreen* define the names of these "
"objects as they occur in the docstrings.  The transformation of method-"
"docstrings to function-docstrings will delete these names from the "
"docstrings."
msgstr ""

#: ../../../library/turtle.rst:2128
msgid ""
"*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its -"
"n switch (\"no subprocess\").  This will prevent :func:`exitonclick` to "
"enter the mainloop."
msgstr ""

#: ../../../library/turtle.rst:2132
msgid ""
"There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` "
"is stored and an additional one in the current working directory.  The "
"latter will override the settings of the first one."
msgstr ""

#: ../../../library/turtle.rst:2136
msgid ""
"The :file:`Demo/turtle` directory contains a :file:`turtle.cfg` file.  You "
"can study it as an example and see its effects when running the demos "
"(preferably not from within the demo-viewer)."
msgstr ""

#: ../../../library/turtle.rst:2142
msgid "Demo scripts"
msgstr ""

#: ../../../library/turtle.rst:2144
msgid ""
"There is a set of demo scripts in the turtledemo directory located in the :"
"file:`Demo/turtle` directory in the source distribution."
msgstr ""

#: ../../../library/turtle.rst:2147
msgid "It contains:"
msgstr ""

#: ../../../library/turtle.rst:2149
msgid ""
"a set of 15 demo scripts demonstrating different features of the new module :"
"mod:`turtle`"
msgstr ""

#: ../../../library/turtle.rst:2151
msgid ""
"a demo viewer :file:`turtleDemo.py` which can be used to view the sourcecode "
"of the scripts and run them at the same time. 14 of the examples can be "
"accessed via the Examples menu; all of them can also be run standalone."
msgstr ""

#: ../../../library/turtle.rst:2154
msgid ""
"The example :file:`turtledemo_two_canvases.py` demonstrates the simultaneous "
"use of two canvases with the turtle module.  Therefore it only can be run "
"standalone."
msgstr ""

#: ../../../library/turtle.rst:2157
msgid ""
"There is a :file:`turtle.cfg` file in this directory, which also serves as "
"an example for how to write and use such files."
msgstr ""

#: ../../../library/turtle.rst:2160
msgid "The demoscripts are:"
msgstr ""

#: ../../../library/turtle.rst:2163
msgid "Name"
msgstr ""

#: ../../../library/turtle.rst:2163
msgid "Description"
msgstr ""

#: ../../../library/turtle.rst:2163
msgid "Features"
msgstr ""

#: ../../../library/turtle.rst:2165
msgid "bytedesign"
msgstr ""

#: ../../../library/turtle.rst:2165
msgid "complex classical turtlegraphics pattern"
msgstr ""

#: ../../../library/turtle.rst:2165
msgid ":func:`tracer`, delay, :func:`update`"
msgstr ""

#: ../../../library/turtle.rst:2168
msgid "chaos"
msgstr ""

#: ../../../library/turtle.rst:2168
msgid ""
"graphs verhust dynamics, proves that you must not trust computers' "
"computations"
msgstr ""

#: ../../../library/turtle.rst:2168
msgid "world coordinates"
msgstr ""

#: ../../../library/turtle.rst:2172
msgid "clock"
msgstr ""

#: ../../../library/turtle.rst:2172
msgid "analog clock showing time of your computer"
msgstr ""

#: ../../../library/turtle.rst:2172
msgid "turtles as clock's hands, ontimer"
msgstr ""

#: ../../../library/turtle.rst:2175
msgid "colormixer"
msgstr ""

#: ../../../library/turtle.rst:2175
msgid "experiment with r, g, b"
msgstr ""

#: ../../../library/turtle.rst:2177
msgid "fractalcurves"
msgstr ""

#: ../../../library/turtle.rst:2177
msgid "Hilbert & Koch curves"
msgstr ""

#: ../../../library/turtle.rst:2177
msgid "recursion"
msgstr ""

#: ../../../library/turtle.rst:2179
msgid "lindenmayer"
msgstr ""

#: ../../../library/turtle.rst:2179
msgid "ethnomathematics (indian kolams)"
msgstr ""

#: ../../../library/turtle.rst:2179
msgid "L-System"
msgstr ""

#: ../../../library/turtle.rst:2182
msgid "minimal_hanoi"
msgstr ""

#: ../../../library/turtle.rst:2182
msgid "Towers of Hanoi"
msgstr ""

#: ../../../library/turtle.rst:2182
msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr ""

#: ../../../library/turtle.rst:2186
msgid "paint"
msgstr ""

#: ../../../library/turtle.rst:2186
msgid "super minimalistic drawing program"
msgstr ""

#: ../../../library/turtle.rst:2189
msgid "peace"
msgstr ""

#: ../../../library/turtle.rst:2189
msgid "elementary"
msgstr ""

#: ../../../library/turtle.rst:2189
msgid "turtle: appearance and animation"
msgstr ""

#: ../../../library/turtle.rst:2192
msgid "penrose"
msgstr ""

#: ../../../library/turtle.rst:2192
msgid "aperiodic tiling with kites and darts"
msgstr ""

#: ../../../library/turtle.rst:2195
msgid "planet_and_moon"
msgstr ""

#: ../../../library/turtle.rst:2195
msgid "simulation of gravitational system"
msgstr ""

#: ../../../library/turtle.rst:2195
msgid "compound shapes, :class:`Vec2D`"
msgstr ""

#: ../../../library/turtle.rst:2198
msgid "tree"
msgstr ""

#: ../../../library/turtle.rst:2198
msgid "a (graphical) breadth first tree (using generators)"
msgstr ""

#: ../../../library/turtle.rst:2201
msgid "wikipedia"
msgstr ""

#: ../../../library/turtle.rst:2201
msgid "a pattern from the wikipedia article on turtle graphics"
msgstr ""

#: ../../../library/turtle.rst:2201
msgid ":func:`clone`, :func:`undo`"
msgstr ""

#: ../../../library/turtle.rst:2204
msgid "yingyang"
msgstr ""

#: ../../../library/turtle.rst:2204
msgid "another elementary example"
msgstr ""

#: ../../../library/turtle.rst:2207
msgid "Have fun!"
msgstr ""
