# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/2to3.rst:4
msgid "2to3 - Automated Python 2 to 3 code translation"
msgstr ""

#: ../../../library/2to3.rst:8
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard "
"library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3.  :mod:"
"`lib2to3` could also be adapted to custom applications in which Python code "
"needs to be edited automatically."
msgstr ""

#: ../../../library/2to3.rst:20
msgid "Using 2to3"
msgstr ""

#: ../../../library/2to3.rst:22
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""

#: ../../../library/2to3.rst:25
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The "
"directories are to recursively traversed for Python sources."
msgstr ""

#: ../../../library/2to3.rst:28
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr ""

#: ../../../library/2to3.rst:30
msgid ""
"def greet(name):\n"
"    print \"Hello, {0}!\".format(name)\n"
"print \"What's your name?\"\n"
"name = raw_input()\n"
"greet(name)"
msgstr ""

#: ../../../library/2to3.rst:36
msgid "It can be converted to Python 3.x code via 2to3 on the command line::"
msgstr ""

#: ../../../library/2to3.rst:38
msgid "$ 2to3 example.py"
msgstr ""

#: ../../../library/2to3.rst:40
msgid ""
"A diff against the original source file is printed.  2to3 can also write the "
"needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`-n` is also given.)  Writing the "
"changes back is enabled with the :option:`-w` flag::"
msgstr ""

#: ../../../library/2to3.rst:45
msgid "$ 2to3 -w example.py"
msgstr ""

#: ../../../library/2to3.rst:47
msgid "After transformation, :file:`example.py` looks like this::"
msgstr ""

#: ../../../library/2to3.rst:49
msgid ""
"def greet(name):\n"
"    print(\"Hello, {0}!\".format(name))\n"
"print(\"What's your name?\")\n"
"name = input()\n"
"greet(name)"
msgstr ""

#: ../../../library/2to3.rst:55
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr ""

#: ../../../library/2to3.rst:57
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The :"
"option:`-l` flag lists all available fixers.  An explicit set of fixers to "
"run can be given with :option:`-f`.  Likewise the :option:`-x` explicitly "
"disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers::"
msgstr ""

#: ../../../library/2to3.rst:62
msgid "$ 2to3 -f imports -f has_key example.py"
msgstr ""

#: ../../../library/2to3.rst:64
msgid "This command runs every fixer except the ``apply`` fixer::"
msgstr ""

#: ../../../library/2to3.rst:66
msgid "$ 2to3 -x apply example.py"
msgstr ""

#: ../../../library/2to3.rst:68
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run::"
msgstr ""

#: ../../../library/2to3.rst:72
msgid "$ 2to3 -f all -f idioms example.py"
msgstr ""

#: ../../../library/2to3.rst:74
msgid "Notice how passing ``all`` enables all default fixers."
msgstr ""

#: ../../../library/2to3.rst:76
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a "
"warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""

#: ../../../library/2to3.rst:81
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`-d` "
"flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""

#: ../../../library/2to3.rst:86
msgid ""
"The :option:`-v` option enables output of more information on the "
"translation process."
msgstr ""

#: ../../../library/2to3.rst:89
msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpert :func:"
"`print` as a function.  This change can also be enabled manually with the :"
"option:`-p` flag.  Use :option:`-p` to run fixers on code that already has "
"had its print statements converted."
msgstr ""

#: ../../../library/2to3.rst:101
msgid "Fixers"
msgstr ""

#: ../../../library/2to3.rst:103
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""

#: ../../../library/2to3.rst:110
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""

#: ../../../library/2to3.rst:115
msgid "Converts :class:`basestring` to :class:`str`."
msgstr ""

#: ../../../library/2to3.rst:119
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""

#: ../../../library/2to3.rst:125
msgid ""
"Converts ``callable(x)`` to ``isinstance(x, collections.Callable)``, adding "
"an import to :mod:`collections` if needed."
msgstr ""

#: ../../../library/2to3.rst:130
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to :"
"meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and :meth:"
"`dict.itervalues` to :meth:`dict.values`.  Similarly, :meth:`dict."
"viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` are converted "
"respectively to :meth:`dict.items`, :meth:`dict.keys` and :meth:`dict."
"values`.  It also wraps existing usages of :meth:`dict.items`, :meth:`dict."
"keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""

#: ../../../library/2to3.rst:140
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr ""

#: ../../../library/2to3.rst:144
msgid "Converts the :keyword:`exec` statement to the :func:`exec` function."
msgstr ""

#: ../../../library/2to3.rst:148
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""

#: ../../../library/2to3.rst:153
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ""

#: ../../../library/2to3.rst:158
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr ""

#: ../../../library/2to3.rst:162
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""

#: ../../../library/2to3.rst:167
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr ""

#: ../../../library/2to3.rst:171
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr ""

#: ../../../library/2to3.rst:175
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr ""

#: ../../../library/2to3.rst:179
msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of :"
"func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""

#: ../../../library/2to3.rst:185
msgid ""
"L = list(some_iterable)\n"
"L.sort()"
msgstr ""

#: ../../../library/2to3.rst:188
msgid "is changed to ::"
msgstr ""

#: ../../../library/2to3.rst:190
msgid "L = sorted(some_iterable)"
msgstr ""

#: ../../../library/2to3.rst:194
msgid "Detects sibling imports and converts them to relative imports."
msgstr ""

#: ../../../library/2to3.rst:198
msgid "Handles module renames in the standard library."
msgstr ""

#: ../../../library/2to3.rst:202
msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""

#: ../../../library/2to3.rst:207
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``"
msgstr ""

#: ../../../library/2to3.rst:211
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr ""

#: ../../../library/2to3.rst:215
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"(int))``."
msgstr ""

#: ../../../library/2to3.rst:221
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""

#: ../../../library/2to3.rst:227
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and :"
"func:`itertools.imap` to their built-in equivalents. :func:`itertools."
"ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""

#: ../../../library/2to3.rst:233
msgid ""
"Strips the ``L`` prefix on long literals and renames :class:`long` to :class:"
"`int`."
msgstr ""

#: ../../../library/2to3.rst:238
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)`` "
"to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""

#: ../../../library/2to3.rst:244
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""

#: ../../../library/2to3.rst:249
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr ""

#: ../../../library/2to3.rst:254
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr ""

#: ../../../library/2to3.rst:258
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the :func:"
"`next` function.  It also renames :meth:`next` methods to :meth:`~object."
"__next__`."
msgstr ""

#: ../../../library/2to3.rst:264
msgid "Renames :meth:`~object.__nonzero__` to :meth:`~object.__bool__`."
msgstr ""

#: ../../../library/2to3.rst:268
msgid "Converts octal literals into the new syntax."
msgstr ""

#: ../../../library/2to3.rst:272
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""

#: ../../../library/2to3.rst:277
msgid "Converts the :keyword:`print` statement to the :func:`print` function."
msgstr ""

#: ../../../library/2to3.rst:281
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in 3.0."
msgstr ""

#: ../../../library/2to3.rst:287
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr ""

#: ../../../library/2to3.rst:291
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ""

#: ../../../library/2to3.rst:295
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr ""

#: ../../../library/2to3.rst:299
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr ""

#: ../../../library/2to3.rst:303
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr ""

#: ../../../library/2to3.rst:308
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr ""

#: ../../../library/2to3.rst:312
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, :data:"
"`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""

#: ../../../library/2to3.rst:317
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr ""

#: ../../../library/2to3.rst:321
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr ""

#: ../../../library/2to3.rst:326
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ""

#: ../../../library/2to3.rst:331
msgid "Renames :class:`unicode` to :class:`str`."
msgstr ""

#: ../../../library/2to3.rst:335
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr ""

#: ../../../library/2to3.rst:340
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr ""

#: ../../../library/2to3.rst:345
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""

#: ../../../library/2to3.rst:350
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr ""

#: ../../../library/2to3.rst:354
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""

#: ../../../library/2to3.rst:359
msgid ":mod:`lib2to3` - 2to3's library"
msgstr ""

#: ../../../library/2to3.rst:370
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ""
