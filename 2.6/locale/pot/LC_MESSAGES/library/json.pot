# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/json.rst:2
msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ""

#: ../../../library/json.rst:10
msgid ""
"JSON (JavaScript Object Notation) <http://json.org> is a subset of "
"JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data "
"interchange format."
msgstr ""

#: ../../../library/json.rst:13
msgid ""
":mod:`json` exposes an API familiar to users of the standard library :mod:"
"`marshal` and :mod:`pickle` modules."
msgstr ""

#: ../../../library/json.rst:16
msgid "Encoding basic Python object hierarchies::"
msgstr ""

#: ../../../library/json.rst:35
msgid "Compact encoding::"
msgstr ""

#: ../../../library/json.rst:41
msgid "Pretty printing::"
msgstr ""

#: ../../../library/json.rst:50
msgid "Decoding JSON::"
msgstr ""

#: ../../../library/json.rst:62
msgid "Specializing JSON object decoding::"
msgstr ""

#: ../../../library/json.rst:77
msgid "Extending :class:`JSONEncoder`::"
msgstr ""

#: ../../../library/json.rst:96
msgid "Using json.tool from the shell to validate and pretty-print::"
msgstr ""

#: ../../../library/json.rst:109
msgid ""
"The JSON produced by this module's default settings is a subset of YAML, so "
"it may be used as a serializer for that as well."
msgstr ""

#: ../../../library/json.rst:114
msgid "Basic Usage"
msgstr ""

#: ../../../library/json.rst:118
msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-"
"supporting file-like object)."
msgstr ""

#: ../../../library/json.rst:121
msgid ""
"If *skipkeys* is ``True`` (default: ``False``), then dict keys that are not "
"of a basic type (:class:`str`, :class:`unicode`, :class:`int`, :class:"
"`long`, :class:`float`, :class:`bool`, ``None``) will be skipped instead of "
"raising a :exc:`TypeError`."
msgstr ""

#: ../../../library/json.rst:126
msgid ""
"If *ensure_ascii* is ``False`` (default: ``True``), then some chunks written "
"to *fp* may be :class:`unicode` instances, subject to normal Python :class:"
"`str` to :class:`unicode` coercion rules.  Unless ``fp.write()`` explicitly "
"understands :class:`unicode` (as in :func:`codecs.getwriter`) this is likely "
"to cause an error."
msgstr ""

#: ../../../library/json.rst:132
msgid ""
"If *check_circular* is ``False`` (default: ``True``), then the circular "
"reference check for container types will be skipped and a circular reference "
"will result in an :exc:`OverflowError` (or worse)."
msgstr ""

#: ../../../library/json.rst:136
msgid ""
"If *allow_nan* is ``False`` (default: ``True``), then it will be a :exc:"
"`ValueError` to serialize out of range :class:`float` values (``nan``, "
"``inf``, ``-inf``) in strict compliance of the JSON specification, instead "
"of using the JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``)."
msgstr ""

#: ../../../library/json.rst:141
msgid ""
"If *indent* is a non-negative integer, then JSON array elements and object "
"members will be pretty-printed with that indent level.  An indent level of 0 "
"will only insert newlines.  ``None`` (the default) selects the most compact "
"representation."
msgstr ""

#: ../../../library/json.rst:146
msgid ""
"If *separators* is an ``(item_separator, dict_separator)`` tuple, then it "
"will be used instead of the default ``(', ', ': ')`` separators.  ``(',', "
"':')`` is the most compact JSON representation."
msgstr ""

#: ../../../library/json.rst:150
msgid ""
"*encoding* is the character encoding for str instances, default is UTF-8."
msgstr ""

#: ../../../library/json.rst:152
msgid ""
"*default(obj)* is a function that should return a serializable version of "
"*obj* or raise :exc:`TypeError`.  The default simply raises :exc:`TypeError`."
msgstr ""

#: ../../../library/json.rst:155
msgid ""
"To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the :"
"meth:`default` method to serialize additional types), specify it with the "
"*cls* kwarg."
msgstr ""

#: ../../../library/json.rst:162
msgid "Serialize *obj* to a JSON formatted :class:`str`."
msgstr ""

#: ../../../library/json.rst:164
msgid ""
"If *ensure_ascii* is ``False``, then the return value will be a :class:"
"`unicode` instance.  The other arguments have the same meaning as in :func:"
"`dump`."
msgstr ""

#: ../../../library/json.rst:171
msgid ""
"Deserialize *fp* (a ``.read()``-supporting file-like object containing a "
"JSON document) to a Python object."
msgstr ""

#: ../../../library/json.rst:174
msgid ""
"If the contents of *fp* are encoded with an ASCII based encoding other than "
"UTF-8 (e.g. latin-1), then an appropriate *encoding* name must be specified. "
"Encodings that are not ASCII based (such as UCS-2) are not allowed, and "
"should be wrapped with ``codecs.getreader(encoding)(fp)``, or simply decoded "
"to a :class:`unicode` object and passed to :func:`loads`."
msgstr ""

#: ../../../library/json.rst:180
msgid ""
"*object_hook* is an optional function that will be called with the result of "
"any object literal decoded (a :class:`dict`).  The return value of "
"*object_hook* will be used instead of the :class:`dict`.  This feature can "
"be used to implement custom decoders (e.g. JSON-RPC class hinting)."
msgstr ""

#: ../../../library/json.rst:185 ../../../library/json.rst:262
msgid ""
"*parse_float*, if specified, will be called with the string of every JSON "
"float to be decoded.  By default, this is equivalent to ``float(num_str)``. "
"This can be used to use another datatype or parser for JSON floats (e.g. :"
"class:`decimal.Decimal`)."
msgstr ""

#: ../../../library/json.rst:190 ../../../library/json.rst:267
msgid ""
"*parse_int*, if specified, will be called with the string of every JSON int "
"to be decoded.  By default, this is equivalent to ``int(num_str)``.  This "
"can be used to use another datatype or parser for JSON integers (e.g. :class:"
"`float`)."
msgstr ""

#: ../../../library/json.rst:195 ../../../library/json.rst:272
msgid ""
"*parse_constant*, if specified, will be called with one of the following "
"strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``, ``'null'``, ``'true'``, "
"``'false'``.  This can be used to raise an exception if invalid JSON numbers "
"are encountered."
msgstr ""

#: ../../../library/json.rst:200
msgid ""
"To use a custom :class:`JSONDecoder` subclass, specify it with the ``cls`` "
"kwarg.  Additional keyword arguments will be passed to the constructor of "
"the class."
msgstr ""

#: ../../../library/json.rst:207
msgid ""
"Deserialize *s* (a :class:`str` or :class:`unicode` instance containing a "
"JSON document) to a Python object."
msgstr ""

#: ../../../library/json.rst:210
msgid ""
"If *s* is a :class:`str` instance and is encoded with an ASCII based "
"encoding other than UTF-8 (e.g. latin-1), then an appropriate *encoding* "
"name must be specified.  Encodings that are not ASCII based (such as UCS-2) "
"are not allowed and should be decoded to :class:`unicode` first."
msgstr ""

#: ../../../library/json.rst:215
msgid "The other arguments have the same meaning as in :func:`dump`."
msgstr ""

#: ../../../library/json.rst:219
msgid "Encoders and decoders"
msgstr ""

#: ../../../library/json.rst:223
msgid "Simple JSON decoder."
msgstr ""

#: ../../../library/json.rst:225
msgid "Performs the following translations in decoding by default:"
msgstr ""

#: ../../../library/json.rst:228 ../../../library/json.rst:300
msgid "JSON"
msgstr ""

#: ../../../library/json.rst:228 ../../../library/json.rst:300
msgid "Python"
msgstr ""

#: ../../../library/json.rst:230 ../../../library/json.rst:302
msgid "object"
msgstr ""

#: ../../../library/json.rst:230 ../../../library/json.rst:302
msgid "dict"
msgstr ""

#: ../../../library/json.rst:232 ../../../library/json.rst:304
msgid "array"
msgstr ""

#: ../../../library/json.rst:232
msgid "list"
msgstr ""

#: ../../../library/json.rst:234 ../../../library/json.rst:306
msgid "string"
msgstr ""

#: ../../../library/json.rst:234
msgid "unicode"
msgstr ""

#: ../../../library/json.rst:236
msgid "number (int)"
msgstr ""

#: ../../../library/json.rst:236
msgid "int, long"
msgstr ""

#: ../../../library/json.rst:238
msgid "number (real)"
msgstr ""

#: ../../../library/json.rst:238
msgid "float"
msgstr ""

#: ../../../library/json.rst:240 ../../../library/json.rst:310
msgid "true"
msgstr ""

#: ../../../library/json.rst:240 ../../../library/json.rst:310
msgid "True"
msgstr ""

#: ../../../library/json.rst:242 ../../../library/json.rst:312
msgid "false"
msgstr ""

#: ../../../library/json.rst:242 ../../../library/json.rst:312
msgid "False"
msgstr ""

#: ../../../library/json.rst:244 ../../../library/json.rst:314
msgid "null"
msgstr ""

#: ../../../library/json.rst:244 ../../../library/json.rst:314
msgid "None"
msgstr ""

#: ../../../library/json.rst:247
msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

#: ../../../library/json.rst:250
msgid ""
"*encoding* determines the encoding used to interpret any :class:`str` "
"objects decoded by this instance (UTF-8 by default).  It has no effect when "
"decoding :class:`unicode` objects."
msgstr ""

#: ../../../library/json.rst:254
msgid ""
"Note that currently only encodings that are a superset of ASCII work, "
"strings of other encodings should be passed in as :class:`unicode`."
msgstr ""

#: ../../../library/json.rst:257
msgid ""
"*object_hook*, if specified, will be called with the result of every JSON "
"object decoded and its return value will be used in place of the given :"
"class:`dict`.  This can be used to provide custom deserializations (e.g. to "
"support JSON-RPC class hinting)."
msgstr ""

#: ../../../library/json.rst:280
msgid ""
"Return the Python representation of *s* (a :class:`str` or :class:`unicode` "
"instance containing a JSON document)"
msgstr ""

#: ../../../library/json.rst:285
msgid ""
"Decode a JSON document from *s* (a :class:`str` or :class:`unicode` "
"beginning with a JSON document) and return a 2-tuple of the Python "
"representation and the index in *s* where the document ended."
msgstr ""

#: ../../../library/json.rst:289
msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr ""

#: ../../../library/json.rst:295
msgid "Extensible JSON encoder for Python data structures."
msgstr ""

#: ../../../library/json.rst:297
msgid "Supports the following objects and types by default:"
msgstr ""

#: ../../../library/json.rst:304
msgid "list, tuple"
msgstr ""

#: ../../../library/json.rst:306
msgid "str, unicode"
msgstr ""

#: ../../../library/json.rst:308
msgid "int, long, float"
msgstr ""

#: ../../../library/json.rst:308
msgid "number"
msgstr ""

#: ../../../library/json.rst:317
msgid ""
"To extend this to recognize other objects, subclass and implement a :meth:"
"`default` method with another method that returns a serializable object for "
"``o`` if possible, otherwise it should call the superclass implementation "
"(to raise :exc:`TypeError`)."
msgstr ""

#: ../../../library/json.rst:322
msgid ""
"If *skipkeys* is ``False`` (the default), then it is a :exc:`TypeError` to "
"attempt encoding of keys that are not str, int, long, float or None.  If "
"*skipkeys* is ``True``, such items are simply skipped."
msgstr ""

#: ../../../library/json.rst:326
msgid ""
"If *ensure_ascii* is ``True`` (the default), the output is guaranteed to be :"
"class:`str` objects with all incoming unicode characters escaped.  If "
"*ensure_ascii* is ``False``, the output will be a unicode object."
msgstr ""

#: ../../../library/json.rst:330
msgid ""
"If *check_circular* is ``True`` (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding to "
"prevent an infinite recursion (which would cause an :exc:`OverflowError`). "
"Otherwise, no such check takes place."
msgstr ""

#: ../../../library/json.rst:335
msgid ""
"If *allow_nan* is ``True`` (the default), then ``NaN``, ``Infinity``, and ``-"
"Infinity`` will be encoded as such.  This behavior is not JSON specification "
"compliant, but is consistent with most JavaScript based encoders and "
"decoders.  Otherwise, it will be a :exc:`ValueError` to encode such floats."
msgstr ""

#: ../../../library/json.rst:341
msgid ""
"If *sort_keys* is ``True`` (the default), then the output of dictionaries "
"will be sorted by key; this is useful for regression tests to ensure that "
"JSON serializations can be compared on a day-to-day basis."
msgstr ""

#: ../../../library/json.rst:345
msgid ""
"If *indent* is a non-negative integer (it is ``None`` by default), then JSON "
"array elements and object members will be pretty-printed with that indent "
"level.  An indent level of 0 will only insert newlines.  ``None`` is the "
"most compact representation."
msgstr ""

#: ../../../library/json.rst:350
msgid ""
"If specified, *separators* should be an ``(item_separator, key_separator)`` "
"tuple.  The default is ``(', ', ': ')``.  To get the most compact JSON "
"representation, you should specify ``(',', ':')`` to eliminate whitespace."
msgstr ""

#: ../../../library/json.rst:354
msgid ""
"If specified, *default* is a function that gets called for objects that "
"can't otherwise be serialized.  It should return a JSON encodable version of "
"the object or raise a :exc:`TypeError`."
msgstr ""

#: ../../../library/json.rst:358
msgid ""
"If *encoding* is not ``None``, then all input strings will be transformed "
"into unicode using that encoding prior to JSON-encoding.  The default is "
"UTF-8."
msgstr ""

#: ../../../library/json.rst:365
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a :exc:"
"`TypeError`)."
msgstr ""

#: ../../../library/json.rst:369
msgid ""
"For example, to support arbitrary iterators, you could implement default "
"like this::"
msgstr ""

#: ../../../library/json.rst:384
msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For "
"example::"
msgstr ""

#: ../../../library/json.rst:393
msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr ""
