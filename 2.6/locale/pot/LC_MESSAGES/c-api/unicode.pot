# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:11
msgid "Unicode Objects"
msgstr ""

#: ../../../c-api/unicode.rst:15
msgid "Unicode Type"
msgstr ""

#: ../../../c-api/unicode.rst:17
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""

#: ../../../c-api/unicode.rst:35
msgid ""
"Note that UCS2 and UCS4 Python builds are not binary compatible. Please keep "
"this in mind when writing extensions or interfaces."
msgstr ""

#: ../../../c-api/unicode.rst:49
msgid ""
"The following APIs are really C macros and can be used to do fast checks and "
"to access internal read-only data of Unicode objects:"
msgstr ""

#: ../../../c-api/unicode.rst:110
msgid "Unicode Character Properties"
msgstr ""

#: ../../../c-api/unicode.rst:112
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

#: ../../../c-api/unicode.rst:166
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

#: ../../../c-api/unicode.rst:203
msgid "Plain Py_UNICODE"
msgstr ""

#: ../../../c-api/unicode.rst:205
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:260
msgid ""
"If the platform supports :ctype:`wchar_t` and provides a header file wchar."
"h, Python can interface directly to this type using the following functions. "
"Support is optimized if Python's own :ctype:`Py_UNICODE` type is identical "
"to the system's :ctype:`wchar_t`."
msgstr ""

#: ../../../c-api/unicode.rst:267
msgid "wchar_t Support"
msgstr ""

#: ../../../c-api/unicode.rst:269
msgid "wchar_t support for platforms which support it:"
msgstr ""

#: ../../../c-api/unicode.rst:300
msgid "Built-in Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:302
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: ../../../c-api/unicode.rst:305
msgid ""
"Many of the following APIs take two arguments encoding and errors. These "
"parameters encoding and errors have the same semantics as the ones of the "
"built-in :func:`unicode` Unicode object constructor."
msgstr ""

#: ../../../c-api/unicode.rst:309
msgid ""
"Setting encoding to *NULL* causes the default encoding to be used which is "
"ASCII.  The file system calls should use :cdata:"
"`Py_FileSystemDefaultEncoding` as the encoding for file names. This variable "
"should be treated as read-only: On some systems, it will be a pointer to a "
"static string, on others, it will change at run-time (such as when the "
"application invokes setlocale)."
msgstr ""

#: ../../../c-api/unicode.rst:315
msgid ""
"Error handling is set by errors which may also be set to *NULL* meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../../../c-api/unicode.rst:319
msgid ""
"The codecs all use a similar interface.  Only deviation from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../../../c-api/unicode.rst:324
msgid "Generic Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:326
msgid "These are the generic codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:365
msgid "UTF-8 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:367
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:412
msgid "UTF-32 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:414
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:488
msgid "UTF-16 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:490
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:571
msgid "UTF-7 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:573
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:603
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:605
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:637
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:639
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:671
msgid "Latin-1 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:673
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: ../../../c-api/unicode.rst:705
msgid "ASCII Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:707
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../../../c-api/unicode.rst:739
msgid "Character Map Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:741
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:743
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping to "
"encode and decode characters."
msgstr ""

#: ../../../c-api/unicode.rst:748
msgid ""
"Decoding mappings must map single string characters to single Unicode "
"characters, integers (which are then interpreted as Unicode ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../../../c-api/unicode.rst:752
msgid ""
"Encoding mappings must map single Unicode characters to single string "
"characters, integers (which are then interpreted as Latin-1 ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../../../c-api/unicode.rst:756
msgid ""
"The mapping objects provided must only support the __getitem__ mapping "
"interface."
msgstr ""

#: ../../../c-api/unicode.rst:759
msgid ""
"If a character lookup fails with a LookupError, the character is copied as-"
"is meaning that its ordinal value will be interpreted as Unicode or Latin-1 "
"ordinal resp. Because of this, mappings only need to contain those mappings "
"which map characters to different code points."
msgstr ""

#: ../../../c-api/unicode.rst:799
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../../../c-api/unicode.rst:819
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: ../../../c-api/unicode.rst:826
msgid "MBCS codecs for Windows"
msgstr ""

#: ../../../c-api/unicode.rst:867
msgid "Methods & Slots"
msgstr ""

#: ../../../c-api/unicode.rst:872
msgid "Methods and Slot Functions"
msgstr ""

#: ../../../c-api/unicode.rst:874
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../../../c-api/unicode.rst:878
msgid "They all return *NULL* or ``-1`` if an exception occurs."
msgstr ""
