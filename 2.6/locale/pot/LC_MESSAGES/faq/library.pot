# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../faq/library.rst:5
msgid "Library and Extension FAQ"
msgstr ""

#: ../../../faq/library.rst:7
msgid "Contents"
msgstr ""

#: ../../../faq/library.rst:10
msgid "General Library Questions"
msgstr ""

#: ../../../faq/library.rst:13
msgid "How do I find a module or application to perform task X?"
msgstr ""

#: ../../../faq/library.rst:15
msgid ""
"Check :ref:`the Library Reference <library-index>` to see if there's a "
"relevant standard library module.  (Eventually you'll learn what's in the "
"standard library and will able to skip this step.)"
msgstr ""

#: ../../../faq/library.rst:19
msgid ""
"For third-party packages, search the `Python Package Index <http://pypi."
"python.org/pypi>`_ or try `Google <http://www.google.com>`_ or another Web "
"search engine.  Searching for \"Python\" plus a keyword or two for your "
"topic of interest will usually find something helpful."
msgstr ""

#: ../../../faq/library.rst:26
msgid "Where is the math.py (socket.py, regex.py, etc.) source file?"
msgstr ""

#: ../../../faq/library.rst:28
msgid ""
"If you can't find a source file for a module it may be a built-in or "
"dynamically loaded module implemented in C, C++ or other compiled language. "
"In this case you may not have the source file or it may be something like "
"mathmodule.c, somewhere in a C source directory (not on the Python Path)."
msgstr ""

#: ../../../faq/library.rst:33
msgid "There are (at least) three kinds of modules in Python:"
msgstr ""

#: ../../../faq/library.rst:35
msgid "modules written in Python (.py);"
msgstr ""

#: ../../../faq/library.rst:36
msgid ""
"modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);"
msgstr ""

#: ../../../faq/library.rst:37
msgid ""
"modules written in C and linked with the interpreter; to get a list of "
"these, type::"
msgstr ""

#: ../../../faq/library.rst:40
msgid ""
"import sys\n"
"print sys.builtin_module_names"
msgstr ""

#: ../../../faq/library.rst:45
msgid "How do I make a Python script executable on Unix?"
msgstr ""

#: ../../../faq/library.rst:47
msgid ""
"You need to do two things: the script file's mode must be executable and the "
"first line must begin with ``#!`` followed by the path of the Python "
"interpreter."
msgstr ""

#: ../../../faq/library.rst:51
msgid ""
"The first is done by executing ``chmod +x scriptfile`` or perhaps ``chmod "
"755 scriptfile``."
msgstr ""

#: ../../../faq/library.rst:54
msgid ""
"The second can be done in a number of ways.  The most straightforward way is "
"to write ::"
msgstr ""

#: ../../../faq/library.rst:57
msgid "#!/usr/local/bin/python"
msgstr ""

#: ../../../faq/library.rst:59
msgid ""
"as the very first line of your file, using the pathname for where the Python "
"interpreter is installed on your platform."
msgstr ""

#: ../../../faq/library.rst:62
msgid ""
"If you would like the script to be independent of where the Python "
"interpreter lives, you can use the \"env\" program.  Almost all Unix "
"variants support the following, assuming the Python interpreter is in a "
"directory on the user's $PATH::"
msgstr ""

#: ../../../faq/library.rst:67
msgid "#!/usr/bin/env python"
msgstr ""

#: ../../../faq/library.rst:69
msgid ""
"*Don't* do this for CGI scripts.  The $PATH variable for CGI scripts is "
"often very minimal, so you need to use the actual absolute pathname of the "
"interpreter."
msgstr ""

#: ../../../faq/library.rst:73
msgid ""
"Occasionally, a user's environment is so full that the /usr/bin/env program "
"fails; or there's no env program at all.  In that case, you can try the "
"following hack (due to Alex Rezinsky)::"
msgstr ""

#: ../../../faq/library.rst:77
msgid ""
"#! /bin/sh\n"
"\"\"\":\"\n"
"exec python $0 ${1+\"$@\"}\n"
"\"\"\""
msgstr ""

#: ../../../faq/library.rst:82
msgid ""
"The minor disadvantage is that this defines the script's __doc__ string. "
"However, you can fix that by adding ::"
msgstr ""

#: ../../../faq/library.rst:85
msgid "__doc__ = \"\"\"...Whatever...\"\"\""
msgstr ""

#: ../../../faq/library.rst:90
msgid "Is there a curses/termcap package for Python?"
msgstr ""

#: ../../../faq/library.rst:94
msgid ""
"For Unix variants: The standard Python source distribution comes with a "
"curses module in the ``Modules/`` subdirectory, though it's not compiled by "
"default (note that this is not available in the Windows distribution -- "
"there is no curses module for Windows)."
msgstr ""

#: ../../../faq/library.rst:99
msgid ""
"The curses module supports basic curses features as well as many additional "
"functions from ncurses and SYSV curses such as colour, alternative character "
"set support, pads, and mouse support. This means the module isn't compatible "
"with operating systems that only have BSD curses, but there don't seem to be "
"any currently maintained OSes that fall into this category."
msgstr ""

#: ../../../faq/library.rst:105
msgid ""
"For Windows: use `the consolelib module <http://effbot.org/zone/console-"
"index.htm>`_."
msgstr ""

#: ../../../faq/library.rst:110
msgid "Is there an equivalent to C's onexit() in Python?"
msgstr ""

#: ../../../faq/library.rst:112
msgid ""
"The :mod:`atexit` module provides a register function that is similar to C's "
"onexit."
msgstr ""

#: ../../../faq/library.rst:117
msgid "Why don't my signal handlers work?"
msgstr ""

#: ../../../faq/library.rst:119
msgid ""
"The most common problem is that the signal handler is declared with the "
"wrong argument list.  It is called as ::"
msgstr ""

#: ../../../faq/library.rst:122
msgid "handler(signum, frame)"
msgstr ""

#: ../../../faq/library.rst:124
msgid "so it should be declared with two arguments::"
msgstr ""

#: ../../../faq/library.rst:126
msgid ""
"def handler(signum, frame):\n"
"    ..."
msgstr ""

#: ../../../faq/library.rst:131
msgid "Common tasks"
msgstr ""

#: ../../../faq/library.rst:134
msgid "How do I test a Python program or component?"
msgstr ""

#: ../../../faq/library.rst:136
msgid ""
"Python comes with two testing frameworks.  The :mod:`doctest` module finds "
"examples in the docstrings for a module and runs them, comparing the output "
"with the expected output given in the docstring."
msgstr ""

#: ../../../faq/library.rst:140
msgid ""
"The :mod:`unittest` module is a fancier testing framework modelled on Java "
"and Smalltalk testing frameworks."
msgstr ""

#: ../../../faq/library.rst:143
msgid ""
"For testing, it helps to write the program so that it may be easily tested "
"by using good modular design.  Your program should have almost all "
"functionality encapsulated in either functions or class methods -- and this "
"sometimes has the surprising and delightful effect of making the program run "
"faster (because local variable accesses are faster than global accesses).  "
"Furthermore the program should avoid depending on mutating global variables, "
"since this makes testing much more difficult to do."
msgstr ""

#: ../../../faq/library.rst:151
msgid "The \"global main logic\" of your program may be as simple as ::"
msgstr ""

#: ../../../faq/library.rst:153
msgid ""
"if __name__ == \"__main__\":\n"
"    main_logic()"
msgstr ""

#: ../../../faq/library.rst:156
msgid "at the bottom of the main module of your program."
msgstr ""

#: ../../../faq/library.rst:158
msgid ""
"Once your program is organized as a tractable collection of functions and "
"class behaviours you should write test functions that exercise the "
"behaviours.  A test suite can be associated with each module which automates "
"a sequence of tests. This sounds like a lot of work, but since Python is so "
"terse and flexible it's surprisingly easy.  You can make coding much more "
"pleasant and fun by writing your test functions in parallel with the "
"\"production code\", since this makes it easy to find bugs and even design "
"flaws earlier."
msgstr ""

#: ../../../faq/library.rst:166
msgid ""
"\"Support modules\" that are not intended to be the main module of a program "
"may include a self-test of the module. ::"
msgstr ""

#: ../../../faq/library.rst:169
msgid ""
"if __name__ == \"__main__\":\n"
"    self_test()"
msgstr ""

#: ../../../faq/library.rst:172
msgid ""
"Even programs that interact with complex external interfaces may be tested "
"when the external interfaces are unavailable by using \"fake\" interfaces "
"implemented in Python."
msgstr ""

#: ../../../faq/library.rst:178
msgid "How do I create documentation from doc strings?"
msgstr ""

#: ../../../faq/library.rst:180
msgid ""
"The :mod:`pydoc` module can create HTML from the doc strings in your Python "
"source code.  An alternative for creating API documentation purely from "
"docstrings is `epydoc <http://epydoc.sf.net/>`_.  `Sphinx <http://sphinx."
"pocoo.org>`_ can also include docstring content."
msgstr ""

#: ../../../faq/library.rst:187
msgid "How do I get a single keypress at a time?"
msgstr ""

#: ../../../faq/library.rst:189
msgid ""
"For Unix variants: There are several solutions.  It's straightforward to do "
"this using curses, but curses is a fairly large module to learn.  Here's a "
"solution without curses::"
msgstr ""

#: ../../../faq/library.rst:193
msgid ""
"import termios, fcntl, sys, os\n"
"fd = sys.stdin.fileno()\n"
"\n"
"oldterm = termios.tcgetattr(fd)\n"
"newattr = termios.tcgetattr(fd)\n"
"newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO\n"
"termios.tcsetattr(fd, termios.TCSANOW, newattr)\n"
"\n"
"oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)\n"
"fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)\n"
"\n"
"try:\n"
"    while 1:\n"
"        try:\n"
"            c = sys.stdin.read(1)\n"
"            print \"Got character\", repr(c)\n"
"        except IOError: pass\n"
"finally:\n"
"    termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)\n"
"    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)"
msgstr ""

#: ../../../faq/library.rst:214
msgid ""
"You need the :mod:`termios` and the :mod:`fcntl` module for any of this to "
"work, and I've only tried it on Linux, though it should work elsewhere.  In "
"this code, characters are read and printed one at a time."
msgstr ""

#: ../../../faq/library.rst:218
msgid ""
":func:`termios.tcsetattr` turns off stdin's echoing and disables canonical "
"mode. :func:`fcntl.fnctl` is used to obtain stdin's file descriptor flags "
"and modify them for non-blocking mode.  Since reading stdin when it is empty "
"results in an :exc:`IOError`, this error is caught and ignored."
msgstr ""

#: ../../../faq/library.rst:225
msgid "Threads"
msgstr ""

#: ../../../faq/library.rst:228
msgid "How do I program using threads?"
msgstr ""

#: ../../../faq/library.rst:232
msgid ""
"Be sure to use the :mod:`threading` module and not the :mod:`thread` module. "
"The :mod:`threading` module builds convenient abstractions on top of the low-"
"level primitives provided by the :mod:`thread` module."
msgstr ""

#: ../../../faq/library.rst:236
msgid ""
"Aahz has a set of slides from his threading tutorial that are helpful; see "
"http://www.pythoncraft.com/OSCON2001/."
msgstr ""

#: ../../../faq/library.rst:241
msgid "None of my threads seem to run: why?"
msgstr ""

#: ../../../faq/library.rst:243
msgid ""
"As soon as the main thread exits, all threads are killed.  Your main thread "
"is running too quickly, giving the threads no time to do any work."
msgstr ""

#: ../../../faq/library.rst:246
msgid ""
"A simple fix is to add a sleep to the end of the program that's long enough "
"for all the threads to finish::"
msgstr ""

#: ../../../faq/library.rst:249
msgid ""
"import threading, time\n"
"\n"
"def thread_task(name, n):\n"
"    for i in range(n): print name, i\n"
"\n"
"for i in range(10):\n"
"    T = threading.Thread(target=thread_task, args=(str(i), i))\n"
"    T.start()\n"
"\n"
"time.sleep(10) # <----------------------------!"
msgstr ""

#: ../../../faq/library.rst:260
msgid ""
"But now (on many platforms) the threads don't run in parallel, but appear to "
"run sequentially, one at a time!  The reason is that the OS thread scheduler "
"doesn't start a new thread until the previous thread is blocked."
msgstr ""

#: ../../../faq/library.rst:264
msgid "A simple fix is to add a tiny sleep to the start of the run function::"
msgstr ""

#: ../../../faq/library.rst:266
msgid ""
"def thread_task(name, n):\n"
"    time.sleep(0.001) # <---------------------!\n"
"    for i in range(n): print name, i\n"
"\n"
"for i in range(10):\n"
"    T = threading.Thread(target=thread_task, args=(str(i), i))\n"
"    T.start()\n"
"\n"
"time.sleep(10)"
msgstr ""

#: ../../../faq/library.rst:276
msgid ""
"Instead of trying to guess how long a :func:`time.sleep` delay will be "
"enough, it's better to use some kind of semaphore mechanism.  One idea is to "
"use the :mod:`Queue` module to create a queue object, let each thread append "
"a token to the queue when it finishes, and let the main thread read as many "
"tokens from the queue as there are threads."
msgstr ""

#: ../../../faq/library.rst:284
msgid "How do I parcel out work among a bunch of worker threads?"
msgstr ""

#: ../../../faq/library.rst:286
msgid ""
"Use the :mod:`Queue` module to create a queue containing a list of jobs.  "
"The :class:`~Queue.Queue` class maintains a list of objects with ``."
"put(obj)`` to add an item to the queue and ``.get()`` to return an item.  "
"The class will take care of the locking necessary to ensure that each job is "
"handed out exactly once."
msgstr ""

#: ../../../faq/library.rst:292
msgid "Here's a trivial example::"
msgstr ""

#: ../../../faq/library.rst:294
msgid ""
"import threading, Queue, time\n"
"\n"
"# The worker thread gets jobs off the queue.  When the queue is empty, it\n"
"# assumes there will be no more work and exits.\n"
"# (Realistically workers will run until terminated.)\n"
"def worker ():\n"
"    print 'Running worker'\n"
"    time.sleep(0.1)\n"
"    while True:\n"
"        try:\n"
"            arg = q.get(block=False)\n"
"        except Queue.Empty:\n"
"            print 'Worker', threading.currentThread(),\n"
"            print 'queue empty'\n"
"            break\n"
"        else:\n"
"            print 'Worker', threading.currentThread(),\n"
"            print 'running with argument', arg\n"
"            time.sleep(0.5)\n"
"\n"
"# Create queue\n"
"q = Queue.Queue()\n"
"\n"
"# Start a pool of 5 workers\n"
"for i in range(5):\n"
"    t = threading.Thread(target=worker, name='worker %i' % (i+1))\n"
"    t.start()\n"
"\n"
"# Begin adding work to the queue\n"
"for i in range(50):\n"
"    q.put(i)\n"
"\n"
"# Give threads time to run\n"
"print 'Main thread sleeping'\n"
"time.sleep(5)"
msgstr ""

#: ../../../faq/library.rst:330
msgid "When run, this will produce the following output:"
msgstr ""

#: ../../../faq/library.rst:332
msgid ""
"Running worker Running worker Running worker Running worker Running worker "
"Main thread sleeping Worker <Thread(worker 1, started)> running with "
"argument 0 Worker <Thread(worker 2, started)> running with argument 1 Worker "
"<Thread(worker 3, started)> running with argument 2 Worker <Thread(worker 4, "
"started)> running with argument 3 Worker <Thread(worker 5, started)> running "
"with argument 4 Worker <Thread(worker 1, started)> running with argument "
"5 ..."
msgstr ""

#: ../../../faq/library.rst:346
msgid ""
"Consult the module's documentation for more details; the ``Queue`` class "
"provides a featureful interface."
msgstr ""

#: ../../../faq/library.rst:351
msgid "What kinds of global value mutation are thread-safe?"
msgstr ""

#: ../../../faq/library.rst:353
msgid ""
"A global interpreter lock (GIL) is used internally to ensure that only one "
"thread runs in the Python VM at a time.  In general, Python offers to switch "
"among threads only between bytecode instructions; how frequently it switches "
"can be set via :func:`sys.setcheckinterval`.  Each bytecode instruction and "
"therefore all the C implementation code reached from each instruction is "
"therefore atomic from the point of view of a Python program."
msgstr ""

#: ../../../faq/library.rst:360
msgid ""
"In theory, this means an exact accounting requires an exact understanding of "
"the PVM bytecode implementation.  In practice, it means that operations on "
"shared variables of built-in data types (ints, lists, dicts, etc) that "
"\"look atomic\" really are."
msgstr ""

#: ../../../faq/library.rst:365
msgid ""
"For example, the following operations are all atomic (L, L1, L2 are lists, "
"D, D1, D2 are dicts, x, y are objects, i, j are ints)::"
msgstr ""

#: ../../../faq/library.rst:368
msgid ""
"L.append(x)\n"
"L1.extend(L2)\n"
"x = L[i]\n"
"x = L.pop()\n"
"L1[i:j] = L2\n"
"L.sort()\n"
"x = y\n"
"x.field = y\n"
"D[x] = y\n"
"D1.update(D2)\n"
"D.keys()"
msgstr ""

#: ../../../faq/library.rst:380
msgid "These aren't::"
msgstr ""

#: ../../../faq/library.rst:382
msgid ""
"i = i+1\n"
"L.append(L[-1])\n"
"L[i] = L[j]\n"
"D[x] = D[x] + 1"
msgstr ""

#: ../../../faq/library.rst:387
msgid ""
"Operations that replace other objects may invoke those other objects' :meth:"
"`__del__` method when their reference count reaches zero, and that can "
"affect things.  This is especially true for the mass updates to dictionaries "
"and lists.  When in doubt, use a mutex!"
msgstr ""

#: ../../../faq/library.rst:394
msgid "Can't we get rid of the Global Interpreter Lock?"
msgstr ""

#: ../../../faq/library.rst:399
msgid ""
"The Global Interpreter Lock (GIL) is often seen as a hindrance to Python's "
"deployment on high-end multiprocessor server machines, because a multi-"
"threaded Python program effectively only uses one CPU, due to the insistence "
"that (almost) all Python code can only run while the GIL is held."
msgstr ""

#: ../../../faq/library.rst:404
msgid ""
"Back in the days of Python 1.5, Greg Stein actually implemented a "
"comprehensive patch set (the \"free threading\" patches) that removed the "
"GIL and replaced it with fine-grained locking.  Unfortunately, even on "
"Windows (where locks are very efficient) this ran ordinary Python code about "
"twice as slow as the interpreter using the GIL.  On Linux the performance "
"loss was even worse because pthread locks aren't as efficient."
msgstr ""

#: ../../../faq/library.rst:411
msgid ""
"Since then, the idea of getting rid of the GIL has occasionally come up but "
"nobody has found a way to deal with the expected slowdown, and users who "
"don't use threads would not be happy if their code ran at half at the "
"speed.  Greg's free threading patch set has not been kept up-to-date for "
"later Python versions."
msgstr ""

#: ../../../faq/library.rst:416
msgid ""
"This doesn't mean that you can't make good use of Python on multi-CPU "
"machines! You just have to be creative with dividing the work up between "
"multiple *processes* rather than multiple *threads*.  Judicious use of C "
"extensions will also help; if you use a C extension to perform a time-"
"consuming task, the extension can release the GIL while the thread of "
"execution is in the C code and allow other threads to get some work done."
msgstr ""

#: ../../../faq/library.rst:423
msgid ""
"It has been suggested that the GIL should be a per-interpreter-state lock "
"rather than truly global; interpreters then wouldn't be able to share "
"objects. Unfortunately, this isn't likely to happen either.  It would be a "
"tremendous amount of work, because many object implementations currently "
"have global state. For example, small integers and short strings are cached; "
"these caches would have to be moved to the interpreter state.  Other object "
"types have their own free list; these free lists would have to be moved to "
"the interpreter state. And so on."
msgstr ""

#: ../../../faq/library.rst:432
msgid ""
"And I doubt that it can even be done in finite time, because the same "
"problem exists for 3rd party extensions.  It is likely that 3rd party "
"extensions are being written at a faster rate than you can convert them to "
"store all their global state in the interpreter state."
msgstr ""

#: ../../../faq/library.rst:437
msgid ""
"And finally, once you have multiple interpreters not sharing any state, what "
"have you gained over running each interpreter in a separate process?"
msgstr ""

#: ../../../faq/library.rst:442
msgid "Input and Output"
msgstr ""

#: ../../../faq/library.rst:445
msgid "How do I delete a file? (And other file questions...)"
msgstr ""

#: ../../../faq/library.rst:447
msgid ""
"Use ``os.remove(filename)`` or ``os.unlink(filename)``; for documentation, "
"see the :mod:`os` module.  The two functions are identical; :func:`unlink` "
"is simply the name of the Unix system call for this function."
msgstr ""

#: ../../../faq/library.rst:451
msgid ""
"To remove a directory, use :func:`os.rmdir`; use :func:`os.mkdir` to create "
"one. ``os.makedirs(path)`` will create any intermediate directories in "
"``path`` that don't exist. ``os.removedirs(path)`` will remove intermediate "
"directories as long as they're empty; if you want to delete an entire "
"directory tree and its contents, use :func:`shutil.rmtree`."
msgstr ""

#: ../../../faq/library.rst:457
msgid "To rename a file, use ``os.rename(old_path, new_path)``."
msgstr ""

#: ../../../faq/library.rst:459
msgid ""
"To truncate a file, open it using ``f = open(filename, \"r+\")``, and use "
"``f.truncate(offset)``; offset defaults to the current seek position.  "
"There's also ```os.ftruncate(fd, offset)`` for files opened with :func:`os."
"open`, where ``fd`` is the file descriptor (a small integer)."
msgstr ""

#: ../../../faq/library.rst:464
msgid ""
"The :mod:`shutil` module also contains a number of functions to work on "
"files including :func:`~shutil.copyfile`, :func:`~shutil.copytree`, and :"
"func:`~shutil.rmtree`."
msgstr ""

#: ../../../faq/library.rst:470
msgid "How do I copy a file?"
msgstr ""

#: ../../../faq/library.rst:472
msgid ""
"The :mod:`shutil` module contains a :func:`~shutil.copyfile` function.  Note "
"that on MacOS 9 it doesn't copy the resource fork and Finder info."
msgstr ""

#: ../../../faq/library.rst:477
msgid "How do I read (or write) binary data?"
msgstr ""

#: ../../../faq/library.rst:479
msgid ""
"To read or write complex binary data formats, it's best to use the :mod:"
"`struct` module.  It allows you to take a string containing binary data "
"(usually numbers) and convert it to Python objects; and vice versa."
msgstr ""

#: ../../../faq/library.rst:483
msgid ""
"For example, the following code reads two 2-byte integers and one 4-byte "
"integer in big-endian format from a file::"
msgstr ""

#: ../../../faq/library.rst:486
msgid ""
"import struct\n"
"\n"
"f = open(filename, \"rb\")  # Open in binary mode for portability\n"
"s = f.read(8)\n"
"x, y, z = struct.unpack(\">hhl\", s)"
msgstr ""

#: ../../../faq/library.rst:492
msgid ""
"The '>' in the format string forces big-endian data; the letter 'h' reads "
"one \"short integer\" (2 bytes), and 'l' reads one \"long integer\" (4 "
"bytes) from the string."
msgstr ""

#: ../../../faq/library.rst:496
msgid ""
"For data that is more regular (e.g. a homogeneous list of ints or "
"thefloats), you can also use the :mod:`array` module."
msgstr ""

#: ../../../faq/library.rst:501
msgid "I can't seem to use os.read() on a pipe created with os.popen(); why?"
msgstr ""

#: ../../../faq/library.rst:503
msgid ""
":func:`os.read` is a low-level function which takes a file descriptor, a "
"small integer representing the opened file.  :func:`os.popen` creates a high-"
"level file object, the same type returned by the built-in :func:`open` "
"function. Thus, to read n bytes from a pipe p created with :func:`os.popen`, "
"you need to use ``p.read(n)``."
msgstr ""

#: ../../../faq/library.rst:511
msgid ""
"How do I run a subprocess with pipes connected to both input and output?"
msgstr ""

#: ../../../faq/library.rst:515
msgid "Use the :mod:`popen2` module.  For example::"
msgstr ""

#: ../../../faq/library.rst:517
msgid ""
"import popen2\n"
"fromchild, tochild = popen2.popen2(\"command\")\n"
"tochild.write(\"input\\n\")\n"
"tochild.flush()\n"
"output = fromchild.readline()"
msgstr ""

#: ../../../faq/library.rst:523
msgid ""
"Warning: in general it is unwise to do this because you can easily cause a "
"deadlock where your process is blocked waiting for output from the child "
"while the child is blocked waiting for input from you.  This can be caused "
"because the parent expects the child to output more text than it does, or it "
"can be caused by data being stuck in stdio buffers due to lack of flushing.  "
"The Python parent can of course explicitly flush the data it sends to the "
"child before it reads any output, but if the child is a naive C program it "
"may have been written to never explicitly flush its output, even if it is "
"interactive, since flushing is normally automatic."
msgstr ""

#: ../../../faq/library.rst:533
msgid ""
"Note that a deadlock is also possible if you use :func:`popen3` to read "
"stdout and stderr. If one of the two is too large for the internal buffer "
"(increasing the buffer size does not help) and you ``read()`` the other one "
"first, there is a deadlock, too."
msgstr ""

#: ../../../faq/library.rst:538
msgid ""
"Note on a bug in popen2: unless your program calls ``wait()`` or "
"``waitpid()``, finished child processes are never removed, and eventually "
"calls to popen2 will fail because of a limit on the number of child "
"processes.  Calling :func:`os.waitpid` with the :data:`os.WNOHANG` option "
"can prevent this; a good place to insert such a call would be before calling "
"``popen2`` again."
msgstr ""

#: ../../../faq/library.rst:544
msgid ""
"In many cases, all you really need is to run some data through a command and "
"get the result back.  Unless the amount of data is very large, the easiest "
"way to do this is to write it to a temporary file and run the command with "
"that temporary file as input.  The standard module :mod:`tempfile` exports a "
"``mktemp()`` function to generate unique temporary file names. ::"
msgstr ""

#: ../../../faq/library.rst:550
msgid ""
"import tempfile\n"
"import os\n"
"\n"
"class Popen3:\n"
"    \"\"\"\n"
"    This is a deadlock-safe version of popen that returns\n"
"    an object with errorlevel, out (a string) and err (a string).\n"
"    (capturestderr may not work under windows.)\n"
"    Example: print Popen3('grep spam','\\n\\nhere spam\\n\\n').out\n"
"    \"\"\"\n"
"    def __init__(self,command,input=None,capturestderr=None):\n"
"        outfile=tempfile.mktemp()\n"
"        command=\"( %s ) > %s\" % (command,outfile)\n"
"        if input:\n"
"            infile=tempfile.mktemp()\n"
"            open(infile,\"w\").write(input)\n"
"            command=command+\" <\"+infile\n"
"        if capturestderr:\n"
"            errfile=tempfile.mktemp()\n"
"            command=command+\" 2>\"+errfile\n"
"        self.errorlevel=os.system(command) >> 8\n"
"        self.out=open(outfile,\"r\").read()\n"
"        os.remove(outfile)\n"
"        if input:\n"
"            os.remove(infile)\n"
"        if capturestderr:\n"
"            self.err=open(errfile,\"r\").read()\n"
"            os.remove(errfile)"
msgstr ""

#: ../../../faq/library.rst:579
msgid ""
"Note that many interactive programs (e.g. vi) don't work well with pipes "
"substituted for standard input and output.  You will have to use pseudo ttys "
"(\"ptys\") instead of pipes. Or you can use a Python interface to Don Libes' "
"\"expect\" library.  A Python extension that interfaces to expect is called "
"\"expy\" and available from http://expectpy.sourceforge.net.  A pure Python "
"solution that works like expect is `pexpect <http://pypi.python.org/pypi/"
"pexpect/>`_."
msgstr ""

#: ../../../faq/library.rst:588
msgid "How do I access the serial (RS232) port?"
msgstr ""

#: ../../../faq/library.rst:590
msgid "For Win32, POSIX (Linux, BSD, etc.), Jython:"
msgstr ""

#: ../../../faq/library.rst:592
msgid "http://pyserial.sourceforge.net"
msgstr ""

#: ../../../faq/library.rst:594
msgid "For Unix, see a Usenet post by Mitch Chapman:"
msgstr ""

#: ../../../faq/library.rst:596
msgid "http://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"
msgstr ""

#: ../../../faq/library.rst:600
msgid "Why doesn't closing sys.stdout (stdin, stderr) really close it?"
msgstr ""

#: ../../../faq/library.rst:602
msgid ""
"Python file objects are a high-level layer of abstraction on top of C "
"streams, which in turn are a medium-level layer of abstraction on top of "
"(among other things) low-level C file descriptors."
msgstr ""

#: ../../../faq/library.rst:606
msgid ""
"For most file objects you create in Python via the built-in ``file`` "
"constructor, ``f.close()`` marks the Python file object as being closed from "
"Python's point of view, and also arranges to close the underlying C stream. "
"This also happens automatically in ``f``'s destructor, when ``f`` becomes "
"garbage."
msgstr ""

#: ../../../faq/library.rst:612
msgid ""
"But stdin, stdout and stderr are treated specially by Python, because of the "
"special status also given to them by C.  Running ``sys.stdout.close()`` "
"marks the Python-level file object as being closed, but does *not* close the "
"associated C stream."
msgstr ""

#: ../../../faq/library.rst:617
msgid ""
"To close the underlying C stream for one of these three, you should first be "
"sure that's what you really want to do (e.g., you may confuse extension "
"modules trying to do I/O).  If it is, use os.close::"
msgstr ""

#: ../../../faq/library.rst:621
msgid ""
"os.close(0)   # close C's stdin stream\n"
"os.close(1)   # close C's stdout stream\n"
"os.close(2)   # close C's stderr stream"
msgstr ""

#: ../../../faq/library.rst:627
msgid "Network/Internet Programming"
msgstr ""

#: ../../../faq/library.rst:630
msgid "What WWW tools are there for Python?"
msgstr ""

#: ../../../faq/library.rst:632
msgid ""
"See the chapters titled :ref:`internet` and :ref:`netdata` in the Library "
"Reference Manual.  Python has many modules that will help you build server-"
"side and client-side web systems."
msgstr ""

#: ../../../faq/library.rst:638
msgid ""
"A summary of available frameworks is maintained by Paul Boddie at http://"
"wiki.python.org/moin/WebProgramming ."
msgstr ""

#: ../../../faq/library.rst:641
msgid ""
"Cameron Laird maintains a useful set of pages about Python web technologies "
"at http://phaseit.net/claird/comp.lang.python/web_python."
msgstr ""

#: ../../../faq/library.rst:646
msgid "How can I mimic CGI form submission (METHOD=POST)?"
msgstr ""

#: ../../../faq/library.rst:648
msgid ""
"I would like to retrieve web pages that are the result of POSTing a form. Is "
"there existing code that would let me do this easily?"
msgstr ""

#: ../../../faq/library.rst:651
msgid "Yes. Here's a simple example that uses httplib::"
msgstr ""

#: ../../../faq/library.rst:653
msgid ""
"#!/usr/local/bin/python\n"
"\n"
"import httplib, sys, time\n"
"\n"
"### build the query string\n"
"qs = \"First=Josephine&MI=Q&Last=Public\"\n"
"\n"
"### connect and send the server a path\n"
"httpobj = httplib.HTTP('www.some-server.out-there', 80)\n"
"httpobj.putrequest('POST', '/cgi-bin/some-cgi-script')\n"
"### now generate the rest of the HTTP headers...\n"
"httpobj.putheader('Accept', '*/*')\n"
"httpobj.putheader('Connection', 'Keep-Alive')\n"
"httpobj.putheader('Content-type', 'application/x-www-form-urlencoded')\n"
"httpobj.putheader('Content-length', '%d' % len(qs))\n"
"httpobj.endheaders()\n"
"httpobj.send(qs)\n"
"### find out what the server said in response...\n"
"reply, msg, hdrs = httpobj.getreply()\n"
"if reply != 200:\n"
"    sys.stdout.write(httpobj.getfile().read())"
msgstr ""

#: ../../../faq/library.rst:675
msgid ""
"Note that in general for URL-encoded POST operations, query strings must be "
"quoted by using :func:`urllib.quote`.  For example to send name=\"Guy "
"Steele, Jr.\"::"
msgstr ""

#: ../../../faq/library.rst:679
msgid ""
">>> from urllib import quote\n"
">>> x = quote(\"Guy Steele, Jr.\")\n"
">>> x\n"
"'Guy%20Steele,%20Jr.'\n"
">>> query_string = \"name=\"+x\n"
">>> query_string\n"
"'name=Guy%20Steele,%20Jr.'"
msgstr ""

#: ../../../faq/library.rst:689
msgid "What module should I use to help with generating HTML?"
msgstr ""

#: ../../../faq/library.rst:693
msgid "There are many different modules available:"
msgstr ""

#: ../../../faq/library.rst:695
msgid ""
"HTMLgen is a class library of objects corresponding to all the HTML 3.2 "
"markup tags. It's used when you are writing in Python and wish to synthesize "
"HTML pages for generating a web or for CGI forms, etc."
msgstr ""

#: ../../../faq/library.rst:699
msgid ""
"DocumentTemplate and Zope Page Templates are two different systems that are "
"part of Zope."
msgstr ""

#: ../../../faq/library.rst:702
msgid "Quixote's PTL uses Python syntax to assemble strings of text."
msgstr ""

#: ../../../faq/library.rst:704
msgid ""
"Consult the `Web Programming wiki pages <http://wiki.python.org/moin/"
"WebProgramming>`_ for more links."
msgstr ""

#: ../../../faq/library.rst:709
msgid "How do I send mail from a Python script?"
msgstr ""

#: ../../../faq/library.rst:711
msgid "Use the standard library module :mod:`smtplib`."
msgstr ""

#: ../../../faq/library.rst:713
msgid ""
"Here's a very simple interactive mail sender that uses it.  This method will "
"work on any host that supports an SMTP listener. ::"
msgstr ""

#: ../../../faq/library.rst:716
msgid ""
"import sys, smtplib\n"
"\n"
"fromaddr = raw_input(\"From: \")\n"
"toaddrs  = raw_input(\"To: \").split(',')\n"
"print \"Enter message, end with ^D:\"\n"
"msg = ''\n"
"while True:\n"
"    line = sys.stdin.readline()\n"
"    if not line:\n"
"        break\n"
"    msg += line\n"
"\n"
"# The actual mail send\n"
"server = smtplib.SMTP('localhost')\n"
"server.sendmail(fromaddr, toaddrs, msg)\n"
"server.quit()"
msgstr ""

#: ../../../faq/library.rst:733
msgid ""
"A Unix-only alternative uses sendmail.  The location of the sendmail program "
"varies between systems; sometimes it is ``/usr/lib/sendmail``, sometime ``/"
"usr/sbin/sendmail``.  The sendmail manual page will help you out.  Here's "
"some sample code::"
msgstr ""

#: ../../../faq/library.rst:738
msgid ""
"SENDMAIL = \"/usr/sbin/sendmail\" # sendmail location\n"
"import os\n"
"p = os.popen(\"%s -t -i\" % SENDMAIL, \"w\")\n"
"p.write(\"To: receiver@example.com\\n\")\n"
"p.write(\"Subject: test\\n\")\n"
"p.write(\"\\n\") # blank line separating headers from body\n"
"p.write(\"Some text\\n\")\n"
"p.write(\"some more text\\n\")\n"
"sts = p.close()\n"
"if sts != 0:\n"
"    print \"Sendmail exit status\", sts"
msgstr ""

#: ../../../faq/library.rst:752
msgid "How do I avoid blocking in the connect() method of a socket?"
msgstr ""

#: ../../../faq/library.rst:754
msgid ""
"The select module is commonly used to help with asynchronous I/O on sockets."
msgstr ""

#: ../../../faq/library.rst:756
msgid ""
"To prevent the TCP connect from blocking, you can set the socket to non-"
"blocking mode.  Then when you do the ``connect()``, you will either connect "
"immediately (unlikely) or get an exception that contains the error number as "
"``.errno``. ``errno.EINPROGRESS`` indicates that the connection is in "
"progress, but hasn't finished yet.  Different OSes will return different "
"values, so you're going to have to check what's returned on your system."
msgstr ""

#: ../../../faq/library.rst:763
msgid ""
"You can use the ``connect_ex()`` method to avoid creating an exception.  It "
"will just return the errno value.  To poll, you can call ``connect_ex()`` "
"again later -- 0 or ``errno.EISCONN`` indicate that you're connected -- or "
"you can pass this socket to select to check if it's writable."
msgstr ""

#: ../../../faq/library.rst:770
msgid "Databases"
msgstr ""

#: ../../../faq/library.rst:773
msgid "Are there any interfaces to database packages in Python?"
msgstr ""

#: ../../../faq/library.rst:775
msgid "Yes."
msgstr ""

#: ../../../faq/library.rst:779
msgid ""
"Python 2.3 includes the :mod:`bsddb` package which provides an interface to "
"the BerkeleyDB library.  Interfaces to disk-based hashes such as :mod:`DBM "
"<dbm>` and :mod:`GDBM <gdbm>` are also included with standard Python."
msgstr ""

#: ../../../faq/library.rst:783
msgid ""
"Support for most relational databases is available.  See the "
"`DatabaseProgramming wiki page <http://wiki.python.org/moin/"
"DatabaseProgramming>`_ for details."
msgstr ""

#: ../../../faq/library.rst:789
msgid "How do you implement persistent objects in Python?"
msgstr ""

#: ../../../faq/library.rst:791
msgid ""
"The :mod:`pickle` library module solves this in a very general way (though "
"you still can't store things like open files, sockets or windows), and the :"
"mod:`shelve` library module uses pickle and (g)dbm to create persistent "
"mappings containing arbitrary Python objects.  For better performance, you "
"can use the :mod:`cPickle` module."
msgstr ""

#: ../../../faq/library.rst:797
msgid ""
"A more awkward way of doing things is to use pickle's little sister, "
"marshal. The :mod:`marshal` module provides very fast ways to store "
"noncircular basic Python types to files and strings, and back again.  "
"Although marshal does not do fancy things like store instances or handle "
"shared references properly, it does run extremely fast.  For example loading "
"a half megabyte of data may take less than a third of a second.  This often "
"beats doing something more complex and general such as using gdbm with "
"pickle/shelve."
msgstr ""

#: ../../../faq/library.rst:807
msgid "Why is cPickle so slow?"
msgstr ""

#: ../../../faq/library.rst:811
msgid ""
"The default format used by the pickle module is a slow one that results in "
"readable pickles.  Making it the default, but it would break backward "
"compatibility::"
msgstr ""

#: ../../../faq/library.rst:815
msgid ""
"largeString = 'z' * (100 * 1024)\n"
"myPickle = cPickle.dumps(largeString, protocol=1)"
msgstr ""

#: ../../../faq/library.rst:820
msgid ""
"If my program crashes with a bsddb (or anydbm) database open, it gets "
"corrupted. How come?"
msgstr ""

#: ../../../faq/library.rst:822
msgid ""
"Databases opened for write access with the bsddb module (and often by the "
"anydbm module, since it will preferentially use bsddb) must explicitly be "
"closed using the ``.close()`` method of the database.  The underlying "
"library caches database contents which need to be converted to on-disk form "
"and written."
msgstr ""

#: ../../../faq/library.rst:827
msgid ""
"If you have initialized a new bsddb database but not written anything to it "
"before the program crashes, you will often wind up with a zero-length file "
"and encounter an exception the next time the file is opened."
msgstr ""

#: ../../../faq/library.rst:833
msgid ""
"I tried to open Berkeley DB file, but bsddb produces bsddb.error: (22, "
"'Invalid argument'). Help! How can I restore my data?"
msgstr ""

#: ../../../faq/library.rst:835
msgid ""
"Don't panic! Your data is probably intact. The most frequent cause for the "
"error is that you tried to open an earlier Berkeley DB file with a later "
"version of the Berkeley DB library."
msgstr ""

#: ../../../faq/library.rst:839
msgid ""
"Many Linux systems now have all three versions of Berkeley DB available.  If "
"you are migrating from version 1 to a newer version use db_dump185 to dump a "
"plain text version of the database.  If you are migrating from version 2 to "
"version 3 use db2_dump to create a plain text version of the database.  In "
"either case, use db_load to create a new native database for the latest "
"version installed on your computer.  If you have version 3 of Berkeley DB "
"installed, you should be able to use db2_load to create a native version 2 "
"database."
msgstr ""

#: ../../../faq/library.rst:847
msgid ""
"You should move away from Berkeley DB version 1 files because the hash file "
"code contains known bugs that can corrupt your data."
msgstr ""

#: ../../../faq/library.rst:852
msgid "Mathematics and Numerics"
msgstr ""

#: ../../../faq/library.rst:855
msgid "How do I generate random numbers in Python?"
msgstr ""

#: ../../../faq/library.rst:857
msgid ""
"The standard module :mod:`random` implements a random number generator.  "
"Usage is simple::"
msgstr ""

#: ../../../faq/library.rst:860
msgid ""
"import random\n"
"random.random()"
msgstr ""

#: ../../../faq/library.rst:863
msgid "This returns a random floating point number in the range [0, 1)."
msgstr ""

#: ../../../faq/library.rst:865
msgid ""
"There are also many other specialized generators in this module, such as:"
msgstr ""

#: ../../../faq/library.rst:867
msgid "``randrange(a, b)`` chooses an integer in the range [a, b)."
msgstr ""

#: ../../../faq/library.rst:868
msgid "``uniform(a, b)`` chooses a floating point number in the range [a, b)."
msgstr ""

#: ../../../faq/library.rst:869
msgid ""
"``normalvariate(mean, sdev)`` samples the normal (Gaussian) distribution."
msgstr ""

#: ../../../faq/library.rst:871
msgid "Some higher-level functions operate on sequences directly, such as:"
msgstr ""

#: ../../../faq/library.rst:873
msgid "``choice(S)`` chooses random element from a given sequence"
msgstr ""

#: ../../../faq/library.rst:874
msgid "``shuffle(L)`` shuffles a list in-place, i.e. permutes it randomly"
msgstr ""

#: ../../../faq/library.rst:876
msgid ""
"There's also a ``Random`` class you can instantiate to create independent "
"multiple random number generators."
msgstr ""
