# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:3
msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:17
msgid ""
"This module implements a number of :term:`iterator` building blocks inspired "
"by constructs from APL, Haskell, and SML.  Each has been recast in a form "
"suitable for Python."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:21
msgid ""
"The module standardizes a core set of fast, memory efficient tools that are "
"useful by themselves or in combination.  Together, they form an \"iterator "
"algebra\" making it possible to construct specialized tools succinctly and "
"efficiently in pure Python."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:26
msgid ""
"For instance, SML provides a tabulation tool: ``tabulate(f)`` which produces "
"a sequence ``f(0), f(1), ...``.  The same effect can be achieved in Python "
"by combining :func:`imap` and :func:`count` to form ``imap(f, count())``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:30
msgid ""
"These tools and their built-in counterparts also work well with the high-"
"speed functions in the :mod:`operator` module.  For example, the "
"multiplication operator can be mapped across two vectors to form an "
"efficient dot-product: ``sum(imap(operator.mul, vector1, vector2))``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:36
msgid "**Infinite Iterators:**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:39
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:49
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:69
msgid "Iterator"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:39
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:49
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:69
msgid "Arguments"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:39
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:49
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:69
msgid "Results"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:39
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:49
msgid "Example"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:41
msgid ":func:`count`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:41
msgid "start, [step]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:41
msgid "start, start+step, start+2*step, ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:41
msgid "``count(10) --> 10 11 12 13 14 ...``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:42
msgid ":func:`cycle`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:42
msgid "p"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:42
msgid "p0, p1, ... plast, p0, p1, ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:42
msgid "``cycle('ABCD') --> A B C D A B C D ...``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:43
msgid ":func:`repeat`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:43
msgid "elem [,n]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:43
msgid "elem, elem, elem, ... endlessly or up to n times"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:43
msgid "``repeat(10, 3) --> 10 10 10``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:46
msgid "**Iterators terminating on the shortest input sequence:**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:51
msgid ":func:`chain`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:51
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:62
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:63
msgid "p, q, ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:51
msgid "p0, p1, ... plast, q0, q1, ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:51
msgid "``chain('ABC', 'DEF') --> A B C D E F``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:52
msgid ":func:`compress`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:52
msgid "data, selectors"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:52
msgid "(d[0] if s[0]), (d[1] if s[1]), ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:52
msgid "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:53
msgid ":func:`dropwhile`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:53
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:55
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:56
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:61
msgid "pred, seq"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:53
msgid "seq[n], seq[n+1], starting when pred fails"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:53
msgid "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:54
msgid ":func:`groupby`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:54
msgid "iterable[, keyfunc]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:54
msgid "sub-iterators grouped by value of keyfunc(v)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:55
msgid ":func:`ifilter`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:55
msgid "elements of seq where pred(elem) is true"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:55
msgid "``ifilter(lambda x: x%2, range(10)) --> 1 3 5 7 9``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:56
msgid ":func:`ifilterfalse`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:56
msgid "elements of seq where pred(elem) is false"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:56
msgid "``ifilterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:57
msgid ":func:`islice`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:57
msgid "seq, [start,] stop [, step]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:57
msgid "elements from seq[start:stop:step]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:57
msgid "``islice('ABCDEFG', 2, None) --> C D E F G``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:58
msgid ":func:`imap`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:58
msgid "func, p, q, ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:58
msgid "func(p0, q0), func(p1, q1), ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:58
msgid "``imap(pow, (2,3,10), (5,2,3)) --> 32 9 1000``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:59
msgid ":func:`starmap`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:59
msgid "func, seq"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:59
msgid "func(\\*seq[0]), func(\\*seq[1]), ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:59
msgid "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:60
msgid ":func:`tee`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:60
msgid "it, n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:60
msgid "it1, it2, ... itn  splits one iterator into n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:61
msgid ":func:`takewhile`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:61
msgid "seq[0], seq[1], until pred fails"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:61
msgid "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:62
msgid ":func:`izip`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:62
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:63
msgid "(p[0], q[0]), (p[1], q[1]), ..."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:62
msgid "``izip('ABCD', 'xy') --> Ax By``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:63
msgid ":func:`izip_longest`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:63
msgid "``izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:66
msgid "**Combinatoric generators:**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:71
msgid ":func:`product`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:71
msgid "p, q, ... [repeat=1]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:71
msgid "cartesian product, equivalent to a nested for-loop"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:72
msgid ":func:`permutations`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:72
msgid "p[, r]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:72
msgid "r-length tuples, all possible orderings, no repeated elements"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:73
msgid ":func:`combinations`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:73
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:74
msgid "p, r"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:73
msgid "r-length tuples, in sorted order, no repeated elements"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:74
msgid ":func:`combinations_with_replacement`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:74
msgid "r-length tuples, in sorted order, with repeated elements"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:75
msgid "``product('ABCD', repeat=2)``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:75
msgid "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:76
msgid "``permutations('ABCD', 2)``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:76
msgid "``AB AC AD BA BC BD CA CB CD DA DB DC``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:77
msgid "``combinations('ABCD', 2)``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:77
msgid "``AB AC AD BC BD CD``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:78
msgid "``combinations_with_replacement('ABCD', 2)``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:78
msgid "``AA AB AC AD BB BC BD CC CD DD``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:85
msgid "Itertool functions"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:87
msgid ""
"The following module functions all construct and return iterators. Some "
"provide streams of infinite length, so they should only be accessed by "
"functions or loops that truncate the stream."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:94
msgid ""
"Make an iterator that returns elements from the first iterable until it is "
"exhausted, then proceeds to the next iterable, until all of the iterables "
"are exhausted.  Used for treating consecutive sequences as a single "
"sequence. Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:99
msgid ""
"def chain(*iterables):\n"
"    # chain('ABC', 'DEF') --> A B C D E F\n"
"    for it in iterables:\n"
"        for element in it:\n"
"            yield element"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:108
msgid ""
"Alternate constructor for :func:`chain`.  Gets chained inputs from a single "
"iterable argument that is evaluated lazily.  Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:111
msgid ""
"def from_iterable(iterables):\n"
"    # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F\n"
"    for it in iterables:\n"
"        for element in it:\n"
"            yield element"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:122
msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:124
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:175
msgid ""
"Combinations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the combination tuples will be produced in sorted "
"order."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:128
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"combination."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:132
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:183
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:514
msgid "Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:134
msgid ""
"def combinations(iterable, r):\n"
"    # combinations('ABCD', 2) --> AB AC AD BC BD CD\n"
"    # combinations(range(4), 3) --> 012 013 023 123\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    if r > n:\n"
"        return\n"
"    indices = range(r)\n"
"    yield tuple(pool[i] for i in indices)\n"
"    while True:\n"
"        for i in reversed(range(r)):\n"
"            if indices[i] != i + n - r:\n"
"                break\n"
"        else:\n"
"            return\n"
"        indices[i] += 1\n"
"        for j in range(i+1, r):\n"
"            indices[j] = indices[j-1] + 1\n"
"        yield tuple(pool[i] for i in indices)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:154
msgid ""
"The code for :func:`combinations` can be also expressed as a subsequence of :"
"func:`permutations` after filtering entries where the elements are not in "
"sorted order (according to their position in the input pool)::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:158
msgid ""
"def combinations(iterable, r):\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    for indices in permutations(range(n), r):\n"
"        if sorted(indices) == list(indices):\n"
"            yield tuple(pool[i] for i in indices)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:165
msgid ""
"The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n`` or "
"zero when ``r > n``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:172
msgid ""
"Return *r* length subsequences of elements from the input *iterable* "
"allowing individual elements to be repeated more than once."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:179
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, the generated combinations will also be "
"unique."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:185
msgid ""
"def combinations_with_replacement(iterable, r):\n"
"    # combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    if not n and r:\n"
"        return\n"
"    indices = [0] * r\n"
"    yield tuple(pool[i] for i in indices)\n"
"    while True:\n"
"        for i in reversed(range(r)):\n"
"            if indices[i] != n - 1:\n"
"                break\n"
"        else:\n"
"            return\n"
"        indices[i:] = [indices[i] + 1] * (r - i)\n"
"        yield tuple(pool[i] for i in indices)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:202
msgid ""
"The code for :func:`combinations_with_replacement` can be also expressed as "
"a subsequence of :func:`product` after filtering entries where the elements "
"are not in sorted order (according to their position in the input pool)::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:206
msgid ""
"def combinations_with_replacement(iterable, r):\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    for indices in product(range(n), repeat=r):\n"
"        if sorted(indices) == list(indices):\n"
"            yield tuple(pool[i] for i in indices)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:213
msgid ""
"The number of items returned is ``(n+r-1)! / r! / (n-1)!`` when ``n > 0``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:219
msgid ""
"Make an iterator that filters elements from *data* returning only those that "
"have a corresponding element in *selectors* that evaluates to ``True``. "
"Stops when either the *data* or *selectors* iterables has been exhausted. "
"Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:224
msgid ""
"def compress(data, selectors):\n"
"    # compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F\n"
"    return (d for d, s in izip(data, selectors) if s)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:233
msgid ""
"Make an iterator that returns evenly spaced values starting with *n*. Often "
"used as an argument to :func:`imap` to generate consecutive data points. "
"Also, used with :func:`izip` to add sequence numbers.  Equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:237
msgid ""
"def count(start=0, step=1):\n"
"    # count(10) --> 10 11 12 13 14 ...\n"
"    # count(2.5, 0.5) -> 2.5 3.0 3.5 ...\n"
"    n = start\n"
"    while True:\n"
"        yield n\n"
"        n += step"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:245
msgid ""
"When counting with floating point numbers, better accuracy can sometimes be "
"achieved by substituting multiplicative code such as: ``(start + step * i "
"for i in count())``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:249
msgid "added *step* argument and allowed non-integer arguments."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:254
msgid ""
"Make an iterator returning elements from the iterable and saving a copy of "
"each. When the iterable is exhausted, return elements from the saved copy.  "
"Repeats indefinitely.  Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:258
msgid ""
"def cycle(iterable):\n"
"    # cycle('ABCD') --> A B C D A B C D A B C D ...\n"
"    saved = []\n"
"    for element in iterable:\n"
"        yield element\n"
"        saved.append(element)\n"
"    while saved:\n"
"        for element in saved:\n"
"              yield element"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:268
msgid ""
"Note, this member of the toolkit may require significant auxiliary storage "
"(depending on the length of the iterable)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:274
msgid ""
"Make an iterator that drops elements from the iterable as long as the "
"predicate is true; afterwards, returns every element.  Note, the iterator "
"does not produce *any* output until the predicate first becomes false, so it "
"may have a lengthy start-up time.  Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:279
msgid ""
"def dropwhile(predicate, iterable):\n"
"    # dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1\n"
"    iterable = iter(iterable)\n"
"    for x in iterable:\n"
"        if not predicate(x):\n"
"            yield x\n"
"            break\n"
"    for x in iterable:\n"
"        yield x"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:292
msgid ""
"Make an iterator that returns consecutive keys and groups from the "
"*iterable*. The *key* is a function computing a key value for each element.  "
"If not specified or is ``None``, *key* defaults to an identity function and "
"returns the element unchanged.  Generally, the iterable needs to already be "
"sorted on the same key function."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:298
msgid ""
"The operation of :func:`groupby` is similar to the ``uniq`` filter in Unix.  "
"It generates a break or new group every time the value of the key function "
"changes (which is why it is usually necessary to have sorted the data using "
"the same key function).  That behavior differs from SQL's GROUP BY which "
"aggregates common elements regardless of their input order."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:304
msgid ""
"The returned group is itself an iterator that shares the underlying iterable "
"with :func:`groupby`.  Because the source is shared, when the :func:"
"`groupby` object is advanced, the previous group is no longer visible.  So, "
"if that data is needed later, it should be stored as a list::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:309
msgid ""
"groups = []\n"
"uniquekeys = []\n"
"data = sorted(data, key=keyfunc)\n"
"for k, g in groupby(data, keyfunc):\n"
"    groups.append(list(g))      # Store group iterator as a list\n"
"    uniquekeys.append(k)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:316
msgid ":func:`groupby` is roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:318
msgid ""
"class groupby(object):\n"
"    # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B\n"
"    # [list(g) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D\n"
"    def __init__(self, iterable, key=None):\n"
"        if key is None:\n"
"            key = lambda x: x\n"
"        self.keyfunc = key\n"
"        self.it = iter(iterable)\n"
"        self.tgtkey = self.currkey = self.currvalue = object()\n"
"    def __iter__(self):\n"
"        return self\n"
"    def next(self):\n"
"        while self.currkey == self.tgtkey:\n"
"            self.currvalue = next(self.it)    # Exit on StopIteration\n"
"            self.currkey = self.keyfunc(self.currvalue)\n"
"        self.tgtkey = self.currkey\n"
"        return (self.currkey, self._grouper(self.tgtkey))\n"
"    def _grouper(self, tgtkey):\n"
"        while self.currkey == tgtkey:\n"
"            yield self.currvalue\n"
"            self.currvalue = next(self.it)    # Exit on StopIteration\n"
"            self.currkey = self.keyfunc(self.currvalue)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:346
msgid ""
"Make an iterator that filters elements from iterable returning only those "
"for which the predicate is ``True``. If *predicate* is ``None``, return the "
"items that are true. Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:350
msgid ""
"def ifilter(predicate, iterable):\n"
"    # ifilter(lambda x: x%2, range(10)) --> 1 3 5 7 9\n"
"    if predicate is None:\n"
"        predicate = bool\n"
"    for x in iterable:\n"
"        if predicate(x):\n"
"            yield x"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:361
msgid ""
"Make an iterator that filters elements from iterable returning only those "
"for which the predicate is ``False``. If *predicate* is ``None``, return the "
"items that are false. Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:365
msgid ""
"def ifilterfalse(predicate, iterable):\n"
"    # ifilterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8\n"
"    if predicate is None:\n"
"        predicate = bool\n"
"    for x in iterable:\n"
"        if not predicate(x):\n"
"            yield x"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:376
msgid ""
"Make an iterator that computes the function using arguments from each of the "
"iterables.  If *function* is set to ``None``, then :func:`imap` returns the "
"arguments as a tuple.  Like :func:`map` but stops when the shortest iterable "
"is exhausted instead of filling in ``None`` for shorter iterables.  The "
"reason for the difference is that infinite iterator arguments are typically "
"an error for :func:`map` (because the output is fully evaluated) but "
"represent a common and useful way of supplying arguments to :func:`imap`. "
"Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:384
msgid ""
"def imap(function, *iterables):\n"
"    # imap(pow, (2,3,10), (5,2,3)) --> 32 9 1000\n"
"    iterables = map(iter, iterables)\n"
"    while True:\n"
"        args = [next(it) for it in iterables]\n"
"        if function is None:\n"
"            yield tuple(args)\n"
"        else:\n"
"            yield function(*args)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:398
msgid ""
"Make an iterator that returns selected elements from the iterable. If "
"*start* is non-zero, then elements from the iterable are skipped until start "
"is reached. Afterward, elements are returned consecutively unless *step* is "
"set higher than one which results in items being skipped.  If *stop* is "
"``None``, then iteration continues until the iterator is exhausted, if at "
"all; otherwise, it stops at the specified position.  Unlike regular "
"slicing, :func:`islice` does not support negative values for *start*, "
"*stop*, or *step*.  Can be used to extract related fields from data where "
"the internal structure has been flattened (for example, a multi-line report "
"may list a name field on every third line).  Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:408
msgid ""
"def islice(iterable, *args):\n"
"    # islice('ABCDEFG', 2) --> A B\n"
"    # islice('ABCDEFG', 2, 4) --> C D\n"
"    # islice('ABCDEFG', 2, None) --> C D E F G\n"
"    # islice('ABCDEFG', 0, None, 2) --> A C E G\n"
"    s = slice(*args)\n"
"    start, stop, step = s.start or 0, s.stop or sys.maxint, s.step or 1\n"
"    it = iter(xrange(start, stop, step)))\n"
"    try:\n"
"        nexti = next(it)\n"
"    except StopIteration:\n"
"        # Consume *iterable* up to the *start* position.\n"
"        for i, element in izip(xrange(start), iterable):\n"
"            pass\n"
"        return\n"
"    try:\n"
"        for i, element in enumerate(iterable):\n"
"            if i == nexti:\n"
"                yield element\n"
"                nexti = next(it)\n"
"    except StopIteration:\n"
"        # Consume to *stop*.\n"
"        for i, element in izip(xrange(i + 1, stop), iterable):\n"
"            pass"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:433
msgid ""
"If *start* is ``None``, then iteration starts at zero. If *step* is "
"``None``, then the step defaults to one."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:436
msgid "accept ``None`` values for default *start* and *step*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:442
msgid ""
"Make an iterator that aggregates elements from each of the iterables. Like :"
"func:`zip` except that it returns an iterator instead of a list.  Used for "
"lock-step iteration over several iterables at a time.  Roughly equivalent "
"to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:446
msgid ""
"def izip(*iterables):\n"
"    # izip('ABCD', 'xy') --> Ax By\n"
"    iterators = map(iter, iterables)\n"
"    while iterators:\n"
"        yield tuple(map(next, iterators))"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:452
msgid ""
"When no iterables are specified, returns a zero length iterator instead of "
"raising a :exc:`TypeError` exception."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:456
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``izip(*[iter(s)]*n)``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:460
msgid ""
":func:`izip` should only be used with unequal length inputs when you don't "
"care about trailing, unmatched values from the longer iterables.  If those "
"values are important, use :func:`izip_longest` instead."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:467
msgid ""
"Make an iterator that aggregates elements from each of the iterables. If the "
"iterables are of uneven length, missing values are filled-in with "
"*fillvalue*. Iteration continues until the longest iterable is exhausted.  "
"Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:471
msgid ""
"class ZipExhausted(Exception):\n"
"    pass\n"
"\n"
"def izip_longest(*args, **kwds):\n"
"    # izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-\n"
"    fillvalue = kwds.get('fillvalue')\n"
"    counter = [len(args) - 1]\n"
"    def sentinel():\n"
"        if not counter[0]:\n"
"            raise ZipExhausted\n"
"        counter[0] -= 1\n"
"        yield fillvalue\n"
"    fillers = repeat(fillvalue)\n"
"    iterators = [chain(it, sentinel(), fillers) for it in args]\n"
"    try:\n"
"        while iterators:\n"
"            yield tuple(map(next, iterators))\n"
"    except ZipExhausted:\n"
"        pass"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:491
msgid ""
"If one of the iterables is potentially infinite, then the :func:"
"`izip_longest` function should be wrapped with something that limits the "
"number of calls (for example :func:`islice` or :func:`takewhile`).  If not "
"specified, *fillvalue* defaults to ``None``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:500
msgid ""
"Return successive *r* length permutations of elements in the *iterable*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:502
msgid ""
"If *r* is not specified or is ``None``, then *r* defaults to the length of "
"the *iterable* and all possible full-length permutations are generated."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:506
msgid ""
"Permutations are emitted in lexicographic sort order.  So, if the input "
"*iterable* is sorted, the permutation tuples will be produced in sorted "
"order."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:510
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"permutation."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:516
msgid ""
"def permutations(iterable, r=None):\n"
"    # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC\n"
"    # permutations(range(3)) --> 012 021 102 120 201 210\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    r = n if r is None else r\n"
"    if r > n:\n"
"        return\n"
"    indices = range(n)\n"
"    cycles = range(n, n-r, -1)\n"
"    yield tuple(pool[i] for i in indices[:r])\n"
"    while n:\n"
"        for i in reversed(range(r)):\n"
"            cycles[i] -= 1\n"
"            if cycles[i] == 0:\n"
"                indices[i:] = indices[i+1:] + indices[i:i+1]\n"
"                cycles[i] = n - i\n"
"            else:\n"
"                j = cycles[i]\n"
"                indices[i], indices[-j] = indices[-j], indices[i]\n"
"                yield tuple(pool[i] for i in indices[:r])\n"
"                break\n"
"        else:\n"
"            return"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:541
msgid ""
"The code for :func:`permutations` can be also expressed as a subsequence of :"
"func:`product`, filtered to exclude entries with repeated elements (those "
"from the same position in the input pool)::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:545
msgid ""
"def permutations(iterable, r=None):\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    r = n if r is None else r\n"
"    for indices in product(range(n), repeat=r):\n"
"        if len(set(indices)) == r:\n"
"            yield tuple(pool[i] for i in indices)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:553
msgid ""
"The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or zero "
"when ``r > n``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:560
msgid "Cartesian product of input iterables."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:562
msgid ""
"Roughly equivalent to nested for-loops in a generator expression. For "
"example, ``product(A, B)`` returns the same as ``((x,y) for x in A for y in "
"B)``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:565
msgid ""
"The nested loops cycle like an odometer with the rightmost element advancing "
"on every iteration.  This pattern creates a lexicographic ordering so that "
"if the input's iterables are sorted, the product tuples are emitted in "
"sorted order."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:570
msgid ""
"To compute the product of an iterable with itself, specify the number of "
"repetitions with the optional *repeat* keyword argument.  For example, "
"``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:574
msgid ""
"This function is roughly equivalent to the following code, except that the "
"actual implementation does not build up intermediate results in memory::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:577
msgid ""
"def product(*args, **kwds):\n"
"    # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy\n"
"    # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111\n"
"    pools = map(tuple, args) * kwds.get('repeat', 1)\n"
"    result = [[]]\n"
"    for pool in pools:\n"
"        result = [x+[y] for x in result for y in pool]\n"
"    for prod in result:\n"
"        yield tuple(prod)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:591
msgid ""
"Make an iterator that returns *object* over and over again. Runs "
"indefinitely unless the *times* argument is specified. Used as argument to :"
"func:`imap` for invariant function parameters.  Also used with :func:`izip` "
"to create constant fields in a tuple record.  Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:596
msgid ""
"def repeat(object, times=None):\n"
"    # repeat(10, 3) --> 10 10 10\n"
"    if times is None:\n"
"        while True:\n"
"            yield object\n"
"    else:\n"
"        for i in xrange(times):\n"
"            yield object"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:605
msgid ""
"A common use for *repeat* is to supply a stream of constant values to *imap* "
"or *zip*::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:608
msgid ""
">>> list(imap(pow, xrange(10), repeat(2)))\n"
"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:613
msgid ""
"Make an iterator that computes the function using arguments obtained from "
"the iterable.  Used instead of :func:`imap` when argument parameters are "
"already grouped in tuples from a single iterable (the data has been \"pre-"
"zipped\").  The difference between :func:`imap` and :func:`starmap` "
"parallels the distinction between ``function(a,b)`` and ``function(*c)``. "
"Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:619
msgid ""
"def starmap(function, iterable):\n"
"    # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000\n"
"    for args in iterable:\n"
"        yield function(*args)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:624
msgid ""
"Previously, :func:`starmap` required the function arguments to be tuples. "
"Now, any iterable is allowed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:630
msgid ""
"Make an iterator that returns elements from the iterable as long as the "
"predicate is true.  Roughly equivalent to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:633
msgid ""
"def takewhile(predicate, iterable):\n"
"    # takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4\n"
"    for x in iterable:\n"
"        if predicate(x):\n"
"            yield x\n"
"        else:\n"
"            break"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:644
msgid ""
"Return *n* independent iterators from a single iterable.  Roughly equivalent "
"to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:646
msgid ""
"def tee(iterable, n=2):\n"
"    it = iter(iterable)\n"
"    deques = [collections.deque() for i in range(n)]\n"
"    def gen(mydeque):\n"
"        while True:\n"
"            if not mydeque:             # when the local deque is empty\n"
"                newval = next(it)       # fetch a new value and\n"
"                for d in deques:        # load it to all the deques\n"
"                    d.append(newval)\n"
"            yield mydeque.popleft()\n"
"    return tuple(gen(d) for d in deques)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:658
msgid ""
"Once :func:`tee` has made a split, the original *iterable* should not be "
"used anywhere else; otherwise, the *iterable* could get advanced without the "
"tee objects being informed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:662
msgid ""
"``tee`` iterators are not threadsafe. A :exc:`RuntimeError` may be raised "
"when using simultaneously iterators returned by the same :func:`tee` call, "
"even if the original *iterable* is threadsafe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:666
msgid ""
"This itertool may require significant auxiliary storage (depending on how "
"much temporary data needs to be stored). In general, if one iterator uses "
"most or all of the data before another iterator starts, it is faster to use :"
"func:`list` instead of :func:`tee`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:677
msgid "Recipes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:679
msgid ""
"This section shows recipes for creating an extended toolset using the "
"existing itertools as building blocks."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:682
msgid ""
"The extended tools offer the same high performance as the underlying "
"toolset. The superior memory performance is kept by processing elements one "
"at a time rather than bringing the whole iterable into memory all at once. "
"Code volume is kept small by linking the tools together in a functional "
"style which helps eliminate temporary variables.  High speed is retained by "
"preferring \"vectorized\" building blocks over the use of for-loops and :"
"term:`generator`\\s which incur interpreter overhead."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:690
msgid ""
"def take(n, iterable):\n"
"    \"Return first n items of the iterable as a list\"\n"
"    return list(islice(iterable, n))\n"
"\n"
"def tabulate(function, start=0):\n"
"    \"Return function(0), function(1), ...\"\n"
"    return imap(function, count(start))\n"
"\n"
"def consume(iterator, n=None):\n"
"    \"Advance the iterator n-steps ahead. If n is None, consume entirely.\"\n"
"    # Use functions that consume iterators at C speed.\n"
"    if n is None:\n"
"        # feed the entire iterator into a zero-length deque\n"
"        collections.deque(iterator, maxlen=0)\n"
"    else:\n"
"        # advance to the empty slice starting at position n\n"
"        next(islice(iterator, n, n), None)\n"
"\n"
"def nth(iterable, n, default=None):\n"
"    \"Returns the nth item or a default value\"\n"
"    return next(islice(iterable, n, None), default)\n"
"\n"
"def all_equal(iterable):\n"
"    \"Returns True if all the elements are equal to each other\"\n"
"    g = groupby(iterable)\n"
"    return next(g, True) and not next(g, False)\n"
"\n"
"def quantify(iterable, pred=bool):\n"
"    \"Count how many times the predicate is true\"\n"
"    return sum(imap(pred, iterable))\n"
"\n"
"def padnone(iterable):\n"
"    \"\"\"Returns the sequence elements and then returns None indefinitely.\n"
"\n"
"    Useful for emulating the behavior of the built-in map() function.\n"
"    \"\"\"\n"
"    return chain(iterable, repeat(None))\n"
"\n"
"def ncycles(iterable, n):\n"
"    \"Returns the sequence elements n times\"\n"
"    return chain.from_iterable(repeat(tuple(iterable), n))\n"
"\n"
"def dotproduct(vec1, vec2):\n"
"    return sum(imap(operator.mul, vec1, vec2))\n"
"\n"
"def flatten(listOfLists):\n"
"    \"Flatten one level of nesting\"\n"
"    return chain.from_iterable(listOfLists)\n"
"\n"
"def repeatfunc(func, times=None, *args):\n"
"    \"\"\"Repeat calls to func with specified arguments.\n"
"\n"
"    Example:  repeatfunc(random.random)\n"
"    \"\"\"\n"
"    if times is None:\n"
"        return starmap(func, repeat(args))\n"
"    return starmap(func, repeat(args, times))\n"
"\n"
"def pairwise(iterable):\n"
"    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n"
"    a, b = tee(iterable)\n"
"    next(b, None)\n"
"    return izip(a, b)\n"
"\n"
"def grouper(iterable, n, fillvalue=None):\n"
"    \"Collect data into fixed-length chunks or blocks\"\n"
"    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\n"
"    args = [iter(iterable)] * n\n"
"    return izip_longest(fillvalue=fillvalue, *args)\n"
"\n"
"def roundrobin(*iterables):\n"
"    \"roundrobin('ABC', 'D', 'EF') --> A D E B F C\"\n"
"    # Recipe credited to George Sakkis\n"
"    pending = len(iterables)\n"
"    nexts = cycle(iter(it).next for it in iterables)\n"
"    while pending:\n"
"        try:\n"
"            for next in nexts:\n"
"                yield next()\n"
"        except StopIteration:\n"
"            pending -= 1\n"
"            nexts = cycle(islice(nexts, pending))\n"
"\n"
"def powerset(iterable):\n"
"    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n"
"    s = list(iterable)\n"
"    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n"
"\n"
"def unique_everseen(iterable, key=None):\n"
"    \"List unique elements, preserving order. Remember all elements ever "
"seen.\"\n"
"    # unique_everseen('AAAABBBCCDAABBB') --> A B C D\n"
"    # unique_everseen('ABBCcAD', str.lower) --> A B C D\n"
"    seen = set()\n"
"    seen_add = seen.add\n"
"    if key is None:\n"
"        for element in ifilterfalse(seen.__contains__, iterable):\n"
"            seen_add(element)\n"
"            yield element\n"
"    else:\n"
"        for element in iterable:\n"
"            k = key(element)\n"
"            if k not in seen:\n"
"                seen_add(k)\n"
"                yield element\n"
"\n"
"def unique_justseen(iterable, key=None):\n"
"    \"List unique elements, preserving order. Remember only the element just "
"seen.\"\n"
"    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B\n"
"    # unique_justseen('ABBCcAD', str.lower) --> A B C A D\n"
"    return imap(next, imap(itemgetter(1), groupby(iterable, key)))\n"
"\n"
"def iter_except(func, exception, first=None):\n"
"    \"\"\" Call a function repeatedly until an exception is raised.\n"
"\n"
"    Converts a call-until-exception interface to an iterator interface.\n"
"    Like __builtin__.iter(func, sentinel) but uses an exception instead\n"
"    of a sentinel to end the loop.\n"
"\n"
"    Examples:\n"
"        bsddbiter = iter_except(db.next, bsddb.error, db.first)\n"
"        heapiter = iter_except(functools.partial(heappop, h), IndexError)\n"
"        dictiter = iter_except(d.popitem, KeyError)\n"
"        dequeiter = iter_except(d.popleft, IndexError)\n"
"        queueiter = iter_except(q.get_nowait, Queue.Empty)\n"
"        setiter = iter_except(s.pop, KeyError)\n"
"\n"
"    \"\"\"\n"
"    try:\n"
"        if first is not None:\n"
"            yield first()\n"
"        while 1:\n"
"            yield func()\n"
"    except exception:\n"
"        pass\n"
"\n"
"def random_product(*args, **kwds):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = map(tuple, args) * kwds.get('repeat', 1)\n"
"    return tuple(random.choice(pool) for pool in pools)\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(xrange(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Random selection from itertools."
"combinations_with_replacement(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.randrange(n) for i in xrange(r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def tee_lookahead(t, i):\n"
"    \"\"\"Inspect the i-th upcomping value from a tee object\n"
"       while leaving the tee object at its current position.\n"
"\n"
"       Raise an IndexError if the underlying iterator doesn't\n"
"       have enough values.\n"
"\n"
"    \"\"\"\n"
"    for value in islice(t.__copy__(), i, None):\n"
"        return value\n"
"    raise IndexError(i)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:864
msgid ""
"Note, many of the above recipes can be optimized by replacing global lookups "
"with local variables defined as default values.  For example, the "
"*dotproduct* recipe can be written as::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/itertools.rst:868
msgid ""
"def dotproduct(vec1, vec2, sum=sum, imap=imap, mul=operator.mul):\n"
"    return sum(imap(mul, vec1, vec2))"
msgstr ""
