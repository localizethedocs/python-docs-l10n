# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2
msgid ":mod:`multiprocessing` --- Process-based \"threading\" interface"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:11
msgid "Introduction"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:13
msgid ""
":mod:`multiprocessing` is a package that supports spawning processes using "
"an API similar to the :mod:`threading` module.  The :mod:`multiprocessing` "
"package offers both local and remote concurrency, effectively side-stepping "
"the :term:`Global Interpreter Lock` by using subprocesses instead of "
"threads.  Due to this, the :mod:`multiprocessing` module allows the "
"programmer to fully leverage multiple processors on a given machine.  It "
"runs on both Unix and Windows."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:21
msgid ""
"The :mod:`multiprocessing` module also introduces APIs which do not have "
"analogs in the :mod:`threading` module.  A prime example of this is the :"
"class:`Pool` object which offers a convenient means of parallelizing the "
"execution of a function across multiple input values, distributing the input "
"data across processes (data parallelism).  The following example "
"demonstrates the common practice of defining such functions in a module so "
"that child processes can successfully import that module.  This basic "
"example of data parallelism using :class:`Pool`, ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:30
msgid ""
"from multiprocessing import Pool\n"
"\n"
"def f(x):\n"
"    return x*x\n"
"\n"
"if __name__ == '__main__':\n"
"    p = Pool(5)\n"
"    print(p.map(f, [1, 2, 3]))"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:39
msgid "will print to standard output ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:41
msgid "[1, 4, 9]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:45
msgid "The :class:`Process` class"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:47
msgid ""
"In :mod:`multiprocessing`, processes are spawned by creating a :class:"
"`Process` object and then calling its :meth:`~Process.start` method.  :class:"
"`Process` follows the API of :class:`threading.Thread`.  A trivial example "
"of a multiprocess program is ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:52
msgid ""
"from multiprocessing import Process\n"
"\n"
"def f(name):\n"
"    print 'hello', name\n"
"\n"
"if __name__ == '__main__':\n"
"    p = Process(target=f, args=('bob',))\n"
"    p.start()\n"
"    p.join()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:62
msgid ""
"To show the individual process IDs involved, here is an expanded example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:64
msgid ""
"from multiprocessing import Process\n"
"import os\n"
"\n"
"def info(title):\n"
"    print title\n"
"    print 'module name:', __name__\n"
"    if hasattr(os, 'getppid'):  # only available on Unix\n"
"        print 'parent process:', os.getppid()\n"
"    print 'process id:', os.getpid()\n"
"\n"
"def f(name):\n"
"    info('function f')\n"
"    print 'hello', name\n"
"\n"
"if __name__ == '__main__':\n"
"    info('main line')\n"
"    p = Process(target=f, args=('bob',))\n"
"    p.start()\n"
"    p.join()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:84
msgid ""
"For an explanation of why (on Windows) the ``if __name__ == '__main__'`` "
"part is necessary, see :ref:`multiprocessing-programming`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:89
msgid "Exchanging objects between processes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:91
msgid ""
":mod:`multiprocessing` supports two types of communication channel between "
"processes:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:94
msgid "**Queues**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:96
msgid ""
"The :class:`~multiprocessing.Queue` class is a near clone of :class:`Queue."
"Queue`.  For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:99
msgid ""
"from multiprocessing import Process, Queue\n"
"\n"
"def f(q):\n"
"    q.put([42, None, 'hello'])\n"
"\n"
"if __name__ == '__main__':\n"
"    q = Queue()\n"
"    p = Process(target=f, args=(q,))\n"
"    p.start()\n"
"    print q.get()    # prints \"[42, None, 'hello']\"\n"
"    p.join()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:111
msgid "Queues are thread and process safe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:113
msgid "**Pipes**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:115
msgid ""
"The :func:`Pipe` function returns a pair of connection objects connected by "
"a pipe which by default is duplex (two-way).  For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:118
msgid ""
"from multiprocessing import Process, Pipe\n"
"\n"
"def f(conn):\n"
"    conn.send([42, None, 'hello'])\n"
"    conn.close()\n"
"\n"
"if __name__ == '__main__':\n"
"    parent_conn, child_conn = Pipe()\n"
"    p = Process(target=f, args=(child_conn,))\n"
"    p.start()\n"
"    print parent_conn.recv()   # prints \"[42, None, 'hello']\"\n"
"    p.join()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:131
msgid ""
"The two connection objects returned by :func:`Pipe` represent the two ends "
"of the pipe.  Each connection object has :meth:`~Connection.send` and :meth:"
"`~Connection.recv` methods (among others).  Note that data in a pipe may "
"become corrupted if two processes (or threads) try to read from or write to "
"the *same* end of the pipe at the same time.  Of course there is no risk of "
"corruption from processes using different ends of the pipe at the same time."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:141
msgid "Synchronization between processes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:143
msgid ""
":mod:`multiprocessing` contains equivalents of all the synchronization "
"primitives from :mod:`threading`.  For instance one can use a lock to ensure "
"that only one process prints to standard output at a time::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:147
msgid ""
"from multiprocessing import Process, Lock\n"
"\n"
"def f(l, i):\n"
"    l.acquire()\n"
"    print 'hello world', i\n"
"    l.release()\n"
"\n"
"if __name__ == '__main__':\n"
"    lock = Lock()\n"
"\n"
"    for num in range(10):\n"
"        Process(target=f, args=(lock, num)).start()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:160
msgid ""
"Without using the lock output from the different processes is liable to get "
"all mixed up."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:165
msgid "Sharing state between processes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:167
msgid ""
"As mentioned above, when doing concurrent programming it is usually best to "
"avoid using shared state as far as possible.  This is particularly true when "
"using multiple processes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:171
msgid ""
"However, if you really do need to use some shared data then :mod:"
"`multiprocessing` provides a couple of ways of doing so."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:174
msgid "**Shared memory**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:176
msgid ""
"Data can be stored in a shared memory map using :class:`Value` or :class:"
"`Array`.  For example, the following code ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:179
msgid ""
"from multiprocessing import Process, Value, Array\n"
"\n"
"def f(n, a):\n"
"    n.value = 3.1415927\n"
"    for i in range(len(a)):\n"
"        a[i] = -a[i]\n"
"\n"
"if __name__ == '__main__':\n"
"    num = Value('d', 0.0)\n"
"    arr = Array('i', range(10))\n"
"\n"
"    p = Process(target=f, args=(num, arr))\n"
"    p.start()\n"
"    p.join()\n"
"\n"
"    print num.value\n"
"    print arr[:]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:197
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:244
msgid "will print ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:199
msgid ""
"3.1415927\n"
"[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:202
msgid ""
"The ``'d'`` and ``'i'`` arguments used when creating ``num`` and ``arr`` are "
"typecodes of the kind used by the :mod:`array` module: ``'d'`` indicates a "
"double precision float and ``'i'`` indicates a signed integer.  These shared "
"objects will be process and thread-safe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:207
msgid ""
"For more flexibility in using shared memory one can use the :mod:"
"`multiprocessing.sharedctypes` module which supports the creation of "
"arbitrary ctypes objects allocated from shared memory."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:211
msgid "**Server process**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:213
msgid ""
"A manager object returned by :func:`Manager` controls a server process which "
"holds Python objects and allows other processes to manipulate them using "
"proxies."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:217
msgid ""
"A manager returned by :func:`Manager` will support types :class:`list`, :"
"class:`dict`, :class:`~managers.Namespace`, :class:`Lock`, :class:`RLock`, :"
"class:`Semaphore`, :class:`BoundedSemaphore`, :class:`Condition`, :class:"
"`Event`, :class:`~multiprocessing.Queue`, :class:`Value` and :class:"
"`Array`.  For example, ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:223
msgid ""
"from multiprocessing import Process, Manager\n"
"\n"
"def f(d, l):\n"
"    d[1] = '1'\n"
"    d['2'] = 2\n"
"    d[0.25] = None\n"
"    l.reverse()\n"
"\n"
"if __name__ == '__main__':\n"
"    manager = Manager()\n"
"\n"
"    d = manager.dict()\n"
"    l = manager.list(range(10))\n"
"\n"
"    p = Process(target=f, args=(d, l))\n"
"    p.start()\n"
"    p.join()\n"
"\n"
"    print d\n"
"    print l"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:246
msgid ""
"{0.25: None, 1: '1', '2': 2}\n"
"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:249
msgid ""
"Server process managers are more flexible than using shared memory objects "
"because they can be made to support arbitrary object types.  Also, a single "
"manager can be shared by processes on different computers over a network. "
"They are, however, slower than using shared memory."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:256
msgid "Using a pool of workers"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:258
msgid ""
"The :class:`~multiprocessing.pool.Pool` class represents a pool of worker "
"processes.  It has methods which allows tasks to be offloaded to the worker "
"processes in a few different ways."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:262
msgid "For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:264
msgid ""
"from multiprocessing import Pool, TimeoutError\n"
"import time\n"
"import os\n"
"\n"
"def f(x):\n"
"    return x*x\n"
"\n"
"if __name__ == '__main__':\n"
"    pool = Pool(processes=4)              # start 4 worker processes\n"
"\n"
"    # print \"[0, 1, 4,..., 81]\"\n"
"    print pool.map(f, range(10))\n"
"\n"
"    # print same numbers in arbitrary order\n"
"    for i in pool.imap_unordered(f, range(10)):\n"
"        print i\n"
"\n"
"    # evaluate \"f(20)\" asynchronously\n"
"    res = pool.apply_async(f, (20,))      # runs in *only* one process\n"
"    print res.get(timeout=1)              # prints \"400\"\n"
"\n"
"    # evaluate \"os.getpid()\" asynchronously\n"
"    res = pool.apply_async(os.getpid, ()) # runs in *only* one process\n"
"    print res.get(timeout=1)              # prints the PID of that process\n"
"\n"
"    # launching multiple evaluations asynchronously *may* use more "
"processes\n"
"    multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]\n"
"    print [res.get(timeout=1) for res in multiple_results]\n"
"\n"
"    # make a single worker sleep for 10 secs\n"
"    res = pool.apply_async(time.sleep, (10,))\n"
"    try:\n"
"        print res.get(timeout=1)\n"
"    except TimeoutError:\n"
"        print \"We lacked patience and got a multiprocessing.TimeoutError\""
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:300
msgid ""
"Note that the methods of a pool should only ever be used by the process "
"which created it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:305
msgid ""
"Functionality within this package requires that the ``__main__`` module be "
"importable by the children. This is covered in :ref:`multiprocessing-"
"programming` however it is worth pointing out here. This means that some "
"examples, such as the :class:`Pool` examples will not work in the "
"interactive interpreter. For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:311
msgid ""
">>> from multiprocessing import Pool\n"
">>> p = Pool(5)\n"
">>> def f(x):\n"
"...     return x*x\n"
"...\n"
">>> p.map(f, [1,2,3])\n"
"Process PoolWorker-1:\n"
"Process PoolWorker-2:\n"
"Process PoolWorker-3:\n"
"Traceback (most recent call last):\n"
"Traceback (most recent call last):\n"
"Traceback (most recent call last):\n"
"AttributeError: 'module' object has no attribute 'f'\n"
"AttributeError: 'module' object has no attribute 'f'\n"
"AttributeError: 'module' object has no attribute 'f'"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:327
msgid ""
"(If you try this it will actually output three full tracebacks interleaved "
"in a semi-random fashion, and then you may have to stop the master process "
"somehow.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:333
msgid "Reference"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:335
msgid ""
"The :mod:`multiprocessing` package mostly replicates the API of the :mod:"
"`threading` module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:340
msgid ":class:`Process` and exceptions"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:344
msgid ""
"Process objects represent activity that is run in a separate process. The :"
"class:`Process` class has equivalents of all the methods of :class:"
"`threading.Thread`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:348
msgid ""
"The constructor should always be called with keyword arguments. *group* "
"should always be ``None``; it exists solely for compatibility with :class:"
"`threading.Thread`.  *target* is the callable object to be invoked by the :"
"meth:`run()` method.  It defaults to ``None``, meaning nothing is called. "
"*name* is the process name.  By default, a unique name is constructed of the "
"form 'Process-N\\ :sub:`1`:N\\ :sub:`2`:...:N\\ :sub:`k`' where N\\ :sub:`1`,"
"N\\ :sub:`2`,...,N\\ :sub:`k` is a sequence of integers whose length is "
"determined by the *generation* of the process.  *args* is the argument tuple "
"for the target invocation.  *kwargs* is a dictionary of keyword arguments "
"for the target invocation.  By default, no arguments are passed to *target*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:360
msgid ""
"If a subclass overrides the constructor, it must make sure it invokes the "
"base class constructor (:meth:`Process.__init__`) before doing anything else "
"to the process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:366
msgid "Method representing the process's activity."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:368
msgid ""
"You may override this method in a subclass.  The standard :meth:`run` method "
"invokes the callable object passed to the object's constructor as the target "
"argument, if any, with sequential and keyword arguments taken from the "
"*args* and *kwargs* arguments, respectively."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:375
msgid "Start the process's activity."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:377
msgid ""
"This must be called at most once per process object.  It arranges for the "
"object's :meth:`run` method to be invoked in a separate process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:382
msgid ""
"Block the calling thread until the process whose :meth:`join` method is "
"called terminates or until the optional timeout occurs."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:385
msgid "If *timeout* is ``None`` then there is no timeout."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:387
msgid "A process can be joined many times."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:389
msgid ""
"A process cannot join itself because this would cause a deadlock.  It is an "
"error to attempt to join a process before it has been started."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:394
msgid "The process's name."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:396
msgid ""
"The name is a string used for identification purposes only.  It has no "
"semantics.  Multiple processes may be given the same name.  The initial name "
"is set by the constructor."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:402
msgid "Return whether the process is alive."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:404
msgid ""
"Roughly, a process object is alive from the moment the :meth:`start` method "
"returns until the child process terminates."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:409
msgid ""
"The process's daemon flag, a Boolean value.  This must be set before :meth:"
"`start` is called."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:412
msgid "The initial value is inherited from the creating process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:414
msgid ""
"When a process exits, it attempts to terminate all of its daemonic child "
"processes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:417
msgid ""
"Note that a daemonic process is not allowed to create child processes. "
"Otherwise a daemonic process would leave its children orphaned if it gets "
"terminated when its parent process exits. Additionally, these are **not** "
"Unix daemons or services, they are normal processes that will be terminated "
"(and not joined) if non-daemonic processes have exited."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:423
msgid ""
"In addition to the  :class:`threading.Thread` API, :class:`Process` objects "
"also support the following attributes and methods:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:428
msgid ""
"Return the process ID.  Before the process is spawned, this will be ``None``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:433
msgid ""
"The child's exit code.  This will be ``None`` if the process has not yet "
"terminated.  A negative value *-N* indicates that the child was terminated "
"by signal *N*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:439
msgid "The process's authentication key (a byte string)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:441
msgid ""
"When :mod:`multiprocessing` is initialized the main process is assigned a "
"random string using :func:`os.urandom`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:444
msgid ""
"When a :class:`Process` object is created, it will inherit the "
"authentication key of its parent process, although this may be changed by "
"setting :attr:`authkey` to another byte string."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:448
msgid "See :ref:`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:452
msgid ""
"Terminate the process.  On Unix this is done using the ``SIGTERM`` signal; "
"on Windows :c:func:`TerminateProcess` is used.  Note that exit handlers and "
"finally clauses, etc., will not be executed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:456
msgid ""
"Note that descendant processes of the process will *not* be terminated -- "
"they will simply become orphaned."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:461
msgid ""
"If this method is used when the associated process is using a pipe or queue "
"then the pipe or queue is liable to become corrupted and may become unusable "
"by other process.  Similarly, if the process has acquired a lock or "
"semaphore etc. then terminating it is liable to cause other processes to "
"deadlock."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:467
msgid ""
"Note that the :meth:`start`, :meth:`join`, :meth:`is_alive`, :meth:"
"`terminate` and :attr:`exitcode` methods should only be called by the "
"process that created the process object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:471
msgid "Example usage of some of the methods of :class:`Process`:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:473
msgid ""
">>> import multiprocessing, time, signal\n"
">>> p = multiprocessing.Process(target=time.sleep, args=(1000,))\n"
">>> print p, p.is_alive()\n"
"<Process(Process-1, initial)> False\n"
">>> p.start()\n"
">>> print p, p.is_alive()\n"
"<Process(Process-1, started)> True\n"
">>> p.terminate()\n"
">>> time.sleep(0.1)\n"
">>> print p, p.is_alive()\n"
"<Process(Process-1, stopped[SIGTERM])> False\n"
">>> p.exitcode == -signal.SIGTERM\n"
"True"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:492
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2065
msgid ""
"Exception raised by :meth:`Connection.recv_bytes_into()` when the supplied "
"buffer object is too small for the message read."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:495
msgid ""
"If ``e`` is an instance of :exc:`BufferTooShort` then ``e.args[0]`` will "
"give the message as a byte string."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:500
msgid "Pipes and Queues"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:502
msgid ""
"When using multiple processes, one generally uses message passing for "
"communication between processes and avoids having to use any synchronization "
"primitives like locks."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:506
msgid ""
"For passing messages one can use :func:`Pipe` (for a connection between two "
"processes) or a queue (which allows multiple producers and consumers)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:509
msgid ""
"The :class:`~multiprocessing.Queue`, :class:`multiprocessing.queues."
"SimpleQueue` and :class:`JoinableQueue` types are multi-producer, multi-"
"consumer FIFO queues modelled on the :class:`Queue.Queue` class in the "
"standard library.  They differ in that :class:`~multiprocessing.Queue` lacks "
"the :meth:`~Queue.Queue.task_done` and :meth:`~Queue.Queue.join` methods "
"introduced into Python 2.5's :class:`Queue.Queue` class."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:515
msgid ""
"If you use :class:`JoinableQueue` then you **must** call :meth:"
"`JoinableQueue.task_done` for each task removed from the queue or else the "
"semaphore used to count the number of unfinished tasks may eventually "
"overflow, raising an exception."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:520
msgid ""
"Note that one can also create a shared queue by using a manager object -- "
"see :ref:`multiprocessing-managers`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:525
msgid ""
":mod:`multiprocessing` uses the usual :exc:`Queue.Empty` and :exc:`Queue."
"Full` exceptions to signal a timeout.  They are not available in the :mod:"
"`multiprocessing` namespace so you need to import them from :mod:`Queue`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:532
msgid ""
"When an object is put on a queue, the object is pickled and a background "
"thread later flushes the pickled data to an underlying pipe.  This has some "
"consequences which are a little surprising, but should not cause any "
"practical difficulties -- if they really bother you then you can instead use "
"a queue created with a :ref:`manager <multiprocessing-managers>`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:539
msgid ""
"After putting an object on an empty queue there may be an infinitesimal "
"delay before the queue's :meth:`~Queue.empty` method returns :const:`False` "
"and :meth:`~Queue.get_nowait` can return without raising :exc:`Queue.Empty`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:544
msgid ""
"If multiple processes are enqueuing objects, it is possible for the objects "
"to be received at the other end out-of-order. However, objects enqueued by "
"the same process will always be in the expected order with respect to each "
"other."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:551
msgid ""
"If a process is killed using :meth:`Process.terminate` or :func:`os.kill` "
"while it is trying to use a :class:`~multiprocessing.Queue`, then the data "
"in the queue is likely to become corrupted.  This may cause any other "
"process to get an exception when it tries to use the queue later on."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:558
msgid ""
"As mentioned above, if a child process has put items on a queue (and it has "
"not used :meth:`JoinableQueue.cancel_join_thread <multiprocessing.Queue."
"cancel_join_thread>`), then that process will not terminate until all "
"buffered items have been flushed to the pipe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:563
msgid ""
"This means that if you try joining that process you may get a deadlock "
"unless you are sure that all items which have been put on the queue have "
"been consumed.  Similarly, if the child process is non-daemonic then the "
"parent process may hang on exit when it tries to join all its non-daemonic "
"children."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:568
msgid ""
"Note that a queue created using a manager does not have this issue.  See :"
"ref:`multiprocessing-programming`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:571
msgid ""
"For an example of the usage of queues for interprocess communication see :"
"ref:`multiprocessing-examples`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:577
msgid ""
"Returns a pair ``(conn1, conn2)`` of :class:`Connection` objects "
"representing the ends of a pipe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:580
msgid ""
"If *duplex* is ``True`` (the default) then the pipe is bidirectional.  If "
"*duplex* is ``False`` then the pipe is unidirectional: ``conn1`` can only be "
"used for receiving messages and ``conn2`` can only be used for sending "
"messages."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:588
msgid ""
"Returns a process shared queue implemented using a pipe and a few locks/"
"semaphores.  When a process first puts an item on the queue a feeder thread "
"is started which transfers objects from a buffer into the pipe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:592
msgid ""
"The usual :exc:`Queue.Empty` and :exc:`Queue.Full` exceptions from the "
"standard library's :mod:`Queue` module are raised to signal timeouts."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:595
msgid ""
":class:`~multiprocessing.Queue` implements all the methods of :class:`Queue."
"Queue` except for :meth:`~Queue.Queue.task_done` and :meth:`~Queue.Queue."
"join`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:600
msgid ""
"Return the approximate size of the queue.  Because of multithreading/"
"multiprocessing semantics, this number is not reliable."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:603
msgid ""
"Note that this may raise :exc:`NotImplementedError` on Unix platforms like "
"Mac OS X where ``sem_getvalue()`` is not implemented."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:608
msgid ""
"Return ``True`` if the queue is empty, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:613
msgid ""
"Return ``True`` if the queue is full, ``False`` otherwise.  Because of "
"multithreading/multiprocessing semantics, this is not reliable."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:618
msgid ""
"Put obj into the queue.  If the optional argument *block* is ``True`` (the "
"default) and *timeout* is ``None`` (the default), block if necessary until a "
"free slot is available.  If *timeout* is a positive number, it blocks at "
"most *timeout* seconds and raises the :exc:`Queue.Full` exception if no free "
"slot was available within that time.  Otherwise (*block* is ``False``), put "
"an item on the queue if a free slot is immediately available, else raise "
"the :exc:`Queue.Full` exception (*timeout* is ignored in that case)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:629
msgid "Equivalent to ``put(obj, False)``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:633
msgid ""
"Remove and return an item from the queue.  If optional args *block* is "
"``True`` (the default) and *timeout* is ``None`` (the default), block if "
"necessary until an item is available.  If *timeout* is a positive number, it "
"blocks at most *timeout* seconds and raises the :exc:`Queue.Empty` exception "
"if no item was available within that time.  Otherwise (block is ``False``), "
"return an item if one is immediately available, else raise the :exc:`Queue."
"Empty` exception (*timeout* is ignored in that case)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:643
msgid "Equivalent to ``get(False)``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:645
msgid ""
":class:`~multiprocessing.Queue` has a few additional methods not found in :"
"class:`Queue.Queue`.  These methods are usually unnecessary for most code:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:651
msgid ""
"Indicate that no more data will be put on this queue by the current "
"process.  The background thread will quit once it has flushed all buffered "
"data to the pipe.  This is called automatically when the queue is garbage "
"collected."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:658
msgid ""
"Join the background thread.  This can only be used after :meth:`close` has "
"been called.  It blocks until the background thread exits, ensuring that all "
"data in the buffer has been flushed to the pipe."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:662
msgid ""
"By default if a process is not the creator of the queue then on exit it will "
"attempt to join the queue's background thread.  The process can call :meth:"
"`cancel_join_thread` to make :meth:`join_thread` do nothing."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:668
msgid ""
"Prevent :meth:`join_thread` from blocking.  In particular, this prevents the "
"background thread from being joined automatically when the process exits -- "
"see :meth:`join_thread`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:672
msgid ""
"A better name for this method might be ``allow_exit_without_flush()``.  It "
"is likely to cause enqueued data to lost, and you almost certainly will not "
"need to use it. It is really only there if you need the current process to "
"exit immediately without waiting to flush enqueued data to the underlying "
"pipe, and you don't care about lost data."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:681
msgid ""
"This class's functionality requires a functioning shared semaphore "
"implementation on the host operating system. Without one, the functionality "
"in this class will be disabled, and attempts to instantiate a :class:`Queue` "
"will result in an :exc:`ImportError`. See :issue:`3770` for additional "
"information.  The same holds true for any of the specialized queue types "
"listed below."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:691
msgid ""
"It is a simplified :class:`~multiprocessing.Queue` type, very close to a "
"locked :class:`Pipe`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:695
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:699
msgid "Remove and return an item from the queue."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:703
msgid "Put *item* into the queue."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:708
msgid ""
":class:`JoinableQueue`, a :class:`~multiprocessing.Queue` subclass, is a "
"queue which additionally has :meth:`task_done` and :meth:`join` methods."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:713
msgid ""
"Indicate that a formerly enqueued task is complete. Used by queue consumer "
"threads.  For each :meth:`~Queue.get` used to fetch a task, a subsequent "
"call to :meth:`task_done` tells the queue that the processing on the task is "
"complete."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:718
msgid ""
"If a :meth:`~Queue.Queue.join` is currently blocking, it will resume when "
"all items have been processed (meaning that a :meth:`task_done` call was "
"received for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:722
msgid ""
"Raises a :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:728
msgid "Block until all items in the queue have been gotten and processed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:730
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue.  The count goes down whenever a consumer thread calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`~Queue."
"Queue.join` unblocks."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:738
msgid "Miscellaneous"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:742
msgid "Return list of all live children of the current process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:744
msgid ""
"Calling this has the side effect of \"joining\" any processes which have "
"already finished."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:749
msgid ""
"Return the number of CPUs in the system.  May raise :exc:"
"`NotImplementedError`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:754
msgid ""
"Return the :class:`Process` object corresponding to the current process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:756
msgid "An analogue of :func:`threading.current_thread`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:760
msgid ""
"Add support for when a program which uses :mod:`multiprocessing` has been "
"frozen to produce a Windows executable.  (Has been tested with **py2exe**, "
"**PyInstaller** and **cx_Freeze**.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:764
msgid ""
"One needs to call this function straight after the ``if __name__ == "
"'__main__'`` line of the main module.  For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:767
msgid ""
"from multiprocessing import Process, freeze_support\n"
"\n"
"def f():\n"
"    print 'hello world!'\n"
"\n"
"if __name__ == '__main__':\n"
"    freeze_support()\n"
"    Process(target=f).start()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:776
msgid ""
"If the ``freeze_support()`` line is omitted then trying to run the frozen "
"executable will raise :exc:`RuntimeError`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:779
msgid ""
"Calling ``freeze_support()`` has no effect when invoked on any operating "
"system other than Windows.  In addition, if the module is being run normally "
"by the Python interpreter on Windows (the program has not been frozen), then "
"``freeze_support()`` has no effect."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:786
msgid ""
"Sets the path of the Python interpreter to use when starting a child "
"process. (By default :data:`sys.executable` is used).  Embedders will "
"probably need to do some thing like ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:790
msgid "set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:792
msgid "before they can create child processes.  (Windows only)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:797
msgid ""
":mod:`multiprocessing` contains no analogues of :func:`threading."
"active_count`, :func:`threading.enumerate`, :func:`threading.settrace`, :"
"func:`threading.setprofile`, :class:`threading.Timer`, or :class:`threading."
"local`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:804
msgid "Connection Objects"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:808
msgid ""
"Connection objects allow the sending and receiving of picklable objects or "
"strings.  They can be thought of as message oriented connected sockets."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:811
msgid ""
"Connection objects are usually created using :func:`Pipe <multiprocessing."
"Pipe>` -- see also :ref:`multiprocessing-listeners-clients`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:819
msgid ""
"Send an object to the other end of the connection which should be read "
"using :meth:`recv`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:822
msgid ""
"The object must be picklable.  Very large pickles (approximately 32 MB+, "
"though it depends on the OS) may raise a :exc:`ValueError` exception."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:827
msgid ""
"Return an object sent from the other end of the connection using :meth:"
"`send`.  Blocks until there is something to receive.  Raises :exc:`EOFError` "
"if there is nothing left to receive and the other end was closed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:834
msgid "Return the file descriptor or handle used by the connection."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:838
msgid "Close the connection."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:840
msgid "This is called automatically when the connection is garbage collected."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:844
msgid "Return whether there is any data available to be read."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:846
msgid ""
"If *timeout* is not specified then it will return immediately.  If *timeout* "
"is a number then this specifies the maximum time in seconds to block.  If "
"*timeout* is ``None`` then an infinite timeout is used."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:852
msgid ""
"Send byte data from an object supporting the buffer interface as a complete "
"message."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:855
msgid ""
"If *offset* is given then data is read from that position in *buffer*.  If "
"*size* is given then that many bytes will be read from buffer.  Very large "
"buffers (approximately 32 MB+, though it depends on the OS) may raise a :exc:"
"`ValueError` exception"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:862
msgid ""
"Return a complete message of byte data sent from the other end of the "
"connection as a string.  Blocks until there is something to receive. Raises :"
"exc:`EOFError` if there is nothing left to receive and the other end has "
"closed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:867
msgid ""
"If *maxlength* is specified and the message is longer than *maxlength* then :"
"exc:`IOError` is raised and the connection will no longer be readable."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:873
msgid ""
"Read into *buffer* a complete message of byte data sent from the other end "
"of the connection and return the number of bytes in the message.  Blocks "
"until there is something to receive.  Raises :exc:`EOFError` if there is "
"nothing left to receive and the other end was closed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:879
msgid ""
"*buffer* must be an object satisfying the writable buffer interface.  If "
"*offset* is given then the message will be written into the buffer from that "
"position.  Offset must be a non-negative integer less than the length of "
"*buffer* (in bytes)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:884
msgid ""
"If the buffer is too short then a :exc:`BufferTooShort` exception is raised "
"and the complete message is available as ``e.args[0]`` where ``e`` is the "
"exception instance."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:889
msgid "For example:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:891
msgid ""
">>> from multiprocessing import Pipe\n"
">>> a, b = Pipe()\n"
">>> a.send([1, 'hello', None])\n"
">>> b.recv()\n"
"[1, 'hello', None]\n"
">>> b.send_bytes('thank you')\n"
">>> a.recv_bytes()\n"
"'thank you'\n"
">>> import array\n"
">>> arr1 = array.array('i', range(5))\n"
">>> arr2 = array.array('i', [0] * 10)\n"
">>> a.send_bytes(arr1)\n"
">>> count = b.recv_bytes_into(arr2)\n"
">>> assert count == len(arr1) * arr1.itemsize\n"
">>> arr2\n"
"array('i', [0, 1, 2, 3, 4, 0, 0, 0, 0, 0])"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:913
msgid ""
"The :meth:`Connection.recv` method automatically unpickles the data it "
"receives, which can be a security risk unless you can trust the process "
"which sent the message."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:917
msgid ""
"Therefore, unless the connection object was produced using :func:`Pipe` you "
"should only use the :meth:`~Connection.recv` and :meth:`~Connection.send` "
"methods after performing some sort of authentication.  See :ref:"
"`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:924
msgid ""
"If a process is killed while it is trying to read or write to a pipe then "
"the data in the pipe is likely to become corrupted, because it may become "
"impossible to be sure where the message boundaries lie."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:930
msgid "Synchronization primitives"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:934
msgid ""
"Generally synchronization primitives are not as necessary in a multiprocess "
"program as they are in a multithreaded program.  See the documentation for :"
"mod:`threading` module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:938
msgid ""
"Note that one can also create synchronization primitives by using a manager "
"object -- see :ref:`multiprocessing-managers`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:943
msgid ""
"A bounded semaphore object: a close analog of :class:`threading."
"BoundedSemaphore`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:946
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1086
msgid ""
"A solitary difference from its close analog exists: its ``acquire`` method's "
"first argument is named *block* and it supports an optional second argument "
"*timeout*, as is consistent with :meth:`Lock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:951
msgid ""
"On Mac OS X, this is indistinguishable from :class:`Semaphore` because "
"``sem_getvalue()`` is not implemented on that platform."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:956
msgid "A condition variable: a clone of :class:`threading.Condition`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:958
msgid ""
"If *lock* is specified then it should be a :class:`Lock` or :class:`RLock` "
"object from :mod:`multiprocessing`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:963
msgid ""
"A clone of :class:`threading.Event`. This method returns the state of the "
"internal semaphore on exit, so it will always return ``True`` except if a "
"timeout is given and the operation times out."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:968
msgid "Previously, the method always returned ``None``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:974
msgid ""
"A non-recursive lock object: a close analog of :class:`threading.Lock`. Once "
"a process or thread has acquired a lock, subsequent attempts to acquire it "
"from any process or thread will block until it is released; any process or "
"thread may release it.  The concepts and behaviors of :class:`threading."
"Lock` as it applies to threads are replicated here in :class:"
"`multiprocessing.Lock` as it applies to either processes or threads, except "
"as noted."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:982
msgid ""
"Note that :class:`Lock` is actually a factory function which returns an "
"instance of ``multiprocessing.synchronize.Lock`` initialized with a default "
"context."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:986
msgid ""
":class:`Lock` supports the :term:`context manager` protocol and thus may be "
"used in :keyword:`with` statements."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:991
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1040
msgid "Acquire a lock, blocking or non-blocking."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:993
msgid ""
"With the *block* argument set to ``True`` (the default), the method call "
"will block until the lock is in an unlocked state, then set it to locked and "
"return ``True``.  Note that the name of this first argument differs from "
"that in :meth:`threading.Lock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:998
msgid ""
"With the *block* argument set to ``False``, the method call does not block.  "
"If the lock is currently in a locked state, return ``False``; otherwise set "
"the lock to a locked state and return ``True``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1002
msgid ""
"When invoked with a positive, floating-point value for *timeout*, block for "
"at most the number of seconds specified by *timeout* as long as the lock can "
"not be acquired.  Invocations with a negative value for *timeout* are "
"equivalent to a *timeout* of zero.  Invocations with a *timeout* value of "
"``None`` (the default) set the timeout period to infinite.  The *timeout* "
"argument has no practical implications if the *block* argument is set to "
"``False`` and is thus ignored.  Returns ``True`` if the lock has been "
"acquired or ``False`` if the timeout period has elapsed.  Note that the "
"*timeout* argument does not exist in this method's analog, :meth:`threading."
"Lock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1015
msgid ""
"Release a lock.  This can be called from any process or thread, not only the "
"process or thread which originally acquired the lock."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1018
msgid ""
"Behavior is the same as in :meth:`threading.Lock.release` except that when "
"invoked on an unlocked lock, a :exc:`ValueError` is raised."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1024
msgid ""
"A recursive lock object: a close analog of :class:`threading.RLock`.  A "
"recursive lock must be released by the process or thread that acquired it. "
"Once a process or thread has acquired a recursive lock, the same process or "
"thread may acquire it again without blocking; that process or thread must "
"release it once for each time it has been acquired."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1030
msgid ""
"Note that :class:`RLock` is actually a factory function which returns an "
"instance of ``multiprocessing.synchronize.RLock`` initialized with a default "
"context."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1034
msgid ""
":class:`RLock` supports the :term:`context manager` protocol and thus may be "
"used in :keyword:`with` statements."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1042
msgid ""
"When invoked with the *block* argument set to ``True``, block until the lock "
"is in an unlocked state (not owned by any process or thread) unless the lock "
"is already owned by the current process or thread.  The current process or "
"thread then takes ownership of the lock (if it does not already have "
"ownership) and the recursion level inside the lock increments by one, "
"resulting in a return value of ``True``.  Note that there are several "
"differences in this first argument's behavior compared to the implementation "
"of :meth:`threading.RLock.acquire`, starting with the name of the argument "
"itself."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1052
msgid ""
"When invoked with the *block* argument set to ``False``, do not block. If "
"the lock has already been acquired (and thus is owned) by another process or "
"thread, the current process or thread does not take ownership and the "
"recursion level within the lock is not changed, resulting in a return value "
"of ``False``.  If the lock is in an unlocked state, the current process or "
"thread takes ownership and the recursion level is incremented, resulting in "
"a return value of ``True``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1060
msgid ""
"Use and behaviors of the *timeout* argument are the same as in :meth:`Lock."
"acquire`.  Note that the *timeout* argument does not exist in this method's "
"analog, :meth:`threading.RLock.acquire`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1067
msgid ""
"Release a lock, decrementing the recursion level.  If after the decrement "
"the recursion level is zero, reset the lock to unlocked (not owned by any "
"process or thread) and if any other processes or threads are blocked waiting "
"for the lock to become unlocked, allow exactly one of them to proceed.  If "
"after the decrement the recursion level is still nonzero, the lock remains "
"locked and owned by the calling process or thread."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1075
msgid ""
"Only call this method when the calling process or thread owns the lock. An :"
"exc:`AssertionError` is raised if this method is called by a process or "
"thread other than the owner or if the lock is in an unlocked (unowned) "
"state.  Note that the type of exception raised in this situation differs "
"from the implemented behavior in :meth:`threading.RLock.release`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1084
msgid "A semaphore object: a close analog of :class:`threading.Semaphore`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1092
msgid ""
"The :meth:`acquire` method of :class:`BoundedSemaphore`, :class:`Lock`, :"
"class:`RLock` and :class:`Semaphore` has a timeout parameter not supported "
"by the equivalents in :mod:`threading`.  The signature is "
"``acquire(block=True, timeout=None)`` with keyword parameters being "
"acceptable.  If *block* is ``True`` and *timeout* is not ``None`` then it "
"specifies a timeout in seconds.  If *block* is ``False`` then *timeout* is "
"ignored."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1100
msgid ""
"On Mac OS X, ``sem_timedwait`` is unsupported, so calling ``acquire()`` with "
"a timeout will emulate that function's behavior using a sleeping loop."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1105
msgid ""
"If the SIGINT signal generated by :kbd:`Ctrl-C` arrives while the main "
"thread is blocked by a call to :meth:`BoundedSemaphore.acquire`, :meth:`Lock."
"acquire`, :meth:`RLock.acquire`, :meth:`Semaphore.acquire`, :meth:`Condition."
"acquire` or :meth:`Condition.wait` then the call will be immediately "
"interrupted and :exc:`KeyboardInterrupt` will be raised."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1111
msgid ""
"This differs from the behaviour of :mod:`threading` where SIGINT will be "
"ignored while the equivalent blocking calls are in progress."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1116
msgid ""
"Some of this package's functionality requires a functioning shared semaphore "
"implementation on the host operating system. Without one, the :mod:"
"`multiprocessing.synchronize` module will be disabled, and attempts to "
"import it will result in an :exc:`ImportError`. See :issue:`3770` for "
"additional information."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1124
msgid "Shared :mod:`ctypes` Objects"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1126
msgid ""
"It is possible to create shared objects using shared memory which can be "
"inherited by child processes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1131
msgid ""
"Return a :mod:`ctypes` object allocated from shared memory.  By default the "
"return value is actually a synchronized wrapper for the object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1134
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1221
msgid ""
"*typecode_or_type* determines the type of the returned object: it is either "
"a ctypes type or a one character typecode of the kind used by the :mod:"
"`array` module.  *\\*args* is passed on to the constructor for the type."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1138
msgid ""
"If *lock* is ``True`` (the default) then a new recursive lock object is "
"created to synchronize access to the value.  If *lock* is a :class:`Lock` "
"or :class:`RLock` object then that will be used to synchronize access to the "
"value.  If *lock* is ``False`` then access to the returned object will not "
"be automatically protected by a lock, so it will not necessarily be "
"\"process-safe\"."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1145
msgid ""
"Operations like ``+=`` which involve a read and write are not atomic.  So "
"if, for instance, you want to atomically increment a shared value it is "
"insufficient to just do ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1149
msgid "counter.value += 1"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1151
msgid ""
"Assuming the associated lock is recursive (which it is by default) you can "
"instead do ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1154
msgid ""
"with counter.get_lock():\n"
"    counter.value += 1"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1157
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1247
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1262
msgid "Note that *lock* is a keyword-only argument."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1161
msgid ""
"Return a ctypes array allocated from shared memory.  By default the return "
"value is actually a synchronized wrapper for the array."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1164
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer, "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise, *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1171
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a :class:`Lock` or :class:"
"`RLock` object then that will be used to synchronize access to the value.  "
"If *lock* is ``False`` then access to the returned object will not be "
"automatically protected by a lock, so it will not necessarily be \"process-"
"safe\"."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1178
msgid "Note that *lock* is a keyword only argument."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1180
msgid ""
"Note that an array of :data:`ctypes.c_char` has *value* and *raw* attributes "
"which allow one to use it to store and retrieve strings."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1185
msgid "The :mod:`multiprocessing.sharedctypes` module"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1190
msgid ""
"The :mod:`multiprocessing.sharedctypes` module provides functions for "
"allocating :mod:`ctypes` objects from shared memory which can be inherited "
"by child processes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1196
msgid ""
"Although it is possible to store a pointer in shared memory remember that "
"this will refer to a location in the address space of a specific process. "
"However, the pointer is quite likely to be invalid in the context of a "
"second process and trying to dereference the pointer from the second process "
"may cause a crash."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1204
msgid "Return a ctypes array allocated from shared memory."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1206
msgid ""
"*typecode_or_type* determines the type of the elements of the returned "
"array: it is either a ctypes type or a one character typecode of the kind "
"used by the :mod:`array` module.  If *size_or_initializer* is an integer "
"then it determines the length of the array, and the array will be initially "
"zeroed. Otherwise *size_or_initializer* is a sequence which is used to "
"initialize the array and whose length determines the length of the array."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1213
msgid ""
"Note that setting and getting an element is potentially non-atomic -- use :"
"func:`Array` instead to make sure that access is automatically synchronized "
"using a lock."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1219
msgid "Return a ctypes object allocated from shared memory."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1225
msgid ""
"Note that setting and getting the value is potentially non-atomic -- use :"
"func:`Value` instead to make sure that access is automatically synchronized "
"using a lock."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1229
msgid ""
"Note that an array of :data:`ctypes.c_char` has ``value`` and ``raw`` "
"attributes which allow one to use it to store and retrieve strings -- see "
"documentation for :mod:`ctypes`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1235
msgid ""
"The same as :func:`RawArray` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes "
"array."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1239
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1255
msgid ""
"If *lock* is ``True`` (the default) then a new lock object is created to "
"synchronize access to the value.  If *lock* is a :class:`~multiprocessing."
"Lock` or :class:`~multiprocessing.RLock` object then that will be used to "
"synchronize access to the value.  If *lock* is ``False`` then access to the "
"returned object will not be automatically protected by a lock, so it will "
"not necessarily be \"process-safe\"."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1251
msgid ""
"The same as :func:`RawValue` except that depending on the value of *lock* a "
"process-safe synchronization wrapper may be returned instead of a raw ctypes "
"object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1266
msgid ""
"Return a ctypes object allocated from shared memory which is a copy of the "
"ctypes object *obj*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1271
msgid ""
"Return a process-safe wrapper object for a ctypes object which uses *lock* "
"to synchronize access.  If *lock* is ``None`` (the default) then a :class:"
"`multiprocessing.RLock` object is created automatically."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1275
msgid ""
"A synchronized wrapper will have two methods in addition to those of the "
"object it wraps: :meth:`get_obj` returns the wrapped object and :meth:"
"`get_lock` returns the lock object used for synchronization."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1279
msgid ""
"Note that accessing the ctypes object through the wrapper can be a lot "
"slower than accessing the raw ctypes object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1283
msgid ""
"The table below compares the syntax for creating shared ctypes objects from "
"shared memory with the normal ctypes syntax.  (In the table ``MyStruct`` is "
"some subclass of :class:`ctypes.Structure`.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1288
msgid "ctypes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1288
msgid "sharedctypes using type"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1288
msgid "sharedctypes using typecode"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1290
msgid "c_double(2.4)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1290
msgid "RawValue(c_double, 2.4)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1290
msgid "RawValue('d', 2.4)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1291
msgid "MyStruct(4, 6)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1291
msgid "RawValue(MyStruct, 4, 6)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1292
msgid "(c_short * 7)()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1292
msgid "RawArray(c_short, 7)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1292
msgid "RawArray('h', 7)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1293
msgid "(c_int * 3)(9, 2, 8)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1293
msgid "RawArray(c_int, (9, 2, 8))"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1293
msgid "RawArray('i', (9, 2, 8))"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1297
msgid ""
"Below is an example where a number of ctypes objects are modified by a child "
"process::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1300
msgid ""
"from multiprocessing import Process, Lock\n"
"from multiprocessing.sharedctypes import Value, Array\n"
"from ctypes import Structure, c_double\n"
"\n"
"class Point(Structure):\n"
"    _fields_ = [('x', c_double), ('y', c_double)]\n"
"\n"
"def modify(n, x, s, A):\n"
"    n.value **= 2\n"
"    x.value **= 2\n"
"    s.value = s.value.upper()\n"
"    for a in A:\n"
"        a.x **= 2\n"
"        a.y **= 2\n"
"\n"
"if __name__ == '__main__':\n"
"    lock = Lock()\n"
"\n"
"    n = Value('i', 7)\n"
"    x = Value(c_double, 1.0/3.0, lock=False)\n"
"    s = Array('c', 'hello world', lock=lock)\n"
"    A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)\n"
"\n"
"    p = Process(target=modify, args=(n, x, s, A))\n"
"    p.start()\n"
"    p.join()\n"
"\n"
"    print n.value\n"
"    print x.value\n"
"    print s.value\n"
"    print [(a.x, a.y) for a in A]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1335
msgid "The results printed are ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1337
msgid ""
"49\n"
"0.1111111111111111\n"
"HELLO WORLD\n"
"[(3.515625, 39.0625), (33.0625, 4.0), (5.640625, 90.25)]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1348
msgid "Managers"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1350
msgid ""
"Managers provide a way to create data which can be shared between different "
"processes. A manager object controls a server process which manages *shared "
"objects*.  Other processes can access the shared objects by using proxies."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1356
msgid ""
"Returns a started :class:`~multiprocessing.managers.SyncManager` object "
"which can be used for sharing objects between processes.  The returned "
"manager object corresponds to a spawned child process and has methods which "
"will create shared objects and return corresponding proxies."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1364
msgid ""
"Manager processes will be shutdown as soon as they are garbage collected or "
"their parent process exits.  The manager classes are defined in the :mod:"
"`multiprocessing.managers` module:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1370
msgid "Create a BaseManager object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1372
msgid ""
"Once created one should call :meth:`start` or ``get_server()."
"serve_forever()`` to ensure that the manager object refers to a started "
"manager process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1375
msgid ""
"*address* is the address on which the manager process listens for new "
"connections.  If *address* is ``None`` then an arbitrary one is chosen."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1378
msgid ""
"*authkey* is the authentication key which will be used to check the validity "
"of incoming connections to the server process.  If *authkey* is ``None`` "
"then ``current_process().authkey``.  Otherwise *authkey* is used and it must "
"be a string."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1385
msgid ""
"Start a subprocess to start the manager.  If *initializer* is not ``None`` "
"then the subprocess will call ``initializer(*initargs)`` when it starts."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1390
msgid ""
"Returns a :class:`Server` object which represents the actual server under "
"the control of the Manager. The :class:`Server` object supports the :meth:"
"`serve_forever` method::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1394
msgid ""
">>> from multiprocessing.managers import BaseManager\n"
">>> manager = BaseManager(address=('', 50000), authkey='abc')\n"
">>> server = manager.get_server()\n"
">>> server.serve_forever()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1399
msgid ":class:`Server` additionally has an :attr:`address` attribute."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1403
msgid "Connect a local manager object to a remote manager process::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1405
msgid ""
">>> from multiprocessing.managers import BaseManager\n"
">>> m = BaseManager(address=('127.0.0.1', 5000), authkey='abc')\n"
">>> m.connect()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1411
msgid ""
"Stop the process used by the manager.  This is only available if :meth:"
"`start` has been used to start the server process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1414
msgid "This can be called multiple times."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1418
msgid ""
"A classmethod which can be used for registering a type or callable with the "
"manager class."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1421
msgid ""
"*typeid* is a \"type identifier\" which is used to identify a particular "
"type of shared object.  This must be a string."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1424
msgid ""
"*callable* is a callable used for creating objects for this type "
"identifier.  If a manager instance will be created using the :meth:"
"`from_address` classmethod or if the *create_method* argument is ``False`` "
"then this can be left as ``None``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1429
msgid ""
"*proxytype* is a subclass of :class:`BaseProxy` which is used to create "
"proxies for shared objects with this *typeid*.  If ``None`` then a proxy "
"class is created automatically."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1433
msgid ""
"*exposed* is used to specify a sequence of method names which proxies for "
"this typeid should be allowed to access using :meth:`BaseProxy."
"_callmethod`.  (If *exposed* is ``None`` then :attr:`proxytype._exposed_` is "
"used instead if it exists.)  In the case where no exposed list is specified, "
"all \"public methods\" of the shared object will be accessible.  (Here a "
"\"public method\" means any attribute which has a :meth:`~object.__call__` "
"method and whose name does not begin with ``'_'``.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1442
msgid ""
"*method_to_typeid* is a mapping used to specify the return type of those "
"exposed methods which should return a proxy.  It maps method names to typeid "
"strings.  (If *method_to_typeid* is ``None`` then :attr:`proxytype."
"_method_to_typeid_` is used instead if it exists.)  If a method's name is "
"not a key of this mapping or if the mapping is ``None`` then the object "
"returned by the method will be copied by value."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1449
msgid ""
"*create_method* determines whether a method should be created with name "
"*typeid* which can be used to tell the server process to create a new shared "
"object and return a proxy for it.  By default it is ``True``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1453
msgid ":class:`BaseManager` instances also have one read-only property:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1457
msgid "The address used by the manager."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1462
msgid ""
"A subclass of :class:`BaseManager` which can be used for the synchronization "
"of processes.  Objects of this type are returned by :func:`multiprocessing."
"Manager`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1466
msgid "It also supports creation of shared lists and dictionaries."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1470
msgid ""
"Create a shared :class:`threading.BoundedSemaphore` object and return a "
"proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1475
msgid ""
"Create a shared :class:`threading.Condition` object and return a proxy for "
"it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1478
msgid ""
"If *lock* is supplied then it should be a proxy for a :class:`threading."
"Lock` or :class:`threading.RLock` object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1483
msgid ""
"Create a shared :class:`threading.Event` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1487
msgid ""
"Create a shared :class:`threading.Lock` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1491
msgid "Create a shared :class:`Namespace` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1495
msgid "Create a shared :class:`Queue.Queue` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1499
msgid ""
"Create a shared :class:`threading.RLock` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1503
msgid ""
"Create a shared :class:`threading.Semaphore` object and return a proxy for "
"it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1508
msgid "Create an array and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1512
msgid ""
"Create an object with a writable ``value`` attribute and return a proxy for "
"it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1519
msgid "Create a shared ``dict`` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1524
msgid "Create a shared ``list`` object and return a proxy for it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1528
msgid ""
"Modifications to mutable values or items in dict and list proxies will not "
"be propagated through the manager, because the proxy has no way of knowing "
"when its values or items are modified.  To modify such an item, you can re-"
"assign the modified object to the container proxy::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1533
msgid ""
"# create a list proxy and append a mutable object (a dictionary)\n"
"lproxy = manager.list()\n"
"lproxy.append({})\n"
"# now mutate the dictionary\n"
"d = lproxy[0]\n"
"d['a'] = 1\n"
"d['b'] = 2\n"
"# at this point, the changes to d are not yet synced, but by\n"
"# reassigning the dictionary, the proxy is notified of the change\n"
"lproxy[0] = d"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1547
msgid "A type that can register with :class:`SyncManager`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1549
msgid ""
"A namespace object has no public methods, but does have writable attributes. "
"Its representation shows the values of its attributes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1552
msgid ""
"However, when using a proxy for a namespace object, an attribute beginning "
"with ``'_'`` will be an attribute of the proxy and not an attribute of the "
"referent:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1555
msgid ""
">>> manager = multiprocessing.Manager()\n"
">>> Global = manager.Namespace()\n"
">>> Global.x = 10\n"
">>> Global.y = 'hello'\n"
">>> Global._z = 12.3    # this is an attribute of the proxy\n"
">>> print Global\n"
"Namespace(x=10, y='hello')"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1567
msgid "Customized managers"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1569
msgid ""
"To create one's own manager, one creates a subclass of :class:`BaseManager` "
"and uses the :meth:`~BaseManager.register` classmethod to register new types "
"or callables with the manager class.  For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1573
msgid ""
"from multiprocessing.managers import BaseManager\n"
"\n"
"class MathsClass(object):\n"
"    def add(self, x, y):\n"
"        return x + y\n"
"    def mul(self, x, y):\n"
"        return x * y\n"
"\n"
"class MyManager(BaseManager):\n"
"    pass\n"
"\n"
"MyManager.register('Maths', MathsClass)\n"
"\n"
"if __name__ == '__main__':\n"
"    manager = MyManager()\n"
"    manager.start()\n"
"    maths = manager.Maths()\n"
"    print maths.add(4, 3)         # prints 7\n"
"    print maths.mul(7, 8)         # prints 56"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1595
msgid "Using a remote manager"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1597
msgid ""
"It is possible to run a manager server on one machine and have clients use "
"it from other machines (assuming that the firewalls involved allow it)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1600
msgid ""
"Running the following commands creates a server for a single shared queue "
"which remote clients can access::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1603
msgid ""
">>> from multiprocessing.managers import BaseManager\n"
">>> import Queue\n"
">>> queue = Queue.Queue()\n"
">>> class QueueManager(BaseManager): pass\n"
">>> QueueManager.register('get_queue', callable=lambda:queue)\n"
">>> m = QueueManager(address=('', 50000), authkey='abracadabra')\n"
">>> s = m.get_server()\n"
">>> s.serve_forever()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1612
msgid "One client can access the server as follows::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1614
msgid ""
">>> from multiprocessing.managers import BaseManager\n"
">>> class QueueManager(BaseManager): pass\n"
">>> QueueManager.register('get_queue')\n"
">>> m = QueueManager(address=('foo.bar.org', 50000), authkey='abracadabra')\n"
">>> m.connect()\n"
">>> queue = m.get_queue()\n"
">>> queue.put('hello')"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1622
msgid "Another client can also use it::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1624
msgid ""
">>> from multiprocessing.managers import BaseManager\n"
">>> class QueueManager(BaseManager): pass\n"
">>> QueueManager.register('get_queue')\n"
">>> m = QueueManager(address=('foo.bar.org', 50000), authkey='abracadabra')\n"
">>> m.connect()\n"
">>> queue = m.get_queue()\n"
">>> queue.get()\n"
"'hello'"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1633
msgid ""
"Local processes can also access that queue, using the code from above on the "
"client to access it remotely::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1636
msgid ""
">>> from multiprocessing import Process, Queue\n"
">>> from multiprocessing.managers import BaseManager\n"
">>> class Worker(Process):\n"
"...     def __init__(self, q):\n"
"...         self.q = q\n"
"...         super(Worker, self).__init__()\n"
"...     def run(self):\n"
"...         self.q.put('local hello')\n"
"...\n"
">>> queue = Queue()\n"
">>> w = Worker(queue)\n"
">>> w.start()\n"
">>> class QueueManager(BaseManager): pass\n"
"...\n"
">>> QueueManager.register('get_queue', callable=lambda: queue)\n"
">>> m = QueueManager(address=('', 50000), authkey='abracadabra')\n"
">>> s = m.get_server()\n"
">>> s.serve_forever()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1656
msgid "Proxy Objects"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1658
msgid ""
"A proxy is an object which *refers* to a shared object which lives "
"(presumably) in a different process.  The shared object is said to be the "
"*referent* of the proxy.  Multiple proxy objects may have the same referent."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1662
msgid ""
"A proxy object has methods which invoke corresponding methods of its "
"referent (although not every method of the referent will necessarily be "
"available through the proxy).  A proxy can usually be used in most of the "
"same ways that its referent can:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1667
msgid ""
">>> from multiprocessing import Manager\n"
">>> manager = Manager()\n"
">>> l = manager.list([i*i for i in range(10)])\n"
">>> print l\n"
"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n"
">>> print repr(l)\n"
"<ListProxy object, typeid 'list' at 0x...>\n"
">>> l[4]\n"
"16\n"
">>> l[2:5]\n"
"[4, 9, 16]"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1681
msgid ""
"Notice that applying :func:`str` to a proxy will return the representation "
"of the referent, whereas applying :func:`repr` will return the "
"representation of the proxy."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1685
msgid ""
"An important feature of proxy objects is that they are picklable so they can "
"be passed between processes.  Note, however, that if a proxy is sent to the "
"corresponding manager's process then unpickling it will produce the referent "
"itself.  This means, for example, that one shared object can contain a "
"second:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1690
msgid ""
">>> a = manager.list()\n"
">>> b = manager.list()\n"
">>> a.append(b)         # referent of a now contains referent of b\n"
">>> print a, b\n"
"[[]] []\n"
">>> b.append('hello')\n"
">>> print a, b\n"
"[['hello']] ['hello']"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1703
msgid ""
"The proxy types in :mod:`multiprocessing` do nothing to support comparisons "
"by value.  So, for instance, we have:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1706
msgid ""
">>> manager.list([1,2,3]) == [1,2,3]\n"
"False"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1711
msgid ""
"One should just use a copy of the referent instead when making comparisons."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1715
msgid "Proxy objects are instances of subclasses of :class:`BaseProxy`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1719
msgid "Call and return the result of a method of the proxy's referent."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1721
msgid ""
"If ``proxy`` is a proxy whose referent is ``obj`` then the expression ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1723
msgid "proxy._callmethod(methodname, args, kwds)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1725
msgid "will evaluate the expression ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1727
msgid "getattr(obj, methodname)(*args, **kwds)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1729
msgid "in the manager's process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1731
msgid ""
"The returned value will be a copy of the result of the call or a proxy to a "
"new shared object -- see documentation for the *method_to_typeid* argument "
"of :meth:`BaseManager.register`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1735
msgid ""
"If an exception is raised by the call, then is re-raised by :meth:"
"`_callmethod`.  If some other exception is raised in the manager's process "
"then this is converted into a :exc:`RemoteError` exception and is raised by :"
"meth:`_callmethod`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1740
msgid ""
"Note in particular that an exception will be raised if *methodname* has not "
"been *exposed*."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1743
msgid "An example of the usage of :meth:`_callmethod`:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1745
msgid ""
">>> l = manager.list(range(10))\n"
">>> l._callmethod('__len__')\n"
"10\n"
">>> l._callmethod('__getslice__', (2, 7))   # equiv to `l[2:7]`\n"
"[2, 3, 4, 5, 6]\n"
">>> l._callmethod('__getitem__', (20,))     # equiv to `l[20]`\n"
"Traceback (most recent call last):\n"
"...\n"
"IndexError: list index out of range"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1759
msgid "Return a copy of the referent."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1761
msgid "If the referent is unpicklable then this will raise an exception."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1765
msgid "Return a representation of the proxy object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1769
msgid "Return the representation of the referent."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1773
msgid "Cleanup"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1775
msgid ""
"A proxy object uses a weakref callback so that when it gets garbage "
"collected it deregisters itself from the manager which owns its referent."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1778
msgid ""
"A shared object gets deleted from the manager process when there are no "
"longer any proxies referring to it."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1783
msgid "Process Pools"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1788
msgid ""
"One can create a pool of processes which will carry out tasks submitted to "
"it with the :class:`Pool` class."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1793
msgid ""
"A process pool object which controls a pool of worker processes to which "
"jobs can be submitted.  It supports asynchronous results with timeouts and "
"callbacks and has a parallel map implementation."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1797
msgid ""
"*processes* is the number of worker processes to use.  If *processes* is "
"``None`` then the number returned by :func:`cpu_count` is used.  If "
"*initializer* is not ``None`` then each worker process will call "
"``initializer(*initargs)`` when it starts."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1802
msgid ""
"Note that the methods of the pool object should only be called by the "
"process which created the pool."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1805
msgid ""
"*maxtasksperchild* is the number of tasks a worker process can complete "
"before it will exit and be replaced with a fresh worker process, to enable "
"unused resources to be freed. The default *maxtasksperchild* is ``None``, "
"which means worker processes will live as long as the pool."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1813
msgid ""
"Worker processes within a :class:`Pool` typically live for the complete "
"duration of the Pool's work queue. A frequent pattern found in other systems "
"(such as Apache, mod_wsgi, etc) to free resources held by workers is to "
"allow a worker within a pool to complete only a set amount of work before "
"being exiting, being cleaned up and a new process spawned to replace the old "
"one. The *maxtasksperchild* argument to the :class:`Pool` exposes this "
"ability to the end user."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1823
msgid ""
"Equivalent of the :func:`apply` built-in function.  It blocks until the "
"result is ready, so :meth:`apply_async` is better suited for performing work "
"in parallel. Additionally, *func* is only executed in one of the workers of "
"the pool."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1830
msgid "A variant of the :meth:`apply` method which returns a result object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1832
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1850
msgid ""
"If *callback* is specified then it should be a callable which accepts a "
"single argument.  When the result becomes ready *callback* is applied to it "
"(unless the call failed).  *callback* should complete immediately since "
"otherwise the thread which handles the results will get blocked."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1839
msgid ""
"A parallel equivalent of the :func:`map` built-in function (it supports only "
"one *iterable* argument though).  It blocks until the result is ready."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1842
msgid ""
"This method chops the iterable into a number of chunks which it submits to "
"the process pool as separate tasks.  The (approximate) size of these chunks "
"can be specified by setting *chunksize* to a positive integer."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1848
msgid "A variant of the :meth:`.map` method which returns a result object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1857
msgid "An equivalent of :func:`itertools.imap`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1859
msgid ""
"The *chunksize* argument is the same as the one used by the :meth:`.map` "
"method.  For very long iterables using a large value for *chunksize* can "
"make the job complete **much** faster than using the default value of ``1``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1864
msgid ""
"Also if *chunksize* is ``1`` then the :meth:`!next` method of the iterator "
"returned by the :meth:`imap` method has an optional *timeout* parameter: "
"``next(timeout)`` will raise :exc:`multiprocessing.TimeoutError` if the "
"result cannot be returned within *timeout* seconds."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1871
msgid ""
"The same as :meth:`imap` except that the ordering of the results from the "
"returned iterator should be considered arbitrary.  (Only when there is only "
"one worker process is the order guaranteed to be \"correct\".)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1877
msgid ""
"Prevents any more tasks from being submitted to the pool.  Once all the "
"tasks have been completed the worker processes will exit."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1882
msgid ""
"Stops the worker processes immediately without completing outstanding work.  "
"When the pool object is garbage collected :meth:`terminate` will be called "
"immediately."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1888
msgid ""
"Wait for the worker processes to exit.  One must call :meth:`close` or :meth:"
"`terminate` before using :meth:`join`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1894
msgid ""
"The class of the result returned by :meth:`Pool.apply_async` and :meth:`Pool."
"map_async`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1899
msgid ""
"Return the result when it arrives.  If *timeout* is not ``None`` and the "
"result does not arrive within *timeout* seconds then :exc:`multiprocessing."
"TimeoutError` is raised.  If the remote call raised an exception then that "
"exception will be reraised by :meth:`get`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1906
msgid "Wait until the result is available or until *timeout* seconds pass."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1910
msgid "Return whether the call has completed."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1914
msgid ""
"Return whether the call completed without raising an exception.  Will raise :"
"exc:`AssertionError` if the result is not ready."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1917
msgid "The following example demonstrates the use of a pool::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1919
msgid ""
"from multiprocessing import Pool\n"
"import time\n"
"\n"
"def f(x):\n"
"    return x*x\n"
"\n"
"if __name__ == '__main__':\n"
"    pool = Pool(processes=4)              # start 4 worker processes\n"
"\n"
"    result = pool.apply_async(f, (10,))   # evaluate \"f(10)\" "
"asynchronously in a single process\n"
"    print result.get(timeout=1)           # prints \"100\" unless your "
"computer is *very* slow\n"
"\n"
"    print pool.map(f, range(10))          # prints \"[0, 1, 4,..., 81]\"\n"
"\n"
"    it = pool.imap(f, range(10))\n"
"    print it.next()                       # prints \"0\"\n"
"    print it.next()                       # prints \"1\"\n"
"    print it.next(timeout=1)              # prints \"4\" unless your "
"computer is *very* slow\n"
"\n"
"    result = pool.apply_async(time.sleep, (10,))\n"
"    print result.get(timeout=1)           # raises multiprocessing."
"TimeoutError"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1945
msgid "Listeners and Clients"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1950
msgid ""
"Usually message passing between processes is done using queues or by using :"
"class:`Connection` objects returned by :func:`~multiprocessing.Pipe`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1953
msgid ""
"However, the :mod:`multiprocessing.connection` module allows some extra "
"flexibility.  It basically gives a high level message oriented API for "
"dealing with sockets or Windows named pipes, and also has support for "
"*digest authentication* using the :mod:`hmac` module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1961
msgid ""
"Send a randomly generated message to the other end of the connection and "
"wait for a reply."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1964
msgid ""
"If the reply matches the digest of the message using *authkey* as the key "
"then a welcome message is sent to the other end of the connection.  "
"Otherwise :exc:`AuthenticationError` is raised."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1970
msgid ""
"Receive a message, calculate the digest of the message using *authkey* as "
"the key, and then send the digest back."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1973
msgid ""
"If a welcome message is not received, then :exc:`AuthenticationError` is "
"raised."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1978
msgid ""
"Attempt to set up a connection to the listener which is using address "
"*address*, returning a :class:`Connection`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1981
msgid ""
"The type of the connection is determined by *family* argument, but this can "
"generally be omitted since it can usually be inferred from the format of "
"*address*. (See :ref:`multiprocessing-address-formats`)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1985
msgid ""
"If *authenticate* is ``True`` or *authkey* is a string then digest "
"authentication is used.  The key used for authentication will be either "
"*authkey* or ``current_process().authkey)`` if *authkey* is ``None``. If "
"authentication fails then :exc:`AuthenticationError` is raised.  See :ref:"
"`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1993
msgid ""
"A wrapper for a bound socket or Windows named pipe which is 'listening' for "
"connections."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:1996
msgid ""
"*address* is the address to be used by the bound socket or named pipe of the "
"listener object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2001
msgid ""
"If an address of '0.0.0.0' is used, the address will not be a connectable "
"end point on Windows. If you require a connectable end-point, you should use "
"'127.0.0.1'."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2005
msgid ""
"*family* is the type of socket (or named pipe) to use.  This can be one of "
"the strings ``'AF_INET'`` (for a TCP socket), ``'AF_UNIX'`` (for a Unix "
"domain socket) or ``'AF_PIPE'`` (for a Windows named pipe).  Of these only "
"the first is guaranteed to be available.  If *family* is ``None`` then the "
"family is inferred from the format of *address*.  If *address* is also "
"``None`` then a default is chosen.  This default is the family which is "
"assumed to be the fastest available.  See :ref:`multiprocessing-address-"
"formats`.  Note that if *family* is ``'AF_UNIX'`` and address is ``None`` "
"then the socket will be created in a private temporary directory created "
"using :func:`tempfile.mkstemp`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2016
msgid ""
"If the listener object uses a socket then *backlog* (1 by default) is passed "
"to the :meth:`~socket.socket.listen` method of the socket once it has been "
"bound."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2020
msgid ""
"If *authenticate* is ``True`` (``False`` by default) or *authkey* is not "
"``None`` then digest authentication is used."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2023
msgid ""
"If *authkey* is a string then it will be used as the authentication key; "
"otherwise it must be ``None``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2026
msgid ""
"If *authkey* is ``None`` and *authenticate* is ``True`` then "
"``current_process().authkey`` is used as the authentication key.  If "
"*authkey* is ``None`` and *authenticate* is ``False`` then no authentication "
"is done.  If authentication fails then :exc:`AuthenticationError` is "
"raised.  See :ref:`multiprocessing-auth-keys`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2034
msgid ""
"Accept a connection on the bound socket or named pipe of the listener object "
"and return a :class:`Connection` object. If authentication is attempted and "
"fails, then :exc:`~multiprocessing.AuthenticationError` is raised."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2041
msgid ""
"Close the bound socket or named pipe of the listener object.  This is called "
"automatically when the listener is garbage collected.  However it is "
"advisable to call it explicitly."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2045
msgid "Listener objects have the following read-only properties:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2049
msgid "The address which is being used by the Listener object."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2053
msgid ""
"The address from which the last accepted connection came.  If this is "
"unavailable then it is ``None``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2057
msgid "The module defines the following exceptions:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2061
msgid "The base class of all :mod:`multiprocessing` exceptions."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2070
msgid "Raised when there is an authentication error."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2074
msgid "Raised by methods with a timeout when the timeout expires."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2077
msgid "**Examples**"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2079
msgid ""
"The following server code creates a listener which uses ``'secret "
"password'`` as an authentication key.  It then waits for a connection and "
"sends some data to the client::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2083
msgid ""
"from multiprocessing.connection import Listener\n"
"from array import array\n"
"\n"
"address = ('localhost', 6000)     # family is deduced to be 'AF_INET'\n"
"listener = Listener(address, authkey='secret password')\n"
"\n"
"conn = listener.accept()\n"
"print 'connection accepted from', listener.last_accepted\n"
"\n"
"conn.send([2.25, None, 'junk', float])\n"
"\n"
"conn.send_bytes('hello')\n"
"\n"
"conn.send_bytes(array('i', [42, 1729]))\n"
"\n"
"conn.close()\n"
"listener.close()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2101
msgid ""
"The following code connects to the server and receives some data from the "
"server::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2104
msgid ""
"from multiprocessing.connection import Client\n"
"from array import array\n"
"\n"
"address = ('localhost', 6000)\n"
"conn = Client(address, authkey='secret password')\n"
"\n"
"print conn.recv()                 # => [2.25, None, 'junk', float]\n"
"\n"
"print conn.recv_bytes()            # => 'hello'\n"
"\n"
"arr = array('i', [0, 0, 0, 0, 0])\n"
"print conn.recv_bytes_into(arr)     # => 8\n"
"print arr                         # => array('i', [42, 1729, 0, 0, 0])\n"
"\n"
"conn.close()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2124
msgid "Address Formats"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2126
msgid ""
"An ``'AF_INET'`` address is a tuple of the form ``(hostname, port)`` where "
"*hostname* is a string and *port* is an integer."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2129
msgid ""
"An ``'AF_UNIX'`` address is a string representing a filename on the "
"filesystem."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2135
msgid "An ``'AF_PIPE'`` address is a string of the form"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2133
msgid ""
":samp:`r'\\\\\\\\.\\\\pipe\\\\{PipeName}'`.  To use :func:`Client` to "
"connect to a named pipe on a remote computer called *ServerName* one should "
"use an address of the form :samp:`r'\\\\\\\\{ServerName}\\\\pipe\\"
"\\{PipeName}'` instead."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2137
msgid ""
"Note that any string beginning with two backslashes is assumed by default to "
"be an ``'AF_PIPE'`` address rather than an ``'AF_UNIX'`` address."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2144
msgid "Authentication keys"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2146
msgid ""
"When one uses :meth:`Connection.recv`, the data received is automatically "
"unpickled.  Unfortunately unpickling data from an untrusted source is a "
"security risk.  Therefore :class:`Listener` and :func:`Client` use the :mod:"
"`hmac` module to provide digest authentication."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2152
msgid ""
"An authentication key is a string which can be thought of as a password: "
"once a connection is established both ends will demand proof that the other "
"knows the authentication key.  (Demonstrating that both ends are using the "
"same key does **not** involve sending the key over the connection.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2157
msgid ""
"If authentication is requested but no authentication key is specified then "
"the return value of ``current_process().authkey`` is used (see :class:"
"`~multiprocessing.Process`).  This value will be automatically inherited by "
"any :class:`~multiprocessing.Process` object that the current process "
"creates. This means that (by default) all processes of a multi-process "
"program will share a single authentication key which can be used when "
"setting up connections between themselves."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2165
msgid ""
"Suitable authentication keys can also be generated by using :func:`os."
"urandom`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2169
msgid "Logging"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2171
msgid ""
"Some support for logging is available.  Note, however, that the :mod:"
"`logging` package does not use process shared locks so it is possible "
"(depending on the handler type) for messages from different processes to get "
"mixed up."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2178
msgid ""
"Returns the logger used by :mod:`multiprocessing`.  If necessary, a new one "
"will be created."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2181
msgid ""
"When first created the logger has level :data:`logging.NOTSET` and no "
"default handler. Messages sent to this logger will not by default propagate "
"to the root logger."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2185
msgid ""
"Note that on Windows child processes will only inherit the level of the "
"parent process's logger -- any other customization of the logger will not be "
"inherited."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2192
msgid ""
"This function performs a call to :func:`get_logger` but in addition to "
"returning the logger created by get_logger, it adds a handler which sends "
"output to :data:`sys.stderr` using format ``'[%(levelname)s/%(processName)s] "
"%(message)s'``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2197
msgid "Below is an example session with logging turned on::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2199
msgid ""
">>> import multiprocessing, logging\n"
">>> logger = multiprocessing.log_to_stderr()\n"
">>> logger.setLevel(logging.INFO)\n"
">>> logger.warning('doomed')\n"
"[WARNING/MainProcess] doomed\n"
">>> m = multiprocessing.Manager()\n"
"[INFO/SyncManager-...] child process calling self.run()\n"
"[INFO/SyncManager-...] created temp directory /.../pymp-...\n"
"[INFO/SyncManager-...] manager serving at '/.../listener-...'\n"
">>> del m\n"
"[INFO/MainProcess] sending shutdown message to manager\n"
"[INFO/SyncManager-...] manager exiting with exitcode 0"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2212
msgid ""
"In addition to having these two logging functions, the multiprocessing also "
"exposes two additional logging level attributes. These are  :const:"
"`SUBWARNING` and :const:`SUBDEBUG`. The table below illustrates where theses "
"fit in the normal level hierarchy."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2218
msgid "Level"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2218
msgid "Numeric value"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2220
msgid "``SUBWARNING``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2220
msgid "25"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2222
msgid "``SUBDEBUG``"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2222
msgid "5"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2225
msgid "For a full table of logging levels, see the :mod:`logging` module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2227
msgid ""
"These additional logging levels are used primarily for certain debug "
"messages within the multiprocessing module. Below is the same example as "
"above, except with :const:`SUBDEBUG` enabled::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2231
msgid ""
">>> import multiprocessing, logging\n"
">>> logger = multiprocessing.log_to_stderr()\n"
">>> logger.setLevel(multiprocessing.SUBDEBUG)\n"
">>> logger.warning('doomed')\n"
"[WARNING/MainProcess] doomed\n"
">>> m = multiprocessing.Manager()\n"
"[INFO/SyncManager-...] child process calling self.run()\n"
"[INFO/SyncManager-...] created temp directory /.../pymp-...\n"
"[INFO/SyncManager-...] manager serving at '/.../pymp-djGBXN/listener-...'\n"
">>> del m\n"
"[SUBDEBUG/MainProcess] finalizer calling ...\n"
"[INFO/MainProcess] sending shutdown message to manager\n"
"[DEBUG/SyncManager-...] manager received shutdown message\n"
"[SUBDEBUG/SyncManager-...] calling <Finalize object, callback=unlink, ...\n"
"[SUBDEBUG/SyncManager-...] finalizer calling <built-in function unlink> ...\n"
"[SUBDEBUG/SyncManager-...] calling <Finalize object, dead>\n"
"[SUBDEBUG/SyncManager-...] finalizer calling <function rmtree at "
"0x5aa730> ...\n"
"[INFO/SyncManager-...] manager exiting with exitcode 0"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2251
msgid "The :mod:`multiprocessing.dummy` module"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2256
msgid ""
":mod:`multiprocessing.dummy` replicates the API of :mod:`multiprocessing` "
"but is no more than a wrapper around the :mod:`threading` module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2263
msgid "Programming guidelines"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2265
msgid ""
"There are certain guidelines and idioms which should be adhered to when "
"using :mod:`multiprocessing`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2270
msgid "All platforms"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2272
msgid "Avoid shared state"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2274
msgid ""
"As far as possible one should try to avoid shifting large amounts of data "
"between processes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2277
msgid ""
"It is probably best to stick to using queues or pipes for communication "
"between processes rather than using the lower level synchronization "
"primitives from the :mod:`threading` module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2281
msgid "Picklability"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2283
msgid "Ensure that the arguments to the methods of proxies are picklable."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2285
msgid "Thread safety of proxies"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2287
msgid ""
"Do not use a proxy object from more than one thread unless you protect it "
"with a lock."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2290
msgid ""
"(There is never a problem with different processes using the *same* proxy.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2292
msgid "Joining zombie processes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2294
msgid ""
"On Unix when a process finishes but has not been joined it becomes a zombie. "
"There should never be very many because each time a new process starts (or :"
"func:`~multiprocessing.active_children` is called) all completed processes "
"which have not yet been joined will be joined.  Also calling a finished "
"process's :meth:`Process.is_alive <multiprocessing.Process.is_alive>` will "
"join the process.  Even so it is probably good practice to explicitly join "
"all the processes that you start."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2302
msgid "Better to inherit than pickle/unpickle"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2304
msgid ""
"On Windows many types from :mod:`multiprocessing` need to be picklable so "
"that child processes can use them.  However, one should generally avoid "
"sending shared objects to other processes using pipes or queues.  Instead "
"you should arrange the program so that a process which needs access to a "
"shared resource created elsewhere can inherit it from an ancestor process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2310
msgid "Avoid terminating processes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2312
msgid ""
"Using the :meth:`Process.terminate <multiprocessing.Process.terminate>` "
"method to stop a process is liable to cause any shared resources (such as "
"locks, semaphores, pipes and queues) currently being used by the process to "
"become broken or unavailable to other processes."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2318
msgid ""
"Therefore it is probably best to only consider using :meth:`Process."
"terminate <multiprocessing.Process.terminate>` on processes which never use "
"any shared resources."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2322
msgid "Joining processes that use queues"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2324
msgid ""
"Bear in mind that a process that has put items in a queue will wait before "
"terminating until all the buffered items are fed by the \"feeder\" thread to "
"the underlying pipe.  (The child process can call the :meth:"
"`~multiprocessing.Queue.cancel_join_thread` method of the queue to avoid "
"this behaviour.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2329
msgid ""
"This means that whenever you use a queue you need to make sure that all "
"items which have been put on the queue will eventually be removed before the "
"process is joined.  Otherwise you cannot be sure that processes which have "
"put items on the queue will terminate.  Remember also that non-daemonic "
"processes will be joined automatically."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2335
msgid "An example which will deadlock is the following::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2337
msgid ""
"from multiprocessing import Process, Queue\n"
"\n"
"def f(q):\n"
"    q.put('X' * 1000000)\n"
"\n"
"if __name__ == '__main__':\n"
"    queue = Queue()\n"
"    p = Process(target=f, args=(queue,))\n"
"    p.start()\n"
"    p.join()                    # this deadlocks\n"
"    obj = queue.get()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2349
msgid ""
"A fix here would be to swap the last two lines (or simply remove the ``p."
"join()`` line)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2352
msgid "Explicitly pass resources to child processes"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2354
msgid ""
"On Unix a child process can make use of a shared resource created in a "
"parent process using a global resource.  However, it is better to pass the "
"object as an argument to the constructor for the child process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2358
msgid ""
"Apart from making the code (potentially) compatible with Windows this also "
"ensures that as long as the child process is still alive the object will not "
"be garbage collected in the parent process.  This might be important if some "
"resource is freed when the object is garbage collected in the parent process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2364
msgid "So for instance ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2366
msgid ""
"from multiprocessing import Process, Lock\n"
"\n"
"def f():\n"
"    ... do something using \"lock\" ...\n"
"\n"
"if __name__ == '__main__':\n"
"    lock = Lock()\n"
"    for i in range(10):\n"
"        Process(target=f).start()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2376
msgid "should be rewritten as ::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2378
msgid ""
"from multiprocessing import Process, Lock\n"
"\n"
"def f(l):\n"
"    ... do something using \"l\" ...\n"
"\n"
"if __name__ == '__main__':\n"
"    lock = Lock()\n"
"    for i in range(10):\n"
"        Process(target=f, args=(lock,)).start()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2388
msgid "Beware of replacing :data:`sys.stdin` with a \"file like object\""
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2390
msgid ":mod:`multiprocessing` originally unconditionally called::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2392
msgid "os.close(sys.stdin.fileno())"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2394
msgid ""
"in the :meth:`multiprocessing.Process._bootstrap` method --- this resulted "
"in issues with processes-in-processes. This has been changed to::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2397
msgid ""
"sys.stdin.close()\n"
"sys.stdin = open(os.devnull)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2400
msgid ""
"Which solves the fundamental issue of processes colliding with each other "
"resulting in a bad file descriptor error, but introduces a potential danger "
"to applications which replace :func:`sys.stdin` with a \"file-like object\" "
"with output buffering.  This danger is that if multiple processes call :meth:"
"`~io.IOBase.close()` on this file-like object, it could result in the same "
"data being flushed to the object multiple times, resulting in corruption."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2407
msgid ""
"If you write a file-like object and implement your own caching, you can make "
"it fork-safe by storing the pid whenever you append to the cache, and "
"discarding the cache when the pid changes. For example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2411
msgid ""
"@property\n"
"def cache(self):\n"
"    pid = os.getpid()\n"
"    if pid != self._pid:\n"
"        self._pid = pid\n"
"        self._cache = []\n"
"    return self._cache"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2419
msgid ""
"For more information, see :issue:`5155`, :issue:`5313` and :issue:`5331`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2422
msgid "Windows"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2424
msgid "Since Windows lacks :func:`os.fork` it has a few extra restrictions:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2426
msgid "More picklability"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2428
msgid ""
"Ensure that all arguments to :meth:`Process.__init__` are picklable.  This "
"means, in particular, that bound or unbound methods cannot be used directly "
"as the ``target`` argument on Windows --- just define a function and use "
"that instead."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2433
msgid ""
"Also, if you subclass :class:`~multiprocessing.Process` then make sure that "
"instances will be picklable when the :meth:`Process.start <multiprocessing."
"Process.start>` method is called."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2437
msgid "Global variables"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2439
msgid ""
"Bear in mind that if code run in a child process tries to access a global "
"variable, then the value it sees (if any) may not be the same as the value "
"in the parent process at the time that :meth:`Process.start <multiprocessing."
"Process.start>` was called."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2444
msgid ""
"However, global variables which are just module level constants cause no "
"problems."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2447
msgid "Safe importing of main module"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2449
msgid ""
"Make sure that the main module can be safely imported by a new Python "
"interpreter without causing unintended side effects (such a starting a new "
"process)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2453
msgid ""
"For example, under Windows running the following module would fail with a :"
"exc:`RuntimeError`::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2456
msgid ""
"from multiprocessing import Process\n"
"\n"
"def foo():\n"
"    print 'hello'\n"
"\n"
"p = Process(target=foo)\n"
"p.start()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2464
msgid ""
"Instead one should protect the \"entry point\" of the program by using ``if "
"__name__ == '__main__':`` as follows::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2467
msgid ""
"from multiprocessing import Process, freeze_support\n"
"\n"
"def foo():\n"
"    print 'hello'\n"
"\n"
"if __name__ == '__main__':\n"
"    freeze_support()\n"
"    p = Process(target=foo)\n"
"    p.start()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2477
msgid ""
"(The ``freeze_support()`` line can be omitted if the program will be run "
"normally instead of frozen.)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2480
msgid ""
"This allows the newly spawned Python interpreter to safely import the module "
"and then run the module's ``foo()`` function."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2483
msgid ""
"Similar restrictions apply if a pool or manager is created in the main "
"module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2490
msgid "Examples"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2492
msgid "Demonstration of how to create and use customized managers and proxies:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2494
msgid ""
"#\n"
"# This module shows how to use arbitrary callables with a subclass of\n"
"# `BaseManager`.\n"
"#\n"
"# Copyright (c) 2006-2008, R Oudkerk\n"
"# All rights reserved.\n"
"#\n"
"\n"
"from multiprocessing import freeze_support\n"
"from multiprocessing.managers import BaseManager, BaseProxy\n"
"import operator\n"
"\n"
"##\n"
"\n"
"class Foo(object):\n"
"    def f(self):\n"
"        print 'you called Foo.f()'\n"
"    def g(self):\n"
"        print 'you called Foo.g()'\n"
"    def _h(self):\n"
"        print 'you called Foo._h()'\n"
"\n"
"# A simple generator function\n"
"def baz():\n"
"    for i in xrange(10):\n"
"        yield i*i\n"
"\n"
"# Proxy type for generator objects\n"
"class GeneratorProxy(BaseProxy):\n"
"    _exposed_ = ('next', '__next__')\n"
"    def __iter__(self):\n"
"        return self\n"
"    def next(self):\n"
"        return self._callmethod('next')\n"
"    def __next__(self):\n"
"        return self._callmethod('__next__')\n"
"\n"
"# Function to return the operator module\n"
"def get_operator_module():\n"
"    return operator\n"
"\n"
"##\n"
"\n"
"class MyManager(BaseManager):\n"
"    pass\n"
"\n"
"# register the Foo class; make `f()` and `g()` accessible via proxy\n"
"MyManager.register('Foo1', Foo)\n"
"\n"
"# register the Foo class; make `g()` and `_h()` accessible via proxy\n"
"MyManager.register('Foo2', Foo, exposed=('g', '_h'))\n"
"\n"
"# register the generator function baz; use `GeneratorProxy` to make proxies\n"
"MyManager.register('baz', baz, proxytype=GeneratorProxy)\n"
"\n"
"# register get_operator_module(); make public functions accessible via "
"proxy\n"
"MyManager.register('operator', get_operator_module)\n"
"\n"
"##\n"
"\n"
"def test():\n"
"    manager = MyManager()\n"
"    manager.start()\n"
"\n"
"    print '-' * 20\n"
"\n"
"    f1 = manager.Foo1()\n"
"    f1.f()\n"
"    f1.g()\n"
"    assert not hasattr(f1, '_h')\n"
"    assert sorted(f1._exposed_) == sorted(['f', 'g'])\n"
"\n"
"    print '-' * 20\n"
"\n"
"    f2 = manager.Foo2()\n"
"    f2.g()\n"
"    f2._h()\n"
"    assert not hasattr(f2, 'f')\n"
"    assert sorted(f2._exposed_) == sorted(['g', '_h'])\n"
"\n"
"    print '-' * 20\n"
"\n"
"    it = manager.baz()\n"
"    for i in it:\n"
"        print '<%d>' % i,\n"
"    print\n"
"\n"
"    print '-' * 20\n"
"\n"
"    op = manager.operator()\n"
"    print 'op.add(23, 45) =', op.add(23, 45)\n"
"    print 'op.pow(2, 94) =', op.pow(2, 94)\n"
"    print 'op.getslice(range(10), 2, 6) =', op.getslice(range(10), 2, 6)\n"
"    print 'op.repeat(range(5), 3) =', op.repeat(range(5), 3)\n"
"    print 'op._exposed_ =', op._exposed_\n"
"\n"
"##\n"
"\n"
"if __name__ == '__main__':\n"
"    freeze_support()\n"
"    test()\n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2497
msgid "Using :class:`~multiprocessing.pool.Pool`:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2499
msgid ""
"#\n"
"# A test of `multiprocessing.Pool` class\n"
"#\n"
"# Copyright (c) 2006-2008, R Oudkerk\n"
"# All rights reserved.\n"
"#\n"
"\n"
"import multiprocessing\n"
"import time\n"
"import random\n"
"import sys\n"
"\n"
"#\n"
"# Functions used by test code\n"
"#\n"
"\n"
"def calculate(func, args):\n"
"    result = func(*args)\n"
"    return '%s says that %s%s = %s' % (\n"
"        multiprocessing.current_process().name,\n"
"        func.__name__, args, result\n"
"        )\n"
"\n"
"def calculatestar(args):\n"
"    return calculate(*args)\n"
"\n"
"def mul(a, b):\n"
"    time.sleep(0.5*random.random())\n"
"    return a * b\n"
"\n"
"def plus(a, b):\n"
"    time.sleep(0.5*random.random())\n"
"    return a + b\n"
"\n"
"def f(x):\n"
"    return 1.0 / (x-5.0)\n"
"\n"
"def pow3(x):\n"
"    return x**3\n"
"\n"
"def noop(x):\n"
"    pass\n"
"\n"
"#\n"
"# Test code\n"
"#\n"
"\n"
"def test():\n"
"    print 'cpu_count() = %d\\n' % multiprocessing.cpu_count()\n"
"\n"
"    #\n"
"    # Create pool\n"
"    #\n"
"\n"
"    PROCESSES = 4\n"
"    print 'Creating pool with %d processes\\n' % PROCESSES\n"
"    pool = multiprocessing.Pool(PROCESSES)\n"
"    print 'pool = %s' % pool\n"
"    print\n"
"\n"
"    #\n"
"    # Tests\n"
"    #\n"
"\n"
"    TASKS = [(mul, (i, 7)) for i in range(10)] + \\\n"
"            [(plus, (i, 8)) for i in range(10)]\n"
"\n"
"    results = [pool.apply_async(calculate, t) for t in TASKS]\n"
"    imap_it = pool.imap(calculatestar, TASKS)\n"
"    imap_unordered_it = pool.imap_unordered(calculatestar, TASKS)\n"
"\n"
"    print 'Ordered results using pool.apply_async():'\n"
"    for r in results:\n"
"        print '\\t', r.get()\n"
"    print\n"
"\n"
"    print 'Ordered results using pool.imap():'\n"
"    for x in imap_it:\n"
"        print '\\t', x\n"
"    print\n"
"\n"
"    print 'Unordered results using pool.imap_unordered():'\n"
"    for x in imap_unordered_it:\n"
"        print '\\t', x\n"
"    print\n"
"\n"
"    print 'Ordered results using pool.map() --- will block till complete:'\n"
"    for x in pool.map(calculatestar, TASKS):\n"
"        print '\\t', x\n"
"    print\n"
"\n"
"    #\n"
"    # Simple benchmarks\n"
"    #\n"
"\n"
"    N = 100000\n"
"    print 'def pow3(x): return x**3'\n"
"\n"
"    t = time.time()\n"
"    A = map(pow3, xrange(N))\n"
"    print '\\tmap(pow3, xrange(%d)):\\n\\t\\t%s seconds' % \\\n"
"          (N, time.time() - t)\n"
"\n"
"    t = time.time()\n"
"    B = pool.map(pow3, xrange(N))\n"
"    print '\\tpool.map(pow3, xrange(%d)):\\n\\t\\t%s seconds' % \\\n"
"          (N, time.time() - t)\n"
"\n"
"    t = time.time()\n"
"    C = list(pool.imap(pow3, xrange(N), chunksize=N//8))\n"
"    print '\\tlist(pool.imap(pow3, xrange(%d), chunksize=%d)):\\n\\t\\t%s' "
"\\\n"
"          ' seconds' % (N, N//8, time.time() - t)\n"
"\n"
"    assert A == B == C, (len(A), len(B), len(C))\n"
"    print\n"
"\n"
"    L = [None] * 1000000\n"
"    print 'def noop(x): pass'\n"
"    print 'L = [None] * 1000000'\n"
"\n"
"    t = time.time()\n"
"    A = map(noop, L)\n"
"    print '\\tmap(noop, L):\\n\\t\\t%s seconds' % \\\n"
"          (time.time() - t)\n"
"\n"
"    t = time.time()\n"
"    B = pool.map(noop, L)\n"
"    print '\\tpool.map(noop, L):\\n\\t\\t%s seconds' % \\\n"
"          (time.time() - t)\n"
"\n"
"    t = time.time()\n"
"    C = list(pool.imap(noop, L, chunksize=len(L)//8))\n"
"    print '\\tlist(pool.imap(noop, L, chunksize=%d)):\\n\\t\\t%s seconds' % "
"\\\n"
"          (len(L)//8, time.time() - t)\n"
"\n"
"    assert A == B == C, (len(A), len(B), len(C))\n"
"    print\n"
"\n"
"    del A, B, C, L\n"
"\n"
"    #\n"
"    # Test error handling\n"
"    #\n"
"\n"
"    print 'Testing error handling:'\n"
"\n"
"    try:\n"
"        print pool.apply(f, (5,))\n"
"    except ZeroDivisionError:\n"
"        print '\\tGot ZeroDivisionError as expected from pool.apply()'\n"
"    else:\n"
"        raise AssertionError('expected ZeroDivisionError')\n"
"\n"
"    try:\n"
"        print pool.map(f, range(10))\n"
"    except ZeroDivisionError:\n"
"        print '\\tGot ZeroDivisionError as expected from pool.map()'\n"
"    else:\n"
"        raise AssertionError('expected ZeroDivisionError')\n"
"\n"
"    try:\n"
"        print list(pool.imap(f, range(10)))\n"
"    except ZeroDivisionError:\n"
"        print '\\tGot ZeroDivisionError as expected from list(pool.imap())'\n"
"    else:\n"
"        raise AssertionError('expected ZeroDivisionError')\n"
"\n"
"    it = pool.imap(f, range(10))\n"
"    for i in range(10):\n"
"        try:\n"
"            x = it.next()\n"
"        except ZeroDivisionError:\n"
"            if i == 5:\n"
"                pass\n"
"        except StopIteration:\n"
"            break\n"
"        else:\n"
"            if i == 5:\n"
"                raise AssertionError('expected ZeroDivisionError')\n"
"\n"
"    assert i == 9\n"
"    print '\\tGot ZeroDivisionError as expected from IMapIterator.next()'\n"
"    print\n"
"\n"
"    #\n"
"    # Testing timeouts\n"
"    #\n"
"\n"
"    print 'Testing ApplyResult.get() with timeout:',\n"
"    res = pool.apply_async(calculate, TASKS[0])\n"
"    while 1:\n"
"        sys.stdout.flush()\n"
"        try:\n"
"            sys.stdout.write('\\n\\t%s' % res.get(0.02))\n"
"            break\n"
"        except multiprocessing.TimeoutError:\n"
"            sys.stdout.write('.')\n"
"    print\n"
"    print\n"
"\n"
"    print 'Testing IMapIterator.next() with timeout:',\n"
"    it = pool.imap(calculatestar, TASKS)\n"
"    while 1:\n"
"        sys.stdout.flush()\n"
"        try:\n"
"            sys.stdout.write('\\n\\t%s' % it.next(0.02))\n"
"        except StopIteration:\n"
"            break\n"
"        except multiprocessing.TimeoutError:\n"
"            sys.stdout.write('.')\n"
"    print\n"
"    print\n"
"\n"
"    #\n"
"    # Testing callback\n"
"    #\n"
"\n"
"    print 'Testing callback:'\n"
"\n"
"    A = []\n"
"    B = [56, 0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n"
"\n"
"    r = pool.apply_async(mul, (7, 8), callback=A.append)\n"
"    r.wait()\n"
"\n"
"    r = pool.map_async(pow3, range(10), callback=A.extend)\n"
"    r.wait()\n"
"\n"
"    if A == B:\n"
"        print '\\tcallbacks succeeded\\n'\n"
"    else:\n"
"        print '\\t*** callbacks failed\\n\\t\\t%s != %s\\n' % (A, B)\n"
"\n"
"    #\n"
"    # Check there are no outstanding tasks\n"
"    #\n"
"\n"
"    assert not pool._cache, 'cache = %r' % pool._cache\n"
"\n"
"    #\n"
"    # Check close() methods\n"
"    #\n"
"\n"
"    print 'Testing close():'\n"
"\n"
"    for worker in pool._pool:\n"
"        assert worker.is_alive()\n"
"\n"
"    result = pool.apply_async(time.sleep, [0.5])\n"
"    pool.close()\n"
"    pool.join()\n"
"\n"
"    assert result.get() is None\n"
"\n"
"    for worker in pool._pool:\n"
"        assert not worker.is_alive()\n"
"\n"
"    print '\\tclose() succeeded\\n'\n"
"\n"
"    #\n"
"    # Check terminate() method\n"
"    #\n"
"\n"
"    print 'Testing terminate():'\n"
"\n"
"    pool = multiprocessing.Pool(2)\n"
"    DELTA = 0.1\n"
"    ignore = pool.apply(pow3, [2])\n"
"    results = [pool.apply_async(time.sleep, [DELTA]) for i in range(100)]\n"
"    pool.terminate()\n"
"    pool.join()\n"
"\n"
"    for worker in pool._pool:\n"
"        assert not worker.is_alive()\n"
"\n"
"    print '\\tterminate() succeeded\\n'\n"
"\n"
"    #\n"
"    # Check garbage collection\n"
"    #\n"
"\n"
"    print 'Testing garbage collection:'\n"
"\n"
"    pool = multiprocessing.Pool(2)\n"
"    DELTA = 0.1\n"
"    processes = pool._pool\n"
"    ignore = pool.apply(pow3, [2])\n"
"    results = [pool.apply_async(time.sleep, [DELTA]) for i in range(100)]\n"
"\n"
"    results = pool = None\n"
"\n"
"    time.sleep(DELTA * 2)\n"
"\n"
"    for worker in processes:\n"
"        assert not worker.is_alive()\n"
"\n"
"    print '\\tgarbage collection succeeded\\n'\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    multiprocessing.freeze_support()\n"
"\n"
"    assert len(sys.argv) in (1, 2)\n"
"\n"
"    if len(sys.argv) == 1 or sys.argv[1] == 'processes':\n"
"        print ' Using processes '.center(79, '-')\n"
"    elif sys.argv[1] == 'threads':\n"
"        print ' Using threads '.center(79, '-')\n"
"        import multiprocessing.dummy as multiprocessing\n"
"    else:\n"
"        print 'Usage:\\n\\t%s [processes | threads]' % sys.argv[0]\n"
"        raise SystemExit(2)\n"
"\n"
"    test()\n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2502
msgid "Synchronization types like locks, conditions and queues:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2504
msgid ""
"#\n"
"# A test file for the `multiprocessing` package\n"
"#\n"
"# Copyright (c) 2006-2008, R Oudkerk\n"
"# All rights reserved.\n"
"#\n"
"\n"
"import time, sys, random\n"
"from Queue import Empty\n"
"\n"
"import multiprocessing               # may get overwritten\n"
"\n"
"\n"
"#### TEST_VALUE\n"
"\n"
"def value_func(running, mutex):\n"
"    random.seed()\n"
"    time.sleep(random.random()*4)\n"
"\n"
"    mutex.acquire()\n"
"    print '\\n\\t\\t\\t' + str(multiprocessing.current_process()) + ' has "
"finished'\n"
"    running.value -= 1\n"
"    mutex.release()\n"
"\n"
"def test_value():\n"
"    TASKS = 10\n"
"    running = multiprocessing.Value('i', TASKS)\n"
"    mutex = multiprocessing.Lock()\n"
"\n"
"    for i in range(TASKS):\n"
"        p = multiprocessing.Process(target=value_func, args=(running, "
"mutex))\n"
"        p.start()\n"
"\n"
"    while running.value > 0:\n"
"        time.sleep(0.08)\n"
"        mutex.acquire()\n"
"        print running.value,\n"
"        sys.stdout.flush()\n"
"        mutex.release()\n"
"\n"
"    print\n"
"    print 'No more running processes'\n"
"\n"
"\n"
"#### TEST_QUEUE\n"
"\n"
"def queue_func(queue):\n"
"    for i in range(30):\n"
"        time.sleep(0.5 * random.random())\n"
"        queue.put(i*i)\n"
"    queue.put('STOP')\n"
"\n"
"def test_queue():\n"
"    q = multiprocessing.Queue()\n"
"\n"
"    p = multiprocessing.Process(target=queue_func, args=(q,))\n"
"    p.start()\n"
"\n"
"    o = None\n"
"    while o != 'STOP':\n"
"        try:\n"
"            o = q.get(timeout=0.3)\n"
"            print o,\n"
"            sys.stdout.flush()\n"
"        except Empty:\n"
"            print 'TIMEOUT'\n"
"\n"
"    print\n"
"\n"
"\n"
"#### TEST_CONDITION\n"
"\n"
"def condition_func(cond):\n"
"    cond.acquire()\n"
"    print '\\t' + str(cond)\n"
"    time.sleep(2)\n"
"    print '\\tchild is notifying'\n"
"    print '\\t' + str(cond)\n"
"    cond.notify()\n"
"    cond.release()\n"
"\n"
"def test_condition():\n"
"    cond = multiprocessing.Condition()\n"
"\n"
"    p = multiprocessing.Process(target=condition_func, args=(cond,))\n"
"    print cond\n"
"\n"
"    cond.acquire()\n"
"    print cond\n"
"    cond.acquire()\n"
"    print cond\n"
"\n"
"    p.start()\n"
"\n"
"    print 'main is waiting'\n"
"    cond.wait()\n"
"    print 'main has woken up'\n"
"\n"
"    print cond\n"
"    cond.release()\n"
"    print cond\n"
"    cond.release()\n"
"\n"
"    p.join()\n"
"    print cond\n"
"\n"
"\n"
"#### TEST_SEMAPHORE\n"
"\n"
"def semaphore_func(sema, mutex, running):\n"
"    sema.acquire()\n"
"\n"
"    mutex.acquire()\n"
"    running.value += 1\n"
"    print running.value, 'tasks are running'\n"
"    mutex.release()\n"
"\n"
"    random.seed()\n"
"    time.sleep(random.random()*2)\n"
"\n"
"    mutex.acquire()\n"
"    running.value -= 1\n"
"    print '%s has finished' % multiprocessing.current_process()\n"
"    mutex.release()\n"
"\n"
"    sema.release()\n"
"\n"
"def test_semaphore():\n"
"    sema = multiprocessing.Semaphore(3)\n"
"    mutex = multiprocessing.RLock()\n"
"    running = multiprocessing.Value('i', 0)\n"
"\n"
"    processes = [\n"
"        multiprocessing.Process(target=semaphore_func,\n"
"                                args=(sema, mutex, running))\n"
"        for i in range(10)\n"
"        ]\n"
"\n"
"    for p in processes:\n"
"        p.start()\n"
"\n"
"    for p in processes:\n"
"        p.join()\n"
"\n"
"\n"
"#### TEST_JOIN_TIMEOUT\n"
"\n"
"def join_timeout_func():\n"
"    print '\\tchild sleeping'\n"
"    time.sleep(5.5)\n"
"    print '\\n\\tchild terminating'\n"
"\n"
"def test_join_timeout():\n"
"    p = multiprocessing.Process(target=join_timeout_func)\n"
"    p.start()\n"
"\n"
"    print 'waiting for process to finish'\n"
"\n"
"    while 1:\n"
"        p.join(timeout=1)\n"
"        if not p.is_alive():\n"
"            break\n"
"        print '.',\n"
"        sys.stdout.flush()\n"
"\n"
"\n"
"#### TEST_EVENT\n"
"\n"
"def event_func(event):\n"
"    print '\\t%r is waiting' % multiprocessing.current_process()\n"
"    event.wait()\n"
"    print '\\t%r has woken up' % multiprocessing.current_process()\n"
"\n"
"def test_event():\n"
"    event = multiprocessing.Event()\n"
"\n"
"    processes = [multiprocessing.Process(target=event_func, args=(event,))\n"
"                 for i in range(5)]\n"
"\n"
"    for p in processes:\n"
"        p.start()\n"
"\n"
"    print 'main is sleeping'\n"
"    time.sleep(2)\n"
"\n"
"    print 'main is setting event'\n"
"    event.set()\n"
"\n"
"    for p in processes:\n"
"        p.join()\n"
"\n"
"\n"
"#### TEST_SHAREDVALUES\n"
"\n"
"def sharedvalues_func(values, arrays, shared_values, shared_arrays):\n"
"    for i in range(len(values)):\n"
"        v = values[i][1]\n"
"        sv = shared_values[i].value\n"
"        assert v == sv\n"
"\n"
"    for i in range(len(values)):\n"
"        a = arrays[i][1]\n"
"        sa = list(shared_arrays[i][:])\n"
"        assert a == sa\n"
"\n"
"    print 'Tests passed'\n"
"\n"
"def test_sharedvalues():\n"
"    values = [\n"
"        ('i', 10),\n"
"        ('h', -2),\n"
"        ('d', 1.25)\n"
"        ]\n"
"    arrays = [\n"
"        ('i', range(100)),\n"
"        ('d', [0.25 * i for i in range(100)]),\n"
"        ('H', range(1000))\n"
"        ]\n"
"\n"
"    shared_values = [multiprocessing.Value(id, v) for id, v in values]\n"
"    shared_arrays = [multiprocessing.Array(id, a) for id, a in arrays]\n"
"\n"
"    p = multiprocessing.Process(\n"
"        target=sharedvalues_func,\n"
"        args=(values, arrays, shared_values, shared_arrays)\n"
"        )\n"
"    p.start()\n"
"    p.join()\n"
"\n"
"    assert p.exitcode == 0\n"
"\n"
"\n"
"####\n"
"\n"
"def test(namespace=multiprocessing):\n"
"    global multiprocessing\n"
"\n"
"    multiprocessing = namespace\n"
"\n"
"    for func in [ test_value, test_queue, test_condition,\n"
"                  test_semaphore, test_join_timeout, test_event,\n"
"                  test_sharedvalues ]:\n"
"\n"
"        print '\\n\\t######## %s\\n' % func.__name__\n"
"        func()\n"
"\n"
"    ignore = multiprocessing.active_children()      # cleanup any old "
"processes\n"
"    if hasattr(multiprocessing, '_debug_info'):\n"
"        info = multiprocessing._debug_info()\n"
"        if info:\n"
"            print info\n"
"            raise ValueError('there should be no positive refcounts left')\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    multiprocessing.freeze_support()\n"
"\n"
"    assert len(sys.argv) in (1, 2)\n"
"\n"
"    if len(sys.argv) == 1 or sys.argv[1] == 'processes':\n"
"        print ' Using processes '.center(79, '-')\n"
"        namespace = multiprocessing\n"
"    elif sys.argv[1] == 'manager':\n"
"        print ' Using processes and a manager '.center(79, '-')\n"
"        namespace = multiprocessing.Manager()\n"
"        namespace.Process = multiprocessing.Process\n"
"        namespace.current_process = multiprocessing.current_process\n"
"        namespace.active_children = multiprocessing.active_children\n"
"    elif sys.argv[1] == 'threads':\n"
"        print ' Using threads '.center(79, '-')\n"
"        import multiprocessing.dummy as namespace\n"
"    else:\n"
"        print 'Usage:\\n\\t%s [processes | manager | threads]' % sys."
"argv[0]\n"
"        raise SystemExit(2)\n"
"\n"
"    test(namespace)\n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2507
msgid ""
"An example showing how to use queues to feed tasks to a collection of worker "
"processes and collect the results:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2510
msgid ""
"#\n"
"# Simple example which uses a pool of workers to carry out some tasks.\n"
"#\n"
"# Notice that the results will probably not come out of the output\n"
"# queue in the same in the same order as the corresponding tasks were\n"
"# put on the input queue.  If it is important to get the results back\n"
"# in the original order then consider using `Pool.map()` or\n"
"# `Pool.imap()` (which will save on the amount of code needed anyway).\n"
"#\n"
"# Copyright (c) 2006-2008, R Oudkerk\n"
"# All rights reserved.\n"
"#\n"
"\n"
"import time\n"
"import random\n"
"\n"
"from multiprocessing import Process, Queue, current_process, freeze_support\n"
"\n"
"#\n"
"# Function run by worker processes\n"
"#\n"
"\n"
"def worker(input, output):\n"
"    for func, args in iter(input.get, 'STOP'):\n"
"        result = calculate(func, args)\n"
"        output.put(result)\n"
"\n"
"#\n"
"# Function used to calculate result\n"
"#\n"
"\n"
"def calculate(func, args):\n"
"    result = func(*args)\n"
"    return '%s says that %s%s = %s' % \\\n"
"        (current_process().name, func.__name__, args, result)\n"
"\n"
"#\n"
"# Functions referenced by tasks\n"
"#\n"
"\n"
"def mul(a, b):\n"
"    time.sleep(0.5*random.random())\n"
"    return a * b\n"
"\n"
"def plus(a, b):\n"
"    time.sleep(0.5*random.random())\n"
"    return a + b\n"
"\n"
"#\n"
"#\n"
"#\n"
"\n"
"def test():\n"
"    NUMBER_OF_PROCESSES = 4\n"
"    TASKS1 = [(mul, (i, 7)) for i in range(20)]\n"
"    TASKS2 = [(plus, (i, 8)) for i in range(10)]\n"
"\n"
"    # Create queues\n"
"    task_queue = Queue()\n"
"    done_queue = Queue()\n"
"\n"
"    # Submit tasks\n"
"    for task in TASKS1:\n"
"        task_queue.put(task)\n"
"\n"
"    # Start worker processes\n"
"    for i in range(NUMBER_OF_PROCESSES):\n"
"        Process(target=worker, args=(task_queue, done_queue)).start()\n"
"\n"
"    # Get and print results\n"
"    print 'Unordered results:'\n"
"    for i in range(len(TASKS1)):\n"
"        print '\\t', done_queue.get()\n"
"\n"
"    # Add more tasks using `put()`\n"
"    for task in TASKS2:\n"
"        task_queue.put(task)\n"
"\n"
"    # Get and print some more results\n"
"    for i in range(len(TASKS2)):\n"
"        print '\\t', done_queue.get()\n"
"\n"
"    # Tell child processes to stop\n"
"    for i in range(NUMBER_OF_PROCESSES):\n"
"        task_queue.put('STOP')\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    freeze_support()\n"
"    test()\n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2513
msgid ""
"An example of how a pool of worker processes can each run a :class:"
"`SimpleHTTPServer.HttpServer` instance while sharing a single listening "
"socket."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2517
msgid ""
"#\n"
"# Example where a pool of http servers share a single listening socket\n"
"#\n"
"# On Windows this module depends on the ability to pickle a socket\n"
"# object so that the worker processes can inherit a copy of the server\n"
"# object.  (We import `multiprocessing.reduction` to enable this pickling.)\n"
"#\n"
"# Not sure if we should synchronize access to `socket.accept()` method by\n"
"# using a process-shared lock -- does not seem to be necessary.\n"
"#\n"
"# Copyright (c) 2006-2008, R Oudkerk\n"
"# All rights reserved.\n"
"#\n"
"\n"
"import os\n"
"import sys\n"
"\n"
"from multiprocessing import Process, current_process, freeze_support\n"
"from BaseHTTPServer import HTTPServer\n"
"from SimpleHTTPServer import SimpleHTTPRequestHandler\n"
"\n"
"if sys.platform == 'win32':\n"
"    import multiprocessing.reduction    # make sockets pickable/inheritable\n"
"\n"
"\n"
"def note(format, *args):\n"
"    sys.stderr.write('[%s]\\t%s\\n' % (current_process().name, "
"format%args))\n"
"\n"
"\n"
"class RequestHandler(SimpleHTTPRequestHandler):\n"
"    # we override log_message() to show which process is handling the "
"request\n"
"    def log_message(self, format, *args):\n"
"        note(format, *args)\n"
"\n"
"def serve_forever(server):\n"
"    note('starting server')\n"
"    try:\n"
"        server.serve_forever()\n"
"    except KeyboardInterrupt:\n"
"        pass\n"
"\n"
"\n"
"def runpool(address, number_of_processes):\n"
"    # create a single server object -- children will each inherit a copy\n"
"    server = HTTPServer(address, RequestHandler)\n"
"\n"
"    # create child processes to act as workers\n"
"    for i in range(number_of_processes-1):\n"
"        Process(target=serve_forever, args=(server,)).start()\n"
"\n"
"    # main process also acts as a worker\n"
"    serve_forever(server)\n"
"\n"
"\n"
"def test():\n"
"    DIR = os.path.join(os.path.dirname(__file__), '..')\n"
"    ADDRESS = ('localhost', 8000)\n"
"    NUMBER_OF_PROCESSES = 4\n"
"\n"
"    print 'Serving at http://%s:%d using %d worker processes' % \\\n"
"          (ADDRESS[0], ADDRESS[1], NUMBER_OF_PROCESSES)\n"
"    print 'To exit press Ctrl-' + ['C', 'Break'][sys.platform=='win32']\n"
"\n"
"    os.chdir(DIR)\n"
"    runpool(ADDRESS, NUMBER_OF_PROCESSES)\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    freeze_support()\n"
"    test()\n"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2520
msgid ""
"Some simple benchmarks comparing :mod:`multiprocessing` with :mod:"
"`threading`:"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/multiprocessing.rst:2522
msgid ""
"#\n"
"# Simple benchmarks for the multiprocessing package\n"
"#\n"
"# Copyright (c) 2006-2008, R Oudkerk\n"
"# All rights reserved.\n"
"#\n"
"\n"
"import time, sys, multiprocessing, threading, Queue, gc\n"
"\n"
"if sys.platform == 'win32':\n"
"    _timer = time.clock\n"
"else:\n"
"    _timer = time.time\n"
"\n"
"delta = 1\n"
"\n"
"\n"
"#### TEST_QUEUESPEED\n"
"\n"
"def queuespeed_func(q, c, iterations):\n"
"    a = '0' * 256\n"
"    c.acquire()\n"
"    c.notify()\n"
"    c.release()\n"
"\n"
"    for i in xrange(iterations):\n"
"        q.put(a)\n"
"\n"
"    q.put('STOP')\n"
"\n"
"def test_queuespeed(Process, q, c):\n"
"    elapsed = 0\n"
"    iterations = 1\n"
"\n"
"    while elapsed < delta:\n"
"        iterations *= 2\n"
"\n"
"        p = Process(target=queuespeed_func, args=(q, c, iterations))\n"
"        c.acquire()\n"
"        p.start()\n"
"        c.wait()\n"
"        c.release()\n"
"\n"
"        result = None\n"
"        t = _timer()\n"
"\n"
"        while result != 'STOP':\n"
"            result = q.get()\n"
"\n"
"        elapsed = _timer() - t\n"
"\n"
"        p.join()\n"
"\n"
"    print iterations, 'objects passed through the queue in', elapsed, "
"'seconds'\n"
"    print 'average number/sec:', iterations/elapsed\n"
"\n"
"\n"
"#### TEST_PIPESPEED\n"
"\n"
"def pipe_func(c, cond, iterations):\n"
"    a = '0' * 256\n"
"    cond.acquire()\n"
"    cond.notify()\n"
"    cond.release()\n"
"\n"
"    for i in xrange(iterations):\n"
"        c.send(a)\n"
"\n"
"    c.send('STOP')\n"
"\n"
"def test_pipespeed():\n"
"    c, d = multiprocessing.Pipe()\n"
"    cond = multiprocessing.Condition()\n"
"    elapsed = 0\n"
"    iterations = 1\n"
"\n"
"    while elapsed < delta:\n"
"        iterations *= 2\n"
"\n"
"        p = multiprocessing.Process(target=pipe_func,\n"
"                                    args=(d, cond, iterations))\n"
"        cond.acquire()\n"
"        p.start()\n"
"        cond.wait()\n"
"        cond.release()\n"
"\n"
"        result = None\n"
"        t = _timer()\n"
"\n"
"        while result != 'STOP':\n"
"            result = c.recv()\n"
"\n"
"        elapsed = _timer() - t\n"
"        p.join()\n"
"\n"
"    print iterations, 'objects passed through connection in',"
"elapsed,'seconds'\n"
"    print 'average number/sec:', iterations/elapsed\n"
"\n"
"\n"
"#### TEST_SEQSPEED\n"
"\n"
"def test_seqspeed(seq):\n"
"    elapsed = 0\n"
"    iterations = 1\n"
"\n"
"    while elapsed < delta:\n"
"        iterations *= 2\n"
"\n"
"        t = _timer()\n"
"\n"
"        for i in xrange(iterations):\n"
"            a = seq[5]\n"
"\n"
"        elapsed = _timer()-t\n"
"\n"
"    print iterations, 'iterations in', elapsed, 'seconds'\n"
"    print 'average number/sec:', iterations/elapsed\n"
"\n"
"\n"
"#### TEST_LOCK\n"
"\n"
"def test_lockspeed(l):\n"
"    elapsed = 0\n"
"    iterations = 1\n"
"\n"
"    while elapsed < delta:\n"
"        iterations *= 2\n"
"\n"
"        t = _timer()\n"
"\n"
"        for i in xrange(iterations):\n"
"            l.acquire()\n"
"            l.release()\n"
"\n"
"        elapsed = _timer()-t\n"
"\n"
"    print iterations, 'iterations in', elapsed, 'seconds'\n"
"    print 'average number/sec:', iterations/elapsed\n"
"\n"
"\n"
"#### TEST_CONDITION\n"
"\n"
"def conditionspeed_func(c, N):\n"
"    c.acquire()\n"
"    c.notify()\n"
"\n"
"    for i in xrange(N):\n"
"        c.wait()\n"
"        c.notify()\n"
"\n"
"    c.release()\n"
"\n"
"def test_conditionspeed(Process, c):\n"
"    elapsed = 0\n"
"    iterations = 1\n"
"\n"
"    while elapsed < delta:\n"
"        iterations *= 2\n"
"\n"
"        c.acquire()\n"
"        p = Process(target=conditionspeed_func, args=(c, iterations))\n"
"        p.start()\n"
"\n"
"        c.wait()\n"
"\n"
"        t = _timer()\n"
"\n"
"        for i in xrange(iterations):\n"
"            c.notify()\n"
"            c.wait()\n"
"\n"
"        elapsed = _timer()-t\n"
"\n"
"        c.release()\n"
"        p.join()\n"
"\n"
"    print iterations * 2, 'waits in', elapsed, 'seconds'\n"
"    print 'average number/sec:', iterations * 2 / elapsed\n"
"\n"
"####\n"
"\n"
"def test():\n"
"    manager = multiprocessing.Manager()\n"
"\n"
"    gc.disable()\n"
"\n"
"    print '\\n\\t######## testing Queue.Queue\\n'\n"
"    test_queuespeed(threading.Thread, Queue.Queue(),\n"
"                    threading.Condition())\n"
"    print '\\n\\t######## testing multiprocessing.Queue\\n'\n"
"    test_queuespeed(multiprocessing.Process, multiprocessing.Queue(),\n"
"                    multiprocessing.Condition())\n"
"    print '\\n\\t######## testing Queue managed by server process\\n'\n"
"    test_queuespeed(multiprocessing.Process, manager.Queue(),\n"
"                    manager.Condition())\n"
"    print '\\n\\t######## testing multiprocessing.Pipe\\n'\n"
"    test_pipespeed()\n"
"\n"
"    print\n"
"\n"
"    print '\\n\\t######## testing list\\n'\n"
"    test_seqspeed(range(10))\n"
"    print '\\n\\t######## testing list managed by server process\\n'\n"
"    test_seqspeed(manager.list(range(10)))\n"
"    print '\\n\\t######## testing Array(\"i\", ..., lock=False)\\n'\n"
"    test_seqspeed(multiprocessing.Array('i', range(10), lock=False))\n"
"    print '\\n\\t######## testing Array(\"i\", ..., lock=True)\\n'\n"
"    test_seqspeed(multiprocessing.Array('i', range(10), lock=True))\n"
"\n"
"    print\n"
"\n"
"    print '\\n\\t######## testing threading.Lock\\n'\n"
"    test_lockspeed(threading.Lock())\n"
"    print '\\n\\t######## testing threading.RLock\\n'\n"
"    test_lockspeed(threading.RLock())\n"
"    print '\\n\\t######## testing multiprocessing.Lock\\n'\n"
"    test_lockspeed(multiprocessing.Lock())\n"
"    print '\\n\\t######## testing multiprocessing.RLock\\n'\n"
"    test_lockspeed(multiprocessing.RLock())\n"
"    print '\\n\\t######## testing lock managed by server process\\n'\n"
"    test_lockspeed(manager.Lock())\n"
"    print '\\n\\t######## testing rlock managed by server process\\n'\n"
"    test_lockspeed(manager.RLock())\n"
"\n"
"    print\n"
"\n"
"    print '\\n\\t######## testing threading.Condition\\n'\n"
"    test_conditionspeed(threading.Thread, threading.Condition())\n"
"    print '\\n\\t######## testing multiprocessing.Condition\\n'\n"
"    test_conditionspeed(multiprocessing.Process, multiprocessing."
"Condition())\n"
"    print '\\n\\t######## testing condition managed by a server process\\n'\n"
"    test_conditionspeed(multiprocessing.Process, manager.Condition())\n"
"\n"
"    gc.enable()\n"
"\n"
"if __name__ == '__main__':\n"
"    multiprocessing.freeze_support()\n"
"    test()\n"
msgstr ""
