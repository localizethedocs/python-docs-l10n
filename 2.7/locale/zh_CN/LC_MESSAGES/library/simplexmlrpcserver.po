# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:2
msgid ":mod:`SimpleXMLRPCServer` --- Basic XML-RPC server"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:10
msgid ""
"The :mod:`SimpleXMLRPCServer` module has been merged into :mod:`xmlrpc."
"server` in Python 3.  The :term:`2to3` tool will automatically adapt imports "
"when converting your sources to Python 3."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:17
msgid "**Source code:** :source:`Lib/SimpleXMLRPCServer.py`"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:21
msgid ""
"The :mod:`SimpleXMLRPCServer` module provides a basic server framework for "
"XML-RPC servers written in Python.  Servers can either be free standing, "
"using :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer`, or embedded in a CGI "
"environment, using :class:`CGIXMLRPCRequestHandler`."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:29
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`SocketServer."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpclib` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:42
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:57
msgid "The *allow_none* and *encoding* parameters were added."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:45
msgid "The *bind_and_activate* parameter was added."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:51
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpclib` "
"and control the XML-RPC responses that will be returned  from the server."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:63
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` constructor parameter "
"is honored."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:71
msgid "SimpleXMLRPCServer Objects"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:73
msgid ""
"The :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` class is based on :class:"
"`SocketServer.TCPServer` and provides a means of creating simple, stand "
"alone XML-RPC servers."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:80
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
"``function.__name__`` will be used.  *name* can be either a normal or "
"Unicode string, and may contain characters not legal in Python identifiers, "
"including the period character."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:89
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:100
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:109
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:113
msgid ""
"2.4.1 *allow_dotted_names* was added to plug a security hole; prior versions "
"are insecure."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:120
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:128
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:133
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:142
msgid ""
"If this attribute is not ``None``, responses larger than this value will be "
"encoded using the *gzip* transfer encoding, if permitted by the client.  The "
"default is ``1400`` which corresponds roughly to a single TCP packet."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:152
msgid "SimpleXMLRPCServer Example"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:153
msgid "Server code::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:155
msgid ""
"from SimpleXMLRPCServer import SimpleXMLRPCServer\n"
"from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler\n"
"\n"
"# Restrict to a particular path.\n"
"class RequestHandler(SimpleXMLRPCRequestHandler):\n"
"    rpc_paths = ('/RPC2',)\n"
"\n"
"# Create server\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000),\n"
"                            requestHandler=RequestHandler)\n"
"server.register_introspection_functions()\n"
"\n"
"# Register pow() function; this will use the value of\n"
"# pow.__name__ as the name, which is just 'pow'.\n"
"server.register_function(pow)\n"
"\n"
"# Register a function under a different name\n"
"def adder_function(x,y):\n"
"    return x + y\n"
"server.register_function(adder_function, 'add')\n"
"\n"
"# Register an instance; all the methods of the instance are\n"
"# published as XML-RPC methods (in this case, just 'div').\n"
"class MyFuncs:\n"
"    def div(self, x, y):\n"
"        return x // y\n"
"\n"
"server.register_instance(MyFuncs())\n"
"\n"
"# Run the server's main loop\n"
"server.serve_forever()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:187
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:190
msgid ""
"import xmlrpclib\n"
"\n"
"s = xmlrpclib.ServerProxy('http://localhost:8000')\n"
"print s.pow(2,3)  # Returns 2**3 = 8\n"
"print s.add(2,3)  # Returns 5\n"
"print s.div(5,2)  # Returns 5//2 = 2\n"
"\n"
"# Print list of available methods\n"
"print s.system.listMethods()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:200
msgid ""
"The following :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` example is "
"included in the module `Lib/SimpleXMLRPCServer.py`::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:203
msgid ""
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"server.register_function(pow)\n"
"server.register_function(lambda x,y: x+y, 'add')\n"
"server.register_multicall_functions()\n"
"server.serve_forever()"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:209
msgid "This demo server can be run from the command line as::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:211
msgid "python -m SimpleXMLRPCServer"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:213
msgid ""
"Example client code which talks to the above server is included with `Lib/"
"xmlrpclib.py`::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:216
msgid ""
"server = ServerProxy(\"http://localhost:8000\")\n"
"print server\n"
"multi = MultiCall(server)\n"
"multi.pow(2, 9)\n"
"multi.add(5, 1)\n"
"multi.add(24, 11)\n"
"try:\n"
"    for response in multi():\n"
"        print response\n"
"except Error, v:\n"
"    print \"ERROR\", v"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:228
msgid "And the client can be invoked directly using the following command::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:230
msgid "python -m xmlrpclib"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:234
msgid "CGIXMLRPCRequestHandler"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:236
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to  handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:242
msgid ""
"Register a function that can respond to XML-RPC requests. If  *name* is "
"given, it will be the method name associated with  function, otherwise "
"*function.__name__* will be used. *name* can be either a normal or Unicode "
"string, and may contain  characters not legal in Python identifiers, "
"including the period character."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:251
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:265
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:271
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:276
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:279
msgid "Example::"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/simplexmlrpcserver.rst:281
msgid ""
"class MyFuncs:\n"
"    def div(self, x, y): return x // y\n"
"\n"
"\n"
"handler = CGIXMLRPCRequestHandler()\n"
"handler.register_function(pow)\n"
"handler.register_function(lambda x,y: x+y, 'add')\n"
"handler.register_introspection_functions()\n"
"handler.register_instance(MyFuncs())\n"
"handler.handle_request()"
msgstr ""
