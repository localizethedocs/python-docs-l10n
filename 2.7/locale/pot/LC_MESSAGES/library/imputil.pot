# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 15:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:3
msgid ":mod:`imputil` --- Import utilities"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:9
msgid "The :mod:`imputil` module has been removed in Python 3."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:15
msgid ""
"This module provides a very handy and useful mechanism for custom :keyword:"
"`import` hooks. Compared to the older :mod:`ihooks` module, :mod:`imputil` "
"takes a dramatically simpler and more straight-forward approach to custom :"
"keyword:`import` functions."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:23
msgid "Manage the import process."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:27
msgid "Install this ImportManager into the specified namespace."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:31
msgid "Restore the previous import mechanism."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:35
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:87
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:91
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:95
#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:99
msgid "Undocumented."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:40
msgid "Base class for replacing standard import functions."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:44
msgid "Import a top-level module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:48
msgid "Find and retrieve the code for the given module."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:50
msgid ""
"*parent* specifies a parent module to define a context for importing. It may "
"be ``None``, indicating no particular context for the search."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:53
msgid "*modname* specifies a single module (not dotted) within the parent."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:55
msgid ""
"*fqname* specifies the fully-qualified module name. This is a (potentially) "
"dotted name from the \"root\" of the module namespace down to the modname."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:59
msgid "If there is no parent, then modname==fqname."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:61
msgid "This method should return ``None``, or a 3-tuple."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:63
msgid "If the module was not found, then ``None`` should be returned."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:65
msgid ""
"The first item of the 2- or 3-tuple should be the integer 0 or 1, specifying "
"whether the module that was found is a package or not."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:68
msgid ""
"The second item is the code object for the module (it will be executed "
"within the new module's namespace). This item can also be a fully-loaded "
"module object (e.g. loaded from a shared lib)."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:72
msgid ""
"The third item is a dictionary of name/value pairs that will be inserted "
"into new module before the code object is executed. This is provided in case "
"the module's code expects certain values (such as where the module was "
"found). When the second item is a module object, then these names/values "
"will be inserted *after* the module has been loaded/initialized."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:82
msgid ""
"Emulate the import mechanism for built-in and frozen modules.  This is a sub-"
"class of the :class:`Importer` class."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:104
msgid "Examples"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:106
msgid "This is a re-implementation of hierarchical module import."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:108
msgid ""
"This code is intended to be read, not executed.  However, it does work -- "
"all you need to do to enable it is \"import knee\"."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:111
msgid "(The name is a pun on the clunkier predecessor of this module, \"ni\".)"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:115
msgid ""
"import sys, imp, __builtin__\n"
"\n"
"# Replacement for __import__()\n"
"def import_hook(name, globals=None, locals=None, fromlist=None):\n"
"    parent = determine_parent(globals)\n"
"    q, tail = find_head_package(parent, name)\n"
"    m = load_tail(q, tail)\n"
"    if not fromlist:\n"
"        return q\n"
"    if hasattr(m, \"__path__\"):\n"
"        ensure_fromlist(m, fromlist)\n"
"    return m\n"
"\n"
"def determine_parent(globals):\n"
"    if not globals or  not globals.has_key(\"__name__\"):\n"
"        return None\n"
"    pname = globals['__name__']\n"
"    if globals.has_key(\"__path__\"):\n"
"        parent = sys.modules[pname]\n"
"        assert globals is parent.__dict__\n"
"        return parent\n"
"    if '.' in pname:\n"
"        i = pname.rfind('.')\n"
"        pname = pname[:i]\n"
"        parent = sys.modules[pname]\n"
"        assert parent.__name__ == pname\n"
"        return parent\n"
"    return None\n"
"\n"
"def find_head_package(parent, name):\n"
"    if '.' in name:\n"
"        i = name.find('.')\n"
"        head = name[:i]\n"
"        tail = name[i+1:]\n"
"    else:\n"
"        head = name\n"
"        tail = \"\"\n"
"    if parent:\n"
"        qname = \"%s.%s\" % (parent.__name__, head)\n"
"    else:\n"
"        qname = head\n"
"    q = import_module(head, qname, parent)\n"
"    if q: return q, tail\n"
"    if parent:\n"
"        qname = head\n"
"        parent = None\n"
"        q = import_module(head, qname, parent)\n"
"        if q: return q, tail\n"
"    raise ImportError(\"No module named \" + qname)\n"
"\n"
"def load_tail(q, tail):\n"
"    m = q\n"
"    while tail:\n"
"        i = tail.find('.')\n"
"        if i < 0: i = len(tail)\n"
"        head, tail = tail[:i], tail[i+1:]\n"
"        mname = \"%s.%s\" % (m.__name__, head)\n"
"        m = import_module(head, mname, m)\n"
"        if not m:\n"
"            raise ImportError(\"No module named \" + mname)\n"
"    return m\n"
"\n"
"def ensure_fromlist(m, fromlist, recursive=0):\n"
"    for sub in fromlist:\n"
"        if sub == \"*\":\n"
"            if not recursive:\n"
"                try:\n"
"                    all = m.__all__\n"
"                except AttributeError:\n"
"                    pass\n"
"                else:\n"
"                    ensure_fromlist(m, all, 1)\n"
"            continue\n"
"        if sub != \"*\" and not hasattr(m, sub):\n"
"            subname = \"%s.%s\" % (m.__name__, sub)\n"
"            submod = import_module(sub, subname, m)\n"
"            if not submod:\n"
"                raise ImportError(\"No module named \" + subname)\n"
"\n"
"def import_module(partname, fqname, parent):\n"
"    try:\n"
"        return sys.modules[fqname]\n"
"    except KeyError:\n"
"        pass\n"
"    try:\n"
"        fp, pathname, stuff = imp.find_module(partname,\n"
"                                              parent and parent.__path__)\n"
"    except ImportError:\n"
"        return None\n"
"    try:\n"
"        m = imp.load_module(fqname, fp, pathname, stuff)\n"
"    finally:\n"
"        if fp: fp.close()\n"
"    if parent:\n"
"        setattr(parent, partname, m)\n"
"    return m\n"
"\n"
"\n"
"# Replacement for reload()\n"
"def reload_hook(module):\n"
"    name = module.__name__\n"
"    if '.' not in name:\n"
"        return import_module(name, name, None)\n"
"    i = name.rfind('.')\n"
"    pname = name[:i]\n"
"    parent = sys.modules[pname]\n"
"    return import_module(name[i+1:], name, parent)\n"
"\n"
"\n"
"# Save the original hooks\n"
"original_import = __builtin__.__import__\n"
"original_reload = __builtin__.reload\n"
"\n"
"# Now install our hooks\n"
"__builtin__.__import__ = import_hook\n"
"__builtin__.reload = reload_hook"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:235
msgid ""
"Also see the :mod:`importers` module (which can be found in :file:`Demo/"
"imputil/` in the Python source distribution) for additional examples."
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:13
msgid "import"
msgstr ""

#: /home/runner/work/python-docs-l10n/python-docs-l10n/out/repo/Doc/library/imputil.rst:232
msgid "knee"
msgstr ""
