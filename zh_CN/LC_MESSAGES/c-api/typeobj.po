# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

#: ../../../c-api/typeobj.rst:8
msgid ""
"Perhaps one of the most important structures of the Python object system is "
"the structure that defines a new type: the :ctype:`PyTypeObject` structure.  "
"Type objects can be handled using any of the :cfunc:`PyObject_\\*` or :cfunc:"
"`PyType_\\*` functions, but do not offer much that's interesting to most "
"Python applications. These objects are fundamental to how objects behave, so "
"they are very important to the interpreter itself and to any extension "
"module that implements new types."
msgstr ""

#: ../../../c-api/typeobj.rst:16
msgid ""
"Type objects are fairly large compared to most of the standard types. The "
"reason for the size is that each type object stores a large number of "
"values, mostly C function pointers, each of which implements a small part of "
"the type's functionality.  The fields of the type object are examined in "
"detail in this section.  The fields will be described in the order in which "
"they occur in the structure."
msgstr ""

#: ../../../c-api/typeobj.rst:23
msgid ""
"Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, coercion, intargfunc, "
"intintargfunc, intobjargproc, intintobjargproc, objobjargproc, destructor, "
"freefunc, printfunc, getattrfunc, getattrofunc, setattrfunc, setattrofunc, "
"cmpfunc, reprfunc, hashfunc"
msgstr ""

#: ../../../c-api/typeobj.rst:28
msgid ""
"The structure definition for :ctype:`PyTypeObject` can be found in :file:"
"`Include/object.h`.  For convenience of reference, this repeats the "
"definition found there:"
msgstr ""

#: ../../../c-api/typeobj.rst:35
msgid ""
"The type object structure extends the :ctype:`PyVarObject` structure. The :"
"attr:`ob_size` field is used for dynamic types (created by  :func:"
"`type_new`, usually called from a class statement). Note that :cdata:"
"`PyType_Type` (the metatype) initializes :attr:`tp_itemsize`, which means "
"that its instances (i.e. type objects) *must* have the :attr:`ob_size` field."
msgstr ""

#: ../../../c-api/typeobj.rst:574
msgid ""
"The following three fields only exist if the :const:"
"`Py_TPFLAGS_HAVE_RICHCOMPARE` flag bit is set."
msgstr ""

#: ../../../c-api/typeobj.rst:716
msgid ""
"The next field only exists if the :const:`Py_TPFLAGS_HAVE_WEAKREFS` flag bit "
"is set."
msgstr ""

#: ../../../c-api/typeobj.rst:750
msgid ""
"The next two fields only exist if the :const:`Py_TPFLAGS_HAVE_ITER` flag bit "
"is set."
msgstr ""

#: ../../../c-api/typeobj.rst:783
msgid ""
"The next fields, up to and including :attr:`tp_weaklist`, only exist if the :"
"const:`Py_TPFLAGS_HAVE_CLASS` flag bit is set."
msgstr ""

#: ../../../c-api/typeobj.rst:1107
msgid ""
"The remaining fields are only defined if the feature test macro :const:"
"`COUNT_ALLOCS` is defined, and are for internal use only. They are "
"documented here for completeness.  None of these fields are inherited by "
"subtypes."
msgstr ""

#: ../../../c-api/typeobj.rst:1132
msgid ""
"Also, note that, in a garbage collected Python, tp_dealloc may be called "
"from any Python thread, not just the thread which created the object (if the "
"object becomes part of a refcount cycle, that cycle might be collected by a "
"garbage collection on any thread).  This is not a problem for Python API "
"calls, since the thread on which tp_dealloc is called will own the Global "
"Interpreter Lock (GIL). However, if the object being destroyed in turn "
"destroys objects from some other C or C++ library, care should be taken to "
"ensure that destroying those objects on the thread which called tp_dealloc "
"will not violate any assumptions of the library."
msgstr ""

#: ../../../c-api/typeobj.rst:1146
msgid "Number Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1208
msgid ""
"Binary and ternary functions may receive different kinds of arguments, "
"depending on the flag bit :const:`Py_TPFLAGS_CHECKTYPES`:"
msgstr ""

#: ../../../c-api/typeobj.rst:1211
msgid ""
"If :const:`Py_TPFLAGS_CHECKTYPES` is not set, the function arguments are "
"guaranteed to be of the object's type; the caller is responsible for calling "
"the coercion method specified by the :attr:`nb_coerce` member to convert the "
"arguments:"
msgstr ""

#: ../../../c-api/typeobj.rst:1225
msgid ""
"If the :const:`Py_TPFLAGS_CHECKTYPES` flag is set, binary and ternary "
"functions must check the type of all their operands, and implement the "
"necessary conversions (at least one of the operands is an instance of the "
"defined type).  This is the recommended way; with Python 3.0 coercion will "
"disappear completely."
msgstr ""

#: ../../../c-api/typeobj.rst:1231
msgid ""
"If the operation is not defined for the given operands, binary and ternary "
"functions must return ``Py_NotImplemented``, if another error occurred they "
"must return ``NULL`` and set an exception."
msgstr ""

#: ../../../c-api/typeobj.rst:1239
msgid "Mapping Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1271
msgid "Sequence Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1339
msgid "Buffer Object Structures"
msgstr ""

#: ../../../c-api/typeobj.rst:1344
msgid ""
"The buffer interface exports a model where an object can expose its internal "
"data as a set of chunks of data, where each chunk is specified as a pointer/"
"length pair.  These chunks are called :dfn:`segments` and are presumed to be "
"non-contiguous in memory."
msgstr ""

#: ../../../c-api/typeobj.rst:1349
msgid ""
"If an object does not export the buffer interface, then its :attr:"
"`tp_as_buffer` member in the :ctype:`PyTypeObject` structure should be "
"*NULL*.  Otherwise, the :attr:`tp_as_buffer` will point to a :ctype:"
"`PyBufferProcs` structure."
msgstr ""

#: ../../../c-api/typeobj.rst:1355
msgid ""
"It is very important that your :ctype:`PyTypeObject` structure uses :const:"
"`Py_TPFLAGS_DEFAULT` for the value of the :attr:`tp_flags` member rather "
"than ``0``.  This tells the Python runtime that your :ctype:`PyBufferProcs` "
"structure contains the :attr:`bf_getcharbuffer` slot. Older versions of "
"Python did not have this member, so a new Python interpreter using an old "
"extension needs to be able to test for its presence before using it."
msgstr ""

#: ../../../c-api/typeobj.rst:1407
msgid ""
"Flag bit set in the type structure to indicate that the :attr:"
"`bf_getcharbuffer` slot is known.  This being set does not indicate that the "
"object supports the buffer interface or that the :attr:`bf_getcharbuffer` "
"slot is non-*NULL*."
msgstr ""
