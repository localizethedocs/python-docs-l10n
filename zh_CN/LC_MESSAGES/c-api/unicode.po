# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:11
msgid "Unicode Objects"
msgstr ""

#: ../../../c-api/unicode.rst:14
msgid "Unicode Type"
msgstr ""

#: ../../../c-api/unicode.rst:16
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""

#: ../../../c-api/unicode.rst:22
msgid ""
"This type represents the storage type which is used by Python internally as "
"basis for holding Unicode ordinals.  Python's default builds use a 16-bit "
"type for :c:type:`Py_UNICODE` and store Unicode values internally as UCS2. "
"It is also possible to build a UCS4 version of Python (most recent Linux "
"distributions come with UCS4 builds of Python). These builds then use a 32-"
"bit type for :c:type:`Py_UNICODE` and store Unicode data internally as UCS4. "
"On platforms where :c:type:`wchar_t` is available and compatible with the "
"chosen Python Unicode build variant, :c:type:`Py_UNICODE` is a typedef alias "
"for :c:type:`wchar_t` to enhance native platform compatibility. On all other "
"platforms, :c:type:`Py_UNICODE` is a typedef alias for either :c:type:"
"`unsigned short` (UCS2) or :c:type:`unsigned long` (UCS4)."
msgstr ""

#: ../../../c-api/unicode.rst:34
msgid ""
"Note that UCS2 and UCS4 Python builds are not binary compatible. Please keep "
"this in mind when writing extensions or interfaces."
msgstr ""

#: ../../../c-api/unicode.rst:40
msgid "This subtype of :c:type:`PyObject` represents a Python Unicode object."
msgstr ""

#: ../../../c-api/unicode.rst:45
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""

#: ../../../c-api/unicode.rst:48
msgid ""
"The following APIs are really C macros and can be used to do fast checks and "
"to access internal read-only data of Unicode objects:"
msgstr ""

#: ../../../c-api/unicode.rst:54
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype."
msgstr ""

#: ../../../c-api/unicode.rst:60
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype."
msgstr ""

#: ../../../c-api/unicode.rst:66
msgid ""
"Return the size of the object.  *o* has to be a :c:type:`PyUnicodeObject` "
"(not checked)."
msgstr ""

#: ../../../c-api/unicode.rst:72
msgid ""
"Return the size of the object's internal buffer in bytes.  *o* has to be a :"
"c:type:`PyUnicodeObject` (not checked)."
msgstr ""

#: ../../../c-api/unicode.rst:78
msgid ""
"Return a pointer to the internal :c:type:`Py_UNICODE` buffer of the object.  "
"*o* has to be a :c:type:`PyUnicodeObject` (not checked)."
msgstr ""

#: ../../../c-api/unicode.rst:84
msgid ""
"Return a pointer to the internal buffer of the object. *o* has to be a :c:"
"type:`PyUnicodeObject` (not checked)."
msgstr ""

#: ../../../c-api/unicode.rst:90
msgid "Clear the free list. Return the total number of freed items."
msgstr ""

#: ../../../c-api/unicode.rst:94
msgid "Unicode Character Properties"
msgstr ""

#: ../../../c-api/unicode.rst:96
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

#: ../../../c-api/unicode.rst:103
msgid "Return 1 or 0 depending on whether *ch* is a whitespace character."
msgstr ""

#: ../../../c-api/unicode.rst:108
msgid "Return 1 or 0 depending on whether *ch* is a lowercase character."
msgstr ""

#: ../../../c-api/unicode.rst:113
msgid "Return 1 or 0 depending on whether *ch* is an uppercase character."
msgstr ""

#: ../../../c-api/unicode.rst:118
msgid "Return 1 or 0 depending on whether *ch* is a titlecase character."
msgstr ""

#: ../../../c-api/unicode.rst:123
msgid "Return 1 or 0 depending on whether *ch* is a linebreak character."
msgstr ""

#: ../../../c-api/unicode.rst:128
msgid "Return 1 or 0 depending on whether *ch* is a decimal character."
msgstr ""

#: ../../../c-api/unicode.rst:133
msgid "Return 1 or 0 depending on whether *ch* is a digit character."
msgstr ""

#: ../../../c-api/unicode.rst:138
msgid "Return 1 or 0 depending on whether *ch* is a numeric character."
msgstr ""

#: ../../../c-api/unicode.rst:143
msgid "Return 1 or 0 depending on whether *ch* is an alphabetic character."
msgstr ""

#: ../../../c-api/unicode.rst:148
msgid "Return 1 or 0 depending on whether *ch* is an alphanumeric character."
msgstr ""

#: ../../../c-api/unicode.rst:153
msgid ""
"Return 1 or 0 depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../../../c-api/unicode.rst:162
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

#: ../../../c-api/unicode.rst:167
msgid "Return the character *ch* converted to lower case."
msgstr ""

#: ../../../c-api/unicode.rst:172
msgid "Return the character *ch* converted to upper case."
msgstr ""

#: ../../../c-api/unicode.rst:177
msgid "Return the character *ch* converted to title case."
msgstr ""

#: ../../../c-api/unicode.rst:182
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../../c-api/unicode.rst:188
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../../c-api/unicode.rst:194
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../../c-api/unicode.rst:199
msgid "Plain Py_UNICODE"
msgstr ""

#: ../../../c-api/unicode.rst:201
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:207
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be *NULL* which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into "
"the new object. If the buffer is not *NULL*, the return value might be a "
"shared object. Therefore, modification of the resulting Unicode object is "
"only allowed when *u* is *NULL*."
msgstr ""

#: ../../../c-api/unicode.rst:217
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  *u* may also be *NULL* which causes the "
"contents to be undefined. It is the user's responsibility to fill in the "
"needed data.  The buffer is copied into the new object. If the buffer is not "
"*NULL*, the return value might be a shared object. Therefore, modification "
"of the resulting Unicode object is only allowed when *u* is *NULL*."
msgstr ""

#: ../../../c-api/unicode.rst:227
msgid ""
"Create a Unicode object from an UTF-8 encoded null-terminated char buffer "
"*u*."
msgstr ""

#: ../../../c-api/unicode.rst:233
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ""

#: ../../../c-api/unicode.rst:247
msgid "Format Characters"
msgstr ""

#: ../../../c-api/unicode.rst:247
msgid "Type"
msgstr ""

#: ../../../c-api/unicode.rst:247
msgid "Comment"
msgstr ""

#: ../../../c-api/unicode.rst:249
msgid ":attr:`%%`"
msgstr ""

#: ../../../c-api/unicode.rst:249
msgid "*n/a*"
msgstr ""

#: ../../../c-api/unicode.rst:249
msgid "The literal % character."
msgstr ""

#: ../../../c-api/unicode.rst:251
msgid ":attr:`%c`"
msgstr ""

#: ../../../c-api/unicode.rst:251 ../../../c-api/unicode.rst:254
#: ../../../c-api/unicode.rst:278 ../../../c-api/unicode.rst:281
msgid "int"
msgstr ""

#: ../../../c-api/unicode.rst:251
msgid "A single character, represented as an C int."
msgstr ""

#: ../../../c-api/unicode.rst:254
msgid ":attr:`%d`"
msgstr ""

#: ../../../c-api/unicode.rst:254
msgid "Exactly equivalent to ``printf(\"%d\")``."
msgstr ""

#: ../../../c-api/unicode.rst:257
msgid ":attr:`%u`"
msgstr ""

#: ../../../c-api/unicode.rst:257
msgid "unsigned int"
msgstr ""

#: ../../../c-api/unicode.rst:257
msgid "Exactly equivalent to ``printf(\"%u\")``."
msgstr ""

#: ../../../c-api/unicode.rst:260
msgid ":attr:`%ld`"
msgstr ""

#: ../../../c-api/unicode.rst:260
msgid "long"
msgstr ""

#: ../../../c-api/unicode.rst:260
msgid "Exactly equivalent to ``printf(\"%ld\")``."
msgstr ""

#: ../../../c-api/unicode.rst:263
msgid ":attr:`%lu`"
msgstr ""

#: ../../../c-api/unicode.rst:263
msgid "unsigned long"
msgstr ""

#: ../../../c-api/unicode.rst:263
msgid "Exactly equivalent to ``printf(\"%lu\")``."
msgstr ""

#: ../../../c-api/unicode.rst:266
msgid ":attr:`%lld`"
msgstr ""

#: ../../../c-api/unicode.rst:266
msgid "long long"
msgstr ""

#: ../../../c-api/unicode.rst:266
msgid "Exactly equivalent to ``printf(\"%lld\")``."
msgstr ""

#: ../../../c-api/unicode.rst:269
msgid ":attr:`%llu`"
msgstr ""

#: ../../../c-api/unicode.rst:269
msgid "unsigned long long"
msgstr ""

#: ../../../c-api/unicode.rst:269
msgid "Exactly equivalent to ``printf(\"%llu\")``."
msgstr ""

#: ../../../c-api/unicode.rst:272
msgid ":attr:`%zd`"
msgstr ""

#: ../../../c-api/unicode.rst:272
msgid "Py_ssize_t"
msgstr ""

#: ../../../c-api/unicode.rst:272
msgid "Exactly equivalent to ``printf(\"%zd\")``."
msgstr ""

#: ../../../c-api/unicode.rst:275
msgid ":attr:`%zu`"
msgstr ""

#: ../../../c-api/unicode.rst:275
msgid "size_t"
msgstr ""

#: ../../../c-api/unicode.rst:275
msgid "Exactly equivalent to ``printf(\"%zu\")``."
msgstr ""

#: ../../../c-api/unicode.rst:278
msgid ":attr:`%i`"
msgstr ""

#: ../../../c-api/unicode.rst:278
msgid "Exactly equivalent to ``printf(\"%i\")``."
msgstr ""

#: ../../../c-api/unicode.rst:281
msgid ":attr:`%x`"
msgstr ""

#: ../../../c-api/unicode.rst:281
msgid "Exactly equivalent to ``printf(\"%x\")``."
msgstr ""

#: ../../../c-api/unicode.rst:284
msgid ":attr:`%s`"
msgstr ""

#: ../../../c-api/unicode.rst:284
msgid "char\\*"
msgstr ""

#: ../../../c-api/unicode.rst:284
msgid "A null-terminated C character array."
msgstr ""

#: ../../../c-api/unicode.rst:287
msgid ":attr:`%p`"
msgstr ""

#: ../../../c-api/unicode.rst:287
msgid "void\\*"
msgstr ""

#: ../../../c-api/unicode.rst:287
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../../../c-api/unicode.rst:295
msgid ":attr:`%A`"
msgstr ""

#: ../../../c-api/unicode.rst:295 ../../../c-api/unicode.rst:298
#: ../../../c-api/unicode.rst:307 ../../../c-api/unicode.rst:310
msgid "PyObject\\*"
msgstr ""

#: ../../../c-api/unicode.rst:295
msgid "The result of calling :func:`ascii`."
msgstr ""

#: ../../../c-api/unicode.rst:298
msgid ":attr:`%U`"
msgstr ""

#: ../../../c-api/unicode.rst:298
msgid "A unicode object."
msgstr ""

#: ../../../c-api/unicode.rst:300
msgid ":attr:`%V`"
msgstr ""

#: ../../../c-api/unicode.rst:300
msgid "PyObject\\*, char \\*"
msgstr ""

#: ../../../c-api/unicode.rst:300
msgid ""
"A unicode object (which may be *NULL*) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"*NULL*)."
msgstr ""

#: ../../../c-api/unicode.rst:307
msgid ":attr:`%S`"
msgstr ""

#: ../../../c-api/unicode.rst:307
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ""

#: ../../../c-api/unicode.rst:310
msgid ":attr:`%R`"
msgstr ""

#: ../../../c-api/unicode.rst:310
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ""

#: ../../../c-api/unicode.rst:314
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""

#: ../../../c-api/unicode.rst:319
msgid ""
"The `\"%lld\"` and `\"%llu\"` format specifiers are only available when :"
"const:`HAVE_LONG_LONG` is defined."
msgstr ""

#: ../../../c-api/unicode.rst:322
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr ""

#: ../../../c-api/unicode.rst:328
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

#: ../../../c-api/unicode.rst:333
msgid ""
"Create a Unicode object by replacing all decimal digits in :c:type:"
"`Py_UNICODE` buffer of the given *size* by ASCII digits 0--9 according to "
"their decimal value.  Return *NULL* if an exception occurs."
msgstr ""

#: ../../../c-api/unicode.rst:341
msgid ""
"Return a read-only pointer to the Unicode object's internal :c:type:"
"`Py_UNICODE` buffer, *NULL* if *unicode* is not a Unicode object. Note that "
"the resulting :c:type:`Py_UNICODE*` string may contain embedded null "
"characters, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../../c-api/unicode.rst:350
msgid ""
"Create a copy of a Unicode string ending with a nul character. Return *NULL* "
"and raise a :exc:`MemoryError` exception on memory allocation failure, "
"otherwise return a new allocated buffer (use :c:func:`PyMem_Free` to free "
"the buffer). Note that the resulting :c:type:`Py_UNICODE*` string may "
"contain embedded null characters, which would cause the string to be "
"truncated when used in most C functions."
msgstr ""

#: ../../../c-api/unicode.rst:362
msgid "Return the length of the Unicode object."
msgstr ""

#: ../../../c-api/unicode.rst:367
msgid ""
"Coerce an encoded object *obj* to an Unicode object and return a reference "
"with incremented refcount."
msgstr ""

#: ../../../c-api/unicode.rst:370
msgid ""
":class:`bytes`, :class:`bytearray` and other char buffer compatible objects "
"are decoded according to the given *encoding* and using the error handling "
"defined by *errors*. Both can be *NULL* to have the interface use the "
"default values (see the next section for details)."
msgstr ""

#: ../../../c-api/unicode.rst:375
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""

#: ../../../c-api/unicode.rst:378
msgid ""
"The API returns *NULL* if there was an error.  The caller is responsible for "
"decref'ing the returned objects."
msgstr ""

#: ../../../c-api/unicode.rst:384
msgid ""
"Shortcut for ``PyUnicode_FromEncodedObject(obj, NULL, \"strict\")`` which is "
"used throughout the interpreter whenever coercion to Unicode is needed."
msgstr ""

#: ../../../c-api/unicode.rst:387
msgid ""
"If the platform supports :c:type:`wchar_t` and provides a header file wchar."
"h, Python can interface directly to this type using the following functions. "
"Support is optimized if Python's own :c:type:`Py_UNICODE` type is identical "
"to the system's :c:type:`wchar_t`."
msgstr ""

#: ../../../c-api/unicode.rst:394
msgid "File System Encoding"
msgstr ""

#: ../../../c-api/unicode.rst:396
msgid ""
"To encode and decode file names and other environment strings, :c:data:"
"`Py_FileSystemEncoding` should be used as the encoding, and "
"``\"surrogateescape\"`` should be used as the error handler (:pep:`383`). To "
"encode file names during argument parsing, the ``\"O&\"`` converter should "
"be used, passing :c:func:`PyUnicode_FSConverter` as the conversion function:"
msgstr ""

#: ../../../c-api/unicode.rst:404
msgid ""
"ParseTuple converter: encode :class:`str` objects to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:type:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

#: ../../../c-api/unicode.rst:412
msgid ""
"To decode file names during argument parsing, the ``\"O&\"`` converter "
"should be used, passing :c:func:`PyUnicode_FSDecoder` as the conversion "
"function:"
msgstr ""

#: ../../../c-api/unicode.rst:417
msgid ""
"ParseTuple converter: decode :class:`bytes` objects to :class:`str` using :c:"
"func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` objects are output as-"
"is. *result* must be a :c:type:`PyUnicodeObject*` which must be released "
"when it is no longer used."
msgstr ""

#: ../../../c-api/unicode.rst:427
msgid ""
"Decode a string using :c:data:`Py_FileSystemDefaultEncoding` and the "
"``'surrogateescape'`` error handler, or ``'strict'`` on Windows."
msgstr ""

#: ../../../c-api/unicode.rst:430 ../../../c-api/unicode.rst:442
#: ../../../c-api/unicode.rst:458
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

#: ../../../c-api/unicode.rst:433 ../../../c-api/unicode.rst:447
msgid "Use ``'strict'`` error handler on Windows."
msgstr ""

#: ../../../c-api/unicode.rst:439
msgid ""
"Decode a null-terminated string using :c:data:`Py_FileSystemDefaultEncoding` "
"and the ``'surrogateescape'`` error handler, or ``'strict'`` on Windows."
msgstr ""

#: ../../../c-api/unicode.rst:445
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string length."
msgstr ""

#: ../../../c-api/unicode.rst:453
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the "
"``'surrogateescape'`` error handler, or ``'strict'`` on Windows, and return :"
"class:`bytes`. Note that the resulting :class:`bytes` object may contain "
"null bytes."
msgstr ""

#: ../../../c-api/unicode.rst:465
msgid "wchar_t Support"
msgstr ""

#: ../../../c-api/unicode.rst:467
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

#: ../../../c-api/unicode.rst:471
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the given "
"*size*. Passing -1 as the *size* indicates that the function must itself "
"compute the length, using wcslen. Return *NULL* on failure."
msgstr ""

#: ../../../c-api/unicode.rst:479
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  At "
"most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing 0-termination character).  Return the number of :c:type:`wchar_t` "
"characters copied or -1 in case of an error.  Note that the resulting :c:"
"type:`wchar_t` string may or may not be 0-terminated.  It is the "
"responsibility of the caller to make sure that the :c:type:`wchar_t` string "
"is 0-terminated in case this is required by the application. Also, note that "
"the :c:type:`wchar_t*` string might contain null characters, which would "
"cause the string to be truncated when used with most C functions."
msgstr ""

#: ../../../c-api/unicode.rst:492
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a nul character. If *size* is not *NULL*, write the number "
"of wide characters (excluding the trailing 0-termination character) into "
"*\\*size*."
msgstr ""

#: ../../../c-api/unicode.rst:497
msgid ""
"Returns a buffer allocated by :c:func:`PyMem_Alloc` (use :c:func:"
"`PyMem_Free` to free it) on success. On error, returns *NULL*, *\\*size* is "
"undefined and raises a :exc:`MemoryError`. Note that the resulting :c:type:"
"`wchar_t*` string might contain null characters, which would cause the "
"string to be truncated when used with most C functions."
msgstr ""

#: ../../../c-api/unicode.rst:509
msgid "Built-in Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:511
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: ../../../c-api/unicode.rst:514
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

#: ../../../c-api/unicode.rst:518
msgid ""
"Setting encoding to *NULL* causes the default encoding to be used which is "
"ASCII.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the variable :c:data:"
"`Py_FileSystemDefaultEncoding` internally. This variable should be treated "
"as read-only: on some systems, it will be a pointer to a static string, on "
"others, it will change at run-time (such as when the application invokes "
"setlocale)."
msgstr ""

#: ../../../c-api/unicode.rst:526
msgid ""
"Error handling is set by errors which may also be set to *NULL* meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../../../c-api/unicode.rst:530
msgid ""
"The codecs all use a similar interface.  Only deviation from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../../../c-api/unicode.rst:535
msgid "Generic Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:537
msgid "These are the generic codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:542
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`unicode` built-in function.  The codec to be used is "
"looked up using the Python codec registry.  Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:551
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return a "
"Python bytes object.  *encoding* and *errors* have the same meaning as the "
"parameters of the same name in the Unicode :meth:`encode` method.  The codec "
"to be used is looked up using the Python codec registry.  Return *NULL* if "
"an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:560
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`encode` method. The codec to be used is looked up "
"using the Python codec registry. Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../../c-api/unicode.rst:568
msgid "UTF-8 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:570
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:575
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:581
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not *NULL*, trailing incomplete UTF-8 byte sequences will not "
"be treated as an error. Those bytes will not be decoded and the number of "
"bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../../c-api/unicode.rst:589
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using UTF-8 "
"and return a Python bytes object.  Return *NULL* if an exception was raised "
"by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:596
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:602
msgid "UTF-32 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:604
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:609
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../../c-api/unicode.rst:613 ../../../c-api/unicode.rst:681
msgid ""
"If *byteorder* is non-*NULL*, the decoder starts decoding using the given "
"byte order::"
msgstr ""

#: ../../../c-api/unicode.rst:620
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: ../../../c-api/unicode.rst:625 ../../../c-api/unicode.rst:694
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

#: ../../../c-api/unicode.rst:628
msgid ""
"In a narrow build codepoints outside the BMP will be decoded as surrogate "
"pairs."
msgstr ""

#: ../../../c-api/unicode.rst:630 ../../../c-api/unicode.rst:697
msgid "If *byteorder* is *NULL*, the codec starts in native order mode."
msgstr ""

#: ../../../c-api/unicode.rst:632 ../../../c-api/unicode.rst:659
#: ../../../c-api/unicode.rst:699 ../../../c-api/unicode.rst:727
msgid "Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:637
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../../c-api/unicode.rst:646
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../../../c-api/unicode.rst:653 ../../../c-api/unicode.rst:720
msgid ""
"If byteorder is ``0``, the output string will always start with the Unicode "
"BOM mark (U+FEFF). In the other two modes, no BOM mark is prepended."
msgstr ""

#: ../../../c-api/unicode.rst:656
msgid ""
"If *Py_UNICODE_WIDE* is not defined, surrogate pairs will be output as a "
"single codepoint."
msgstr ""

#: ../../../c-api/unicode.rst:664
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:670
msgid "UTF-16 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:672
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:677
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-*NULL*) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../../c-api/unicode.rst:688
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: ../../../c-api/unicode.rst:704
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

#: ../../../c-api/unicode.rst:713
msgid ""
"Return a Python bytes object holding the UTF-16 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../../../c-api/unicode.rst:723
msgid ""
"If *Py_UNICODE_WIDE* is defined, a single :c:type:`Py_UNICODE` value may get "
"represented as a surrogate pair. If it is not defined, each :c:type:"
"`Py_UNICODE` values is interpreted as an UCS-2 character."
msgstr ""

#: ../../../c-api/unicode.rst:732
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:738
msgid "UTF-7 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:740
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:745
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:751
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not *NULL*, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../../c-api/unicode.rst:759
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../../c-api/unicode.rst:763
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for "
"the Python \"utf-7\" codec."
msgstr ""

#: ../../../c-api/unicode.rst:770
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:772
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:777
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:783
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a Python string object.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:790
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as Python "
"string object.  Error handling is \"strict\". Return *NULL* if an exception "
"was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:796
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:798
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:803
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:809
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-Unicode-"
"Escape and return a Python string object.  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:816
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as "
"Python string object. Error handling is \"strict\". Return *NULL* if an "
"exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:822
msgid "Latin-1 Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:824
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: ../../../c-api/unicode.rst:830
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:836
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../../c-api/unicode.rst:843
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:849
msgid "ASCII Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:851
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../../../c-api/unicode.rst:857
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*s*.  Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:863
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../../c-api/unicode.rst:870
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:876
msgid "Character Map Codecs"
msgstr ""

#: ../../../c-api/unicode.rst:878
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mapping to "
"encode and decode characters."
msgstr ""

#: ../../../c-api/unicode.rst:883
msgid ""
"Decoding mappings must map single string characters to single Unicode "
"characters, integers (which are then interpreted as Unicode ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../../../c-api/unicode.rst:887
msgid ""
"Encoding mappings must map single Unicode characters to single string "
"characters, integers (which are then interpreted as Latin-1 ordinals) or "
"None (meaning \"undefined mapping\" and causing an error)."
msgstr ""

#: ../../../c-api/unicode.rst:891
msgid ""
"The mapping objects provided must only support the __getitem__ mapping "
"interface."
msgstr ""

#: ../../../c-api/unicode.rst:894
msgid ""
"If a character lookup fails with a LookupError, the character is copied as-"
"is meaning that its ordinal value will be interpreted as Unicode or Latin-1 "
"ordinal resp. Because of this, mappings only need to contain those mappings "
"which map characters to different code points."
msgstr ""

#: ../../../c-api/unicode.rst:899
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../../../c-api/unicode.rst:903
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return *NULL* if an exception was raised "
"by the codec. If *mapping* is *NULL* latin-1 decoding will be done. Else it "
"can be a dictionary mapping byte or a unicode string, which is treated as a "
"lookup table. Byte values greater that the length of the string and U+FFFE "
"\"characters\" are treated as \"undefined mapping\"."
msgstr ""

#: ../../../c-api/unicode.rst:913
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the given "
"*mapping* object and return a Python string object. Return *NULL* if an "
"exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:920
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as Python string object.  Error handling is \"strict\".  Return "
"*NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:924
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../../../c-api/unicode.rst:929
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a "
"character mapping *table* to it and return the resulting Unicode object.  "
"Return *NULL* when an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:933
msgid ""
"The *mapping* table must map Unicode ordinal integers to Unicode ordinal "
"integers or None (causing deletion of the character)."
msgstr ""

#: ../../../c-api/unicode.rst:936 ../../../c-api/unicode.rst:1022
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../../../c-api/unicode.rst:943
msgid "MBCS codecs for Windows"
msgstr ""

#: ../../../c-api/unicode.rst:945
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: ../../../c-api/unicode.rst:952
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return *NULL* if an exception was raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:958
msgid ""
"If *consumed* is *NULL*, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not *NULL*, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

#: ../../../c-api/unicode.rst:966
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and "
"return a Python bytes object.  Return *NULL* if an exception was raised by "
"the codec."
msgstr ""

#: ../../../c-api/unicode.rst:973
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return *NULL* if an exception was "
"raised by the codec."
msgstr ""

#: ../../../c-api/unicode.rst:979
msgid "Methods & Slots"
msgstr ""

#: ../../../c-api/unicode.rst:985
msgid "Methods and Slot Functions"
msgstr ""

#: ../../../c-api/unicode.rst:987
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../../../c-api/unicode.rst:991
msgid "They all return *NULL* or ``-1`` if an exception occurs."
msgstr ""

#: ../../../c-api/unicode.rst:996
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: ../../../c-api/unicode.rst:1001
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is *NULL*, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

#: ../../../c-api/unicode.rst:1009
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is 0, the Line break "
"characters are not included in the resulting strings."
msgstr ""

#: ../../../c-api/unicode.rst:1016
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object."
msgstr ""

#: ../../../c-api/unicode.rst:1019
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or None (causing deletion of the character)."
msgstr ""

#: ../../../c-api/unicode.rst:1026
msgid ""
"*errors* has the usual meaning for codecs. It may be *NULL* which indicates "
"to use the default error handling."
msgstr ""

#: ../../../c-api/unicode.rst:1032
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: ../../../c-api/unicode.rst:1038
msgid ""
"Return 1 if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == -1 means to do a prefix match, *direction* == 1 a suffix "
"match), 0 otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../../c-api/unicode.rst:1045
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == 1 means to do a forward search, *direction* == "
"-1 a backward search).  The return value is the index of the first match; a "
"value of ``-1`` indicates that no match was found, and ``-2`` indicates that "
"an error occurred and an exception has been set."
msgstr ""

#: ../../../c-api/unicode.rst:1054
msgid ""
"Return the number of non-overlapping occurrences of *substr* in ``str[start:"
"end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: ../../../c-api/unicode.rst:1060
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == -1 means replace all "
"occurrences."
msgstr ""

#: ../../../c-api/unicode.rst:1067
msgid ""
"Compare two strings and return -1, 0, 1 for less than, equal, and greater "
"than, respectively."
msgstr ""

#: ../../../c-api/unicode.rst:1073
msgid ""
"Compare a unicode object, *uni*, with *string* and return -1, 0, 1 for less "
"than, equal, and greater than, respectively. It is best to pass only ASCII-"
"encoded strings, but the function interprets the input string as ISO-8859-1 "
"if it contains non-ASCII characters\"."
msgstr ""

#: ../../../c-api/unicode.rst:1081
msgid "Rich compare two unicode strings and return one of the following:"
msgstr ""

#: ../../../c-api/unicode.rst:1083
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: ../../../c-api/unicode.rst:1084
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ""

#: ../../../c-api/unicode.rst:1085
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../../../c-api/unicode.rst:1087
msgid ""
"Note that :const:`Py_EQ` and :const:`Py_NE` comparisons can cause a :exc:"
"`UnicodeWarning` in case the conversion of the arguments to Unicode fails "
"with a :exc:`UnicodeDecodeError`."
msgstr ""

#: ../../../c-api/unicode.rst:1091
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, :const:"
"`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr ""

#: ../../../c-api/unicode.rst:1097
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``.  The *args* argument must be a tuple."
msgstr ""

#: ../../../c-api/unicode.rst:1103
msgid ""
"Check whether *element* is contained in *container* and return true or false "
"accordingly."
msgstr ""

#: ../../../c-api/unicode.rst:1106
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: ../../../c-api/unicode.rst:1112
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python unicode string object.  If there "
"is an existing interned string that is the same as *\\*string*, it sets "
"*\\*string* to it (decrementing the reference count of the old string object "
"and incrementing the reference count of the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (incrementing its "
"reference count). (Clarification: even though there is a lot of talk about "
"reference counts, think of this function as reference-count-neutral; you own "
"the object after the call if and only if you owned it before the call.)"
msgstr ""

#: ../../../c-api/unicode.rst:1125
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, returning either a new unicode string object that "
"has been interned, or a new (\"owned\") reference to an earlier interned "
"string object with the same value."
msgstr ""
