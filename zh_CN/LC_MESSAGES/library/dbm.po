# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ""

#: ../../../library/dbm.rst:12
msgid ":mod:`dbm` is a generic interface to variants of the DBM database ---"
msgstr ""

#: ../../../library/dbm.rst:8
msgid ""
":mod:`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, "
"the slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <http://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkely DB."
msgstr ""

#: ../../../library/dbm.rst:16
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""

#: ../../../library/dbm.rst:23
msgid ""
"This functionattempts to guess which of the several simple database modules "
"available --- :mod:`dbm.bsd`, :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm."
"dumb` --- should be used to open a given file."
msgstr ""

#: ../../../library/dbm.rst:27
msgid ""
"Returns one of the following values: ``None`` if the file can't be opened "
"because it's unreadable or doesn't exist; the empty string (``''``) if the "
"file's format can't be guessed; or a string containing the required module "
"name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``."
msgstr ""

#: ../../../library/dbm.rst:35
msgid "Open the database file *filename* and return a corresponding object."
msgstr ""

#: ../../../library/dbm.rst:37
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first module listed above that can be imported is used."
msgstr ""

#: ../../../library/dbm.rst:41
msgid ""
"The optional *flag* argument can be ``'r'`` to open an existing database for "
"reading only, ``'w'`` to open an existing database for reading and writing, "
"``'c'`` to create the database if it doesn't exist, or ``'n'``, which will "
"always create a new empty database.  If not specified, the default value is "
"``'r'``."
msgstr ""

#: ../../../library/dbm.rst:47 ../../../library/dbm.rst:259
#: ../../../library/dbm.rst:304
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666`` (and will be "
"modified by the prevailing umask)."
msgstr ""

#: ../../../library/dbm.rst:52
msgid ""
"The object returned by :func:`open` supports most of the same functionality "
"as dictionaries; keys and their corresponding values can be stored, "
"retrieved, and deleted, and the :keyword:`in` operator and the :meth:`keys` "
"method are available. Key and values are always stored as bytes. This means "
"that when strings are used they are implicitly converted to the default "
"encoding before being stored."
msgstr ""

#: ../../../library/dbm.rst:59
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""

#: ../../../library/dbm.rst:92
msgid "Module :mod:`shelve`"
msgstr ""

#: ../../../library/dbm.rst:93
msgid "Persistence module which stores non-string data."
msgstr ""

#: ../../../library/dbm.rst:96
msgid "The individual submodules are described in the following sections."
msgstr ""

#: ../../../library/dbm.rst:100
msgid ":mod:`dbm.gnu` --- GNU's reinterpretation of dbm"
msgstr ""

#: ../../../library/dbm.rst:107
msgid ""
"This module is quite similar to the :mod:`dbm` module, but uses the GNU "
"library ``gdbm`` instead to provide some additional functionality.  Please "
"note that the file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible."
msgstr ""

#: ../../../library/dbm.rst:111
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the GNU DBM library. "
"``dbm.gnu.gdbm`` objects behave like mappings (dictionaries), except that "
"keys and values are always converted to bytes before storing.  Printing a "
"``gdbm`` object doesn't print the keys and values, and the :meth:`items` "
"and :meth:`values` methods are not supported."
msgstr ""

#: ../../../library/dbm.rst:120
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../../library/dbm.rst:126
msgid ""
"Open a ``gdbm`` database and return a :class:`gdbm` object.  The *filename* "
"argument is the name of the database file."
msgstr ""

#: ../../../library/dbm.rst:129
msgid "The optional *flag* argument can be:"
msgstr ""

#: ../../../library/dbm.rst:132 ../../../library/dbm.rst:151
#: ../../../library/dbm.rst:244
msgid "Value"
msgstr ""

#: ../../../library/dbm.rst:132 ../../../library/dbm.rst:151
#: ../../../library/dbm.rst:244
msgid "Meaning"
msgstr ""

#: ../../../library/dbm.rst:134 ../../../library/dbm.rst:246
msgid "``'r'``"
msgstr ""

#: ../../../library/dbm.rst:134 ../../../library/dbm.rst:246
msgid "Open existing database for reading only (default)"
msgstr ""

#: ../../../library/dbm.rst:137 ../../../library/dbm.rst:249
msgid "``'w'``"
msgstr ""

#: ../../../library/dbm.rst:137 ../../../library/dbm.rst:249
msgid "Open existing database for reading and writing"
msgstr ""

#: ../../../library/dbm.rst:140 ../../../library/dbm.rst:252
msgid "``'c'``"
msgstr ""

#: ../../../library/dbm.rst:140 ../../../library/dbm.rst:252
msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr ""

#: ../../../library/dbm.rst:143 ../../../library/dbm.rst:255
msgid "``'n'``"
msgstr ""

#: ../../../library/dbm.rst:143 ../../../library/dbm.rst:255
msgid "Always create a new, empty database, open for reading and writing"
msgstr ""

#: ../../../library/dbm.rst:147
msgid ""
"The following additional characters may be appended to the flag to control "
"how the database is opened:"
msgstr ""

#: ../../../library/dbm.rst:153
msgid "``'f'``"
msgstr ""

#: ../../../library/dbm.rst:153
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr ""

#: ../../../library/dbm.rst:156
msgid "``'s'``"
msgstr ""

#: ../../../library/dbm.rst:156
msgid ""
"Synchronized mode. This will cause changes to the database to be immediately "
"written to the file."
msgstr ""

#: ../../../library/dbm.rst:160
msgid "``'u'``"
msgstr ""

#: ../../../library/dbm.rst:160
msgid "Do not lock database."
msgstr ""

#: ../../../library/dbm.rst:163
msgid ""
"Not all flags are valid for all versions of ``gdbm``.  The module constant :"
"const:`open_flags` is a string of supported flag characters.  The exception :"
"exc:`error` is raised if an invalid flag is specified."
msgstr ""

#: ../../../library/dbm.rst:167
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666``."
msgstr ""

#: ../../../library/dbm.rst:170
msgid ""
"In addition to the dictionary-like methods, ``gdbm`` objects have the "
"following methods:"
msgstr ""

#: ../../../library/dbm.rst:175
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by ``gdbm``'s internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: ../../../library/dbm.rst:182
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""

#: ../../../library/dbm.rst:193
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the ``gdbm`` file, this routine will reorganize the database.  "
"``gdbm`` objects will not shorten the length of a database file except by "
"using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: ../../../library/dbm.rst:201
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""

#: ../../../library/dbm.rst:206
msgid ":mod:`dbm.ndbm` --- Interface based on ndbm"
msgstr ""

#: ../../../library/dbm.rst:213
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the Unix \"(n)dbm\" "
"library. Dbm objects behave like mappings (dictionaries), except that keys "
"and values are always stored as bytes. Printing a ``dbm`` object doesn't "
"print the keys and values, and the :meth:`items` and :meth:`values` methods "
"are not supported."
msgstr ""

#: ../../../library/dbm.rst:218
msgid ""
"This module can be used with the \"classic\" ndbm interface, the BSD DB "
"compatibility interface, or the GNU GDBM compatibility interface. On Unix, "
"the :program:`configure` script will attempt to locate the appropriate "
"header file to simplify building this module."
msgstr ""

#: ../../../library/dbm.rst:225
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../../library/dbm.rst:231
msgid "Name of the ``ndbm`` implementation library used."
msgstr ""

#: ../../../library/dbm.rst:236
msgid ""
"Open a dbm database and return a ``dbm`` object.  The *filename* argument is "
"the name of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions; note that the BSD DB implementation of the interface will append "
"the extension :file:`.db` and only create one file)."
msgstr ""

#: ../../../library/dbm.rst:241
msgid "The optional *flag* argument must be one of these values:"
msgstr ""

#: ../../../library/dbm.rst:266
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ""

#: ../../../library/dbm.rst:275
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""

#: ../../../library/dbm.rst:280
msgid ""
"The :mod:`dbm.dumb` module provides a persistent dictionary-like interface "
"which is written entirely in Python.  Unlike other modules such as :mod:`dbm."
"gnu` no external library is required.  As with other persistent mappings, "
"the keys and values are always stored as bytes."
msgstr ""

#: ../../../library/dbm.rst:285
msgid "The module defines the following:"
msgstr ""

#: ../../../library/dbm.rst:290
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""

#: ../../../library/dbm.rst:296
msgid ""
"Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* "
"argument is the basename of the database file (without any specific "
"extensions).  When a dumbdbm database is created, files with :file:`.dat` "
"and :file:`.dir` extensions are created."
msgstr ""

#: ../../../library/dbm.rst:301
msgid ""
"The optional *flag* argument is currently ignored; the database is always "
"opened for update, and will be created if it does not exist."
msgstr ""

#: ../../../library/dbm.rst:308
msgid ""
"In addition to the methods provided by the :class:`collections."
"MutableMapping` class, :class:`dumbdbm` objects provide the following method:"
msgstr ""

#: ../../../library/dbm.rst:313
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""

#: ../../../library/dbm.rst:271
msgid "databases"
msgstr ""
