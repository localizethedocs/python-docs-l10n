# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/profile.rst:6
msgid "The Python Profilers"
msgstr ""

#: ../../../library/profile.rst:13
msgid "Copyright © 1994, by InfoSeek Corporation, all rights reserved."
msgstr ""

#: ../../../library/profile.rst:15
msgid "Written by James Roskind. [#]_"
msgstr ""

#: ../../../library/profile.rst:17
msgid ""
"Permission to use, copy, modify, and distribute this Python software and its "
"associated documentation for any purpose (subject to the restriction in the "
"following sentence) without fee is hereby granted, provided that the above "
"copyright notice appears in all copies, and that both that copyright notice "
"and this permission notice appear in supporting documentation, and that the "
"name of InfoSeek not be used in advertising or publicity pertaining to "
"distribution of the software without specific, written prior permission.  "
"This permission is explicitly restricted to the copying and modification of "
"the software to remain in Python, compiled Python, or other languages (such "
"as C) wherein the modified or derived code is exclusively imported into a "
"Python module."
msgstr ""

#: ../../../library/profile.rst:28
msgid ""
"INFOSEEK CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, "
"INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT "
"SHALL INFOSEEK CORPORATION BE LIABLE FOR ANY SPECIAL, INDIRECT OR "
"CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, "
"DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER "
"TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE "
"OF THIS SOFTWARE."
msgstr ""

#: ../../../library/profile.rst:38
msgid "Introduction to the profilers"
msgstr ""

#: ../../../library/profile.rst:44
msgid ""
"A :dfn:`profiler` is a program that describes the run time performance of a "
"program, providing a variety of statistics.  This documentation describes "
"the profiler functionality provided in the modules :mod:`cProfile`, :mod:"
"`profile` and :mod:`pstats`.  This profiler provides :dfn:`deterministic "
"profiling` of Python programs.  It also provides a series of report "
"generation tools to allow users to rapidly examine the results of a profile "
"operation."
msgstr ""

#: ../../../library/profile.rst:52
msgid "The Python standard library provides two different profilers:"
msgstr ""

#: ../../../library/profile.rst:54
msgid ""
":mod:`cProfile` is recommended for most users; it's a C extension with "
"reasonable overhead that makes it suitable for profiling long-running "
"programs. Based on :mod:`lsprof`, contributed by Brett Rosen and Ted Czotter."
msgstr ""

#: ../../../library/profile.rst:60
msgid ""
":mod:`profile`, a pure Python module whose interface is imitated by :mod:"
"`cProfile`.  Adds significant overhead to profiled programs. If you're "
"trying to extend the profiler in some way, the task might be easier with "
"this module. Copyright © 1994, by InfoSeek Corporation."
msgstr ""

#: ../../../library/profile.rst:66
msgid ""
"The :mod:`profile` and :mod:`cProfile` modules export the same interface, so "
"they are mostly interchangeable; :mod:`cProfile` has a much lower overhead "
"but is newer and might not be available on all systems. :mod:`cProfile` is "
"really a compatibility layer on top of the internal :mod:`_lsprof` module."
msgstr ""

#: ../../../library/profile.rst:76
msgid "Instant User's Manual"
msgstr ""

#: ../../../library/profile.rst:78
msgid ""
"This section is provided for users that \"don't want to read the manual.\" "
"It provides a very brief overview, and allows a user to rapidly perform "
"profiling on an existing application."
msgstr ""

#: ../../../library/profile.rst:82
msgid ""
"To profile an application with a main entry point of :func:`foo`, you would "
"add the following to your module::"
msgstr ""

#: ../../../library/profile.rst:88
msgid ""
"(Use :mod:`profile` instead of :mod:`cProfile` if the latter is not "
"available on your system.)"
msgstr ""

#: ../../../library/profile.rst:91
msgid ""
"The above action would cause :func:`foo` to be run, and a series of "
"informative lines (the profile) to be printed.  The above approach is most "
"useful when working with the interpreter.  If you would like to save the "
"results of a profile into a file for later examination, you can supply a "
"file name as the second argument to the :func:`run` function::"
msgstr ""

#: ../../../library/profile.rst:100
msgid ""
"The file :file:`cProfile.py` can also be invoked as a script to profile "
"another script.  For example::"
msgstr ""

#: ../../../library/profile.rst:105
msgid ""
":file:`cProfile.py` accepts two optional arguments on the command line::"
msgstr ""

#: ../../../library/profile.rst:109
msgid ""
":option:`-s` only applies to standard output (:option:`-o` is not supplied). "
"Look in the :class:`Stats` documentation for valid sort values."
msgstr ""

#: ../../../library/profile.rst:112
msgid ""
"When you wish to review the profile, you should use the methods in the :mod:"
"`pstats` module.  Typically you would load the statistics data as follows::"
msgstr ""

#: ../../../library/profile.rst:118
msgid ""
"The class :class:`Stats` (the above code just created an instance of this "
"class) has a variety of methods for manipulating and printing the data that "
"was just read into ``p``.  When you ran :func:`cProfile.run` above, what was "
"printed was the result of three method calls::"
msgstr ""

#: ../../../library/profile.rst:125
msgid ""
"The first method removed the extraneous path from all the module names. The "
"second method sorted all the entries according to the standard module/line/"
"name string that is printed. The third method printed out all the "
"statistics.  You might try the following sort calls:"
msgstr ""

#: ../../../library/profile.rst:137
msgid ""
"The first call will actually sort the list by function name, and the second "
"call will print out the statistics.  The following are some interesting "
"calls to experiment with::"
msgstr ""

#: ../../../library/profile.rst:143
msgid ""
"This sorts the profile by cumulative time in a function, and then only "
"prints the ten most significant lines.  If you want to understand what "
"algorithms are taking time, the above line is what you would use."
msgstr ""

#: ../../../library/profile.rst:147
msgid ""
"If you were looking to see what functions were looping a lot, and taking a "
"lot of time, you would do::"
msgstr ""

#: ../../../library/profile.rst:152
msgid ""
"to sort according to time spent within each function, and then print the "
"statistics for the top ten functions."
msgstr ""

#: ../../../library/profile.rst:155
msgid "You might also try::"
msgstr ""

#: ../../../library/profile.rst:159
msgid ""
"This will sort all the statistics by file name, and then print out "
"statistics for only the class init methods (since they are spelled with "
"``__init__`` in them).  As one final example, you could try::"
msgstr ""

#: ../../../library/profile.rst:165
msgid ""
"This line sorts statistics with a primary key of time, and a secondary key "
"of cumulative time, and then prints out some of the statistics. To be "
"specific, the list is first culled down to 50% (re: ``.5``) of its original "
"size, then only lines containing ``init`` are maintained, and that sub-sub-"
"list is printed."
msgstr ""

#: ../../../library/profile.rst:170
msgid ""
"If you wondered what functions called the above functions, you could now "
"(``p`` is still sorted according to the last criteria) do::"
msgstr ""

#: ../../../library/profile.rst:175
msgid "and you would get a list of callers for each of the listed functions."
msgstr ""

#: ../../../library/profile.rst:177
msgid ""
"If you want more functionality, you're going to have to read the manual, or "
"guess what the following functions do::"
msgstr ""

#: ../../../library/profile.rst:183
msgid ""
"Invoked as a script, the :mod:`pstats` module is a statistics browser for "
"reading and examining profile dumps.  It has a simple line-oriented "
"interface (implemented using :mod:`cmd`) and interactive help."
msgstr ""

#: ../../../library/profile.rst:191
msgid "What Is Deterministic Profiling?"
msgstr ""

#: ../../../library/profile.rst:193
msgid ""
":dfn:`Deterministic profiling` is meant to reflect the fact that all "
"*function call*, *function return*, and *exception* events are monitored, "
"and precise timings are made for the intervals between these events (during "
"which time the user's code is executing).  In contrast, :dfn:`statistical "
"profiling` (which is not done by this module) randomly samples the effective "
"instruction pointer, and deduces where time is being spent.  The latter "
"technique traditionally involves less overhead (as the code does not need to "
"be instrumented), but provides only relative indications of where time is "
"being spent."
msgstr ""

#: ../../../library/profile.rst:202
msgid ""
"In Python, since there is an interpreter active during execution, the "
"presence of instrumented code is not required to do deterministic "
"profiling.  Python automatically provides a :dfn:`hook` (optional callback) "
"for each event.  In addition, the interpreted nature of Python tends to add "
"so much overhead to execution, that deterministic profiling tends to only "
"add small processing overhead in typical applications.  The result is that "
"deterministic profiling is not that expensive, yet provides extensive run "
"time statistics about the execution of a Python program."
msgstr ""

#: ../../../library/profile.rst:211
msgid ""
"Call count statistics can be used to identify bugs in code (surprising "
"counts), and to identify possible inline-expansion points (high call "
"counts).  Internal time statistics can be used to identify \"hot loops\" "
"that should be carefully optimized.  Cumulative time statistics should be "
"used to identify high level errors in the selection of algorithms.  Note "
"that the unusual handling of cumulative times in this profiler allows "
"statistics for recursive implementations of algorithms to be directly "
"compared to iterative implementations."
msgstr ""

#: ../../../library/profile.rst:222
msgid "Reference Manual -- :mod:`profile` and :mod:`cProfile`"
msgstr ""

#: ../../../library/profile.rst:228
msgid ""
"The primary entry point for the profiler is the global function :func:"
"`profile.run` (resp. :func:`cProfile.run`). It is typically used to create "
"any profile information.  The reports are formatted and printed using "
"methods of the class :class:`pstats.Stats`.  The following is a description "
"of all of these standard entry points and functions.  For a more in-depth "
"view of some of the code, consider reading the later section on Profiler "
"Extensions, which includes discussion of how to derive \"better\" profilers "
"from the classes presented, or reading the source code for these modules."
msgstr ""

#: ../../../library/profile.rst:240
msgid ""
"This function takes a single argument that can be passed to the :func:`exec` "
"function, and an optional file name.  In all cases this routine attempts to :"
"func:`exec` its first argument, and gather profiling statistics from the "
"execution. If no file name is present, then this function automatically "
"prints a simple profiling report, sorted by the standard name string (file/"
"line/function-name) that is presented in each line.  The following is a "
"typical output from such a call::"
msgstr ""

#: ../../../library/profile.rst:257
msgid ""
"The first line indicates that 2706 calls were monitored.  Of those calls, "
"2004 were :dfn:`primitive`.  We define :dfn:`primitive` to mean that the "
"call was not induced via recursion. The next line: ``Ordered by: standard "
"name``, indicates that the text string in the far right column was used to "
"sort the output. The column headings include:"
msgstr ""

#: ../../../library/profile.rst:264
msgid "ncalls"
msgstr ""

#: ../../../library/profile.rst:264
msgid "for the number of calls,"
msgstr ""

#: ../../../library/profile.rst:268
msgid "tottime"
msgstr ""

#: ../../../library/profile.rst:267
msgid ""
"for the total time spent in the given function (and excluding time made in "
"calls to sub-functions),"
msgstr ""

#: ../../../library/profile.rst:271 ../../../library/profile.rst:278
msgid "percall"
msgstr ""

#: ../../../library/profile.rst:271
msgid "is the quotient of ``tottime`` divided by ``ncalls``"
msgstr ""

#: ../../../library/profile.rst:275
msgid "cumtime"
msgstr ""

#: ../../../library/profile.rst:274
msgid ""
"is the total time spent in this and all subfunctions (from invocation till "
"exit). This figure is accurate *even* for recursive functions."
msgstr ""

#: ../../../library/profile.rst:278
msgid "is the quotient of ``cumtime`` divided by primitive calls"
msgstr ""

#: ../../../library/profile.rst:281
msgid "filename:lineno(function)"
msgstr ""

#: ../../../library/profile.rst:281
msgid "provides the respective data of each function"
msgstr ""

#: ../../../library/profile.rst:283
msgid ""
"When there are two numbers in the first column (for example, ``43/3``), then "
"the latter is the number of primitive calls, and the former is the actual "
"number of calls.  Note that when the function does not recurse, these two "
"values are the same, and only the single figure is printed."
msgstr ""

#: ../../../library/profile.rst:291
msgid ""
"This function is similar to :func:`run`, with added arguments to supply the "
"globals and locals dictionaries for the *command* string."
msgstr ""

#: ../../../library/profile.rst:294
msgid "Analysis of the profiler data is done using the :class:`Stats` class."
msgstr ""

#: ../../../library/profile.rst:298
msgid "The :class:`Stats` class is defined in the :mod:`pstats` module."
msgstr ""

#: ../../../library/profile.rst:307
msgid ""
"This class constructor creates an instance of a \"statistics object\" from a "
"*filename* (or set of filenames).  :class:`Stats` objects are manipulated by "
"methods, in order to print useful reports.  You may specify an alternate "
"output stream by giving the keyword argument, ``stream``."
msgstr ""

#: ../../../library/profile.rst:312
msgid ""
"The file selected by the above constructor must have been created by the "
"corresponding version of :mod:`profile` or :mod:`cProfile`.  To be specific, "
"there is *no* file compatibility guaranteed with future versions of this "
"profiler, and there is no compatibility with files produced by other "
"profilers. If several files are provided, all the statistics for identical "
"functions will be coalesced, so that an overall view of several processes "
"can be considered in a single report.  If additional files need to be "
"combined with data in an existing :class:`Stats` object, the :meth:`add` "
"method can be used."
msgstr ""

#: ../../../library/profile.rst:327
msgid "The :class:`Stats` Class"
msgstr ""

#: ../../../library/profile.rst:329
msgid ":class:`Stats` objects have the following methods:"
msgstr ""

#: ../../../library/profile.rst:334
msgid ""
"This method for the :class:`Stats` class removes all leading path "
"information from file names.  It is very useful in reducing the size of the "
"printout to fit within (close to) 80 columns.  This method modifies the "
"object, and the stripped information is lost.  After performing a strip "
"operation, the object is considered to have its entries in a \"random\" "
"order, as it was just after object initialization and loading.  If :meth:"
"`strip_dirs` causes two function names to be indistinguishable (they are on "
"the same line of the same filename, and have the same function name), then "
"the statistics for these two entries are accumulated into a single entry."
msgstr ""

#: ../../../library/profile.rst:347
msgid ""
"This method of the :class:`Stats` class accumulates additional profiling "
"information into the current profiling object.  Its arguments should refer "
"to filenames created by the corresponding version of :func:`profile.run` or :"
"func:`cProfile.run`. Statistics for identically named (re: file, line, name) "
"functions are automatically accumulated into single function statistics."
msgstr ""

#: ../../../library/profile.rst:356
msgid ""
"Save the data loaded into the :class:`Stats` object to a file named "
"*filename*. The file is created if it does not exist, and is overwritten if "
"it already exists.  This is equivalent to the method of the same name on "
"the :class:`profile.Profile` and :class:`cProfile.Profile` classes."
msgstr ""

#: ../../../library/profile.rst:364
msgid ""
"This method modifies the :class:`Stats` object by sorting it according to "
"the supplied criteria.  The argument is typically a string identifying the "
"basis of a sort (example: ``'time'`` or ``'name'``)."
msgstr ""

#: ../../../library/profile.rst:368
msgid ""
"When more than one key is provided, then additional keys are used as "
"secondary criteria when there is equality in all keys selected before them.  "
"For example, ``sort_stats('name', 'file')`` will sort all the entries "
"according to their function name, and resolve all ties (identical function "
"names) by sorting by file name."
msgstr ""

#: ../../../library/profile.rst:374
msgid ""
"Abbreviations can be used for any key names, as long as the abbreviation is "
"unambiguous.  The following are the keys currently defined:"
msgstr ""

#: ../../../library/profile.rst:378
msgid "Valid Arg"
msgstr ""

#: ../../../library/profile.rst:378
msgid "Meaning"
msgstr ""

#: ../../../library/profile.rst:380
msgid "``'calls'``"
msgstr ""

#: ../../../library/profile.rst:380
msgid "call count"
msgstr ""

#: ../../../library/profile.rst:382
msgid "``'cumulative'``"
msgstr ""

#: ../../../library/profile.rst:382
msgid "cumulative time"
msgstr ""

#: ../../../library/profile.rst:384
msgid "``'file'``"
msgstr ""

#: ../../../library/profile.rst:384 ../../../library/profile.rst:386
msgid "file name"
msgstr ""

#: ../../../library/profile.rst:386
msgid "``'module'``"
msgstr ""

#: ../../../library/profile.rst:388
msgid "``'pcalls'``"
msgstr ""

#: ../../../library/profile.rst:388
msgid "primitive call count"
msgstr ""

#: ../../../library/profile.rst:390
msgid "``'line'``"
msgstr ""

#: ../../../library/profile.rst:390
msgid "line number"
msgstr ""

#: ../../../library/profile.rst:392
msgid "``'name'``"
msgstr ""

#: ../../../library/profile.rst:392
msgid "function name"
msgstr ""

#: ../../../library/profile.rst:394
msgid "``'nfl'``"
msgstr ""

#: ../../../library/profile.rst:394
msgid "name/file/line"
msgstr ""

#: ../../../library/profile.rst:396
msgid "``'stdname'``"
msgstr ""

#: ../../../library/profile.rst:396
msgid "standard name"
msgstr ""

#: ../../../library/profile.rst:398
msgid "``'time'``"
msgstr ""

#: ../../../library/profile.rst:398
msgid "internal time"
msgstr ""

#: ../../../library/profile.rst:401
msgid ""
"Note that all sorts on statistics are in descending order (placing most time "
"consuming items first), where as name, file, and line number searches are in "
"ascending order (alphabetical). The subtle distinction between ``'nfl'`` and "
"``'stdname'`` is that the standard name is a sort of the name as printed, "
"which means that the embedded line numbers get compared in an odd way.  For "
"example, lines 3, 20, and 40 would (if the file names were the same) appear "
"in the string order 20, 3 and 40.  In contrast, ``'nfl'`` does a numeric "
"compare of the line numbers.  In fact, ``sort_stats('nfl')`` is the same as "
"``sort_stats('name', 'file', 'line')``."
msgstr ""

#: ../../../library/profile.rst:411
msgid ""
"For backward-compatibility reasons, the numeric arguments ``-1``, ``0``, "
"``1``, and ``2`` are permitted.  They are interpreted as ``'stdname'``, "
"``'calls'``, ``'time'``, and ``'cumulative'`` respectively.  If this old "
"style format (numeric) is used, only one sort key (the numeric key) will be "
"used, and additional arguments will be silently ignored."
msgstr ""

#: ../../../library/profile.rst:422
msgid ""
"This method for the :class:`Stats` class reverses the ordering of the basic "
"list within the object.  Note that by default ascending vs descending order "
"is properly selected based on the sort key of choice."
msgstr ""

#: ../../../library/profile.rst:431
msgid ""
"This method for the :class:`Stats` class prints out a report as described in "
"the :func:`profile.run` definition."
msgstr ""

#: ../../../library/profile.rst:434
msgid ""
"The order of the printing is based on the last :meth:`sort_stats` operation "
"done on the object (subject to caveats in :meth:`add` and :meth:"
"`strip_dirs`)."
msgstr ""

#: ../../../library/profile.rst:437
msgid ""
"The arguments provided (if any) can be used to limit the list down to the "
"significant entries.  Initially, the list is taken to be the complete set of "
"profiled functions.  Each restriction is either an integer (to select a "
"count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to "
"select a percentage of lines), or a regular expression (to pattern match the "
"standard name that is printed; as of Python 1.5b1, this uses the Perl-style "
"regular expression syntax defined by the :mod:`re` module).  If several "
"restrictions are provided, then they are applied sequentially.  For example::"
msgstr ""

#: ../../../library/profile.rst:448
msgid ""
"would first limit the printing to first 10% of list, and then only print "
"functions that were part of filename :file:`.\\*foo:`.  In contrast, the "
"command::"
msgstr ""

#: ../../../library/profile.rst:454
msgid ""
"would limit the list to all functions having file names :file:`.\\*foo:`, "
"and then proceed to only print the first 10% of them."
msgstr ""

#: ../../../library/profile.rst:460
msgid ""
"This method for the :class:`Stats` class prints a list of all functions that "
"called each function in the profiled database.  The ordering is identical to "
"that provided by :meth:`print_stats`, and the definition of the restricting "
"argument is also identical.  Each caller is reported on its own line.  The "
"format differs slightly depending on the profiler that produced the stats:"
msgstr ""

#: ../../../library/profile.rst:466
msgid ""
"With :mod:`profile`, a number is shown in parentheses after each caller to "
"show how many times this specific call was made.  For convenience, a second "
"non-parenthesized number repeats the cumulative time spent in the function "
"at the right."
msgstr ""

#: ../../../library/profile.rst:471
msgid ""
"With :mod:`cProfile`, each caller is preceded by three numbers: the number "
"of times this specific call was made, and the total and cumulative times "
"spent in the current function while it was invoked by this specific caller."
msgstr ""

#: ../../../library/profile.rst:478
msgid ""
"This method for the :class:`Stats` class prints a list of all function that "
"were called by the indicated function.  Aside from this reversal of "
"direction of calls (re: called vs was called by), the arguments and ordering "
"are identical to the :meth:`print_callers` method."
msgstr ""

#: ../../../library/profile.rst:487
msgid "Limitations"
msgstr ""

#: ../../../library/profile.rst:489
msgid ""
"One limitation has to do with accuracy of timing information. There is a "
"fundamental problem with deterministic profilers involving accuracy.  The "
"most obvious restriction is that the underlying \"clock\" is only ticking at "
"a rate (typically) of about .001 seconds.  Hence no measurements will be "
"more accurate than the underlying clock.  If enough measurements are taken, "
"then the \"error\" will tend to average out. Unfortunately, removing this "
"first error induces a second source of error."
msgstr ""

#: ../../../library/profile.rst:497
msgid ""
"The second problem is that it \"takes a while\" from when an event is "
"dispatched until the profiler's call to get the time actually *gets* the "
"state of the clock.  Similarly, there is a certain lag when exiting the "
"profiler event handler from the time that the clock's value was obtained "
"(and then squirreled away), until the user's code is once again executing.  "
"As a result, functions that are called many times, or call many functions, "
"will typically accumulate this error. The error that accumulates in this "
"fashion is typically less than the accuracy of the clock (less than one "
"clock tick), but it *can* accumulate and become very significant."
msgstr ""

#: ../../../library/profile.rst:507
msgid ""
"The problem is more important with :mod:`profile` than with the lower-"
"overhead :mod:`cProfile`.  For this reason, :mod:`profile` provides a means "
"of calibrating itself for a given platform so that this error can be "
"probabilistically (on the average) removed. After the profiler is "
"calibrated, it will be more accurate (in a least square sense), but it will "
"sometimes produce negative numbers (when call counts are exceptionally low, "
"and the gods of probability work against you :-). )  Do *not* be alarmed by "
"negative numbers in the profile.  They should *only* appear if you have "
"calibrated your profiler, and the results are actually better than without "
"calibration."
msgstr ""

#: ../../../library/profile.rst:521
msgid "Calibration"
msgstr ""

#: ../../../library/profile.rst:523
msgid ""
"The profiler of the :mod:`profile` module subtracts a constant from each "
"event handling time to compensate for the overhead of calling the time "
"function, and socking away the results.  By default, the constant is 0. The "
"following procedure can be used to obtain a better constant for a given "
"platform (see discussion in section Limitations above). ::"
msgstr ""

#: ../../../library/profile.rst:534
msgid ""
"The method executes the number of Python calls given by the argument, "
"directly and again under the profiler, measuring the time for both. It then "
"computes the hidden overhead per profiler event, and returns that as a "
"float.  For example, on an 800 MHz Pentium running Windows 2000, and using "
"Python's time.clock() as the timer, the magical number is about 12.5e-6."
msgstr ""

#: ../../../library/profile.rst:540
msgid ""
"The object of this exercise is to get a fairly consistent result. If your "
"computer is *very* fast, or your timer function has poor resolution, you "
"might have to pass 100000, or even 1000000, to get consistent results."
msgstr ""

#: ../../../library/profile.rst:544
msgid ""
"When you have a consistent answer, there are three ways you can use it::"
msgstr ""

#: ../../../library/profile.rst:558
msgid ""
"If you have a choice, you are better off choosing a smaller constant, and "
"then your results will \"less often\" show up as negative in profile "
"statistics."
msgstr ""

#: ../../../library/profile.rst:565
msgid "Extensions --- Deriving Better Profilers"
msgstr ""

#: ../../../library/profile.rst:567
msgid ""
"The :class:`Profile` class of both modules, :mod:`profile` and :mod:"
"`cProfile`, were written so that derived classes could be developed to "
"extend the profiler. The details are not described here, as doing this "
"successfully requires an expert understanding of how the :class:`Profile` "
"class works internally.  Study the source code of the module carefully if "
"you want to pursue this."
msgstr ""

#: ../../../library/profile.rst:573
msgid ""
"If all you want to do is change how current time is determined (for example, "
"to force use of wall-clock time or elapsed process time), pass the timing "
"function you want to the :class:`Profile` class constructor::"
msgstr ""

#: ../../../library/profile.rst:579
msgid "The resulting profiler will then call :func:`your_time_func`."
msgstr ""

#: ../../../library/profile.rst:593
msgid ":class:`profile.Profile`"
msgstr ""

#: ../../../library/profile.rst:582
msgid ""
":func:`your_time_func` should return a single number, or a list of numbers "
"whose sum is the current time (like what :func:`os.times` returns).  If the "
"function returns a single time number, or the list of returned numbers has "
"length 2, then you will get an especially fast version of the dispatch "
"routine."
msgstr ""

#: ../../../library/profile.rst:587
msgid ""
"Be warned that you should calibrate the profiler class for the timer "
"function that you choose.  For most machines, a timer that returns a lone "
"integer value will provide the best results in terms of low overhead during "
"profiling. (:func:`os.times` is *pretty* bad, as it returns a tuple of "
"floating point values).  If you want to substitute a better timer in the "
"cleanest fashion, derive a class and hardwire a replacement dispatch method "
"that best handles your timer call, along with the appropriate calibration "
"constant."
msgstr ""

#: ../../../library/profile.rst:607
msgid ":class:`cProfile.Profile`"
msgstr ""

#: ../../../library/profile.rst:596
msgid ""
":func:`your_time_func` should return a single number.  If it returns "
"integers, you can also invoke the class constructor with a second argument "
"specifying the real duration of one unit of time.  For example, if :func:"
"`your_integer_time_func` returns times measured in thousands of seconds, you "
"would constuct the :class:`Profile` instance as follows::"
msgstr ""

#: ../../../library/profile.rst:604
msgid ""
"As the :mod:`cProfile.Profile` class cannot be calibrated, custom timer "
"functions should be used with care and should be as fast as possible.  For "
"the best results with a custom timer, it might be necessary to hard-code it "
"in the C source of the internal :mod:`_lsprof` module."
msgstr ""

#: ../../../library/profile.rst:610
msgid "Footnotes"
msgstr ""

#: ../../../library/profile.rst:611
msgid ""
"Updated and converted to LaTeX by Guido van Rossum. Further updated by Armin "
"Rigo to integrate the documentation for the new :mod:`cProfile` module of "
"Python 2.5."
msgstr ""

#: ../../../library/profile.rst:11
msgid "InfoSeek Corporation"
msgstr ""

#: ../../../library/profile.rst:40
msgid "deterministic profiling"
msgstr ""

#: ../../../library/profile.rst:40
msgid "profiling, deterministic"
msgstr ""
