# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:41+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../library/struct.rst:2
msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ""

#: ../../../library/struct.rst:11
msgid ""
"This module performs conversions between Python values and C structs "
"represented as Python :class:`bytes` objects.  This can be used in handling "
"binary data stored in files or from network connections, among other "
"sources.  It uses :ref:`struct-format-strings` as compact descriptions of "
"the layout of the C structs and the intended conversion to/from Python "
"values."
msgstr ""

#: ../../../library/struct.rst:19
msgid ""
"By default, the result of packing a given C struct includes pad bytes in "
"order to maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  This behavior is chosen so "
"that the bytes of a packed struct correspond exactly to the layout in memory "
"of the corresponding C struct.  To handle platform-independent data formats "
"or omit implicit pad bytes, use `standard` size and alignment instead of "
"`native` size and alignment: see :ref:`struct-alignment` for details."
msgstr ""

#: ../../../library/struct.rst:28
msgid "Functions and Exceptions"
msgstr ""

#: ../../../library/struct.rst:30
msgid "The module defines the following exception and functions:"
msgstr ""

#: ../../../library/struct.rst:35
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""

#: ../../../library/struct.rst:41
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according "
"to the format string *fmt*.  The arguments must match the values required by "
"the format exactly."
msgstr ""

#: ../../../library/struct.rst:48
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *fmt* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*. Note that *offset* is a required argument."
msgstr ""

#: ../../../library/struct.rst:55
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(fmt, ...)``) "
"according to the format string *fmt*.  The result is a tuple even if it "
"contains exactly one item.  The buffer must contain exactly the amount of "
"data required by the format (``len(bytes)`` must equal ``calcsize(fmt)``)."
msgstr ""

#: ../../../library/struct.rst:63
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *fmt*.  The result is a tuple even if it contains exactly one item.  "
"*buffer* must contain at least the amount of data required by the format "
"(``len(buffer[offset:])`` must be at least ``calcsize(fmt)``)."
msgstr ""

#: ../../../library/struct.rst:71
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(fmt, ...)``) corresponding to the format string *fmt*."
msgstr ""

#: ../../../library/struct.rst:77
msgid "Format Strings"
msgstr ""

#: ../../../library/struct.rst:79
msgid ""
"Format strings are the mechanism used to specify the expected layout when "
"packing and unpacking data.  They are built up from :ref:`format-"
"characters`, which specify the type of data being packed/unpacked.  In "
"addition, there are special characters for controlling the :ref:`struct-"
"alignment`."
msgstr ""

#: ../../../library/struct.rst:88
msgid "Byte Order, Size, and Alignment"
msgstr ""

#: ../../../library/struct.rst:90
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to "
"the rules used by the C compiler)."
msgstr ""

#: ../../../library/struct.rst:94
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to "
"the following table:"
msgstr ""

#: ../../../library/struct.rst:99
msgid "Character"
msgstr ""

#: ../../../library/struct.rst:99
msgid "Byte order"
msgstr ""

#: ../../../library/struct.rst:99
msgid "Size"
msgstr ""

#: ../../../library/struct.rst:99
msgid "Alignment"
msgstr ""

#: ../../../library/struct.rst:101
msgid "``@``"
msgstr ""

#: ../../../library/struct.rst:101 ../../../library/struct.rst:103
msgid "native"
msgstr ""

#: ../../../library/struct.rst:103
msgid "``=``"
msgstr ""

#: ../../../library/struct.rst:103 ../../../library/struct.rst:105
#: ../../../library/struct.rst:107 ../../../library/struct.rst:109
msgid "standard"
msgstr ""

#: ../../../library/struct.rst:103 ../../../library/struct.rst:105
#: ../../../library/struct.rst:107 ../../../library/struct.rst:109
msgid "none"
msgstr ""

#: ../../../library/struct.rst:105
msgid "``<``"
msgstr ""

#: ../../../library/struct.rst:105
msgid "little-endian"
msgstr ""

#: ../../../library/struct.rst:107
msgid "``>``"
msgstr ""

#: ../../../library/struct.rst:107
msgid "big-endian"
msgstr ""

#: ../../../library/struct.rst:109
msgid "``!``"
msgstr ""

#: ../../../library/struct.rst:109
msgid "network (= big-endian)"
msgstr ""

#: ../../../library/struct.rst:112
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""

#: ../../../library/struct.rst:114
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86 and AMD64 (x86-64) are little-endian; "
"Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature "
"switchable endianness (bi-endian). Use ``sys.byteorder`` to check the "
"endianness of your system."
msgstr ""

#: ../../../library/struct.rst:120
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""

#: ../../../library/struct.rst:123
msgid ""
"Standard size depends only on the format character;  see the table in the :"
"ref:`format-characters` section."
msgstr ""

#: ../../../library/struct.rst:126
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order, "
"but the size and alignment of the latter is standardized."
msgstr ""

#: ../../../library/struct.rst:129
msgid ""
"The form ``'!'`` is available for those poor souls who claim they can't "
"remember whether network byte order is big-endian or little-endian."
msgstr ""

#: ../../../library/struct.rst:132
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use "
"the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""

#: ../../../library/struct.rst:135 ../../../library/struct.rst:201
msgid "Notes:"
msgstr ""

#: ../../../library/struct.rst:137
msgid ""
"Padding is only automatically added between successive structure members. No "
"padding is added at the beginning or the end of the encoded struct."
msgstr ""

#: ../../../library/struct.rst:140
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<', "
"'>', '=', and '!'."
msgstr ""

#: ../../../library/struct.rst:143
msgid ""
"To align the end of a structure to the alignment requirement of a particular "
"type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""

#: ../../../library/struct.rst:151
msgid "Format Characters"
msgstr ""

#: ../../../library/struct.rst:153
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is "
"platform-dependent."
msgstr ""

#: ../../../library/struct.rst:161
msgid "Format"
msgstr ""

#: ../../../library/struct.rst:161
msgid "C Type"
msgstr ""

#: ../../../library/struct.rst:161
msgid "Python type"
msgstr ""

#: ../../../library/struct.rst:161
msgid "Standard size"
msgstr ""

#: ../../../library/struct.rst:161
msgid "Notes"
msgstr ""

#: ../../../library/struct.rst:163
msgid "``x``"
msgstr ""

#: ../../../library/struct.rst:163
msgid "pad byte"
msgstr ""

#: ../../../library/struct.rst:163
msgid "no value"
msgstr ""

#: ../../../library/struct.rst:165
msgid "``c``"
msgstr ""

#: ../../../library/struct.rst:165
msgid ":ctype:`char`"
msgstr ""

#: ../../../library/struct.rst:165
msgid "bytes of length 1"
msgstr ""

#: ../../../library/struct.rst:165 ../../../library/struct.rst:167
#: ../../../library/struct.rst:169 ../../../library/struct.rst:171
msgid "1"
msgstr ""

#: ../../../library/struct.rst:167
msgid "``b``"
msgstr ""

#: ../../../library/struct.rst:167
msgid ":ctype:`signed char`"
msgstr ""

#: ../../../library/struct.rst:167 ../../../library/struct.rst:169
#: ../../../library/struct.rst:173 ../../../library/struct.rst:175
#: ../../../library/struct.rst:177 ../../../library/struct.rst:179
#: ../../../library/struct.rst:181 ../../../library/struct.rst:183
#: ../../../library/struct.rst:185 ../../../library/struct.rst:187
#: ../../../library/struct.rst:198
msgid "integer"
msgstr ""

#: ../../../library/struct.rst:167 ../../../library/struct.rst:194
#: ../../../library/struct.rst:196
msgid "\\(1)"
msgstr ""

#: ../../../library/struct.rst:169
msgid "``B``"
msgstr ""

#: ../../../library/struct.rst:169
msgid ":ctype:`unsigned char`"
msgstr ""

#: ../../../library/struct.rst:171
msgid "``?``"
msgstr ""

#: ../../../library/struct.rst:171
msgid ":ctype:`_Bool`"
msgstr ""

#: ../../../library/struct.rst:171
msgid "bool"
msgstr ""

#: ../../../library/struct.rst:171
msgid "\\(2)"
msgstr ""

#: ../../../library/struct.rst:173
msgid "``h``"
msgstr ""

#: ../../../library/struct.rst:173
msgid ":ctype:`short`"
msgstr ""

#: ../../../library/struct.rst:173 ../../../library/struct.rst:175
msgid "2"
msgstr ""

#: ../../../library/struct.rst:175
msgid "``H``"
msgstr ""

#: ../../../library/struct.rst:175
msgid ":ctype:`unsigned short`"
msgstr ""

#: ../../../library/struct.rst:177
msgid "``i``"
msgstr ""

#: ../../../library/struct.rst:177
msgid ":ctype:`int`"
msgstr ""

#: ../../../library/struct.rst:177 ../../../library/struct.rst:179
#: ../../../library/struct.rst:181 ../../../library/struct.rst:183
#: ../../../library/struct.rst:190
msgid "4"
msgstr ""

#: ../../../library/struct.rst:179
msgid "``I``"
msgstr ""

#: ../../../library/struct.rst:179
msgid ":ctype:`unsigned int`"
msgstr ""

#: ../../../library/struct.rst:181
msgid "``l``"
msgstr ""

#: ../../../library/struct.rst:181
msgid ":ctype:`long`"
msgstr ""

#: ../../../library/struct.rst:183
msgid "``L``"
msgstr ""

#: ../../../library/struct.rst:183
msgid ":ctype:`unsigned long`"
msgstr ""

#: ../../../library/struct.rst:185
msgid "``q``"
msgstr ""

#: ../../../library/struct.rst:185
msgid ":ctype:`long long`"
msgstr ""

#: ../../../library/struct.rst:185 ../../../library/struct.rst:187
#: ../../../library/struct.rst:192
msgid "8"
msgstr ""

#: ../../../library/struct.rst:185 ../../../library/struct.rst:187
msgid "\\(3)"
msgstr ""

#: ../../../library/struct.rst:187
msgid "``Q``"
msgstr ""

#: ../../../library/struct.rst:187
msgid ":ctype:`unsigned long long`"
msgstr ""

#: ../../../library/struct.rst:190
msgid "``f``"
msgstr ""

#: ../../../library/struct.rst:190
msgid ":ctype:`float`"
msgstr ""

#: ../../../library/struct.rst:190 ../../../library/struct.rst:192
msgid "float"
msgstr ""

#: ../../../library/struct.rst:190 ../../../library/struct.rst:192
msgid "\\(4)"
msgstr ""

#: ../../../library/struct.rst:192
msgid "``d``"
msgstr ""

#: ../../../library/struct.rst:192
msgid ":ctype:`double`"
msgstr ""

#: ../../../library/struct.rst:194
msgid "``s``"
msgstr ""

#: ../../../library/struct.rst:194 ../../../library/struct.rst:196
msgid ":ctype:`char[]`"
msgstr ""

#: ../../../library/struct.rst:194 ../../../library/struct.rst:196
msgid "bytes"
msgstr ""

#: ../../../library/struct.rst:196
msgid "``p``"
msgstr ""

#: ../../../library/struct.rst:198
msgid "``P``"
msgstr ""

#: ../../../library/struct.rst:198
msgid ":ctype:`void \\*`"
msgstr ""

#: ../../../library/struct.rst:198
msgid "\\(5)"
msgstr ""

#: ../../../library/struct.rst:204
msgid ""
"The ``c``, ``s`` and ``p`` conversion codes operate on :class:`bytes` "
"objects, but packing with such codes also supports :class:`str` objects, "
"which are encoded using UTF-8."
msgstr ""

#: ../../../library/struct.rst:209
msgid ""
"The ``'?'`` conversion code corresponds to the :ctype:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a :ctype:"
"`char`. In standard mode, it is always represented by one byte."
msgstr ""

#: ../../../library/struct.rst:214
msgid ""
"The ``'q'`` and ``'Q'`` conversion codes are available in native mode only "
"if the platform C compiler supports C :ctype:`long long`, or, on Windows, :"
"ctype:`__int64`.  They are always available in standard modes."
msgstr ""

#: ../../../library/struct.rst:219
msgid ""
"For the ``'f'`` and ``'d'`` conversion codes, the packed representation uses "
"the IEEE 754 binary32 (for ``'f'``) or binary64 (for ``'d'``) format, "
"regardless of the floating-point format used by the platform."
msgstr ""

#: ../../../library/struct.rst:224
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte "
"order character ``'='`` chooses to use little- or big-endian ordering based "
"on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""

#: ../../../library/struct.rst:231
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""

#: ../../../library/struct.rst:234
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""

#: ../../../library/struct.rst:237
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string, while ``'10c'`` means 10 "
"characters. For packing, the string is truncated or padded with null bytes "
"as appropriate to make it fit. For unpacking, the resulting bytes object "
"always has exactly the specified number of bytes.  As a special case, "
"``'0s'`` means a single, empty string (while ``'0c'`` means 0 characters)."
msgstr ""

#: ../../../library/struct.rst:245
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then :exc:"
"`struct.error` is raised."
msgstr ""

#: ../../../library/struct.rst:250
msgid ""
"In 3.0, some of the integer formats wrapped out-of-range values and raised :"
"exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""

#: ../../../library/struct.rst:254
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to :"
"func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all "
"are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""

#: ../../../library/struct.rst:265
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be True when unpacking."
msgstr ""

#: ../../../library/struct.rst:275
msgid "Examples"
msgstr ""

#: ../../../library/struct.rst:278
msgid ""
"All examples assume a native byte order, size, and alignment with a big-"
"endian machine."
msgstr ""

#: ../../../library/struct.rst:281
msgid "A basic example of packing/unpacking three integers::"
msgstr ""

#: ../../../library/struct.rst:291
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""

#: ../../../library/struct.rst:302
msgid ""
"The ordering of format characters may have an impact on size since the "
"padding needed to satisfy alignment requirements is different::"
msgstr ""

#: ../../../library/struct.rst:314
msgid ""
"The following format ``'llh0l'`` specifies two pad bytes at the end, "
"assuming longs are aligned on 4-byte boundaries::"
msgstr ""

#: ../../../library/struct.rst:320
msgid ""
"This only works when native size and alignment are in effect; standard size "
"and alignment does not enforce any alignment."
msgstr ""

#: ../../../library/struct.rst:327
msgid "Module :mod:`array`"
msgstr ""

#: ../../../library/struct.rst:327
msgid "Packed binary storage of homogeneous data."
msgstr ""

#: ../../../library/struct.rst:329
msgid "Module :mod:`xdrlib`"
msgstr ""

#: ../../../library/struct.rst:330
msgid "Packing and unpacking of XDR data."
msgstr ""

#: ../../../library/struct.rst:336
msgid "Classes"
msgstr ""

#: ../../../library/struct.rst:338
msgid "The :mod:`struct` module also defines the following type:"
msgstr ""

#: ../../../library/struct.rst:343
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a Struct object once and calling its "
"methods is more efficient than calling the :mod:`struct` functions with the "
"same format since the format string only needs to be compiled once."
msgstr ""

#: ../../../library/struct.rst:349
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""

#: ../../../library/struct.rst:353
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`self.size`.)"
msgstr ""

#: ../../../library/struct.rst:359
msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""

#: ../../../library/struct.rst:364
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. "
"(``len(buffer)`` must equal :attr:`self.size`)."
msgstr ""

#: ../../../library/struct.rst:370
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"(``len(buffer[offset:])`` must be at least :attr:`self.size`)."
msgstr ""

#: ../../../library/struct.rst:376
msgid "The format string used to construct this Struct object."
msgstr ""

#: ../../../library/struct.rst:380
msgid ""
"The calculated size of the struct (and hence of the bytes object produced by "
"the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""

#: ../../../library/struct.rst:7
msgid "C"
msgstr ""

#: ../../../library/struct.rst:7
msgid "structures"
msgstr ""

#: ../../../library/struct.rst:7
msgid "packing"
msgstr ""

#: ../../../library/struct.rst:7
msgid "binary"
msgstr ""

#: ../../../library/struct.rst:7
msgid "data"
msgstr ""
