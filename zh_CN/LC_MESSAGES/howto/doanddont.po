# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 04:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../howto/doanddont.rst:3
msgid "Idioms and Anti-Idioms in Python"
msgstr ""

#: ../../../howto/doanddont.rst:0
msgid "Author"
msgstr ""

#: ../../../howto/doanddont.rst:5
msgid "Moshe Zadka"
msgstr ""

#: ../../../howto/doanddont.rst:7
msgid "This document is placed in the public domain."
msgstr ""

#: ../../../howto/doanddont.rst:None
msgid "Abstract"
msgstr ""

#: ../../../howto/doanddont.rst:12
msgid ""
"This document can be considered a companion to the tutorial. It shows how to "
"use Python, and even more importantly, how *not* to use Python."
msgstr ""

#: ../../../howto/doanddont.rst:17
msgid "Language Constructs You Should Not Use"
msgstr ""

#: ../../../howto/doanddont.rst:19
msgid ""
"While Python has relatively few gotchas compared to other languages, it "
"still has some constructs which are only useful in corner cases, or are "
"plain dangerous."
msgstr ""

#: ../../../howto/doanddont.rst:25
msgid "from module import \\*"
msgstr ""

#: ../../../howto/doanddont.rst:29
msgid "Inside Function Definitions"
msgstr ""

#: ../../../howto/doanddont.rst:31
msgid ""
"``from module import *`` is *invalid* inside function definitions. While "
"many versions of Python do not check for the invalidity, it does not make it "
"more valid, no more then having a smart lawyer makes a man innocent. Do not "
"use it like that ever. Even in versions where it was accepted, it made the "
"function execution slower, because the compiler could not be certain which "
"names are local and which are global. In Python 2.1 this construct causes "
"warnings, and sometimes even errors."
msgstr ""

#: ../../../howto/doanddont.rst:41
msgid "At Module Level"
msgstr ""

#: ../../../howto/doanddont.rst:43
msgid ""
"While it is valid to use ``from module import *`` at module level it is "
"usually a bad idea. For one, this loses an important property Python "
"otherwise has --- you can know where each toplevel name is defined by a "
"simple \"search\" function in your favourite editor. You also open yourself "
"to trouble in the future, if some module grows additional functions or "
"classes."
msgstr ""

#: ../../../howto/doanddont.rst:49
msgid ""
"One of the most awful question asked on the newsgroup is why this code::"
msgstr ""

#: ../../../howto/doanddont.rst:54
msgid ""
"does not work. Of course, it works just fine (assuming you have a file "
"called \"www\".) But it does not work if somewhere in the module, the "
"statement ``from os import *`` is present. The :mod:`os` module has a "
"function called :func:`open` which returns an integer. While it is very "
"useful, shadowing builtins is one of its least useful properties."
msgstr ""

#: ../../../howto/doanddont.rst:60
msgid ""
"Remember, you can never know for sure what names a module exports, so either "
"take what you need --- ``from module import name1, name2``, or keep them in "
"the module and access on a per-need basis --- ``import module; print(module."
"name)``."
msgstr ""

#: ../../../howto/doanddont.rst:66
msgid "When It Is Just Fine"
msgstr ""

#: ../../../howto/doanddont.rst:68
msgid "There are situations in which ``from module import *`` is just fine:"
msgstr ""

#: ../../../howto/doanddont.rst:70
msgid ""
"The interactive prompt. For example, ``from math import *`` makes Python an "
"amazing scientific calculator."
msgstr ""

#: ../../../howto/doanddont.rst:73
msgid "When extending a module in C with a module in Python."
msgstr ""

#: ../../../howto/doanddont.rst:75
msgid "When the module advertises itself as ``from import *`` safe."
msgstr ""

#: ../../../howto/doanddont.rst:79
msgid "from module import name1, name2"
msgstr ""

#: ../../../howto/doanddont.rst:81
msgid ""
"This is a \"don't\" which is much weaker then the previous \"don't\"s but is "
"still something you should not do if you don't have good reasons to do that. "
"The reason it is usually bad idea is because you suddenly have an object "
"which lives in two separate namespaces. When the binding in one namespace "
"changes, the binding in the other will not, so there will be a discrepancy "
"between them. This happens when, for example, one module is reloaded, or "
"changes the definition of a function at runtime."
msgstr ""

#: ../../../howto/doanddont.rst:89
msgid "Bad example::"
msgstr ""

#: ../../../howto/doanddont.rst:99
msgid "Good example::"
msgstr ""

#: ../../../howto/doanddont.rst:111
msgid "except:"
msgstr ""

#: ../../../howto/doanddont.rst:113
msgid ""
"Python has the ``except:`` clause, which catches all exceptions. Since "
"*every* error in Python raises an exception, this makes many programming "
"errors look like runtime problems, and hinders the debugging process."
msgstr ""

#: ../../../howto/doanddont.rst:117
msgid "The following code shows a great example::"
msgstr ""

#: ../../../howto/doanddont.rst:124
msgid ""
"The second line triggers a :exc:`NameError` which is caught by the except "
"clause. The program will exit, and you will have no idea that this has "
"nothing to do with the readability of ``\"file\"``."
msgstr ""

#: ../../../howto/doanddont.rst:128
msgid "The example above is better written ::"
msgstr ""

#: ../../../howto/doanddont.rst:135
msgid ""
"There are some situations in which the ``except:`` clause is useful: for "
"example, in a framework when running callbacks, it is good not to let any "
"callback disturb the framework."
msgstr ""

#: ../../../howto/doanddont.rst:141
msgid "Exceptions"
msgstr ""

#: ../../../howto/doanddont.rst:143
msgid ""
"Exceptions are a useful feature of Python. You should learn to raise them "
"whenever something unexpected occurs, and catch them only where you can do "
"something about them."
msgstr ""

#: ../../../howto/doanddont.rst:147
msgid "The following is a very popular anti-idiom ::"
msgstr ""

#: ../../../howto/doanddont.rst:155
msgid ""
"Consider the case the file gets deleted between the time the call to :func:"
"`os.path.exists` is made and the time :func:`open` is called. That means the "
"last line will throw an :exc:`IOError`. The same would happen if *file* "
"exists but has no read permission. Since testing this on a normal machine on "
"existing and non-existing files make it seem bugless, that means in testing "
"the results will seem fine, and the code will get shipped. Then an "
"unhandled :exc:`IOError` escapes to the user, who has to watch the ugly "
"traceback."
msgstr ""

#: ../../../howto/doanddont.rst:163
msgid "Here is a better way to do it. ::"
msgstr ""

#: ../../../howto/doanddont.rst:172
msgid ""
"In this version, \\*either\\* the file gets opened and the line is read (so "
"it works even on flaky NFS or SMB connections), or the message is printed "
"and the application aborted."
msgstr ""

#: ../../../howto/doanddont.rst:176
msgid ""
"Still, :func:`get_status` makes too many assumptions --- that it will only "
"be used in a short running script, and not, say, in a long running server. "
"Sure, the caller could do something like ::"
msgstr ""

#: ../../../howto/doanddont.rst:185
msgid ""
"So, try to make as few ``except`` clauses in your code --- those will "
"usually be a catch-all in the :func:`main`, or inside calls which should "
"always succeed."
msgstr ""

#: ../../../howto/doanddont.rst:188
msgid "So, the best version is probably ::"
msgstr ""

#: ../../../howto/doanddont.rst:193
msgid ""
"The caller can deal with the exception if it wants (for example, if it  "
"tries several files in a loop), or just let the exception filter upwards to "
"*its* caller."
msgstr ""

#: ../../../howto/doanddont.rst:197
msgid ""
"The last version is not very good either --- due to implementation details, "
"the file would not be closed when an exception is raised until the handler "
"finishes, and perhaps not at all in non-C implementations (e.g., Jython). ::"
msgstr ""

#: ../../../howto/doanddont.rst:210
msgid "Using the Batteries"
msgstr ""

#: ../../../howto/doanddont.rst:212
msgid ""
"Every so often, people seem to be writing stuff in the Python library again, "
"usually poorly. While the occasional module has a poor interface, it is "
"usually much better to use the rich standard library and data types that "
"come with Python then inventing your own."
msgstr ""

#: ../../../howto/doanddont.rst:217
msgid ""
"A useful module very few people know about is :mod:`os.path`. It  always has "
"the correct path arithmetic for your operating system, and will usually be "
"much better then whatever you come up with yourself."
msgstr ""

#: ../../../howto/doanddont.rst:221
msgid "Compare::"
msgstr ""

#: ../../../howto/doanddont.rst:228
msgid ""
"More useful functions in :mod:`os.path`: :func:`basename`,  :func:`dirname` "
"and :func:`splitext`."
msgstr ""

#: ../../../howto/doanddont.rst:231
msgid ""
"There are also many useful builtin functions people seem not to be aware of "
"for some reason: :func:`min` and :func:`max` can find the minimum/maximum of "
"any sequence with comparable semantics, for example, yet many people write "
"their own :func:`max`/:func:`min`. Another highly useful function is :func:"
"`functools.reduce`.  A classical use of :func:`reduce` is something like ::"
msgstr ""

#: ../../../howto/doanddont.rst:242
msgid ""
"This cute little script prints the average of all numbers given on the "
"command line. The :func:`reduce` adds up all the numbers, and the rest is "
"just some pre- and postprocessing."
msgstr ""

#: ../../../howto/doanddont.rst:246
msgid ""
"On the same note, note that :func:`float` and :func:`int` accept arguments "
"of type string, and so are suited to parsing --- assuming you are ready to "
"deal with the :exc:`ValueError` they raise."
msgstr ""

#: ../../../howto/doanddont.rst:252
msgid "Using Backslash to Continue Statements"
msgstr ""

#: ../../../howto/doanddont.rst:254
msgid ""
"Since Python treats a newline as a statement terminator, and since "
"statements are often more then is comfortable to put in one line, many "
"people do::"
msgstr ""

#: ../../../howto/doanddont.rst:261
msgid ""
"You should realize that this is dangerous: a stray space after the ``\\`` "
"would make this line wrong, and stray spaces are notoriously hard to see in "
"editors. In this case, at least it would be a syntax error, but if the code "
"was::"
msgstr ""

#: ../../../howto/doanddont.rst:268
msgid "then it would just be subtly wrong."
msgstr ""

#: ../../../howto/doanddont.rst:270
msgid ""
"It is usually much better to use the implicit continuation inside "
"parenthesis:"
msgstr ""

#: ../../../howto/doanddont.rst:272
msgid "This version is bulletproof::"
msgstr ""
